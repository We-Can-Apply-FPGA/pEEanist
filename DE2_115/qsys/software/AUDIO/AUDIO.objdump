
AUDIO.elf:     file format elf32-littlenios2
AUDIO.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00200220

Program Header:
    LOAD off    0x00001020 vaddr 0x00408020 paddr 0x00200000 align 2**12
         filesz 0x00000220 memsz 0x00000220 flags r-x
    LOAD off    0x00002220 vaddr 0x00200220 paddr 0x00200220 align 2**12
         filesz 0x00005654 memsz 0x00005654 flags r-x
    LOAD off    0x00007874 vaddr 0x00205874 paddr 0x002072e0 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00009d4c vaddr 0x00208d4c paddr 0x00208d4c align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-
    LOAD off    0x0000a000 vaddr 0x00408000 paddr 0x00408000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00408000  00408000  0000a000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  00408020  00200000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000561c  00200220  00200220  00002220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  0020583c  0020583c  0000783c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  00205874  002072e0  00007874  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  00208d4c  00208d4c  00009d4c  2**2
                  ALLOC, SMALL_DATA
  6 .sram         00000000  00208eb0  00208eb0  0000a020  2**0
                  CONTENTS
  7 .onchip_memory 00000000  00408240  00408240  0000a020  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000a020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a50  00000000  00000000  0000a048  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00016e10  00000000  00000000  0000aa98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006247  00000000  00000000  000218a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006abe  00000000  00000000  00027aef  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000160c  00000000  00000000  0002e5b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000026f3  00000000  00000000  0002fbbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004903  00000000  00000000  000322af  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00036bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000005f0  00000000  00000000  00036be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003981b  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0003981e  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00039821  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00039822  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000004  00000000  00000000  00039823  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000004  00000000  00000000  00039827  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000004  00000000  00000000  0003982b  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000004  00000000  00000000  0003982f  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000001f  00000000  00000000  00039833  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00056021  00000000  00000000  00039852  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00408000 l    d  .entry	00000000 .entry
00408020 l    d  .exceptions	00000000 .exceptions
00200220 l    d  .text	00000000 .text
0020583c l    d  .rodata	00000000 .rodata
00205874 l    d  .rwdata	00000000 .rwdata
00208d4c l    d  .bss	00000000 .bss
00208eb0 l    d  .sram	00000000 .sram
00408240 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../AUDIO_bsp//obj/HAL/src/crt0.o
00200268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
00205874 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 findfp.c
00200414 l     F .text	00000008 __fp_lock
0020041c l     F .text	00000008 __fp_unlock
00200430 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00202e08 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
00202f34 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00203054 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00203080 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00203180 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00203274 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00203358 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00203534 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
002072d0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00203790 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
002038d8 l     F .text	00000038 alt_dev_reg
00206248 l     O .rwdata	00001060 jtag
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00203bc8 l     F .text	00000204 altera_avalon_jtag_uart_irq
00203dcc l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
002043ec l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0020466c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00204b18 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00204c50 l     F .text	00000050 alt_get_errno
00204ca0 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00208d84 g     O .bss	00000004 alt_instruction_exception_handler
00202db4 g     F .text	00000054 _isatty_r
0020347c g     F .text	00000078 alt_main
00208db0 g     O .bss	00000100 alt_irq
00202aec g     F .text	0000005c _lseek_r
002072e0 g       *ABS*	00000000 __flash_rwdata_start
00208eb0 g       *ABS*	00000000 __alt_heap_start
00200000 g       *ABS*	00000000 __alt_mem_sram
002020d8 g     F .text	0000005c __sseek
00200764 g     F .text	00000010 __sinit
00208d4c g     O .bss	00000004 lcd
002005cc g     F .text	00000068 __sfmoreglue
00203514 g     F .text	00000020 __malloc_unlock
002017c4 g     F .text	0000015c memmove
0020074c g     F .text	00000018 _cleanup
00205060 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00408000 g     F .entry	0000001c __reset
00208d50 g     O .bss	00000004 edge_capture
00200000 g       *ABS*	00000000 __flash_exceptions_start
00202d5c g     F .text	00000058 _fstat_r
00208d68 g     O .bss	00000004 errno
00202054 g     F .text	00000008 __seofread
00208d70 g     O .bss	00000004 alt_argv
0020f2a8 g       *ABS*	00000000 _gp
002060c8 g     O .rwdata	00000180 alt_fd_list
00205080 g     F .text	00000090 alt_find_dev
0020168c g     F .text	00000138 memcpy
00200424 g     F .text	0000000c _cleanup_r
00204bd8 g     F .text	00000078 alt_io_redirect
0020583c g       *ABS*	00000000 __DTOR_END__
00205364 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00203fc8 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00202f24 g     F .text	00000008 .hidden __udivsi3
002031d0 g     F .text	000000a4 isatty
002052d8 g     F .text	0000008c alt_icache_flush
00208d64 g     O .bss	00000004 __malloc_top_pad
002007b4 g     F .text	000004c0 __sfvwrite_r
00201fac g     F .text	00000054 _sbrk_r
00202d00 g     F .text	0000005c _read_r
002072c8 g     O .rwdata	00000004 alt_max_fd
00202340 g     F .text	000000f0 _fclose_r
002026a8 g     F .text	00000030 fflush
00208d60 g     O .bss	00000004 __malloc_max_sbrked_mem
002033a8 g     F .text	000000d4 lseek
002072a8 g     O .rwdata	00000004 _global_impure_ptr
00201a44 g     F .text	00000568 _realloc_r
00208eb0 g       *ABS*	00000000 __bss_end
00204a28 g     F .text	000000f0 alt_iic_isr_register
00204f5c g     F .text	00000104 alt_tick
00200784 g     F .text	00000018 __fp_lock_all
00208d54 g     O .bss	00000004 rs232t
002049dc g     F .text	0000004c alt_ic_irq_enabled
00204ec4 g     F .text	00000098 alt_alarm_stop
00208d78 g     O .bss	00000004 alt_irq_active
004080fc g     F .exceptions	000000d0 alt_irq_handler
002060a0 g     O .rwdata	00000028 alt_dev_null
00204628 g     F .text	00000044 alt_dcache_flush_all
002072e0 g       *ABS*	00000000 __ram_rwdata_end
00408000 g       *ABS*	00000000 __alt_mem_onchip_memory
002072c0 g     O .rwdata	00000008 alt_dev_list
002037e0 g     F .text	000000f8 write
00205874 g       *ABS*	00000000 __ram_rodata_end
002030d0 g     F .text	000000b0 fstat
00202f2c g     F .text	00000008 .hidden __umodsi3
00208eb0 g       *ABS*	00000000 end
00203b04 g     F .text	000000c4 altera_avalon_jtag_uart_init
004081cc g     F .exceptions	00000074 alt_instruction_exception_entry
0020583c g       *ABS*	00000000 __CTOR_LIST__
00400000 g       *ABS*	00000000 __alt_stack_pointer
00204460 g     F .text	00000088 alt_avalon_timer_sc_init
002041d4 g     F .text	00000218 altera_avalon_jtag_uart_write
00200774 g     F .text	00000004 __sfp_lock_acquire
002015a4 g     F .text	000000e8 memchr
002027fc g     F .text	000002f0 _free_r
00205674 g     F .text	00000194 __call_exitprocs
002072b0 g     O .rwdata	00000004 __malloc_sbrk_base
00200220 g     F .text	0000004c _start
00208d7c g     O .bss	00000004 _alt_tick_rate
00208d80 g     O .bss	00000004 _alt_nticks
00203584 g     F .text	000000fc read
00203944 g     F .text	0000005c alt_sys_init
00205560 g     F .text	00000114 __register_exitproc
00203e74 g     F .text	00000068 altera_avalon_jtag_uart_close
00205874 g       *ABS*	00000000 __ram_rwdata_start
0020583c g       *ABS*	00000000 __ram_rodata_start
00208d88 g     O .bss	00000028 __malloc_current_mallinfo
002039a0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00205224 g     F .text	000000b4 alt_get_fd
002022ec g     F .text	00000054 _close_r
0020544c g     F .text	0000007c memcmp
00203a60 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00208eb0 g       *ABS*	00000000 __alt_stack_base
00203ab0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00200308 g     F .text	000000cc _fwrite_r
00202198 g     F .text	00000154 __swsetup_r
00200634 g     F .text	00000118 __sfp
00205c98 g     O .rwdata	00000408 __malloc_av_
00200780 g     F .text	00000004 __sinit_lock_release
00202000 g     F .text	00000054 __sread
00205110 g     F .text	00000114 alt_find_file
002046bc g     F .text	000000a4 alt_dev_llist_insert
002034f4 g     F .text	00000020 __malloc_lock
002036e0 g     F .text	000000b0 sbrk
0020264c g     F .text	0000005c _fflush_r
00208d4c g       *ABS*	00000000 __bss_start
00201920 g     F .text	00000124 memset
002002b8 g     F .text	00000050 main
00208d74 g     O .bss	00000004 alt_envp
00208d5c g     O .bss	00000004 __malloc_max_total_mem
00203a00 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00202134 g     F .text	00000008 __sclose
00400000 g       *ABS*	00000000 __alt_heap_limit
00202430 g     F .text	00000014 fclose
00200dfc g     F .text	000007a8 _malloc_r
002072cc g     O .rwdata	00000004 alt_errno
00200c74 g     F .text	000000c4 _fwalk
00202e74 g     F .text	00000054 .hidden __divsi3
002026d8 g     F .text	00000124 _malloc_trim_r
0020583c g       *ABS*	00000000 __CTOR_END__
0020583c g       *ABS*	00000000 __flash_rodata_start
0020583c g       *ABS*	00000000 __DTOR_LIST__
00203910 g     F .text	00000034 alt_irq_init
00203680 g     F .text	00000060 alt_release_fd
00205400 g     F .text	00000014 atexit
0020213c g     F .text	0000005c _write_r
002072ac g     O .rwdata	00000004 _impure_ptr
00208d6c g     O .bss	00000004 alt_argc
00202444 g     F .text	00000208 __sflush_r
002047bc g     F .text	0000005c _do_dtors
00408020 g       .exceptions	00000000 alt_irq_entry
0020079c g     F .text	00000018 __fp_unlock_all
002072b8 g     O .rwdata	00000008 alt_fs_list
00408020 g       *ABS*	00000000 __ram_exceptions_start
00204848 g     F .text	00000050 alt_ic_isr_register
002003d4 g     F .text	00000040 fwrite
002072e0 g       *ABS*	00000000 _edata
00208eb0 g       *ABS*	00000000 _end
00408240 g       *ABS*	00000000 __ram_exceptions_end
00203edc g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00204938 g     F .text	000000a4 alt_ic_irq_disable
0020205c g     F .text	0000007c __swrite
002072b4 g     O .rwdata	00000004 __malloc_trim_threshold
00205414 g     F .text	00000038 exit
00200d38 g     F .text	000000c4 _fwalk_reent
00202ec8 g     F .text	0000005c .hidden __modsi3
00400000 g       *ABS*	00000000 __alt_data_end
00408020 g     F .exceptions	00000000 alt_exception
00200778 g     F .text	00000004 __sfp_lock_release
0020026c g     F .text	0000004c initial
00205808 g     F .text	00000034 _exit
002044e8 g     F .text	00000140 alt_alarm_start
00202b48 g     F .text	000001b8 __smakebuf_r
002054c8 g     F .text	00000098 strlen
00204d6c g     F .text	00000158 open
00204818 g     F .text	00000030 alt_icache_flush_all
002072d4 g     O .rwdata	00000004 alt_priority_mask
00208d58 g     O .bss	00000004 rs232r
00204898 g     F .text	000000a0 alt_ic_irq_enable
002072d8 g     O .rwdata	00000008 alt_alarm_list
00204760 g     F .text	0000005c _do_ctors
00202f84 g     F .text	000000d0 close
002032d8 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
0020077c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00408000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  408000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  408004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  408008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  40800c:	00bffd16 	blt	zero,r2,408004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  408010:	00400834 	movhi	at,32
    ori r1, r1, %lo(_start)
  408014:	08408814 	ori	at,at,544
    jmp r1
  408018:	0800683a 	jmp	at
  40801c:	00000000 	call	0 <__alt_mem_sram-0x200000>

Disassembly of section .exceptions:

00408020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  408020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  408024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  408028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  40802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  408030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  408034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  408038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  40803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  408040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  408044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  408048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  40804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  408050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  408054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  408058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  40805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  408060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  408064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  408068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  40806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  408070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  408074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  408078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  40807c:	10000326 	beq	r2,zero,40808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  408080:	20000226 	beq	r4,zero,40808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  408084:	04080fc0 	call	4080fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  408088:	00000706 	br	4080a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  40808c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  408090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  408094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  408098:	04081cc0 	call	4081cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  40809c:	1000021e 	bne	r2,zero,4080a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  4080a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  4080a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  4080a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  4080ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  4080b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  4080b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  4080b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  4080bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  4080c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  4080c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  4080c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  4080cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  4080d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  4080d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  4080d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  4080dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  4080e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  4080e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  4080e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  4080ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  4080f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  4080f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  4080f8:	ef80083a 	eret

004080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  4080fc:	defff904 	addi	sp,sp,-28
  408100:	dfc00615 	stw	ra,24(sp)
  408104:	df000515 	stw	fp,20(sp)
  408108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  40810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  408110:	0005313a 	rdctl	r2,ipending
  408114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  408118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  40811c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  408120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  408124:	00800044 	movi	r2,1
  408128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  40812c:	e0fffb17 	ldw	r3,-20(fp)
  408130:	e0bffc17 	ldw	r2,-16(fp)
  408134:	1884703a 	and	r2,r3,r2
  408138:	10001426 	beq	r2,zero,40818c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  40813c:	00800874 	movhi	r2,33
  408140:	10a36c04 	addi	r2,r2,-29264
  408144:	e0fffd17 	ldw	r3,-12(fp)
  408148:	180690fa 	slli	r3,r3,3
  40814c:	10c5883a 	add	r2,r2,r3
  408150:	10c00017 	ldw	r3,0(r2)
  408154:	00800874 	movhi	r2,33
  408158:	10a36c04 	addi	r2,r2,-29264
  40815c:	e13ffd17 	ldw	r4,-12(fp)
  408160:	200890fa 	slli	r4,r4,3
  408164:	21000104 	addi	r4,r4,4
  408168:	1105883a 	add	r2,r2,r4
  40816c:	10800017 	ldw	r2,0(r2)
  408170:	1009883a 	mov	r4,r2
  408174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  408178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  40817c:	0005313a 	rdctl	r2,ipending
  408180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  408184:	e0bfff17 	ldw	r2,-4(fp)
  408188:	00000706 	br	4081a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  40818c:	e0bffc17 	ldw	r2,-16(fp)
  408190:	1085883a 	add	r2,r2,r2
  408194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  408198:	e0bffd17 	ldw	r2,-12(fp)
  40819c:	10800044 	addi	r2,r2,1
  4081a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  4081a4:	003fe106 	br	40812c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
  4081a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  4081ac:	e0bffb17 	ldw	r2,-20(fp)
  4081b0:	103fdb1e 	bne	r2,zero,408120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  4081b4:	0001883a 	nop
}
  4081b8:	e037883a 	mov	sp,fp
  4081bc:	dfc00117 	ldw	ra,4(sp)
  4081c0:	df000017 	ldw	fp,0(sp)
  4081c4:	dec00204 	addi	sp,sp,8
  4081c8:	f800283a 	ret

004081cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  4081cc:	defffb04 	addi	sp,sp,-20
  4081d0:	dfc00415 	stw	ra,16(sp)
  4081d4:	df000315 	stw	fp,12(sp)
  4081d8:	df000304 	addi	fp,sp,12
  4081dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  4081e0:	000531fa 	rdctl	r2,exception
  4081e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  4081e8:	e0bffd17 	ldw	r2,-12(fp)
  4081ec:	10801f0c 	andi	r2,r2,124
  4081f0:	1004d0ba 	srli	r2,r2,2
  4081f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  4081f8:	0005333a 	rdctl	r2,badaddr
  4081fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  408200:	d0a6b717 	ldw	r2,-25892(gp)
  408204:	10000726 	beq	r2,zero,408224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  408208:	d0a6b717 	ldw	r2,-25892(gp)
  40820c:	e0fffd17 	ldw	r3,-12(fp)
  408210:	1809883a 	mov	r4,r3
  408214:	e17fff17 	ldw	r5,-4(fp)
  408218:	e1bffe17 	ldw	r6,-8(fp)
  40821c:	103ee83a 	callr	r2
  408220:	00000206 	br	40822c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  408224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  408228:	0005883a 	mov	r2,zero
}
  40822c:	e037883a 	mov	sp,fp
  408230:	dfc00117 	ldw	ra,4(sp)
  408234:	df000017 	ldw	fp,0(sp)
  408238:	dec00204 	addi	sp,sp,8
  40823c:	f800283a 	ret

Disassembly of section .text:

00200220 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  200220:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  200224:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  200228:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  20022c:	00bffd16 	blt	zero,r2,200224 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  200230:	06c01034 	movhi	sp,64
    ori sp, sp, %lo(__alt_stack_pointer)
  200234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  200238:	06800834 	movhi	gp,32
    ori gp, gp, %lo(_gp)
  20023c:	d6bcaa14 	ori	gp,gp,62120
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  200240:	00800834 	movhi	r2,32
    ori r2, r2, %lo(__bss_start)
  200244:	10a35314 	ori	r2,r2,36172

    movhi r3, %hi(__bss_end)
  200248:	00c00834 	movhi	r3,32
    ori r3, r3, %lo(__bss_end)
  20024c:	18e3ac14 	ori	r3,r3,36528

    beq r2, r3, 1f
  200250:	10c00326 	beq	r2,r3,200260 <_start+0x40>

0:
    stw zero, (r2)
  200254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  200258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  20025c:	10fffd36 	bltu	r2,r3,200254 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  200260:	02032d80 	call	2032d8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  200264:	020347c0 	call	20347c <alt_main>

00200268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  200268:	003fff06 	br	200268 <alt_after_alt_main>

0020026c <initial>:

	IOWR(FFT_START_BASE, 2, 1);
	IOWR(FFT_START_BASE, 3, 0);
}*/

void initial() {
  20026c:	defffe04 	addi	sp,sp,-8
  200270:	dfc00115 	stw	ra,4(sp)
  200274:	df000015 	stw	fp,0(sp)
  200278:	d839883a 	mov	fp,sp
	fprintf(stderr,"TEST");
  20027c:	00800834 	movhi	r2,32
  200280:	109cab04 	addi	r2,r2,29356
  200284:	10800017 	ldw	r2,0(r2)
  200288:	10800317 	ldw	r2,12(r2)
  20028c:	01000834 	movhi	r4,32
  200290:	21160f04 	addi	r4,r4,22588
  200294:	01400044 	movi	r5,1
  200298:	01800104 	movi	r6,4
  20029c:	100f883a 	mov	r7,r2
  2002a0:	02003d40 	call	2003d4 <fwrite>
	if (!rs232r) fprintf(stderr, "rs232r failed\n");
	void* edge_capture_ptr = (void*) &edge_capture;
	IOWR(FFT_START_BASE, 3, 0);
	IOWR(FFT_START_BASE, 2, 1);
	alt_irq_register(FFT_START_IRQ, edge_capture_ptr, fft_interrupts);*/
}
  2002a4:	e037883a 	mov	sp,fp
  2002a8:	dfc00117 	ldw	ra,4(sp)
  2002ac:	df000017 	ldw	fp,0(sp)
  2002b0:	dec00204 	addi	sp,sp,8
  2002b4:	f800283a 	ret

002002b8 <main>:

//int tmp = IORD(PIO_INPUT_BASE, 0)
//IOWR(PIO_OUTPUT_BASE, 0, tmp);

int main(){
  2002b8:	defffe04 	addi	sp,sp,-8
  2002bc:	dfc00115 	stw	ra,4(sp)
  2002c0:	df000015 	stw	fp,0(sp)
  2002c4:	d839883a 	mov	fp,sp
	fprintf(stderr,"TEST1");
  2002c8:	00800834 	movhi	r2,32
  2002cc:	109cab04 	addi	r2,r2,29356
  2002d0:	10800017 	ldw	r2,0(r2)
  2002d4:	10800317 	ldw	r2,12(r2)
  2002d8:	01000834 	movhi	r4,32
  2002dc:	21161104 	addi	r4,r4,22596
  2002e0:	01400044 	movi	r5,1
  2002e4:	01800144 	movi	r6,5
  2002e8:	100f883a 	mov	r7,r2
  2002ec:	02003d40 	call	2003d4 <fwrite>
	while (1) {
		fprintf(stderr, "output %d \n", IORD(DEBUG_BASE, 0) >> 16);
		usleep(100000);
	}
	*/
	return 0;
  2002f0:	0005883a 	mov	r2,zero
}
  2002f4:	e037883a 	mov	sp,fp
  2002f8:	dfc00117 	ldw	ra,4(sp)
  2002fc:	df000017 	ldw	fp,0(sp)
  200300:	dec00204 	addi	sp,sp,8
  200304:	f800283a 	ret

00200308 <_fwrite_r>:
  200308:	defff504 	addi	sp,sp,-44
  20030c:	dcc00815 	stw	r19,32(sp)
  200310:	39a7383a 	mul	r19,r7,r6
  200314:	d8800304 	addi	r2,sp,12
  200318:	d8800015 	stw	r2,0(sp)
  20031c:	00800044 	movi	r2,1
  200320:	dd000915 	stw	r20,36(sp)
  200324:	dc800715 	stw	r18,28(sp)
  200328:	dc400615 	stw	r17,24(sp)
  20032c:	d9400315 	stw	r5,12(sp)
  200330:	dfc00a15 	stw	ra,40(sp)
  200334:	dcc00415 	stw	r19,16(sp)
  200338:	dcc00215 	stw	r19,8(sp)
  20033c:	d8800115 	stw	r2,4(sp)
  200340:	3029883a 	mov	r20,r6
  200344:	3823883a 	mov	r17,r7
  200348:	2025883a 	mov	r18,r4
  20034c:	d9400b17 	ldw	r5,44(sp)
  200350:	20000226 	beq	r4,zero,20035c <_fwrite_r+0x54>
  200354:	20800e17 	ldw	r2,56(r4)
  200358:	10001a26 	beq	r2,zero,2003c4 <_fwrite_r+0xbc>
  20035c:	2880030b 	ldhu	r2,12(r5)
  200360:	10c8000c 	andi	r3,r2,8192
  200364:	1800061e 	bne	r3,zero,200380 <_fwrite_r+0x78>
  200368:	29001917 	ldw	r4,100(r5)
  20036c:	00f7ffc4 	movi	r3,-8193
  200370:	10880014 	ori	r2,r2,8192
  200374:	20c6703a 	and	r3,r4,r3
  200378:	2880030d 	sth	r2,12(r5)
  20037c:	28c01915 	stw	r3,100(r5)
  200380:	9009883a 	mov	r4,r18
  200384:	d80d883a 	mov	r6,sp
  200388:	02007b40 	call	2007b4 <__sfvwrite_r>
  20038c:	10000b26 	beq	r2,zero,2003bc <_fwrite_r+0xb4>
  200390:	d9000217 	ldw	r4,8(sp)
  200394:	a00b883a 	mov	r5,r20
  200398:	9909c83a 	sub	r4,r19,r4
  20039c:	0202f240 	call	202f24 <__udivsi3>
  2003a0:	dfc00a17 	ldw	ra,40(sp)
  2003a4:	dd000917 	ldw	r20,36(sp)
  2003a8:	dcc00817 	ldw	r19,32(sp)
  2003ac:	dc800717 	ldw	r18,28(sp)
  2003b0:	dc400617 	ldw	r17,24(sp)
  2003b4:	dec00b04 	addi	sp,sp,44
  2003b8:	f800283a 	ret
  2003bc:	8805883a 	mov	r2,r17
  2003c0:	003ff706 	br	2003a0 <_fwrite_r+0x98>
  2003c4:	d9400515 	stw	r5,20(sp)
  2003c8:	02007640 	call	200764 <__sinit>
  2003cc:	d9400517 	ldw	r5,20(sp)
  2003d0:	003fe206 	br	20035c <_fwrite_r+0x54>

002003d4 <fwrite>:
  2003d4:	00800834 	movhi	r2,32
  2003d8:	109cab04 	addi	r2,r2,29356
  2003dc:	2011883a 	mov	r8,r4
  2003e0:	11000017 	ldw	r4,0(r2)
  2003e4:	defffe04 	addi	sp,sp,-8
  2003e8:	2807883a 	mov	r3,r5
  2003ec:	3005883a 	mov	r2,r6
  2003f0:	d9c00015 	stw	r7,0(sp)
  2003f4:	400b883a 	mov	r5,r8
  2003f8:	180d883a 	mov	r6,r3
  2003fc:	100f883a 	mov	r7,r2
  200400:	dfc00115 	stw	ra,4(sp)
  200404:	02003080 	call	200308 <_fwrite_r>
  200408:	dfc00117 	ldw	ra,4(sp)
  20040c:	dec00204 	addi	sp,sp,8
  200410:	f800283a 	ret

00200414 <__fp_lock>:
  200414:	0005883a 	mov	r2,zero
  200418:	f800283a 	ret

0020041c <__fp_unlock>:
  20041c:	0005883a 	mov	r2,zero
  200420:	f800283a 	ret

00200424 <_cleanup_r>:
  200424:	01400834 	movhi	r5,32
  200428:	2948d004 	addi	r5,r5,9024
  20042c:	0200d381 	jmpi	200d38 <_fwalk_reent>

00200430 <__sinit.part.1>:
  200430:	defff704 	addi	sp,sp,-36
  200434:	00c00834 	movhi	r3,32
  200438:	dfc00815 	stw	ra,32(sp)
  20043c:	ddc00715 	stw	r23,28(sp)
  200440:	dd800615 	stw	r22,24(sp)
  200444:	dd400515 	stw	r21,20(sp)
  200448:	dd000415 	stw	r20,16(sp)
  20044c:	dcc00315 	stw	r19,12(sp)
  200450:	dc800215 	stw	r18,8(sp)
  200454:	dc400115 	stw	r17,4(sp)
  200458:	dc000015 	stw	r16,0(sp)
  20045c:	18c10904 	addi	r3,r3,1060
  200460:	24000117 	ldw	r16,4(r4)
  200464:	20c00f15 	stw	r3,60(r4)
  200468:	2080bb04 	addi	r2,r4,748
  20046c:	00c000c4 	movi	r3,3
  200470:	20c0b915 	stw	r3,740(r4)
  200474:	2080ba15 	stw	r2,744(r4)
  200478:	2000b815 	stw	zero,736(r4)
  20047c:	05c00204 	movi	r23,8
  200480:	00800104 	movi	r2,4
  200484:	2025883a 	mov	r18,r4
  200488:	b80d883a 	mov	r6,r23
  20048c:	81001704 	addi	r4,r16,92
  200490:	000b883a 	mov	r5,zero
  200494:	80000015 	stw	zero,0(r16)
  200498:	80000115 	stw	zero,4(r16)
  20049c:	80000215 	stw	zero,8(r16)
  2004a0:	8080030d 	sth	r2,12(r16)
  2004a4:	80001915 	stw	zero,100(r16)
  2004a8:	8000038d 	sth	zero,14(r16)
  2004ac:	80000415 	stw	zero,16(r16)
  2004b0:	80000515 	stw	zero,20(r16)
  2004b4:	80000615 	stw	zero,24(r16)
  2004b8:	02019200 	call	201920 <memset>
  2004bc:	05800834 	movhi	r22,32
  2004c0:	94400217 	ldw	r17,8(r18)
  2004c4:	05400834 	movhi	r21,32
  2004c8:	05000834 	movhi	r20,32
  2004cc:	04c00834 	movhi	r19,32
  2004d0:	b5880004 	addi	r22,r22,8192
  2004d4:	ad481704 	addi	r21,r21,8284
  2004d8:	a5083604 	addi	r20,r20,8408
  2004dc:	9cc84d04 	addi	r19,r19,8500
  2004e0:	85800815 	stw	r22,32(r16)
  2004e4:	85400915 	stw	r21,36(r16)
  2004e8:	85000a15 	stw	r20,40(r16)
  2004ec:	84c00b15 	stw	r19,44(r16)
  2004f0:	84000715 	stw	r16,28(r16)
  2004f4:	00800284 	movi	r2,10
  2004f8:	8880030d 	sth	r2,12(r17)
  2004fc:	00800044 	movi	r2,1
  200500:	89001704 	addi	r4,r17,92
  200504:	b80d883a 	mov	r6,r23
  200508:	000b883a 	mov	r5,zero
  20050c:	88000015 	stw	zero,0(r17)
  200510:	88000115 	stw	zero,4(r17)
  200514:	88000215 	stw	zero,8(r17)
  200518:	88001915 	stw	zero,100(r17)
  20051c:	8880038d 	sth	r2,14(r17)
  200520:	88000415 	stw	zero,16(r17)
  200524:	88000515 	stw	zero,20(r17)
  200528:	88000615 	stw	zero,24(r17)
  20052c:	02019200 	call	201920 <memset>
  200530:	94000317 	ldw	r16,12(r18)
  200534:	00800484 	movi	r2,18
  200538:	8c400715 	stw	r17,28(r17)
  20053c:	8d800815 	stw	r22,32(r17)
  200540:	8d400915 	stw	r21,36(r17)
  200544:	8d000a15 	stw	r20,40(r17)
  200548:	8cc00b15 	stw	r19,44(r17)
  20054c:	8080030d 	sth	r2,12(r16)
  200550:	00800084 	movi	r2,2
  200554:	80000015 	stw	zero,0(r16)
  200558:	80000115 	stw	zero,4(r16)
  20055c:	80000215 	stw	zero,8(r16)
  200560:	80001915 	stw	zero,100(r16)
  200564:	8080038d 	sth	r2,14(r16)
  200568:	80000415 	stw	zero,16(r16)
  20056c:	80000515 	stw	zero,20(r16)
  200570:	80000615 	stw	zero,24(r16)
  200574:	81001704 	addi	r4,r16,92
  200578:	000b883a 	mov	r5,zero
  20057c:	b80d883a 	mov	r6,r23
  200580:	02019200 	call	201920 <memset>
  200584:	00800044 	movi	r2,1
  200588:	84000715 	stw	r16,28(r16)
  20058c:	85800815 	stw	r22,32(r16)
  200590:	85400915 	stw	r21,36(r16)
  200594:	85000a15 	stw	r20,40(r16)
  200598:	84c00b15 	stw	r19,44(r16)
  20059c:	90800e15 	stw	r2,56(r18)
  2005a0:	dfc00817 	ldw	ra,32(sp)
  2005a4:	ddc00717 	ldw	r23,28(sp)
  2005a8:	dd800617 	ldw	r22,24(sp)
  2005ac:	dd400517 	ldw	r21,20(sp)
  2005b0:	dd000417 	ldw	r20,16(sp)
  2005b4:	dcc00317 	ldw	r19,12(sp)
  2005b8:	dc800217 	ldw	r18,8(sp)
  2005bc:	dc400117 	ldw	r17,4(sp)
  2005c0:	dc000017 	ldw	r16,0(sp)
  2005c4:	dec00904 	addi	sp,sp,36
  2005c8:	f800283a 	ret

002005cc <__sfmoreglue>:
  2005cc:	defffc04 	addi	sp,sp,-16
  2005d0:	dc400115 	stw	r17,4(sp)
  2005d4:	2c7fffc4 	addi	r17,r5,-1
  2005d8:	8c401a24 	muli	r17,r17,104
  2005dc:	dc800215 	stw	r18,8(sp)
  2005e0:	2825883a 	mov	r18,r5
  2005e4:	89401d04 	addi	r5,r17,116
  2005e8:	dc000015 	stw	r16,0(sp)
  2005ec:	dfc00315 	stw	ra,12(sp)
  2005f0:	0200dfc0 	call	200dfc <_malloc_r>
  2005f4:	1021883a 	mov	r16,r2
  2005f8:	10000726 	beq	r2,zero,200618 <__sfmoreglue+0x4c>
  2005fc:	11000304 	addi	r4,r2,12
  200600:	10000015 	stw	zero,0(r2)
  200604:	14800115 	stw	r18,4(r2)
  200608:	11000215 	stw	r4,8(r2)
  20060c:	000b883a 	mov	r5,zero
  200610:	89801a04 	addi	r6,r17,104
  200614:	02019200 	call	201920 <memset>
  200618:	8005883a 	mov	r2,r16
  20061c:	dfc00317 	ldw	ra,12(sp)
  200620:	dc800217 	ldw	r18,8(sp)
  200624:	dc400117 	ldw	r17,4(sp)
  200628:	dc000017 	ldw	r16,0(sp)
  20062c:	dec00404 	addi	sp,sp,16
  200630:	f800283a 	ret

00200634 <__sfp>:
  200634:	00800834 	movhi	r2,32
  200638:	defffb04 	addi	sp,sp,-20
  20063c:	109caa04 	addi	r2,r2,29352
  200640:	dc800215 	stw	r18,8(sp)
  200644:	14800017 	ldw	r18,0(r2)
  200648:	dcc00315 	stw	r19,12(sp)
  20064c:	dfc00415 	stw	ra,16(sp)
  200650:	90800e17 	ldw	r2,56(r18)
  200654:	dc400115 	stw	r17,4(sp)
  200658:	dc000015 	stw	r16,0(sp)
  20065c:	2027883a 	mov	r19,r4
  200660:	1000021e 	bne	r2,zero,20066c <__sfp+0x38>
  200664:	9009883a 	mov	r4,r18
  200668:	02004300 	call	200430 <__sinit.part.1>
  20066c:	9480b804 	addi	r18,r18,736
  200670:	047fffc4 	movi	r17,-1
  200674:	91400117 	ldw	r5,4(r18)
  200678:	94000217 	ldw	r16,8(r18)
  20067c:	297fffc4 	addi	r5,r5,-1
  200680:	28000a16 	blt	r5,zero,2006ac <__sfp+0x78>
  200684:	8080030f 	ldh	r2,12(r16)
  200688:	10000c26 	beq	r2,zero,2006bc <__sfp+0x88>
  20068c:	80c01d04 	addi	r3,r16,116
  200690:	00000206 	br	20069c <__sfp+0x68>
  200694:	18bfe60f 	ldh	r2,-104(r3)
  200698:	10000826 	beq	r2,zero,2006bc <__sfp+0x88>
  20069c:	297fffc4 	addi	r5,r5,-1
  2006a0:	1c3ffd04 	addi	r16,r3,-12
  2006a4:	18c01a04 	addi	r3,r3,104
  2006a8:	2c7ffa1e 	bne	r5,r17,200694 <__sfp+0x60>
  2006ac:	90800017 	ldw	r2,0(r18)
  2006b0:	10001d26 	beq	r2,zero,200728 <__sfp+0xf4>
  2006b4:	1025883a 	mov	r18,r2
  2006b8:	003fee06 	br	200674 <__sfp+0x40>
  2006bc:	00bfffc4 	movi	r2,-1
  2006c0:	8080038d 	sth	r2,14(r16)
  2006c4:	00800044 	movi	r2,1
  2006c8:	8080030d 	sth	r2,12(r16)
  2006cc:	80001915 	stw	zero,100(r16)
  2006d0:	80000015 	stw	zero,0(r16)
  2006d4:	80000215 	stw	zero,8(r16)
  2006d8:	80000115 	stw	zero,4(r16)
  2006dc:	80000415 	stw	zero,16(r16)
  2006e0:	80000515 	stw	zero,20(r16)
  2006e4:	80000615 	stw	zero,24(r16)
  2006e8:	81001704 	addi	r4,r16,92
  2006ec:	000b883a 	mov	r5,zero
  2006f0:	01800204 	movi	r6,8
  2006f4:	02019200 	call	201920 <memset>
  2006f8:	8005883a 	mov	r2,r16
  2006fc:	80000c15 	stw	zero,48(r16)
  200700:	80000d15 	stw	zero,52(r16)
  200704:	80001115 	stw	zero,68(r16)
  200708:	80001215 	stw	zero,72(r16)
  20070c:	dfc00417 	ldw	ra,16(sp)
  200710:	dcc00317 	ldw	r19,12(sp)
  200714:	dc800217 	ldw	r18,8(sp)
  200718:	dc400117 	ldw	r17,4(sp)
  20071c:	dc000017 	ldw	r16,0(sp)
  200720:	dec00504 	addi	sp,sp,20
  200724:	f800283a 	ret
  200728:	9809883a 	mov	r4,r19
  20072c:	01400104 	movi	r5,4
  200730:	02005cc0 	call	2005cc <__sfmoreglue>
  200734:	90800015 	stw	r2,0(r18)
  200738:	103fde1e 	bne	r2,zero,2006b4 <__sfp+0x80>
  20073c:	00800304 	movi	r2,12
  200740:	98800015 	stw	r2,0(r19)
  200744:	0005883a 	mov	r2,zero
  200748:	003ff006 	br	20070c <__sfp+0xd8>

0020074c <_cleanup>:
  20074c:	00800834 	movhi	r2,32
  200750:	109caa04 	addi	r2,r2,29352
  200754:	11000017 	ldw	r4,0(r2)
  200758:	01400834 	movhi	r5,32
  20075c:	2948d004 	addi	r5,r5,9024
  200760:	0200d381 	jmpi	200d38 <_fwalk_reent>

00200764 <__sinit>:
  200764:	20800e17 	ldw	r2,56(r4)
  200768:	10000126 	beq	r2,zero,200770 <__sinit+0xc>
  20076c:	f800283a 	ret
  200770:	02004301 	jmpi	200430 <__sinit.part.1>

00200774 <__sfp_lock_acquire>:
  200774:	f800283a 	ret

00200778 <__sfp_lock_release>:
  200778:	f800283a 	ret

0020077c <__sinit_lock_acquire>:
  20077c:	f800283a 	ret

00200780 <__sinit_lock_release>:
  200780:	f800283a 	ret

00200784 <__fp_lock_all>:
  200784:	00800834 	movhi	r2,32
  200788:	109cab04 	addi	r2,r2,29356
  20078c:	11000017 	ldw	r4,0(r2)
  200790:	01400834 	movhi	r5,32
  200794:	29410504 	addi	r5,r5,1044
  200798:	0200c741 	jmpi	200c74 <_fwalk>

0020079c <__fp_unlock_all>:
  20079c:	00800834 	movhi	r2,32
  2007a0:	109cab04 	addi	r2,r2,29356
  2007a4:	11000017 	ldw	r4,0(r2)
  2007a8:	01400834 	movhi	r5,32
  2007ac:	29410704 	addi	r5,r5,1052
  2007b0:	0200c741 	jmpi	200c74 <_fwalk>

002007b4 <__sfvwrite_r>:
  2007b4:	30800217 	ldw	r2,8(r6)
  2007b8:	10006726 	beq	r2,zero,200958 <__sfvwrite_r+0x1a4>
  2007bc:	defff404 	addi	sp,sp,-48
  2007c0:	dd000615 	stw	r20,24(sp)
  2007c4:	2029883a 	mov	r20,r4
  2007c8:	2900030b 	ldhu	r4,12(r5)
  2007cc:	ddc00915 	stw	r23,36(sp)
  2007d0:	dc000215 	stw	r16,8(sp)
  2007d4:	dfc00b15 	stw	ra,44(sp)
  2007d8:	df000a15 	stw	fp,40(sp)
  2007dc:	dd800815 	stw	r22,32(sp)
  2007e0:	dd400715 	stw	r21,28(sp)
  2007e4:	dcc00515 	stw	r19,20(sp)
  2007e8:	dc800415 	stw	r18,16(sp)
  2007ec:	dc400315 	stw	r17,12(sp)
  2007f0:	2080020c 	andi	r2,r4,8
  2007f4:	2821883a 	mov	r16,r5
  2007f8:	302f883a 	mov	r23,r6
  2007fc:	10002726 	beq	r2,zero,20089c <__sfvwrite_r+0xe8>
  200800:	28800417 	ldw	r2,16(r5)
  200804:	10002526 	beq	r2,zero,20089c <__sfvwrite_r+0xe8>
  200808:	2080008c 	andi	r2,r4,2
  20080c:	bc400017 	ldw	r17,0(r23)
  200810:	10002a26 	beq	r2,zero,2008bc <__sfvwrite_r+0x108>
  200814:	05600034 	movhi	r21,32768
  200818:	0027883a 	mov	r19,zero
  20081c:	0025883a 	mov	r18,zero
  200820:	ad7f0004 	addi	r21,r21,-1024
  200824:	980d883a 	mov	r6,r19
  200828:	a009883a 	mov	r4,r20
  20082c:	90004626 	beq	r18,zero,200948 <__sfvwrite_r+0x194>
  200830:	900f883a 	mov	r7,r18
  200834:	81400717 	ldw	r5,28(r16)
  200838:	ac80022e 	bgeu	r21,r18,200844 <__sfvwrite_r+0x90>
  20083c:	01e00034 	movhi	r7,32768
  200840:	39ff0004 	addi	r7,r7,-1024
  200844:	80800917 	ldw	r2,36(r16)
  200848:	103ee83a 	callr	r2
  20084c:	0080520e 	bge	zero,r2,200998 <__sfvwrite_r+0x1e4>
  200850:	b8c00217 	ldw	r3,8(r23)
  200854:	98a7883a 	add	r19,r19,r2
  200858:	90a5c83a 	sub	r18,r18,r2
  20085c:	1885c83a 	sub	r2,r3,r2
  200860:	b8800215 	stw	r2,8(r23)
  200864:	103fef1e 	bne	r2,zero,200824 <__sfvwrite_r+0x70>
  200868:	0005883a 	mov	r2,zero
  20086c:	dfc00b17 	ldw	ra,44(sp)
  200870:	df000a17 	ldw	fp,40(sp)
  200874:	ddc00917 	ldw	r23,36(sp)
  200878:	dd800817 	ldw	r22,32(sp)
  20087c:	dd400717 	ldw	r21,28(sp)
  200880:	dd000617 	ldw	r20,24(sp)
  200884:	dcc00517 	ldw	r19,20(sp)
  200888:	dc800417 	ldw	r18,16(sp)
  20088c:	dc400317 	ldw	r17,12(sp)
  200890:	dc000217 	ldw	r16,8(sp)
  200894:	dec00c04 	addi	sp,sp,48
  200898:	f800283a 	ret
  20089c:	a009883a 	mov	r4,r20
  2008a0:	800b883a 	mov	r5,r16
  2008a4:	02021980 	call	202198 <__swsetup_r>
  2008a8:	1000ec1e 	bne	r2,zero,200c5c <__sfvwrite_r+0x4a8>
  2008ac:	8100030b 	ldhu	r4,12(r16)
  2008b0:	bc400017 	ldw	r17,0(r23)
  2008b4:	2080008c 	andi	r2,r4,2
  2008b8:	103fd61e 	bne	r2,zero,200814 <__sfvwrite_r+0x60>
  2008bc:	2080004c 	andi	r2,r4,1
  2008c0:	10003a1e 	bne	r2,zero,2009ac <__sfvwrite_r+0x1f8>
  2008c4:	0039883a 	mov	fp,zero
  2008c8:	0025883a 	mov	r18,zero
  2008cc:	90001a26 	beq	r18,zero,200938 <__sfvwrite_r+0x184>
  2008d0:	2080800c 	andi	r2,r4,512
  2008d4:	85800217 	ldw	r22,8(r16)
  2008d8:	10007626 	beq	r2,zero,200ab4 <__sfvwrite_r+0x300>
  2008dc:	b027883a 	mov	r19,r22
  2008e0:	95809436 	bltu	r18,r22,200b34 <__sfvwrite_r+0x380>
  2008e4:	2081200c 	andi	r2,r4,1152
  2008e8:	10009f1e 	bne	r2,zero,200b68 <__sfvwrite_r+0x3b4>
  2008ec:	81000017 	ldw	r4,0(r16)
  2008f0:	e00b883a 	mov	r5,fp
  2008f4:	980d883a 	mov	r6,r19
  2008f8:	02017c40 	call	2017c4 <memmove>
  2008fc:	81000217 	ldw	r4,8(r16)
  200900:	81400017 	ldw	r5,0(r16)
  200904:	9005883a 	mov	r2,r18
  200908:	2587c83a 	sub	r3,r4,r22
  20090c:	2ce7883a 	add	r19,r5,r19
  200910:	80c00215 	stw	r3,8(r16)
  200914:	84c00015 	stw	r19,0(r16)
  200918:	b8c00217 	ldw	r3,8(r23)
  20091c:	e0b9883a 	add	fp,fp,r2
  200920:	90a5c83a 	sub	r18,r18,r2
  200924:	1885c83a 	sub	r2,r3,r2
  200928:	b8800215 	stw	r2,8(r23)
  20092c:	103fce26 	beq	r2,zero,200868 <__sfvwrite_r+0xb4>
  200930:	8100030b 	ldhu	r4,12(r16)
  200934:	903fe61e 	bne	r18,zero,2008d0 <__sfvwrite_r+0x11c>
  200938:	8f000017 	ldw	fp,0(r17)
  20093c:	8c800117 	ldw	r18,4(r17)
  200940:	8c400204 	addi	r17,r17,8
  200944:	003fe106 	br	2008cc <__sfvwrite_r+0x118>
  200948:	8cc00017 	ldw	r19,0(r17)
  20094c:	8c800117 	ldw	r18,4(r17)
  200950:	8c400204 	addi	r17,r17,8
  200954:	003fb306 	br	200824 <__sfvwrite_r+0x70>
  200958:	0005883a 	mov	r2,zero
  20095c:	f800283a 	ret
  200960:	00a00034 	movhi	r2,32768
  200964:	10bfffc4 	addi	r2,r2,-1
  200968:	9009883a 	mov	r4,r18
  20096c:	1480012e 	bgeu	r2,r18,200974 <__sfvwrite_r+0x1c0>
  200970:	1009883a 	mov	r4,r2
  200974:	980b883a 	mov	r5,r19
  200978:	0202e740 	call	202e74 <__divsi3>
  20097c:	81400717 	ldw	r5,28(r16)
  200980:	80c00917 	ldw	r3,36(r16)
  200984:	988f383a 	mul	r7,r19,r2
  200988:	a009883a 	mov	r4,r20
  20098c:	e00d883a 	mov	r6,fp
  200990:	183ee83a 	callr	r3
  200994:	00bfe016 	blt	zero,r2,200918 <__sfvwrite_r+0x164>
  200998:	8080030b 	ldhu	r2,12(r16)
  20099c:	10801014 	ori	r2,r2,64
  2009a0:	8080030d 	sth	r2,12(r16)
  2009a4:	00bfffc4 	movi	r2,-1
  2009a8:	003fb006 	br	20086c <__sfvwrite_r+0xb8>
  2009ac:	0027883a 	mov	r19,zero
  2009b0:	0011883a 	mov	r8,zero
  2009b4:	0039883a 	mov	fp,zero
  2009b8:	0025883a 	mov	r18,zero
  2009bc:	90001f26 	beq	r18,zero,200a3c <__sfvwrite_r+0x288>
  2009c0:	40006026 	beq	r8,zero,200b44 <__sfvwrite_r+0x390>
  2009c4:	982b883a 	mov	r21,r19
  2009c8:	94c0012e 	bgeu	r18,r19,2009d0 <__sfvwrite_r+0x21c>
  2009cc:	902b883a 	mov	r21,r18
  2009d0:	81000017 	ldw	r4,0(r16)
  2009d4:	80800417 	ldw	r2,16(r16)
  2009d8:	a82d883a 	mov	r22,r21
  2009dc:	81800217 	ldw	r6,8(r16)
  2009e0:	81c00517 	ldw	r7,20(r16)
  2009e4:	1100022e 	bgeu	r2,r4,2009f0 <__sfvwrite_r+0x23c>
  2009e8:	31c7883a 	add	r3,r6,r7
  2009ec:	1d401816 	blt	r3,r21,200a50 <__sfvwrite_r+0x29c>
  2009f0:	a9c04416 	blt	r21,r7,200b04 <__sfvwrite_r+0x350>
  2009f4:	80800917 	ldw	r2,36(r16)
  2009f8:	81400717 	ldw	r5,28(r16)
  2009fc:	a009883a 	mov	r4,r20
  200a00:	da000115 	stw	r8,4(sp)
  200a04:	e00d883a 	mov	r6,fp
  200a08:	103ee83a 	callr	r2
  200a0c:	102d883a 	mov	r22,r2
  200a10:	da000117 	ldw	r8,4(sp)
  200a14:	00bfe00e 	bge	zero,r2,200998 <__sfvwrite_r+0x1e4>
  200a18:	9da7c83a 	sub	r19,r19,r22
  200a1c:	98001f26 	beq	r19,zero,200a9c <__sfvwrite_r+0x2e8>
  200a20:	b8800217 	ldw	r2,8(r23)
  200a24:	e5b9883a 	add	fp,fp,r22
  200a28:	95a5c83a 	sub	r18,r18,r22
  200a2c:	15adc83a 	sub	r22,r2,r22
  200a30:	bd800215 	stw	r22,8(r23)
  200a34:	b03f8c26 	beq	r22,zero,200868 <__sfvwrite_r+0xb4>
  200a38:	903fe11e 	bne	r18,zero,2009c0 <__sfvwrite_r+0x20c>
  200a3c:	8f000017 	ldw	fp,0(r17)
  200a40:	8c800117 	ldw	r18,4(r17)
  200a44:	0011883a 	mov	r8,zero
  200a48:	8c400204 	addi	r17,r17,8
  200a4c:	003fdb06 	br	2009bc <__sfvwrite_r+0x208>
  200a50:	180d883a 	mov	r6,r3
  200a54:	e00b883a 	mov	r5,fp
  200a58:	da000115 	stw	r8,4(sp)
  200a5c:	d8c00015 	stw	r3,0(sp)
  200a60:	02017c40 	call	2017c4 <memmove>
  200a64:	d8c00017 	ldw	r3,0(sp)
  200a68:	80800017 	ldw	r2,0(r16)
  200a6c:	a009883a 	mov	r4,r20
  200a70:	800b883a 	mov	r5,r16
  200a74:	10c5883a 	add	r2,r2,r3
  200a78:	80800015 	stw	r2,0(r16)
  200a7c:	d8c00015 	stw	r3,0(sp)
  200a80:	020264c0 	call	20264c <_fflush_r>
  200a84:	d8c00017 	ldw	r3,0(sp)
  200a88:	da000117 	ldw	r8,4(sp)
  200a8c:	103fc21e 	bne	r2,zero,200998 <__sfvwrite_r+0x1e4>
  200a90:	182d883a 	mov	r22,r3
  200a94:	9da7c83a 	sub	r19,r19,r22
  200a98:	983fe11e 	bne	r19,zero,200a20 <__sfvwrite_r+0x26c>
  200a9c:	a009883a 	mov	r4,r20
  200aa0:	800b883a 	mov	r5,r16
  200aa4:	020264c0 	call	20264c <_fflush_r>
  200aa8:	103fbb1e 	bne	r2,zero,200998 <__sfvwrite_r+0x1e4>
  200aac:	0011883a 	mov	r8,zero
  200ab0:	003fdb06 	br	200a20 <__sfvwrite_r+0x26c>
  200ab4:	81000017 	ldw	r4,0(r16)
  200ab8:	80800417 	ldw	r2,16(r16)
  200abc:	11000236 	bltu	r2,r4,200ac8 <__sfvwrite_r+0x314>
  200ac0:	84c00517 	ldw	r19,20(r16)
  200ac4:	94ffa62e 	bgeu	r18,r19,200960 <__sfvwrite_r+0x1ac>
  200ac8:	9027883a 	mov	r19,r18
  200acc:	b480012e 	bgeu	r22,r18,200ad4 <__sfvwrite_r+0x320>
  200ad0:	b027883a 	mov	r19,r22
  200ad4:	e00b883a 	mov	r5,fp
  200ad8:	980d883a 	mov	r6,r19
  200adc:	02017c40 	call	2017c4 <memmove>
  200ae0:	80800217 	ldw	r2,8(r16)
  200ae4:	80c00017 	ldw	r3,0(r16)
  200ae8:	14c5c83a 	sub	r2,r2,r19
  200aec:	1cc7883a 	add	r3,r3,r19
  200af0:	80800215 	stw	r2,8(r16)
  200af4:	80c00015 	stw	r3,0(r16)
  200af8:	10004326 	beq	r2,zero,200c08 <__sfvwrite_r+0x454>
  200afc:	9805883a 	mov	r2,r19
  200b00:	003f8506 	br	200918 <__sfvwrite_r+0x164>
  200b04:	a80d883a 	mov	r6,r21
  200b08:	e00b883a 	mov	r5,fp
  200b0c:	da000115 	stw	r8,4(sp)
  200b10:	02017c40 	call	2017c4 <memmove>
  200b14:	80800217 	ldw	r2,8(r16)
  200b18:	80c00017 	ldw	r3,0(r16)
  200b1c:	da000117 	ldw	r8,4(sp)
  200b20:	1545c83a 	sub	r2,r2,r21
  200b24:	1d6b883a 	add	r21,r3,r21
  200b28:	80800215 	stw	r2,8(r16)
  200b2c:	85400015 	stw	r21,0(r16)
  200b30:	003fb906 	br	200a18 <__sfvwrite_r+0x264>
  200b34:	81000017 	ldw	r4,0(r16)
  200b38:	902d883a 	mov	r22,r18
  200b3c:	9027883a 	mov	r19,r18
  200b40:	003f6b06 	br	2008f0 <__sfvwrite_r+0x13c>
  200b44:	e009883a 	mov	r4,fp
  200b48:	01400284 	movi	r5,10
  200b4c:	900d883a 	mov	r6,r18
  200b50:	02015a40 	call	2015a4 <memchr>
  200b54:	10003e26 	beq	r2,zero,200c50 <__sfvwrite_r+0x49c>
  200b58:	10800044 	addi	r2,r2,1
  200b5c:	1727c83a 	sub	r19,r2,fp
  200b60:	02000044 	movi	r8,1
  200b64:	003f9706 	br	2009c4 <__sfvwrite_r+0x210>
  200b68:	80800517 	ldw	r2,20(r16)
  200b6c:	81400417 	ldw	r5,16(r16)
  200b70:	80c00017 	ldw	r3,0(r16)
  200b74:	10a7883a 	add	r19,r2,r2
  200b78:	9885883a 	add	r2,r19,r2
  200b7c:	1026d7fa 	srli	r19,r2,31
  200b80:	196bc83a 	sub	r21,r3,r5
  200b84:	a9800044 	addi	r6,r21,1
  200b88:	9885883a 	add	r2,r19,r2
  200b8c:	1027d07a 	srai	r19,r2,1
  200b90:	3485883a 	add	r2,r6,r18
  200b94:	980d883a 	mov	r6,r19
  200b98:	9880022e 	bgeu	r19,r2,200ba4 <__sfvwrite_r+0x3f0>
  200b9c:	1027883a 	mov	r19,r2
  200ba0:	100d883a 	mov	r6,r2
  200ba4:	2101000c 	andi	r4,r4,1024
  200ba8:	20001c26 	beq	r4,zero,200c1c <__sfvwrite_r+0x468>
  200bac:	a009883a 	mov	r4,r20
  200bb0:	300b883a 	mov	r5,r6
  200bb4:	0200dfc0 	call	200dfc <_malloc_r>
  200bb8:	102d883a 	mov	r22,r2
  200bbc:	10002926 	beq	r2,zero,200c64 <__sfvwrite_r+0x4b0>
  200bc0:	81400417 	ldw	r5,16(r16)
  200bc4:	1009883a 	mov	r4,r2
  200bc8:	a80d883a 	mov	r6,r21
  200bcc:	020168c0 	call	20168c <memcpy>
  200bd0:	8080030b 	ldhu	r2,12(r16)
  200bd4:	00fedfc4 	movi	r3,-1153
  200bd8:	10c4703a 	and	r2,r2,r3
  200bdc:	10802014 	ori	r2,r2,128
  200be0:	8080030d 	sth	r2,12(r16)
  200be4:	b549883a 	add	r4,r22,r21
  200be8:	9d4bc83a 	sub	r5,r19,r21
  200bec:	85800415 	stw	r22,16(r16)
  200bf0:	84c00515 	stw	r19,20(r16)
  200bf4:	81000015 	stw	r4,0(r16)
  200bf8:	902d883a 	mov	r22,r18
  200bfc:	81400215 	stw	r5,8(r16)
  200c00:	9027883a 	mov	r19,r18
  200c04:	003f3a06 	br	2008f0 <__sfvwrite_r+0x13c>
  200c08:	a009883a 	mov	r4,r20
  200c0c:	800b883a 	mov	r5,r16
  200c10:	020264c0 	call	20264c <_fflush_r>
  200c14:	103fb926 	beq	r2,zero,200afc <__sfvwrite_r+0x348>
  200c18:	003f5f06 	br	200998 <__sfvwrite_r+0x1e4>
  200c1c:	a009883a 	mov	r4,r20
  200c20:	0201a440 	call	201a44 <_realloc_r>
  200c24:	102d883a 	mov	r22,r2
  200c28:	103fee1e 	bne	r2,zero,200be4 <__sfvwrite_r+0x430>
  200c2c:	81400417 	ldw	r5,16(r16)
  200c30:	a009883a 	mov	r4,r20
  200c34:	02027fc0 	call	2027fc <_free_r>
  200c38:	8080030b 	ldhu	r2,12(r16)
  200c3c:	00ffdfc4 	movi	r3,-129
  200c40:	1884703a 	and	r2,r3,r2
  200c44:	00c00304 	movi	r3,12
  200c48:	a0c00015 	stw	r3,0(r20)
  200c4c:	003f5306 	br	20099c <__sfvwrite_r+0x1e8>
  200c50:	94c00044 	addi	r19,r18,1
  200c54:	02000044 	movi	r8,1
  200c58:	003f5a06 	br	2009c4 <__sfvwrite_r+0x210>
  200c5c:	00bfffc4 	movi	r2,-1
  200c60:	003f0206 	br	20086c <__sfvwrite_r+0xb8>
  200c64:	00800304 	movi	r2,12
  200c68:	a0800015 	stw	r2,0(r20)
  200c6c:	8080030b 	ldhu	r2,12(r16)
  200c70:	003f4a06 	br	20099c <__sfvwrite_r+0x1e8>

00200c74 <_fwalk>:
  200c74:	defff704 	addi	sp,sp,-36
  200c78:	dd000415 	stw	r20,16(sp)
  200c7c:	dfc00815 	stw	ra,32(sp)
  200c80:	ddc00715 	stw	r23,28(sp)
  200c84:	dd800615 	stw	r22,24(sp)
  200c88:	dd400515 	stw	r21,20(sp)
  200c8c:	dcc00315 	stw	r19,12(sp)
  200c90:	dc800215 	stw	r18,8(sp)
  200c94:	dc400115 	stw	r17,4(sp)
  200c98:	dc000015 	stw	r16,0(sp)
  200c9c:	2500b804 	addi	r20,r4,736
  200ca0:	a0002326 	beq	r20,zero,200d30 <_fwalk+0xbc>
  200ca4:	282b883a 	mov	r21,r5
  200ca8:	002f883a 	mov	r23,zero
  200cac:	05800044 	movi	r22,1
  200cb0:	04ffffc4 	movi	r19,-1
  200cb4:	a4400117 	ldw	r17,4(r20)
  200cb8:	a4800217 	ldw	r18,8(r20)
  200cbc:	8c7fffc4 	addi	r17,r17,-1
  200cc0:	88000d16 	blt	r17,zero,200cf8 <_fwalk+0x84>
  200cc4:	94000304 	addi	r16,r18,12
  200cc8:	94800384 	addi	r18,r18,14
  200ccc:	80c0000b 	ldhu	r3,0(r16)
  200cd0:	8c7fffc4 	addi	r17,r17,-1
  200cd4:	813ffd04 	addi	r4,r16,-12
  200cd8:	b0c0042e 	bgeu	r22,r3,200cec <_fwalk+0x78>
  200cdc:	90c0000f 	ldh	r3,0(r18)
  200ce0:	1cc00226 	beq	r3,r19,200cec <_fwalk+0x78>
  200ce4:	a83ee83a 	callr	r21
  200ce8:	b8aeb03a 	or	r23,r23,r2
  200cec:	84001a04 	addi	r16,r16,104
  200cf0:	94801a04 	addi	r18,r18,104
  200cf4:	8cfff51e 	bne	r17,r19,200ccc <_fwalk+0x58>
  200cf8:	a5000017 	ldw	r20,0(r20)
  200cfc:	a03fed1e 	bne	r20,zero,200cb4 <_fwalk+0x40>
  200d00:	b805883a 	mov	r2,r23
  200d04:	dfc00817 	ldw	ra,32(sp)
  200d08:	ddc00717 	ldw	r23,28(sp)
  200d0c:	dd800617 	ldw	r22,24(sp)
  200d10:	dd400517 	ldw	r21,20(sp)
  200d14:	dd000417 	ldw	r20,16(sp)
  200d18:	dcc00317 	ldw	r19,12(sp)
  200d1c:	dc800217 	ldw	r18,8(sp)
  200d20:	dc400117 	ldw	r17,4(sp)
  200d24:	dc000017 	ldw	r16,0(sp)
  200d28:	dec00904 	addi	sp,sp,36
  200d2c:	f800283a 	ret
  200d30:	002f883a 	mov	r23,zero
  200d34:	003ff206 	br	200d00 <_fwalk+0x8c>

00200d38 <_fwalk_reent>:
  200d38:	defff704 	addi	sp,sp,-36
  200d3c:	dd400515 	stw	r21,20(sp)
  200d40:	dfc00815 	stw	ra,32(sp)
  200d44:	ddc00715 	stw	r23,28(sp)
  200d48:	dd800615 	stw	r22,24(sp)
  200d4c:	dd000415 	stw	r20,16(sp)
  200d50:	dcc00315 	stw	r19,12(sp)
  200d54:	dc800215 	stw	r18,8(sp)
  200d58:	dc400115 	stw	r17,4(sp)
  200d5c:	dc000015 	stw	r16,0(sp)
  200d60:	2540b804 	addi	r21,r4,736
  200d64:	a8002326 	beq	r21,zero,200df4 <_fwalk_reent+0xbc>
  200d68:	2829883a 	mov	r20,r5
  200d6c:	202d883a 	mov	r22,r4
  200d70:	002f883a 	mov	r23,zero
  200d74:	04c00044 	movi	r19,1
  200d78:	04bfffc4 	movi	r18,-1
  200d7c:	ac400117 	ldw	r17,4(r21)
  200d80:	ac000217 	ldw	r16,8(r21)
  200d84:	8c7fffc4 	addi	r17,r17,-1
  200d88:	88000c16 	blt	r17,zero,200dbc <_fwalk_reent+0x84>
  200d8c:	84000304 	addi	r16,r16,12
  200d90:	80c0000b 	ldhu	r3,0(r16)
  200d94:	8c7fffc4 	addi	r17,r17,-1
  200d98:	817ffd04 	addi	r5,r16,-12
  200d9c:	98c0052e 	bgeu	r19,r3,200db4 <_fwalk_reent+0x7c>
  200da0:	80c0008f 	ldh	r3,2(r16)
  200da4:	b009883a 	mov	r4,r22
  200da8:	1c800226 	beq	r3,r18,200db4 <_fwalk_reent+0x7c>
  200dac:	a03ee83a 	callr	r20
  200db0:	b8aeb03a 	or	r23,r23,r2
  200db4:	84001a04 	addi	r16,r16,104
  200db8:	8cbff51e 	bne	r17,r18,200d90 <_fwalk_reent+0x58>
  200dbc:	ad400017 	ldw	r21,0(r21)
  200dc0:	a83fee1e 	bne	r21,zero,200d7c <_fwalk_reent+0x44>
  200dc4:	b805883a 	mov	r2,r23
  200dc8:	dfc00817 	ldw	ra,32(sp)
  200dcc:	ddc00717 	ldw	r23,28(sp)
  200dd0:	dd800617 	ldw	r22,24(sp)
  200dd4:	dd400517 	ldw	r21,20(sp)
  200dd8:	dd000417 	ldw	r20,16(sp)
  200ddc:	dcc00317 	ldw	r19,12(sp)
  200de0:	dc800217 	ldw	r18,8(sp)
  200de4:	dc400117 	ldw	r17,4(sp)
  200de8:	dc000017 	ldw	r16,0(sp)
  200dec:	dec00904 	addi	sp,sp,36
  200df0:	f800283a 	ret
  200df4:	002f883a 	mov	r23,zero
  200df8:	003ff206 	br	200dc4 <_fwalk_reent+0x8c>

00200dfc <_malloc_r>:
  200dfc:	defff504 	addi	sp,sp,-44
  200e00:	dc800315 	stw	r18,12(sp)
  200e04:	dfc00a15 	stw	ra,40(sp)
  200e08:	df000915 	stw	fp,36(sp)
  200e0c:	ddc00815 	stw	r23,32(sp)
  200e10:	dd800715 	stw	r22,28(sp)
  200e14:	dd400615 	stw	r21,24(sp)
  200e18:	dd000515 	stw	r20,20(sp)
  200e1c:	dcc00415 	stw	r19,16(sp)
  200e20:	dc400215 	stw	r17,8(sp)
  200e24:	dc000115 	stw	r16,4(sp)
  200e28:	288002c4 	addi	r2,r5,11
  200e2c:	00c00584 	movi	r3,22
  200e30:	2025883a 	mov	r18,r4
  200e34:	18802a2e 	bgeu	r3,r2,200ee0 <_malloc_r+0xe4>
  200e38:	047ffe04 	movi	r17,-8
  200e3c:	1462703a 	and	r17,r2,r17
  200e40:	88009e16 	blt	r17,zero,2010bc <_malloc_r+0x2c0>
  200e44:	89409d36 	bltu	r17,r5,2010bc <_malloc_r+0x2c0>
  200e48:	02034f40 	call	2034f4 <__malloc_lock>
  200e4c:	00807dc4 	movi	r2,503
  200e50:	14402736 	bltu	r2,r17,200ef0 <_malloc_r+0xf4>
  200e54:	8806d0fa 	srli	r3,r17,3
  200e58:	04c00834 	movhi	r19,32
  200e5c:	9cd72604 	addi	r19,r19,23704
  200e60:	18c5883a 	add	r2,r3,r3
  200e64:	1085883a 	add	r2,r2,r2
  200e68:	1085883a 	add	r2,r2,r2
  200e6c:	9885883a 	add	r2,r19,r2
  200e70:	14000317 	ldw	r16,12(r2)
  200e74:	80814a26 	beq	r16,r2,2013a0 <_malloc_r+0x5a4>
  200e78:	80c00117 	ldw	r3,4(r16)
  200e7c:	81000317 	ldw	r4,12(r16)
  200e80:	00bfff04 	movi	r2,-4
  200e84:	1884703a 	and	r2,r3,r2
  200e88:	81400217 	ldw	r5,8(r16)
  200e8c:	8085883a 	add	r2,r16,r2
  200e90:	10c00117 	ldw	r3,4(r2)
  200e94:	29000315 	stw	r4,12(r5)
  200e98:	21400215 	stw	r5,8(r4)
  200e9c:	18c00054 	ori	r3,r3,1
  200ea0:	10c00115 	stw	r3,4(r2)
  200ea4:	9009883a 	mov	r4,r18
  200ea8:	02035140 	call	203514 <__malloc_unlock>
  200eac:	80800204 	addi	r2,r16,8
  200eb0:	dfc00a17 	ldw	ra,40(sp)
  200eb4:	df000917 	ldw	fp,36(sp)
  200eb8:	ddc00817 	ldw	r23,32(sp)
  200ebc:	dd800717 	ldw	r22,28(sp)
  200ec0:	dd400617 	ldw	r21,24(sp)
  200ec4:	dd000517 	ldw	r20,20(sp)
  200ec8:	dcc00417 	ldw	r19,16(sp)
  200ecc:	dc800317 	ldw	r18,12(sp)
  200ed0:	dc400217 	ldw	r17,8(sp)
  200ed4:	dc000117 	ldw	r16,4(sp)
  200ed8:	dec00b04 	addi	sp,sp,44
  200edc:	f800283a 	ret
  200ee0:	04400404 	movi	r17,16
  200ee4:	89407536 	bltu	r17,r5,2010bc <_malloc_r+0x2c0>
  200ee8:	02034f40 	call	2034f4 <__malloc_lock>
  200eec:	003fd906 	br	200e54 <_malloc_r+0x58>
  200ef0:	8806d27a 	srli	r3,r17,9
  200ef4:	18007526 	beq	r3,zero,2010cc <_malloc_r+0x2d0>
  200ef8:	00800104 	movi	r2,4
  200efc:	10c0ef36 	bltu	r2,r3,2012bc <_malloc_r+0x4c0>
  200f00:	8806d1ba 	srli	r3,r17,6
  200f04:	19c00e04 	addi	r7,r3,56
  200f08:	39cb883a 	add	r5,r7,r7
  200f0c:	04c00834 	movhi	r19,32
  200f10:	294b883a 	add	r5,r5,r5
  200f14:	9cd72604 	addi	r19,r19,23704
  200f18:	294b883a 	add	r5,r5,r5
  200f1c:	994b883a 	add	r5,r19,r5
  200f20:	2c000317 	ldw	r16,12(r5)
  200f24:	2c000e26 	beq	r5,r16,200f60 <_malloc_r+0x164>
  200f28:	80800117 	ldw	r2,4(r16)
  200f2c:	01bfff04 	movi	r6,-4
  200f30:	010003c4 	movi	r4,15
  200f34:	1184703a 	and	r2,r2,r6
  200f38:	1447c83a 	sub	r3,r2,r17
  200f3c:	20c00716 	blt	r4,r3,200f5c <_malloc_r+0x160>
  200f40:	1800650e 	bge	r3,zero,2010d8 <_malloc_r+0x2dc>
  200f44:	84000317 	ldw	r16,12(r16)
  200f48:	2c000526 	beq	r5,r16,200f60 <_malloc_r+0x164>
  200f4c:	80800117 	ldw	r2,4(r16)
  200f50:	1184703a 	and	r2,r2,r6
  200f54:	1447c83a 	sub	r3,r2,r17
  200f58:	20fff90e 	bge	r4,r3,200f40 <_malloc_r+0x144>
  200f5c:	39ffffc4 	addi	r7,r7,-1
  200f60:	38c00044 	addi	r3,r7,1
  200f64:	01800834 	movhi	r6,32
  200f68:	9c000417 	ldw	r16,16(r19)
  200f6c:	31972604 	addi	r6,r6,23704
  200f70:	32400204 	addi	r9,r6,8
  200f74:	82410326 	beq	r16,r9,201384 <_malloc_r+0x588>
  200f78:	81000117 	ldw	r4,4(r16)
  200f7c:	00bfff04 	movi	r2,-4
  200f80:	208e703a 	and	r7,r4,r2
  200f84:	3c45c83a 	sub	r2,r7,r17
  200f88:	010003c4 	movi	r4,15
  200f8c:	2080ee16 	blt	r4,r2,201348 <_malloc_r+0x54c>
  200f90:	32400515 	stw	r9,20(r6)
  200f94:	32400415 	stw	r9,16(r6)
  200f98:	1000510e 	bge	r2,zero,2010e0 <_malloc_r+0x2e4>
  200f9c:	00807fc4 	movi	r2,511
  200fa0:	11c0ce36 	bltu	r2,r7,2012dc <_malloc_r+0x4e0>
  200fa4:	3808d0fa 	srli	r4,r7,3
  200fa8:	01c00044 	movi	r7,1
  200fac:	30800117 	ldw	r2,4(r6)
  200fb0:	210b883a 	add	r5,r4,r4
  200fb4:	294b883a 	add	r5,r5,r5
  200fb8:	2009d0ba 	srai	r4,r4,2
  200fbc:	294b883a 	add	r5,r5,r5
  200fc0:	298b883a 	add	r5,r5,r6
  200fc4:	2a000217 	ldw	r8,8(r5)
  200fc8:	3908983a 	sll	r4,r7,r4
  200fcc:	81400315 	stw	r5,12(r16)
  200fd0:	82000215 	stw	r8,8(r16)
  200fd4:	2088b03a 	or	r4,r4,r2
  200fd8:	2c000215 	stw	r16,8(r5)
  200fdc:	31000115 	stw	r4,4(r6)
  200fe0:	44000315 	stw	r16,12(r8)
  200fe4:	1805d0ba 	srai	r2,r3,2
  200fe8:	01400044 	movi	r5,1
  200fec:	288a983a 	sll	r5,r5,r2
  200ff0:	21404336 	bltu	r4,r5,201100 <_malloc_r+0x304>
  200ff4:	2144703a 	and	r2,r4,r5
  200ff8:	10000a1e 	bne	r2,zero,201024 <_malloc_r+0x228>
  200ffc:	00bfff04 	movi	r2,-4
  201000:	294b883a 	add	r5,r5,r5
  201004:	1886703a 	and	r3,r3,r2
  201008:	2144703a 	and	r2,r4,r5
  20100c:	18c00104 	addi	r3,r3,4
  201010:	1000041e 	bne	r2,zero,201024 <_malloc_r+0x228>
  201014:	294b883a 	add	r5,r5,r5
  201018:	2144703a 	and	r2,r4,r5
  20101c:	18c00104 	addi	r3,r3,4
  201020:	103ffc26 	beq	r2,zero,201014 <_malloc_r+0x218>
  201024:	023fff04 	movi	r8,-4
  201028:	01c003c4 	movi	r7,15
  20102c:	18c5883a 	add	r2,r3,r3
  201030:	1085883a 	add	r2,r2,r2
  201034:	1085883a 	add	r2,r2,r2
  201038:	9895883a 	add	r10,r19,r2
  20103c:	52c00304 	addi	r11,r10,12
  201040:	1819883a 	mov	r12,r3
  201044:	5c000017 	ldw	r16,0(r11)
  201048:	59bffd04 	addi	r6,r11,-12
  20104c:	8180041e 	bne	r16,r6,201060 <_malloc_r+0x264>
  201050:	0000ce06 	br	20138c <_malloc_r+0x590>
  201054:	2000d70e 	bge	r4,zero,2013b4 <_malloc_r+0x5b8>
  201058:	84000317 	ldw	r16,12(r16)
  20105c:	8180cb26 	beq	r16,r6,20138c <_malloc_r+0x590>
  201060:	80800117 	ldw	r2,4(r16)
  201064:	1204703a 	and	r2,r2,r8
  201068:	1449c83a 	sub	r4,r2,r17
  20106c:	393ff90e 	bge	r7,r4,201054 <_malloc_r+0x258>
  201070:	80800317 	ldw	r2,12(r16)
  201074:	80c00217 	ldw	r3,8(r16)
  201078:	89400054 	ori	r5,r17,1
  20107c:	81400115 	stw	r5,4(r16)
  201080:	18800315 	stw	r2,12(r3)
  201084:	10c00215 	stw	r3,8(r2)
  201088:	8463883a 	add	r17,r16,r17
  20108c:	9c400515 	stw	r17,20(r19)
  201090:	9c400415 	stw	r17,16(r19)
  201094:	20800054 	ori	r2,r4,1
  201098:	88800115 	stw	r2,4(r17)
  20109c:	8a400315 	stw	r9,12(r17)
  2010a0:	8a400215 	stw	r9,8(r17)
  2010a4:	8923883a 	add	r17,r17,r4
  2010a8:	89000015 	stw	r4,0(r17)
  2010ac:	9009883a 	mov	r4,r18
  2010b0:	02035140 	call	203514 <__malloc_unlock>
  2010b4:	80800204 	addi	r2,r16,8
  2010b8:	003f7d06 	br	200eb0 <_malloc_r+0xb4>
  2010bc:	00800304 	movi	r2,12
  2010c0:	90800015 	stw	r2,0(r18)
  2010c4:	0005883a 	mov	r2,zero
  2010c8:	003f7906 	br	200eb0 <_malloc_r+0xb4>
  2010cc:	01401f84 	movi	r5,126
  2010d0:	01c00fc4 	movi	r7,63
  2010d4:	003f8d06 	br	200f0c <_malloc_r+0x110>
  2010d8:	81000317 	ldw	r4,12(r16)
  2010dc:	003f6a06 	br	200e88 <_malloc_r+0x8c>
  2010e0:	81c5883a 	add	r2,r16,r7
  2010e4:	10c00117 	ldw	r3,4(r2)
  2010e8:	9009883a 	mov	r4,r18
  2010ec:	18c00054 	ori	r3,r3,1
  2010f0:	10c00115 	stw	r3,4(r2)
  2010f4:	02035140 	call	203514 <__malloc_unlock>
  2010f8:	80800204 	addi	r2,r16,8
  2010fc:	003f6c06 	br	200eb0 <_malloc_r+0xb4>
  201100:	9c000217 	ldw	r16,8(r19)
  201104:	00bfff04 	movi	r2,-4
  201108:	85800117 	ldw	r22,4(r16)
  20110c:	b0ac703a 	and	r22,r22,r2
  201110:	b4400336 	bltu	r22,r17,201120 <_malloc_r+0x324>
  201114:	b445c83a 	sub	r2,r22,r17
  201118:	00c003c4 	movi	r3,15
  20111c:	18805d16 	blt	r3,r2,201294 <_malloc_r+0x498>
  201120:	05c00834 	movhi	r23,32
  201124:	00800874 	movhi	r2,33
  201128:	bddcac04 	addi	r23,r23,29360
  20112c:	10a35904 	addi	r2,r2,-29340
  201130:	15400017 	ldw	r21,0(r2)
  201134:	b9000017 	ldw	r4,0(r23)
  201138:	00ffffc4 	movi	r3,-1
  20113c:	858d883a 	add	r6,r16,r22
  201140:	8d6b883a 	add	r21,r17,r21
  201144:	20c0e426 	beq	r4,r3,2014d8 <_malloc_r+0x6dc>
  201148:	ad4403c4 	addi	r21,r21,4111
  20114c:	00fc0004 	movi	r3,-4096
  201150:	a8ea703a 	and	r21,r21,r3
  201154:	9009883a 	mov	r4,r18
  201158:	a80b883a 	mov	r5,r21
  20115c:	d9800015 	stw	r6,0(sp)
  201160:	0201fac0 	call	201fac <_sbrk_r>
  201164:	00ffffc4 	movi	r3,-1
  201168:	1029883a 	mov	r20,r2
  20116c:	d9800017 	ldw	r6,0(sp)
  201170:	10c0a426 	beq	r2,r3,201404 <_malloc_r+0x608>
  201174:	1180a236 	bltu	r2,r6,201400 <_malloc_r+0x604>
  201178:	07000874 	movhi	fp,33
  20117c:	e7236204 	addi	fp,fp,-29304
  201180:	e0c00017 	ldw	r3,0(fp)
  201184:	a8c7883a 	add	r3,r21,r3
  201188:	e0c00015 	stw	r3,0(fp)
  20118c:	3500da26 	beq	r6,r20,2014f8 <_malloc_r+0x6fc>
  201190:	b9000017 	ldw	r4,0(r23)
  201194:	00bfffc4 	movi	r2,-1
  201198:	2080e426 	beq	r4,r2,20152c <_malloc_r+0x730>
  20119c:	a185c83a 	sub	r2,r20,r6
  2011a0:	1885883a 	add	r2,r3,r2
  2011a4:	e0800015 	stw	r2,0(fp)
  2011a8:	a0c001cc 	andi	r3,r20,7
  2011ac:	1800b526 	beq	r3,zero,201484 <_malloc_r+0x688>
  2011b0:	a0e9c83a 	sub	r20,r20,r3
  2011b4:	00840204 	movi	r2,4104
  2011b8:	a5000204 	addi	r20,r20,8
  2011bc:	10c7c83a 	sub	r3,r2,r3
  2011c0:	a545883a 	add	r2,r20,r21
  2011c4:	1083ffcc 	andi	r2,r2,4095
  2011c8:	18abc83a 	sub	r21,r3,r2
  2011cc:	9009883a 	mov	r4,r18
  2011d0:	a80b883a 	mov	r5,r21
  2011d4:	0201fac0 	call	201fac <_sbrk_r>
  2011d8:	00ffffc4 	movi	r3,-1
  2011dc:	10c0d026 	beq	r2,r3,201520 <_malloc_r+0x724>
  2011e0:	1507c83a 	sub	r3,r2,r20
  2011e4:	a8c7883a 	add	r3,r21,r3
  2011e8:	18c00054 	ori	r3,r3,1
  2011ec:	e0800017 	ldw	r2,0(fp)
  2011f0:	9d000215 	stw	r20,8(r19)
  2011f4:	a0c00115 	stw	r3,4(r20)
  2011f8:	a887883a 	add	r3,r21,r2
  2011fc:	e0c00015 	stw	r3,0(fp)
  201200:	84c00e26 	beq	r16,r19,20123c <_malloc_r+0x440>
  201204:	018003c4 	movi	r6,15
  201208:	3580a02e 	bgeu	r6,r22,20148c <_malloc_r+0x690>
  20120c:	81400117 	ldw	r5,4(r16)
  201210:	013ffe04 	movi	r4,-8
  201214:	b0bffd04 	addi	r2,r22,-12
  201218:	1104703a 	and	r2,r2,r4
  20121c:	2900004c 	andi	r4,r5,1
  201220:	1108b03a 	or	r4,r2,r4
  201224:	81000115 	stw	r4,4(r16)
  201228:	01400144 	movi	r5,5
  20122c:	8089883a 	add	r4,r16,r2
  201230:	21400115 	stw	r5,4(r4)
  201234:	21400215 	stw	r5,8(r4)
  201238:	3080c036 	bltu	r6,r2,20153c <_malloc_r+0x740>
  20123c:	00800874 	movhi	r2,33
  201240:	10a35804 	addi	r2,r2,-29344
  201244:	11000017 	ldw	r4,0(r2)
  201248:	20c0012e 	bgeu	r4,r3,201250 <_malloc_r+0x454>
  20124c:	10c00015 	stw	r3,0(r2)
  201250:	00800874 	movhi	r2,33
  201254:	10a35704 	addi	r2,r2,-29348
  201258:	11000017 	ldw	r4,0(r2)
  20125c:	9c000217 	ldw	r16,8(r19)
  201260:	20c0012e 	bgeu	r4,r3,201268 <_malloc_r+0x46c>
  201264:	10c00015 	stw	r3,0(r2)
  201268:	80c00117 	ldw	r3,4(r16)
  20126c:	00bfff04 	movi	r2,-4
  201270:	1886703a 	and	r3,r3,r2
  201274:	1c45c83a 	sub	r2,r3,r17
  201278:	1c400236 	bltu	r3,r17,201284 <_malloc_r+0x488>
  20127c:	00c003c4 	movi	r3,15
  201280:	18800416 	blt	r3,r2,201294 <_malloc_r+0x498>
  201284:	9009883a 	mov	r4,r18
  201288:	02035140 	call	203514 <__malloc_unlock>
  20128c:	0005883a 	mov	r2,zero
  201290:	003f0706 	br	200eb0 <_malloc_r+0xb4>
  201294:	88c00054 	ori	r3,r17,1
  201298:	80c00115 	stw	r3,4(r16)
  20129c:	8463883a 	add	r17,r16,r17
  2012a0:	10800054 	ori	r2,r2,1
  2012a4:	9c400215 	stw	r17,8(r19)
  2012a8:	88800115 	stw	r2,4(r17)
  2012ac:	9009883a 	mov	r4,r18
  2012b0:	02035140 	call	203514 <__malloc_unlock>
  2012b4:	80800204 	addi	r2,r16,8
  2012b8:	003efd06 	br	200eb0 <_malloc_r+0xb4>
  2012bc:	00800504 	movi	r2,20
  2012c0:	10c0482e 	bgeu	r2,r3,2013e4 <_malloc_r+0x5e8>
  2012c4:	00801504 	movi	r2,84
  2012c8:	10c06836 	bltu	r2,r3,20146c <_malloc_r+0x670>
  2012cc:	8806d33a 	srli	r3,r17,12
  2012d0:	19c01b84 	addi	r7,r3,110
  2012d4:	39cb883a 	add	r5,r7,r7
  2012d8:	003f0c06 	br	200f0c <_malloc_r+0x110>
  2012dc:	3804d27a 	srli	r2,r7,9
  2012e0:	01000104 	movi	r4,4
  2012e4:	2080422e 	bgeu	r4,r2,2013f0 <_malloc_r+0x5f4>
  2012e8:	01000504 	movi	r4,20
  2012ec:	20807c36 	bltu	r4,r2,2014e0 <_malloc_r+0x6e4>
  2012f0:	110016c4 	addi	r4,r2,91
  2012f4:	210b883a 	add	r5,r4,r4
  2012f8:	294b883a 	add	r5,r5,r5
  2012fc:	294b883a 	add	r5,r5,r5
  201300:	994b883a 	add	r5,r19,r5
  201304:	28800217 	ldw	r2,8(r5)
  201308:	02000834 	movhi	r8,32
  20130c:	42172604 	addi	r8,r8,23704
  201310:	11406326 	beq	r2,r5,2014a0 <_malloc_r+0x6a4>
  201314:	01bfff04 	movi	r6,-4
  201318:	11000117 	ldw	r4,4(r2)
  20131c:	2188703a 	and	r4,r4,r6
  201320:	3900022e 	bgeu	r7,r4,20132c <_malloc_r+0x530>
  201324:	10800217 	ldw	r2,8(r2)
  201328:	28bffb1e 	bne	r5,r2,201318 <_malloc_r+0x51c>
  20132c:	11800317 	ldw	r6,12(r2)
  201330:	99000117 	ldw	r4,4(r19)
  201334:	81800315 	stw	r6,12(r16)
  201338:	80800215 	stw	r2,8(r16)
  20133c:	34000215 	stw	r16,8(r6)
  201340:	14000315 	stw	r16,12(r2)
  201344:	003f2706 	br	200fe4 <_malloc_r+0x1e8>
  201348:	88c00054 	ori	r3,r17,1
  20134c:	80c00115 	stw	r3,4(r16)
  201350:	8463883a 	add	r17,r16,r17
  201354:	34400515 	stw	r17,20(r6)
  201358:	34400415 	stw	r17,16(r6)
  20135c:	10c00054 	ori	r3,r2,1
  201360:	8a400315 	stw	r9,12(r17)
  201364:	8a400215 	stw	r9,8(r17)
  201368:	88c00115 	stw	r3,4(r17)
  20136c:	88a3883a 	add	r17,r17,r2
  201370:	88800015 	stw	r2,0(r17)
  201374:	9009883a 	mov	r4,r18
  201378:	02035140 	call	203514 <__malloc_unlock>
  20137c:	80800204 	addi	r2,r16,8
  201380:	003ecb06 	br	200eb0 <_malloc_r+0xb4>
  201384:	31000117 	ldw	r4,4(r6)
  201388:	003f1606 	br	200fe4 <_malloc_r+0x1e8>
  20138c:	63000044 	addi	r12,r12,1
  201390:	608000cc 	andi	r2,r12,3
  201394:	5ac00204 	addi	r11,r11,8
  201398:	103f2a1e 	bne	r2,zero,201044 <_malloc_r+0x248>
  20139c:	00002106 	br	201424 <_malloc_r+0x628>
  2013a0:	80800204 	addi	r2,r16,8
  2013a4:	84000517 	ldw	r16,20(r16)
  2013a8:	143eb31e 	bne	r2,r16,200e78 <_malloc_r+0x7c>
  2013ac:	18c00084 	addi	r3,r3,2
  2013b0:	003eec06 	br	200f64 <_malloc_r+0x168>
  2013b4:	8085883a 	add	r2,r16,r2
  2013b8:	10c00117 	ldw	r3,4(r2)
  2013bc:	81000317 	ldw	r4,12(r16)
  2013c0:	81400217 	ldw	r5,8(r16)
  2013c4:	18c00054 	ori	r3,r3,1
  2013c8:	10c00115 	stw	r3,4(r2)
  2013cc:	29000315 	stw	r4,12(r5)
  2013d0:	21400215 	stw	r5,8(r4)
  2013d4:	9009883a 	mov	r4,r18
  2013d8:	02035140 	call	203514 <__malloc_unlock>
  2013dc:	80800204 	addi	r2,r16,8
  2013e0:	003eb306 	br	200eb0 <_malloc_r+0xb4>
  2013e4:	19c016c4 	addi	r7,r3,91
  2013e8:	39cb883a 	add	r5,r7,r7
  2013ec:	003ec706 	br	200f0c <_malloc_r+0x110>
  2013f0:	3804d1ba 	srli	r2,r7,6
  2013f4:	11000e04 	addi	r4,r2,56
  2013f8:	210b883a 	add	r5,r4,r4
  2013fc:	003fbe06 	br	2012f8 <_malloc_r+0x4fc>
  201400:	84ff5d26 	beq	r16,r19,201178 <_malloc_r+0x37c>
  201404:	9c000217 	ldw	r16,8(r19)
  201408:	00bfff04 	movi	r2,-4
  20140c:	80c00117 	ldw	r3,4(r16)
  201410:	1886703a 	and	r3,r3,r2
  201414:	003f9706 	br	201274 <_malloc_r+0x478>
  201418:	52800017 	ldw	r10,0(r10)
  20141c:	18ffffc4 	addi	r3,r3,-1
  201420:	50805c1e 	bne	r10,r2,201594 <_malloc_r+0x798>
  201424:	190000cc 	andi	r4,r3,3
  201428:	50bffe04 	addi	r2,r10,-8
  20142c:	203ffa1e 	bne	r4,zero,201418 <_malloc_r+0x61c>
  201430:	98800117 	ldw	r2,4(r19)
  201434:	0146303a 	nor	r3,zero,r5
  201438:	1884703a 	and	r2,r3,r2
  20143c:	98800115 	stw	r2,4(r19)
  201440:	294b883a 	add	r5,r5,r5
  201444:	117f2e36 	bltu	r2,r5,201100 <_malloc_r+0x304>
  201448:	283f2d26 	beq	r5,zero,201100 <_malloc_r+0x304>
  20144c:	1146703a 	and	r3,r2,r5
  201450:	1800521e 	bne	r3,zero,20159c <_malloc_r+0x7a0>
  201454:	6007883a 	mov	r3,r12
  201458:	294b883a 	add	r5,r5,r5
  20145c:	1148703a 	and	r4,r2,r5
  201460:	18c00104 	addi	r3,r3,4
  201464:	203ffc26 	beq	r4,zero,201458 <_malloc_r+0x65c>
  201468:	003ef006 	br	20102c <_malloc_r+0x230>
  20146c:	00805504 	movi	r2,340
  201470:	10c01336 	bltu	r2,r3,2014c0 <_malloc_r+0x6c4>
  201474:	8806d3fa 	srli	r3,r17,15
  201478:	19c01dc4 	addi	r7,r3,119
  20147c:	39cb883a 	add	r5,r7,r7
  201480:	003ea206 	br	200f0c <_malloc_r+0x110>
  201484:	00c40004 	movi	r3,4096
  201488:	003f4d06 	br	2011c0 <_malloc_r+0x3c4>
  20148c:	00800044 	movi	r2,1
  201490:	a0800115 	stw	r2,4(r20)
  201494:	a021883a 	mov	r16,r20
  201498:	0007883a 	mov	r3,zero
  20149c:	003f7506 	br	201274 <_malloc_r+0x478>
  2014a0:	200bd0ba 	srai	r5,r4,2
  2014a4:	01800044 	movi	r6,1
  2014a8:	41000117 	ldw	r4,4(r8)
  2014ac:	314a983a 	sll	r5,r6,r5
  2014b0:	100d883a 	mov	r6,r2
  2014b4:	2908b03a 	or	r4,r5,r4
  2014b8:	41000115 	stw	r4,4(r8)
  2014bc:	003f9d06 	br	201334 <_malloc_r+0x538>
  2014c0:	00815504 	movi	r2,1364
  2014c4:	10c01336 	bltu	r2,r3,201514 <_malloc_r+0x718>
  2014c8:	8806d4ba 	srli	r3,r17,18
  2014cc:	19c01f04 	addi	r7,r3,124
  2014d0:	39cb883a 	add	r5,r7,r7
  2014d4:	003e8d06 	br	200f0c <_malloc_r+0x110>
  2014d8:	ad400404 	addi	r21,r21,16
  2014dc:	003f1d06 	br	201154 <_malloc_r+0x358>
  2014e0:	01001504 	movi	r4,84
  2014e4:	20801c36 	bltu	r4,r2,201558 <_malloc_r+0x75c>
  2014e8:	3804d33a 	srli	r2,r7,12
  2014ec:	11001b84 	addi	r4,r2,110
  2014f0:	210b883a 	add	r5,r4,r4
  2014f4:	003f8006 	br	2012f8 <_malloc_r+0x4fc>
  2014f8:	3083ffcc 	andi	r2,r6,4095
  2014fc:	103f241e 	bne	r2,zero,201190 <_malloc_r+0x394>
  201500:	99000217 	ldw	r4,8(r19)
  201504:	ad85883a 	add	r2,r21,r22
  201508:	10800054 	ori	r2,r2,1
  20150c:	20800115 	stw	r2,4(r4)
  201510:	003f4a06 	br	20123c <_malloc_r+0x440>
  201514:	01403f04 	movi	r5,252
  201518:	01c01f84 	movi	r7,126
  20151c:	003e7b06 	br	200f0c <_malloc_r+0x110>
  201520:	00c00044 	movi	r3,1
  201524:	002b883a 	mov	r21,zero
  201528:	003f3006 	br	2011ec <_malloc_r+0x3f0>
  20152c:	00800834 	movhi	r2,32
  201530:	109cac04 	addi	r2,r2,29360
  201534:	15000015 	stw	r20,0(r2)
  201538:	003f1b06 	br	2011a8 <_malloc_r+0x3ac>
  20153c:	9009883a 	mov	r4,r18
  201540:	81400204 	addi	r5,r16,8
  201544:	02027fc0 	call	2027fc <_free_r>
  201548:	00800874 	movhi	r2,33
  20154c:	10a36204 	addi	r2,r2,-29304
  201550:	10c00017 	ldw	r3,0(r2)
  201554:	003f3906 	br	20123c <_malloc_r+0x440>
  201558:	01005504 	movi	r4,340
  20155c:	20800436 	bltu	r4,r2,201570 <_malloc_r+0x774>
  201560:	3804d3fa 	srli	r2,r7,15
  201564:	11001dc4 	addi	r4,r2,119
  201568:	210b883a 	add	r5,r4,r4
  20156c:	003f6206 	br	2012f8 <_malloc_r+0x4fc>
  201570:	01015504 	movi	r4,1364
  201574:	20800436 	bltu	r4,r2,201588 <_malloc_r+0x78c>
  201578:	3804d4ba 	srli	r2,r7,18
  20157c:	11001f04 	addi	r4,r2,124
  201580:	210b883a 	add	r5,r4,r4
  201584:	003f5c06 	br	2012f8 <_malloc_r+0x4fc>
  201588:	01403f04 	movi	r5,252
  20158c:	01001f84 	movi	r4,126
  201590:	003f5906 	br	2012f8 <_malloc_r+0x4fc>
  201594:	98800117 	ldw	r2,4(r19)
  201598:	003fa906 	br	201440 <_malloc_r+0x644>
  20159c:	6007883a 	mov	r3,r12
  2015a0:	003ea206 	br	20102c <_malloc_r+0x230>

002015a4 <memchr>:
  2015a4:	208000cc 	andi	r2,r4,3
  2015a8:	280f883a 	mov	r7,r5
  2015ac:	10003526 	beq	r2,zero,201684 <memchr+0xe0>
  2015b0:	30bfffc4 	addi	r2,r6,-1
  2015b4:	30001b26 	beq	r6,zero,201624 <memchr+0x80>
  2015b8:	21800003 	ldbu	r6,0(r4)
  2015bc:	28c03fcc 	andi	r3,r5,255
  2015c0:	30c01a26 	beq	r6,r3,20162c <memchr+0x88>
  2015c4:	180d883a 	mov	r6,r3
  2015c8:	00000406 	br	2015dc <memchr+0x38>
  2015cc:	10001526 	beq	r2,zero,201624 <memchr+0x80>
  2015d0:	20c00003 	ldbu	r3,0(r4)
  2015d4:	10bfffc4 	addi	r2,r2,-1
  2015d8:	19801426 	beq	r3,r6,20162c <memchr+0x88>
  2015dc:	21000044 	addi	r4,r4,1
  2015e0:	20c000cc 	andi	r3,r4,3
  2015e4:	183ff91e 	bne	r3,zero,2015cc <memchr+0x28>
  2015e8:	024000c4 	movi	r9,3
  2015ec:	48801136 	bltu	r9,r2,201634 <memchr+0x90>
  2015f0:	10000c26 	beq	r2,zero,201624 <memchr+0x80>
  2015f4:	20c00003 	ldbu	r3,0(r4)
  2015f8:	29403fcc 	andi	r5,r5,255
  2015fc:	19400b26 	beq	r3,r5,20162c <memchr+0x88>
  201600:	20c00044 	addi	r3,r4,1
  201604:	2085883a 	add	r2,r4,r2
  201608:	39803fcc 	andi	r6,r7,255
  20160c:	00000306 	br	20161c <memchr+0x78>
  201610:	18c00044 	addi	r3,r3,1
  201614:	197fffc3 	ldbu	r5,-1(r3)
  201618:	29800426 	beq	r5,r6,20162c <memchr+0x88>
  20161c:	1809883a 	mov	r4,r3
  201620:	18bffb1e 	bne	r3,r2,201610 <memchr+0x6c>
  201624:	0005883a 	mov	r2,zero
  201628:	f800283a 	ret
  20162c:	2005883a 	mov	r2,r4
  201630:	f800283a 	ret
  201634:	28c03fcc 	andi	r3,r5,255
  201638:	1810923a 	slli	r8,r3,8
  20163c:	02ffbff4 	movhi	r11,65279
  201640:	02a02074 	movhi	r10,32897
  201644:	40c6b03a 	or	r3,r8,r3
  201648:	1810943a 	slli	r8,r3,16
  20164c:	5affbfc4 	addi	r11,r11,-257
  201650:	52a02004 	addi	r10,r10,-32640
  201654:	40d0b03a 	or	r8,r8,r3
  201658:	20c00017 	ldw	r3,0(r4)
  20165c:	40c6f03a 	xor	r3,r8,r3
  201660:	1acd883a 	add	r6,r3,r11
  201664:	00c6303a 	nor	r3,zero,r3
  201668:	30c6703a 	and	r3,r6,r3
  20166c:	1a86703a 	and	r3,r3,r10
  201670:	183fdf1e 	bne	r3,zero,2015f0 <memchr+0x4c>
  201674:	10bfff04 	addi	r2,r2,-4
  201678:	21000104 	addi	r4,r4,4
  20167c:	48bff636 	bltu	r9,r2,201658 <memchr+0xb4>
  201680:	003fdb06 	br	2015f0 <memchr+0x4c>
  201684:	3005883a 	mov	r2,r6
  201688:	003fd706 	br	2015e8 <memchr+0x44>

0020168c <memcpy>:
  20168c:	deffff04 	addi	sp,sp,-4
  201690:	dc000015 	stw	r16,0(sp)
  201694:	00c003c4 	movi	r3,15
  201698:	2005883a 	mov	r2,r4
  20169c:	1980432e 	bgeu	r3,r6,2017ac <memcpy+0x120>
  2016a0:	2146b03a 	or	r3,r4,r5
  2016a4:	18c000cc 	andi	r3,r3,3
  2016a8:	1800421e 	bne	r3,zero,2017b4 <memcpy+0x128>
  2016ac:	343ffc04 	addi	r16,r6,-16
  2016b0:	8020d13a 	srli	r16,r16,4
  2016b4:	28c00104 	addi	r3,r5,4
  2016b8:	23400104 	addi	r13,r4,4
  2016bc:	801e913a 	slli	r15,r16,4
  2016c0:	2b000204 	addi	r12,r5,8
  2016c4:	22c00204 	addi	r11,r4,8
  2016c8:	7bc00504 	addi	r15,r15,20
  2016cc:	2a800304 	addi	r10,r5,12
  2016d0:	22400304 	addi	r9,r4,12
  2016d4:	2bdf883a 	add	r15,r5,r15
  2016d8:	2811883a 	mov	r8,r5
  2016dc:	200f883a 	mov	r7,r4
  2016e0:	41000017 	ldw	r4,0(r8)
  2016e4:	39c00404 	addi	r7,r7,16
  2016e8:	18c00404 	addi	r3,r3,16
  2016ec:	393ffc15 	stw	r4,-16(r7)
  2016f0:	1bbffc17 	ldw	r14,-16(r3)
  2016f4:	6b400404 	addi	r13,r13,16
  2016f8:	5ac00404 	addi	r11,r11,16
  2016fc:	6bbffc15 	stw	r14,-16(r13)
  201700:	63800017 	ldw	r14,0(r12)
  201704:	4a400404 	addi	r9,r9,16
  201708:	42000404 	addi	r8,r8,16
  20170c:	5bbffc15 	stw	r14,-16(r11)
  201710:	53800017 	ldw	r14,0(r10)
  201714:	63000404 	addi	r12,r12,16
  201718:	52800404 	addi	r10,r10,16
  20171c:	4bbffc15 	stw	r14,-16(r9)
  201720:	1bffef1e 	bne	r3,r15,2016e0 <memcpy+0x54>
  201724:	81c00044 	addi	r7,r16,1
  201728:	380e913a 	slli	r7,r7,4
  20172c:	310003cc 	andi	r4,r6,15
  201730:	02c000c4 	movi	r11,3
  201734:	11c7883a 	add	r3,r2,r7
  201738:	29cb883a 	add	r5,r5,r7
  20173c:	59001f2e 	bgeu	r11,r4,2017bc <memcpy+0x130>
  201740:	1813883a 	mov	r9,r3
  201744:	2811883a 	mov	r8,r5
  201748:	200f883a 	mov	r7,r4
  20174c:	42800017 	ldw	r10,0(r8)
  201750:	4a400104 	addi	r9,r9,4
  201754:	39ffff04 	addi	r7,r7,-4
  201758:	4abfff15 	stw	r10,-4(r9)
  20175c:	42000104 	addi	r8,r8,4
  201760:	59fffa36 	bltu	r11,r7,20174c <memcpy+0xc0>
  201764:	213fff04 	addi	r4,r4,-4
  201768:	2008d0ba 	srli	r4,r4,2
  20176c:	318000cc 	andi	r6,r6,3
  201770:	21000044 	addi	r4,r4,1
  201774:	2109883a 	add	r4,r4,r4
  201778:	2109883a 	add	r4,r4,r4
  20177c:	1907883a 	add	r3,r3,r4
  201780:	290b883a 	add	r5,r5,r4
  201784:	30000626 	beq	r6,zero,2017a0 <memcpy+0x114>
  201788:	198d883a 	add	r6,r3,r6
  20178c:	29c00003 	ldbu	r7,0(r5)
  201790:	18c00044 	addi	r3,r3,1
  201794:	29400044 	addi	r5,r5,1
  201798:	19ffffc5 	stb	r7,-1(r3)
  20179c:	19bffb1e 	bne	r3,r6,20178c <memcpy+0x100>
  2017a0:	dc000017 	ldw	r16,0(sp)
  2017a4:	dec00104 	addi	sp,sp,4
  2017a8:	f800283a 	ret
  2017ac:	2007883a 	mov	r3,r4
  2017b0:	003ff406 	br	201784 <memcpy+0xf8>
  2017b4:	2007883a 	mov	r3,r4
  2017b8:	003ff306 	br	201788 <memcpy+0xfc>
  2017bc:	200d883a 	mov	r6,r4
  2017c0:	003ff006 	br	201784 <memcpy+0xf8>

002017c4 <memmove>:
  2017c4:	2005883a 	mov	r2,r4
  2017c8:	29000b2e 	bgeu	r5,r4,2017f8 <memmove+0x34>
  2017cc:	298f883a 	add	r7,r5,r6
  2017d0:	21c0092e 	bgeu	r4,r7,2017f8 <memmove+0x34>
  2017d4:	2187883a 	add	r3,r4,r6
  2017d8:	198bc83a 	sub	r5,r3,r6
  2017dc:	30004b26 	beq	r6,zero,20190c <memmove+0x148>
  2017e0:	39ffffc4 	addi	r7,r7,-1
  2017e4:	39000003 	ldbu	r4,0(r7)
  2017e8:	18ffffc4 	addi	r3,r3,-1
  2017ec:	19000005 	stb	r4,0(r3)
  2017f0:	197ffb1e 	bne	r3,r5,2017e0 <memmove+0x1c>
  2017f4:	f800283a 	ret
  2017f8:	00c003c4 	movi	r3,15
  2017fc:	1980412e 	bgeu	r3,r6,201904 <memmove+0x140>
  201800:	1146b03a 	or	r3,r2,r5
  201804:	18c000cc 	andi	r3,r3,3
  201808:	1800411e 	bne	r3,zero,201910 <memmove+0x14c>
  20180c:	33fffc04 	addi	r15,r6,-16
  201810:	781ed13a 	srli	r15,r15,4
  201814:	28c00104 	addi	r3,r5,4
  201818:	13400104 	addi	r13,r2,4
  20181c:	781c913a 	slli	r14,r15,4
  201820:	2b000204 	addi	r12,r5,8
  201824:	12c00204 	addi	r11,r2,8
  201828:	73800504 	addi	r14,r14,20
  20182c:	2a800304 	addi	r10,r5,12
  201830:	12400304 	addi	r9,r2,12
  201834:	2b9d883a 	add	r14,r5,r14
  201838:	2811883a 	mov	r8,r5
  20183c:	100f883a 	mov	r7,r2
  201840:	41000017 	ldw	r4,0(r8)
  201844:	39c00404 	addi	r7,r7,16
  201848:	18c00404 	addi	r3,r3,16
  20184c:	393ffc15 	stw	r4,-16(r7)
  201850:	193ffc17 	ldw	r4,-16(r3)
  201854:	6b400404 	addi	r13,r13,16
  201858:	5ac00404 	addi	r11,r11,16
  20185c:	693ffc15 	stw	r4,-16(r13)
  201860:	61000017 	ldw	r4,0(r12)
  201864:	4a400404 	addi	r9,r9,16
  201868:	42000404 	addi	r8,r8,16
  20186c:	593ffc15 	stw	r4,-16(r11)
  201870:	51000017 	ldw	r4,0(r10)
  201874:	63000404 	addi	r12,r12,16
  201878:	52800404 	addi	r10,r10,16
  20187c:	493ffc15 	stw	r4,-16(r9)
  201880:	1bbfef1e 	bne	r3,r14,201840 <memmove+0x7c>
  201884:	79000044 	addi	r4,r15,1
  201888:	2008913a 	slli	r4,r4,4
  20188c:	328003cc 	andi	r10,r6,15
  201890:	02c000c4 	movi	r11,3
  201894:	1107883a 	add	r3,r2,r4
  201898:	290b883a 	add	r5,r5,r4
  20189c:	5a801e2e 	bgeu	r11,r10,201918 <memmove+0x154>
  2018a0:	1813883a 	mov	r9,r3
  2018a4:	2811883a 	mov	r8,r5
  2018a8:	500f883a 	mov	r7,r10
  2018ac:	41000017 	ldw	r4,0(r8)
  2018b0:	4a400104 	addi	r9,r9,4
  2018b4:	39ffff04 	addi	r7,r7,-4
  2018b8:	493fff15 	stw	r4,-4(r9)
  2018bc:	42000104 	addi	r8,r8,4
  2018c0:	59fffa36 	bltu	r11,r7,2018ac <memmove+0xe8>
  2018c4:	513fff04 	addi	r4,r10,-4
  2018c8:	2008d0ba 	srli	r4,r4,2
  2018cc:	318000cc 	andi	r6,r6,3
  2018d0:	21000044 	addi	r4,r4,1
  2018d4:	2109883a 	add	r4,r4,r4
  2018d8:	2109883a 	add	r4,r4,r4
  2018dc:	1907883a 	add	r3,r3,r4
  2018e0:	290b883a 	add	r5,r5,r4
  2018e4:	30000926 	beq	r6,zero,20190c <memmove+0x148>
  2018e8:	198d883a 	add	r6,r3,r6
  2018ec:	29c00003 	ldbu	r7,0(r5)
  2018f0:	18c00044 	addi	r3,r3,1
  2018f4:	29400044 	addi	r5,r5,1
  2018f8:	19ffffc5 	stb	r7,-1(r3)
  2018fc:	19bffb1e 	bne	r3,r6,2018ec <memmove+0x128>
  201900:	f800283a 	ret
  201904:	1007883a 	mov	r3,r2
  201908:	003ff606 	br	2018e4 <memmove+0x120>
  20190c:	f800283a 	ret
  201910:	1007883a 	mov	r3,r2
  201914:	003ff406 	br	2018e8 <memmove+0x124>
  201918:	500d883a 	mov	r6,r10
  20191c:	003ff106 	br	2018e4 <memmove+0x120>

00201920 <memset>:
  201920:	20c000cc 	andi	r3,r4,3
  201924:	2005883a 	mov	r2,r4
  201928:	18004326 	beq	r3,zero,201a38 <memset+0x118>
  20192c:	31ffffc4 	addi	r7,r6,-1
  201930:	30004026 	beq	r6,zero,201a34 <memset+0x114>
  201934:	2813883a 	mov	r9,r5
  201938:	200d883a 	mov	r6,r4
  20193c:	2007883a 	mov	r3,r4
  201940:	00000406 	br	201954 <memset+0x34>
  201944:	3a3fffc4 	addi	r8,r7,-1
  201948:	31800044 	addi	r6,r6,1
  20194c:	38003926 	beq	r7,zero,201a34 <memset+0x114>
  201950:	400f883a 	mov	r7,r8
  201954:	18c00044 	addi	r3,r3,1
  201958:	32400005 	stb	r9,0(r6)
  20195c:	1a0000cc 	andi	r8,r3,3
  201960:	403ff81e 	bne	r8,zero,201944 <memset+0x24>
  201964:	010000c4 	movi	r4,3
  201968:	21c02d2e 	bgeu	r4,r7,201a20 <memset+0x100>
  20196c:	29803fcc 	andi	r6,r5,255
  201970:	3008923a 	slli	r4,r6,8
  201974:	218cb03a 	or	r6,r4,r6
  201978:	3008943a 	slli	r4,r6,16
  20197c:	218cb03a 	or	r6,r4,r6
  201980:	010003c4 	movi	r4,15
  201984:	21c0182e 	bgeu	r4,r7,2019e8 <memset+0xc8>
  201988:	3b3ffc04 	addi	r12,r7,-16
  20198c:	6018d13a 	srli	r12,r12,4
  201990:	1a000104 	addi	r8,r3,4
  201994:	1ac00204 	addi	r11,r3,8
  201998:	6008913a 	slli	r4,r12,4
  20199c:	1a800304 	addi	r10,r3,12
  2019a0:	1813883a 	mov	r9,r3
  2019a4:	21000504 	addi	r4,r4,20
  2019a8:	1909883a 	add	r4,r3,r4
  2019ac:	49800015 	stw	r6,0(r9)
  2019b0:	41800015 	stw	r6,0(r8)
  2019b4:	59800015 	stw	r6,0(r11)
  2019b8:	51800015 	stw	r6,0(r10)
  2019bc:	42000404 	addi	r8,r8,16
  2019c0:	4a400404 	addi	r9,r9,16
  2019c4:	5ac00404 	addi	r11,r11,16
  2019c8:	52800404 	addi	r10,r10,16
  2019cc:	413ff71e 	bne	r8,r4,2019ac <memset+0x8c>
  2019d0:	63000044 	addi	r12,r12,1
  2019d4:	6018913a 	slli	r12,r12,4
  2019d8:	39c003cc 	andi	r7,r7,15
  2019dc:	010000c4 	movi	r4,3
  2019e0:	1b07883a 	add	r3,r3,r12
  2019e4:	21c00e2e 	bgeu	r4,r7,201a20 <memset+0x100>
  2019e8:	1813883a 	mov	r9,r3
  2019ec:	3811883a 	mov	r8,r7
  2019f0:	010000c4 	movi	r4,3
  2019f4:	49800015 	stw	r6,0(r9)
  2019f8:	423fff04 	addi	r8,r8,-4
  2019fc:	4a400104 	addi	r9,r9,4
  201a00:	223ffc36 	bltu	r4,r8,2019f4 <memset+0xd4>
  201a04:	393fff04 	addi	r4,r7,-4
  201a08:	2008d0ba 	srli	r4,r4,2
  201a0c:	39c000cc 	andi	r7,r7,3
  201a10:	21000044 	addi	r4,r4,1
  201a14:	2109883a 	add	r4,r4,r4
  201a18:	2109883a 	add	r4,r4,r4
  201a1c:	1907883a 	add	r3,r3,r4
  201a20:	38000426 	beq	r7,zero,201a34 <memset+0x114>
  201a24:	19cf883a 	add	r7,r3,r7
  201a28:	19400005 	stb	r5,0(r3)
  201a2c:	18c00044 	addi	r3,r3,1
  201a30:	19fffd1e 	bne	r3,r7,201a28 <memset+0x108>
  201a34:	f800283a 	ret
  201a38:	2007883a 	mov	r3,r4
  201a3c:	300f883a 	mov	r7,r6
  201a40:	003fc806 	br	201964 <memset+0x44>

00201a44 <_realloc_r>:
  201a44:	defff604 	addi	sp,sp,-40
  201a48:	dd000415 	stw	r20,16(sp)
  201a4c:	dc400115 	stw	r17,4(sp)
  201a50:	dfc00915 	stw	ra,36(sp)
  201a54:	df000815 	stw	fp,32(sp)
  201a58:	ddc00715 	stw	r23,28(sp)
  201a5c:	dd800615 	stw	r22,24(sp)
  201a60:	dd400515 	stw	r21,20(sp)
  201a64:	dcc00315 	stw	r19,12(sp)
  201a68:	dc800215 	stw	r18,8(sp)
  201a6c:	dc000015 	stw	r16,0(sp)
  201a70:	2829883a 	mov	r20,r5
  201a74:	3023883a 	mov	r17,r6
  201a78:	2800ad26 	beq	r5,zero,201d30 <_realloc_r+0x2ec>
  201a7c:	2025883a 	mov	r18,r4
  201a80:	02034f40 	call	2034f4 <__malloc_lock>
  201a84:	a0ffff17 	ldw	r3,-4(r20)
  201a88:	043fff04 	movi	r16,-4
  201a8c:	890002c4 	addi	r4,r17,11
  201a90:	01c00584 	movi	r7,22
  201a94:	a57ffe04 	addi	r21,r20,-8
  201a98:	1c20703a 	and	r16,r3,r16
  201a9c:	39001d2e 	bgeu	r7,r4,201b14 <_realloc_r+0xd0>
  201aa0:	05bffe04 	movi	r22,-8
  201aa4:	25ac703a 	and	r22,r4,r22
  201aa8:	b00f883a 	mov	r7,r22
  201aac:	b0006516 	blt	r22,zero,201c44 <_realloc_r+0x200>
  201ab0:	b4406436 	bltu	r22,r17,201c44 <_realloc_r+0x200>
  201ab4:	81c01a0e 	bge	r16,r7,201b20 <_realloc_r+0xdc>
  201ab8:	07000834 	movhi	fp,32
  201abc:	e7172604 	addi	fp,fp,23704
  201ac0:	e1400217 	ldw	r5,8(fp)
  201ac4:	ac11883a 	add	r8,r21,r16
  201ac8:	2a006226 	beq	r5,r8,201c54 <_realloc_r+0x210>
  201acc:	41800117 	ldw	r6,4(r8)
  201ad0:	027fff84 	movi	r9,-2
  201ad4:	3252703a 	and	r9,r6,r9
  201ad8:	4253883a 	add	r9,r8,r9
  201adc:	49000117 	ldw	r4,4(r9)
  201ae0:	2100004c 	andi	r4,r4,1
  201ae4:	2000281e 	bne	r4,zero,201b88 <_realloc_r+0x144>
  201ae8:	00bfff04 	movi	r2,-4
  201aec:	3084703a 	and	r2,r6,r2
  201af0:	1409883a 	add	r4,r2,r16
  201af4:	21c05e16 	blt	r4,r7,201c70 <_realloc_r+0x22c>
  201af8:	40800317 	ldw	r2,12(r8)
  201afc:	41400217 	ldw	r5,8(r8)
  201b00:	a023883a 	mov	r17,r20
  201b04:	2021883a 	mov	r16,r4
  201b08:	28800315 	stw	r2,12(r5)
  201b0c:	11400215 	stw	r5,8(r2)
  201b10:	00000406 	br	201b24 <_realloc_r+0xe0>
  201b14:	01c00404 	movi	r7,16
  201b18:	382d883a 	mov	r22,r7
  201b1c:	003fe406 	br	201ab0 <_realloc_r+0x6c>
  201b20:	a023883a 	mov	r17,r20
  201b24:	858fc83a 	sub	r7,r16,r22
  201b28:	008003c4 	movi	r2,15
  201b2c:	18c0004c 	andi	r3,r3,1
  201b30:	11c07236 	bltu	r2,r7,201cfc <_realloc_r+0x2b8>
  201b34:	1c06b03a 	or	r3,r3,r16
  201b38:	a8c00115 	stw	r3,4(r21)
  201b3c:	ac21883a 	add	r16,r21,r16
  201b40:	80800117 	ldw	r2,4(r16)
  201b44:	10800054 	ori	r2,r2,1
  201b48:	80800115 	stw	r2,4(r16)
  201b4c:	9009883a 	mov	r4,r18
  201b50:	02035140 	call	203514 <__malloc_unlock>
  201b54:	8805883a 	mov	r2,r17
  201b58:	dfc00917 	ldw	ra,36(sp)
  201b5c:	df000817 	ldw	fp,32(sp)
  201b60:	ddc00717 	ldw	r23,28(sp)
  201b64:	dd800617 	ldw	r22,24(sp)
  201b68:	dd400517 	ldw	r21,20(sp)
  201b6c:	dd000417 	ldw	r20,16(sp)
  201b70:	dcc00317 	ldw	r19,12(sp)
  201b74:	dc800217 	ldw	r18,8(sp)
  201b78:	dc400117 	ldw	r17,4(sp)
  201b7c:	dc000017 	ldw	r16,0(sp)
  201b80:	dec00a04 	addi	sp,sp,40
  201b84:	f800283a 	ret
  201b88:	18c0004c 	andi	r3,r3,1
  201b8c:	1800081e 	bne	r3,zero,201bb0 <_realloc_r+0x16c>
  201b90:	a4fffe17 	ldw	r19,-8(r20)
  201b94:	00bfff04 	movi	r2,-4
  201b98:	ace7c83a 	sub	r19,r21,r19
  201b9c:	98c00117 	ldw	r3,4(r19)
  201ba0:	1886703a 	and	r3,r3,r2
  201ba4:	98000226 	beq	r19,zero,201bb0 <_realloc_r+0x16c>
  201ba8:	1c2f883a 	add	r23,r3,r16
  201bac:	b9c06d0e 	bge	r23,r7,201d64 <_realloc_r+0x320>
  201bb0:	880b883a 	mov	r5,r17
  201bb4:	9009883a 	mov	r4,r18
  201bb8:	0200dfc0 	call	200dfc <_malloc_r>
  201bbc:	1023883a 	mov	r17,r2
  201bc0:	1000ef26 	beq	r2,zero,201f80 <_realloc_r+0x53c>
  201bc4:	a0ffff17 	ldw	r3,-4(r20)
  201bc8:	113ffe04 	addi	r4,r2,-8
  201bcc:	00bfff84 	movi	r2,-2
  201bd0:	1884703a 	and	r2,r3,r2
  201bd4:	a885883a 	add	r2,r21,r2
  201bd8:	2080bf26 	beq	r4,r2,201ed8 <_realloc_r+0x494>
  201bdc:	81bfff04 	addi	r6,r16,-4
  201be0:	00800904 	movi	r2,36
  201be4:	11808936 	bltu	r2,r6,201e0c <_realloc_r+0x3c8>
  201be8:	00c004c4 	movi	r3,19
  201bec:	19806c2e 	bgeu	r3,r6,201da0 <_realloc_r+0x35c>
  201bf0:	a0c00017 	ldw	r3,0(r20)
  201bf4:	88c00015 	stw	r3,0(r17)
  201bf8:	a0c00117 	ldw	r3,4(r20)
  201bfc:	88c00115 	stw	r3,4(r17)
  201c00:	00c006c4 	movi	r3,27
  201c04:	1980ac36 	bltu	r3,r6,201eb8 <_realloc_r+0x474>
  201c08:	88800204 	addi	r2,r17,8
  201c0c:	a0c00204 	addi	r3,r20,8
  201c10:	19000017 	ldw	r4,0(r3)
  201c14:	11000015 	stw	r4,0(r2)
  201c18:	19000117 	ldw	r4,4(r3)
  201c1c:	11000115 	stw	r4,4(r2)
  201c20:	18c00217 	ldw	r3,8(r3)
  201c24:	10c00215 	stw	r3,8(r2)
  201c28:	a00b883a 	mov	r5,r20
  201c2c:	9009883a 	mov	r4,r18
  201c30:	02027fc0 	call	2027fc <_free_r>
  201c34:	9009883a 	mov	r4,r18
  201c38:	02035140 	call	203514 <__malloc_unlock>
  201c3c:	8805883a 	mov	r2,r17
  201c40:	003fc506 	br	201b58 <_realloc_r+0x114>
  201c44:	00800304 	movi	r2,12
  201c48:	90800015 	stw	r2,0(r18)
  201c4c:	0005883a 	mov	r2,zero
  201c50:	003fc106 	br	201b58 <_realloc_r+0x114>
  201c54:	29800117 	ldw	r6,4(r5)
  201c58:	00bfff04 	movi	r2,-4
  201c5c:	b1000404 	addi	r4,r22,16
  201c60:	3084703a 	and	r2,r6,r2
  201c64:	140d883a 	add	r6,r2,r16
  201c68:	31005b0e 	bge	r6,r4,201dd8 <_realloc_r+0x394>
  201c6c:	2811883a 	mov	r8,r5
  201c70:	18c0004c 	andi	r3,r3,1
  201c74:	183fce1e 	bne	r3,zero,201bb0 <_realloc_r+0x16c>
  201c78:	a4fffe17 	ldw	r19,-8(r20)
  201c7c:	00ffff04 	movi	r3,-4
  201c80:	ace7c83a 	sub	r19,r21,r19
  201c84:	99000117 	ldw	r4,4(r19)
  201c88:	20c6703a 	and	r3,r4,r3
  201c8c:	403fc526 	beq	r8,zero,201ba4 <_realloc_r+0x160>
  201c90:	1c2f883a 	add	r23,r3,r16
  201c94:	b8af883a 	add	r23,r23,r2
  201c98:	41406026 	beq	r8,r5,201e1c <_realloc_r+0x3d8>
  201c9c:	b9ffc116 	blt	r23,r7,201ba4 <_realloc_r+0x160>
  201ca0:	40c00217 	ldw	r3,8(r8)
  201ca4:	40800317 	ldw	r2,12(r8)
  201ca8:	81bfff04 	addi	r6,r16,-4
  201cac:	01000904 	movi	r4,36
  201cb0:	18800315 	stw	r2,12(r3)
  201cb4:	10c00215 	stw	r3,8(r2)
  201cb8:	99400217 	ldw	r5,8(r19)
  201cbc:	98c00317 	ldw	r3,12(r19)
  201cc0:	9c400204 	addi	r17,r19,8
  201cc4:	28c00315 	stw	r3,12(r5)
  201cc8:	19400215 	stw	r5,8(r3)
  201ccc:	21802d36 	bltu	r4,r6,201d84 <_realloc_r+0x340>
  201cd0:	008004c4 	movi	r2,19
  201cd4:	1180352e 	bgeu	r2,r6,201dac <_realloc_r+0x368>
  201cd8:	a0800017 	ldw	r2,0(r20)
  201cdc:	98800215 	stw	r2,8(r19)
  201ce0:	a0800117 	ldw	r2,4(r20)
  201ce4:	98800315 	stw	r2,12(r19)
  201ce8:	008006c4 	movi	r2,27
  201cec:	11808036 	bltu	r2,r6,201ef0 <_realloc_r+0x4ac>
  201cf0:	98c00404 	addi	r3,r19,16
  201cf4:	a5000204 	addi	r20,r20,8
  201cf8:	00002d06 	br	201db0 <_realloc_r+0x36c>
  201cfc:	1d86b03a 	or	r3,r3,r22
  201d00:	ad8b883a 	add	r5,r21,r22
  201d04:	a8c00115 	stw	r3,4(r21)
  201d08:	38800054 	ori	r2,r7,1
  201d0c:	28800115 	stw	r2,4(r5)
  201d10:	29cf883a 	add	r7,r5,r7
  201d14:	38800117 	ldw	r2,4(r7)
  201d18:	9009883a 	mov	r4,r18
  201d1c:	29400204 	addi	r5,r5,8
  201d20:	10800054 	ori	r2,r2,1
  201d24:	38800115 	stw	r2,4(r7)
  201d28:	02027fc0 	call	2027fc <_free_r>
  201d2c:	003f8706 	br	201b4c <_realloc_r+0x108>
  201d30:	300b883a 	mov	r5,r6
  201d34:	dfc00917 	ldw	ra,36(sp)
  201d38:	df000817 	ldw	fp,32(sp)
  201d3c:	ddc00717 	ldw	r23,28(sp)
  201d40:	dd800617 	ldw	r22,24(sp)
  201d44:	dd400517 	ldw	r21,20(sp)
  201d48:	dd000417 	ldw	r20,16(sp)
  201d4c:	dcc00317 	ldw	r19,12(sp)
  201d50:	dc800217 	ldw	r18,8(sp)
  201d54:	dc400117 	ldw	r17,4(sp)
  201d58:	dc000017 	ldw	r16,0(sp)
  201d5c:	dec00a04 	addi	sp,sp,40
  201d60:	0200dfc1 	jmpi	200dfc <_malloc_r>
  201d64:	98800317 	ldw	r2,12(r19)
  201d68:	98c00217 	ldw	r3,8(r19)
  201d6c:	81bfff04 	addi	r6,r16,-4
  201d70:	01000904 	movi	r4,36
  201d74:	18800315 	stw	r2,12(r3)
  201d78:	10c00215 	stw	r3,8(r2)
  201d7c:	9c400204 	addi	r17,r19,8
  201d80:	21bfd32e 	bgeu	r4,r6,201cd0 <_realloc_r+0x28c>
  201d84:	8809883a 	mov	r4,r17
  201d88:	a00b883a 	mov	r5,r20
  201d8c:	02017c40 	call	2017c4 <memmove>
  201d90:	98c00117 	ldw	r3,4(r19)
  201d94:	b821883a 	mov	r16,r23
  201d98:	982b883a 	mov	r21,r19
  201d9c:	003f6106 	br	201b24 <_realloc_r+0xe0>
  201da0:	8805883a 	mov	r2,r17
  201da4:	a007883a 	mov	r3,r20
  201da8:	003f9906 	br	201c10 <_realloc_r+0x1cc>
  201dac:	8807883a 	mov	r3,r17
  201db0:	a0800017 	ldw	r2,0(r20)
  201db4:	b821883a 	mov	r16,r23
  201db8:	982b883a 	mov	r21,r19
  201dbc:	18800015 	stw	r2,0(r3)
  201dc0:	a0800117 	ldw	r2,4(r20)
  201dc4:	18800115 	stw	r2,4(r3)
  201dc8:	a0800217 	ldw	r2,8(r20)
  201dcc:	18800215 	stw	r2,8(r3)
  201dd0:	98c00117 	ldw	r3,4(r19)
  201dd4:	003f5306 	br	201b24 <_realloc_r+0xe0>
  201dd8:	adab883a 	add	r21,r21,r22
  201ddc:	3585c83a 	sub	r2,r6,r22
  201de0:	e5400215 	stw	r21,8(fp)
  201de4:	10800054 	ori	r2,r2,1
  201de8:	a8800115 	stw	r2,4(r21)
  201dec:	a0bfff17 	ldw	r2,-4(r20)
  201df0:	9009883a 	mov	r4,r18
  201df4:	1080004c 	andi	r2,r2,1
  201df8:	b0acb03a 	or	r22,r22,r2
  201dfc:	a5bfff15 	stw	r22,-4(r20)
  201e00:	02035140 	call	203514 <__malloc_unlock>
  201e04:	a005883a 	mov	r2,r20
  201e08:	003f5306 	br	201b58 <_realloc_r+0x114>
  201e0c:	8809883a 	mov	r4,r17
  201e10:	a00b883a 	mov	r5,r20
  201e14:	02017c40 	call	2017c4 <memmove>
  201e18:	003f8306 	br	201c28 <_realloc_r+0x1e4>
  201e1c:	b0800404 	addi	r2,r22,16
  201e20:	b8bf6016 	blt	r23,r2,201ba4 <_realloc_r+0x160>
  201e24:	98800317 	ldw	r2,12(r19)
  201e28:	98c00217 	ldw	r3,8(r19)
  201e2c:	81bfff04 	addi	r6,r16,-4
  201e30:	01000904 	movi	r4,36
  201e34:	18800315 	stw	r2,12(r3)
  201e38:	10c00215 	stw	r3,8(r2)
  201e3c:	9c400204 	addi	r17,r19,8
  201e40:	21804336 	bltu	r4,r6,201f50 <_realloc_r+0x50c>
  201e44:	008004c4 	movi	r2,19
  201e48:	11803f2e 	bgeu	r2,r6,201f48 <_realloc_r+0x504>
  201e4c:	a0800017 	ldw	r2,0(r20)
  201e50:	98800215 	stw	r2,8(r19)
  201e54:	a0800117 	ldw	r2,4(r20)
  201e58:	98800315 	stw	r2,12(r19)
  201e5c:	008006c4 	movi	r2,27
  201e60:	11803f36 	bltu	r2,r6,201f60 <_realloc_r+0x51c>
  201e64:	98800404 	addi	r2,r19,16
  201e68:	a5000204 	addi	r20,r20,8
  201e6c:	a0c00017 	ldw	r3,0(r20)
  201e70:	10c00015 	stw	r3,0(r2)
  201e74:	a0c00117 	ldw	r3,4(r20)
  201e78:	10c00115 	stw	r3,4(r2)
  201e7c:	a0c00217 	ldw	r3,8(r20)
  201e80:	10c00215 	stw	r3,8(r2)
  201e84:	9d87883a 	add	r3,r19,r22
  201e88:	bd85c83a 	sub	r2,r23,r22
  201e8c:	e0c00215 	stw	r3,8(fp)
  201e90:	10800054 	ori	r2,r2,1
  201e94:	18800115 	stw	r2,4(r3)
  201e98:	98800117 	ldw	r2,4(r19)
  201e9c:	9009883a 	mov	r4,r18
  201ea0:	1080004c 	andi	r2,r2,1
  201ea4:	b0acb03a 	or	r22,r22,r2
  201ea8:	9d800115 	stw	r22,4(r19)
  201eac:	02035140 	call	203514 <__malloc_unlock>
  201eb0:	8805883a 	mov	r2,r17
  201eb4:	003f2806 	br	201b58 <_realloc_r+0x114>
  201eb8:	a0c00217 	ldw	r3,8(r20)
  201ebc:	88c00215 	stw	r3,8(r17)
  201ec0:	a0c00317 	ldw	r3,12(r20)
  201ec4:	88c00315 	stw	r3,12(r17)
  201ec8:	30801126 	beq	r6,r2,201f10 <_realloc_r+0x4cc>
  201ecc:	88800404 	addi	r2,r17,16
  201ed0:	a0c00404 	addi	r3,r20,16
  201ed4:	003f4e06 	br	201c10 <_realloc_r+0x1cc>
  201ed8:	893fff17 	ldw	r4,-4(r17)
  201edc:	00bfff04 	movi	r2,-4
  201ee0:	a023883a 	mov	r17,r20
  201ee4:	2084703a 	and	r2,r4,r2
  201ee8:	80a1883a 	add	r16,r16,r2
  201eec:	003f0d06 	br	201b24 <_realloc_r+0xe0>
  201ef0:	a0800217 	ldw	r2,8(r20)
  201ef4:	98800415 	stw	r2,16(r19)
  201ef8:	a0800317 	ldw	r2,12(r20)
  201efc:	98800515 	stw	r2,20(r19)
  201f00:	31000a26 	beq	r6,r4,201f2c <_realloc_r+0x4e8>
  201f04:	98c00604 	addi	r3,r19,24
  201f08:	a5000404 	addi	r20,r20,16
  201f0c:	003fa806 	br	201db0 <_realloc_r+0x36c>
  201f10:	a1000417 	ldw	r4,16(r20)
  201f14:	88800604 	addi	r2,r17,24
  201f18:	a0c00604 	addi	r3,r20,24
  201f1c:	89000415 	stw	r4,16(r17)
  201f20:	a1000517 	ldw	r4,20(r20)
  201f24:	89000515 	stw	r4,20(r17)
  201f28:	003f3906 	br	201c10 <_realloc_r+0x1cc>
  201f2c:	a0800417 	ldw	r2,16(r20)
  201f30:	a5000604 	addi	r20,r20,24
  201f34:	98c00804 	addi	r3,r19,32
  201f38:	98800615 	stw	r2,24(r19)
  201f3c:	a0bfff17 	ldw	r2,-4(r20)
  201f40:	98800715 	stw	r2,28(r19)
  201f44:	003f9a06 	br	201db0 <_realloc_r+0x36c>
  201f48:	8805883a 	mov	r2,r17
  201f4c:	003fc706 	br	201e6c <_realloc_r+0x428>
  201f50:	8809883a 	mov	r4,r17
  201f54:	a00b883a 	mov	r5,r20
  201f58:	02017c40 	call	2017c4 <memmove>
  201f5c:	003fc906 	br	201e84 <_realloc_r+0x440>
  201f60:	a0800217 	ldw	r2,8(r20)
  201f64:	98800415 	stw	r2,16(r19)
  201f68:	a0800317 	ldw	r2,12(r20)
  201f6c:	98800515 	stw	r2,20(r19)
  201f70:	31000726 	beq	r6,r4,201f90 <_realloc_r+0x54c>
  201f74:	98800604 	addi	r2,r19,24
  201f78:	a5000404 	addi	r20,r20,16
  201f7c:	003fbb06 	br	201e6c <_realloc_r+0x428>
  201f80:	9009883a 	mov	r4,r18
  201f84:	02035140 	call	203514 <__malloc_unlock>
  201f88:	0005883a 	mov	r2,zero
  201f8c:	003ef206 	br	201b58 <_realloc_r+0x114>
  201f90:	a0c00417 	ldw	r3,16(r20)
  201f94:	a5000604 	addi	r20,r20,24
  201f98:	98800804 	addi	r2,r19,32
  201f9c:	98c00615 	stw	r3,24(r19)
  201fa0:	a0ffff17 	ldw	r3,-4(r20)
  201fa4:	98c00715 	stw	r3,28(r19)
  201fa8:	003fb006 	br	201e6c <_realloc_r+0x428>

00201fac <_sbrk_r>:
  201fac:	defffd04 	addi	sp,sp,-12
  201fb0:	dc000015 	stw	r16,0(sp)
  201fb4:	04000874 	movhi	r16,33
  201fb8:	dc400115 	stw	r17,4(sp)
  201fbc:	84235a04 	addi	r16,r16,-29336
  201fc0:	2023883a 	mov	r17,r4
  201fc4:	2809883a 	mov	r4,r5
  201fc8:	dfc00215 	stw	ra,8(sp)
  201fcc:	80000015 	stw	zero,0(r16)
  201fd0:	02036e00 	call	2036e0 <sbrk>
  201fd4:	00ffffc4 	movi	r3,-1
  201fd8:	10c00526 	beq	r2,r3,201ff0 <_sbrk_r+0x44>
  201fdc:	dfc00217 	ldw	ra,8(sp)
  201fe0:	dc400117 	ldw	r17,4(sp)
  201fe4:	dc000017 	ldw	r16,0(sp)
  201fe8:	dec00304 	addi	sp,sp,12
  201fec:	f800283a 	ret
  201ff0:	80c00017 	ldw	r3,0(r16)
  201ff4:	183ff926 	beq	r3,zero,201fdc <_sbrk_r+0x30>
  201ff8:	88c00015 	stw	r3,0(r17)
  201ffc:	003ff706 	br	201fdc <_sbrk_r+0x30>

00202000 <__sread>:
  202000:	defffe04 	addi	sp,sp,-8
  202004:	dc000015 	stw	r16,0(sp)
  202008:	2821883a 	mov	r16,r5
  20200c:	2940038f 	ldh	r5,14(r5)
  202010:	dfc00115 	stw	ra,4(sp)
  202014:	0202d000 	call	202d00 <_read_r>
  202018:	10000716 	blt	r2,zero,202038 <__sread+0x38>
  20201c:	80c01417 	ldw	r3,80(r16)
  202020:	1887883a 	add	r3,r3,r2
  202024:	80c01415 	stw	r3,80(r16)
  202028:	dfc00117 	ldw	ra,4(sp)
  20202c:	dc000017 	ldw	r16,0(sp)
  202030:	dec00204 	addi	sp,sp,8
  202034:	f800283a 	ret
  202038:	80c0030b 	ldhu	r3,12(r16)
  20203c:	18fbffcc 	andi	r3,r3,61439
  202040:	80c0030d 	sth	r3,12(r16)
  202044:	dfc00117 	ldw	ra,4(sp)
  202048:	dc000017 	ldw	r16,0(sp)
  20204c:	dec00204 	addi	sp,sp,8
  202050:	f800283a 	ret

00202054 <__seofread>:
  202054:	0005883a 	mov	r2,zero
  202058:	f800283a 	ret

0020205c <__swrite>:
  20205c:	2880030b 	ldhu	r2,12(r5)
  202060:	defffb04 	addi	sp,sp,-20
  202064:	dcc00315 	stw	r19,12(sp)
  202068:	dc800215 	stw	r18,8(sp)
  20206c:	dc400115 	stw	r17,4(sp)
  202070:	dc000015 	stw	r16,0(sp)
  202074:	dfc00415 	stw	ra,16(sp)
  202078:	10c0400c 	andi	r3,r2,256
  20207c:	2821883a 	mov	r16,r5
  202080:	2027883a 	mov	r19,r4
  202084:	3025883a 	mov	r18,r6
  202088:	3823883a 	mov	r17,r7
  20208c:	18000526 	beq	r3,zero,2020a4 <__swrite+0x48>
  202090:	2940038f 	ldh	r5,14(r5)
  202094:	000d883a 	mov	r6,zero
  202098:	01c00084 	movi	r7,2
  20209c:	0202aec0 	call	202aec <_lseek_r>
  2020a0:	8080030b 	ldhu	r2,12(r16)
  2020a4:	8140038f 	ldh	r5,14(r16)
  2020a8:	10bbffcc 	andi	r2,r2,61439
  2020ac:	9809883a 	mov	r4,r19
  2020b0:	900d883a 	mov	r6,r18
  2020b4:	880f883a 	mov	r7,r17
  2020b8:	8080030d 	sth	r2,12(r16)
  2020bc:	dfc00417 	ldw	ra,16(sp)
  2020c0:	dcc00317 	ldw	r19,12(sp)
  2020c4:	dc800217 	ldw	r18,8(sp)
  2020c8:	dc400117 	ldw	r17,4(sp)
  2020cc:	dc000017 	ldw	r16,0(sp)
  2020d0:	dec00504 	addi	sp,sp,20
  2020d4:	020213c1 	jmpi	20213c <_write_r>

002020d8 <__sseek>:
  2020d8:	defffe04 	addi	sp,sp,-8
  2020dc:	dc000015 	stw	r16,0(sp)
  2020e0:	2821883a 	mov	r16,r5
  2020e4:	2940038f 	ldh	r5,14(r5)
  2020e8:	dfc00115 	stw	ra,4(sp)
  2020ec:	0202aec0 	call	202aec <_lseek_r>
  2020f0:	00ffffc4 	movi	r3,-1
  2020f4:	10c00826 	beq	r2,r3,202118 <__sseek+0x40>
  2020f8:	80c0030b 	ldhu	r3,12(r16)
  2020fc:	80801415 	stw	r2,80(r16)
  202100:	18c40014 	ori	r3,r3,4096
  202104:	80c0030d 	sth	r3,12(r16)
  202108:	dfc00117 	ldw	ra,4(sp)
  20210c:	dc000017 	ldw	r16,0(sp)
  202110:	dec00204 	addi	sp,sp,8
  202114:	f800283a 	ret
  202118:	80c0030b 	ldhu	r3,12(r16)
  20211c:	18fbffcc 	andi	r3,r3,61439
  202120:	80c0030d 	sth	r3,12(r16)
  202124:	dfc00117 	ldw	ra,4(sp)
  202128:	dc000017 	ldw	r16,0(sp)
  20212c:	dec00204 	addi	sp,sp,8
  202130:	f800283a 	ret

00202134 <__sclose>:
  202134:	2940038f 	ldh	r5,14(r5)
  202138:	02022ec1 	jmpi	2022ec <_close_r>

0020213c <_write_r>:
  20213c:	defffd04 	addi	sp,sp,-12
  202140:	dc000015 	stw	r16,0(sp)
  202144:	04000874 	movhi	r16,33
  202148:	dc400115 	stw	r17,4(sp)
  20214c:	84235a04 	addi	r16,r16,-29336
  202150:	2023883a 	mov	r17,r4
  202154:	2809883a 	mov	r4,r5
  202158:	300b883a 	mov	r5,r6
  20215c:	380d883a 	mov	r6,r7
  202160:	dfc00215 	stw	ra,8(sp)
  202164:	80000015 	stw	zero,0(r16)
  202168:	02037e00 	call	2037e0 <write>
  20216c:	00ffffc4 	movi	r3,-1
  202170:	10c00526 	beq	r2,r3,202188 <_write_r+0x4c>
  202174:	dfc00217 	ldw	ra,8(sp)
  202178:	dc400117 	ldw	r17,4(sp)
  20217c:	dc000017 	ldw	r16,0(sp)
  202180:	dec00304 	addi	sp,sp,12
  202184:	f800283a 	ret
  202188:	80c00017 	ldw	r3,0(r16)
  20218c:	183ff926 	beq	r3,zero,202174 <_write_r+0x38>
  202190:	88c00015 	stw	r3,0(r17)
  202194:	003ff706 	br	202174 <_write_r+0x38>

00202198 <__swsetup_r>:
  202198:	00800834 	movhi	r2,32
  20219c:	defffd04 	addi	sp,sp,-12
  2021a0:	109cab04 	addi	r2,r2,29356
  2021a4:	dc400115 	stw	r17,4(sp)
  2021a8:	2023883a 	mov	r17,r4
  2021ac:	11000017 	ldw	r4,0(r2)
  2021b0:	dc000015 	stw	r16,0(sp)
  2021b4:	dfc00215 	stw	ra,8(sp)
  2021b8:	2821883a 	mov	r16,r5
  2021bc:	20000226 	beq	r4,zero,2021c8 <__swsetup_r+0x30>
  2021c0:	20c00e17 	ldw	r3,56(r4)
  2021c4:	18003126 	beq	r3,zero,20228c <__swsetup_r+0xf4>
  2021c8:	8080030b 	ldhu	r2,12(r16)
  2021cc:	10c0020c 	andi	r3,r2,8
  2021d0:	100d883a 	mov	r6,r2
  2021d4:	18000f26 	beq	r3,zero,202214 <__swsetup_r+0x7c>
  2021d8:	80c00417 	ldw	r3,16(r16)
  2021dc:	18001526 	beq	r3,zero,202234 <__swsetup_r+0x9c>
  2021e0:	1100004c 	andi	r4,r2,1
  2021e4:	20001c1e 	bne	r4,zero,202258 <__swsetup_r+0xc0>
  2021e8:	1080008c 	andi	r2,r2,2
  2021ec:	1000291e 	bne	r2,zero,202294 <__swsetup_r+0xfc>
  2021f0:	80800517 	ldw	r2,20(r16)
  2021f4:	80800215 	stw	r2,8(r16)
  2021f8:	18001c26 	beq	r3,zero,20226c <__swsetup_r+0xd4>
  2021fc:	0005883a 	mov	r2,zero
  202200:	dfc00217 	ldw	ra,8(sp)
  202204:	dc400117 	ldw	r17,4(sp)
  202208:	dc000017 	ldw	r16,0(sp)
  20220c:	dec00304 	addi	sp,sp,12
  202210:	f800283a 	ret
  202214:	3080040c 	andi	r2,r6,16
  202218:	10002e26 	beq	r2,zero,2022d4 <__swsetup_r+0x13c>
  20221c:	3080010c 	andi	r2,r6,4
  202220:	10001e1e 	bne	r2,zero,20229c <__swsetup_r+0x104>
  202224:	80c00417 	ldw	r3,16(r16)
  202228:	30800214 	ori	r2,r6,8
  20222c:	8080030d 	sth	r2,12(r16)
  202230:	183feb1e 	bne	r3,zero,2021e0 <__swsetup_r+0x48>
  202234:	1140a00c 	andi	r5,r2,640
  202238:	01008004 	movi	r4,512
  20223c:	293fe826 	beq	r5,r4,2021e0 <__swsetup_r+0x48>
  202240:	8809883a 	mov	r4,r17
  202244:	800b883a 	mov	r5,r16
  202248:	0202b480 	call	202b48 <__smakebuf_r>
  20224c:	8080030b 	ldhu	r2,12(r16)
  202250:	80c00417 	ldw	r3,16(r16)
  202254:	003fe206 	br	2021e0 <__swsetup_r+0x48>
  202258:	80800517 	ldw	r2,20(r16)
  20225c:	80000215 	stw	zero,8(r16)
  202260:	0085c83a 	sub	r2,zero,r2
  202264:	80800615 	stw	r2,24(r16)
  202268:	183fe41e 	bne	r3,zero,2021fc <__swsetup_r+0x64>
  20226c:	80c0030b 	ldhu	r3,12(r16)
  202270:	0005883a 	mov	r2,zero
  202274:	1900200c 	andi	r4,r3,128
  202278:	203fe126 	beq	r4,zero,202200 <__swsetup_r+0x68>
  20227c:	18c01014 	ori	r3,r3,64
  202280:	80c0030d 	sth	r3,12(r16)
  202284:	00bfffc4 	movi	r2,-1
  202288:	003fdd06 	br	202200 <__swsetup_r+0x68>
  20228c:	02007640 	call	200764 <__sinit>
  202290:	003fcd06 	br	2021c8 <__swsetup_r+0x30>
  202294:	0005883a 	mov	r2,zero
  202298:	003fd606 	br	2021f4 <__swsetup_r+0x5c>
  20229c:	81400c17 	ldw	r5,48(r16)
  2022a0:	28000626 	beq	r5,zero,2022bc <__swsetup_r+0x124>
  2022a4:	80801004 	addi	r2,r16,64
  2022a8:	28800326 	beq	r5,r2,2022b8 <__swsetup_r+0x120>
  2022ac:	8809883a 	mov	r4,r17
  2022b0:	02027fc0 	call	2027fc <_free_r>
  2022b4:	8180030b 	ldhu	r6,12(r16)
  2022b8:	80000c15 	stw	zero,48(r16)
  2022bc:	80c00417 	ldw	r3,16(r16)
  2022c0:	00bff6c4 	movi	r2,-37
  2022c4:	118c703a 	and	r6,r2,r6
  2022c8:	80000115 	stw	zero,4(r16)
  2022cc:	80c00015 	stw	r3,0(r16)
  2022d0:	003fd506 	br	202228 <__swsetup_r+0x90>
  2022d4:	00800244 	movi	r2,9
  2022d8:	88800015 	stw	r2,0(r17)
  2022dc:	30801014 	ori	r2,r6,64
  2022e0:	8080030d 	sth	r2,12(r16)
  2022e4:	00bfffc4 	movi	r2,-1
  2022e8:	003fc506 	br	202200 <__swsetup_r+0x68>

002022ec <_close_r>:
  2022ec:	defffd04 	addi	sp,sp,-12
  2022f0:	dc000015 	stw	r16,0(sp)
  2022f4:	04000874 	movhi	r16,33
  2022f8:	dc400115 	stw	r17,4(sp)
  2022fc:	84235a04 	addi	r16,r16,-29336
  202300:	2023883a 	mov	r17,r4
  202304:	2809883a 	mov	r4,r5
  202308:	dfc00215 	stw	ra,8(sp)
  20230c:	80000015 	stw	zero,0(r16)
  202310:	0202f840 	call	202f84 <close>
  202314:	00ffffc4 	movi	r3,-1
  202318:	10c00526 	beq	r2,r3,202330 <_close_r+0x44>
  20231c:	dfc00217 	ldw	ra,8(sp)
  202320:	dc400117 	ldw	r17,4(sp)
  202324:	dc000017 	ldw	r16,0(sp)
  202328:	dec00304 	addi	sp,sp,12
  20232c:	f800283a 	ret
  202330:	80c00017 	ldw	r3,0(r16)
  202334:	183ff926 	beq	r3,zero,20231c <_close_r+0x30>
  202338:	88c00015 	stw	r3,0(r17)
  20233c:	003ff706 	br	20231c <_close_r+0x30>

00202340 <_fclose_r>:
  202340:	28003926 	beq	r5,zero,202428 <_fclose_r+0xe8>
  202344:	defffc04 	addi	sp,sp,-16
  202348:	dc400115 	stw	r17,4(sp)
  20234c:	dc000015 	stw	r16,0(sp)
  202350:	dfc00315 	stw	ra,12(sp)
  202354:	dc800215 	stw	r18,8(sp)
  202358:	2023883a 	mov	r17,r4
  20235c:	2821883a 	mov	r16,r5
  202360:	20000226 	beq	r4,zero,20236c <_fclose_r+0x2c>
  202364:	20800e17 	ldw	r2,56(r4)
  202368:	10002726 	beq	r2,zero,202408 <_fclose_r+0xc8>
  20236c:	8080030f 	ldh	r2,12(r16)
  202370:	1000071e 	bne	r2,zero,202390 <_fclose_r+0x50>
  202374:	0005883a 	mov	r2,zero
  202378:	dfc00317 	ldw	ra,12(sp)
  20237c:	dc800217 	ldw	r18,8(sp)
  202380:	dc400117 	ldw	r17,4(sp)
  202384:	dc000017 	ldw	r16,0(sp)
  202388:	dec00404 	addi	sp,sp,16
  20238c:	f800283a 	ret
  202390:	8809883a 	mov	r4,r17
  202394:	800b883a 	mov	r5,r16
  202398:	02024440 	call	202444 <__sflush_r>
  20239c:	1025883a 	mov	r18,r2
  2023a0:	80800b17 	ldw	r2,44(r16)
  2023a4:	10000426 	beq	r2,zero,2023b8 <_fclose_r+0x78>
  2023a8:	81400717 	ldw	r5,28(r16)
  2023ac:	8809883a 	mov	r4,r17
  2023b0:	103ee83a 	callr	r2
  2023b4:	10001616 	blt	r2,zero,202410 <_fclose_r+0xd0>
  2023b8:	8080030b 	ldhu	r2,12(r16)
  2023bc:	1080200c 	andi	r2,r2,128
  2023c0:	1000151e 	bne	r2,zero,202418 <_fclose_r+0xd8>
  2023c4:	81400c17 	ldw	r5,48(r16)
  2023c8:	28000526 	beq	r5,zero,2023e0 <_fclose_r+0xa0>
  2023cc:	80801004 	addi	r2,r16,64
  2023d0:	28800226 	beq	r5,r2,2023dc <_fclose_r+0x9c>
  2023d4:	8809883a 	mov	r4,r17
  2023d8:	02027fc0 	call	2027fc <_free_r>
  2023dc:	80000c15 	stw	zero,48(r16)
  2023e0:	81401117 	ldw	r5,68(r16)
  2023e4:	28000326 	beq	r5,zero,2023f4 <_fclose_r+0xb4>
  2023e8:	8809883a 	mov	r4,r17
  2023ec:	02027fc0 	call	2027fc <_free_r>
  2023f0:	80001115 	stw	zero,68(r16)
  2023f4:	02007740 	call	200774 <__sfp_lock_acquire>
  2023f8:	8000030d 	sth	zero,12(r16)
  2023fc:	02007780 	call	200778 <__sfp_lock_release>
  202400:	9005883a 	mov	r2,r18
  202404:	003fdc06 	br	202378 <_fclose_r+0x38>
  202408:	02007640 	call	200764 <__sinit>
  20240c:	003fd706 	br	20236c <_fclose_r+0x2c>
  202410:	04bfffc4 	movi	r18,-1
  202414:	003fe806 	br	2023b8 <_fclose_r+0x78>
  202418:	81400417 	ldw	r5,16(r16)
  20241c:	8809883a 	mov	r4,r17
  202420:	02027fc0 	call	2027fc <_free_r>
  202424:	003fe706 	br	2023c4 <_fclose_r+0x84>
  202428:	0005883a 	mov	r2,zero
  20242c:	f800283a 	ret

00202430 <fclose>:
  202430:	00800834 	movhi	r2,32
  202434:	109cab04 	addi	r2,r2,29356
  202438:	200b883a 	mov	r5,r4
  20243c:	11000017 	ldw	r4,0(r2)
  202440:	02023401 	jmpi	202340 <_fclose_r>

00202444 <__sflush_r>:
  202444:	2880030b 	ldhu	r2,12(r5)
  202448:	defffb04 	addi	sp,sp,-20
  20244c:	dcc00315 	stw	r19,12(sp)
  202450:	dc400115 	stw	r17,4(sp)
  202454:	dfc00415 	stw	ra,16(sp)
  202458:	dc800215 	stw	r18,8(sp)
  20245c:	dc000015 	stw	r16,0(sp)
  202460:	10c0020c 	andi	r3,r2,8
  202464:	2823883a 	mov	r17,r5
  202468:	2027883a 	mov	r19,r4
  20246c:	1800311e 	bne	r3,zero,202534 <__sflush_r+0xf0>
  202470:	28c00117 	ldw	r3,4(r5)
  202474:	10820014 	ori	r2,r2,2048
  202478:	2880030d 	sth	r2,12(r5)
  20247c:	00c04b0e 	bge	zero,r3,2025ac <__sflush_r+0x168>
  202480:	8a000a17 	ldw	r8,40(r17)
  202484:	40002326 	beq	r8,zero,202514 <__sflush_r+0xd0>
  202488:	9c000017 	ldw	r16,0(r19)
  20248c:	10c4000c 	andi	r3,r2,4096
  202490:	98000015 	stw	zero,0(r19)
  202494:	18004826 	beq	r3,zero,2025b8 <__sflush_r+0x174>
  202498:	89801417 	ldw	r6,80(r17)
  20249c:	10c0010c 	andi	r3,r2,4
  2024a0:	18000626 	beq	r3,zero,2024bc <__sflush_r+0x78>
  2024a4:	88c00117 	ldw	r3,4(r17)
  2024a8:	88800c17 	ldw	r2,48(r17)
  2024ac:	30cdc83a 	sub	r6,r6,r3
  2024b0:	10000226 	beq	r2,zero,2024bc <__sflush_r+0x78>
  2024b4:	88800f17 	ldw	r2,60(r17)
  2024b8:	308dc83a 	sub	r6,r6,r2
  2024bc:	89400717 	ldw	r5,28(r17)
  2024c0:	9809883a 	mov	r4,r19
  2024c4:	000f883a 	mov	r7,zero
  2024c8:	403ee83a 	callr	r8
  2024cc:	00ffffc4 	movi	r3,-1
  2024d0:	10c04426 	beq	r2,r3,2025e4 <__sflush_r+0x1a0>
  2024d4:	88c0030b 	ldhu	r3,12(r17)
  2024d8:	89000417 	ldw	r4,16(r17)
  2024dc:	88000115 	stw	zero,4(r17)
  2024e0:	197dffcc 	andi	r5,r3,63487
  2024e4:	8940030d 	sth	r5,12(r17)
  2024e8:	89000015 	stw	r4,0(r17)
  2024ec:	18c4000c 	andi	r3,r3,4096
  2024f0:	18002c1e 	bne	r3,zero,2025a4 <__sflush_r+0x160>
  2024f4:	89400c17 	ldw	r5,48(r17)
  2024f8:	9c000015 	stw	r16,0(r19)
  2024fc:	28000526 	beq	r5,zero,202514 <__sflush_r+0xd0>
  202500:	88801004 	addi	r2,r17,64
  202504:	28800226 	beq	r5,r2,202510 <__sflush_r+0xcc>
  202508:	9809883a 	mov	r4,r19
  20250c:	02027fc0 	call	2027fc <_free_r>
  202510:	88000c15 	stw	zero,48(r17)
  202514:	0005883a 	mov	r2,zero
  202518:	dfc00417 	ldw	ra,16(sp)
  20251c:	dcc00317 	ldw	r19,12(sp)
  202520:	dc800217 	ldw	r18,8(sp)
  202524:	dc400117 	ldw	r17,4(sp)
  202528:	dc000017 	ldw	r16,0(sp)
  20252c:	dec00504 	addi	sp,sp,20
  202530:	f800283a 	ret
  202534:	2c800417 	ldw	r18,16(r5)
  202538:	903ff626 	beq	r18,zero,202514 <__sflush_r+0xd0>
  20253c:	2c000017 	ldw	r16,0(r5)
  202540:	108000cc 	andi	r2,r2,3
  202544:	2c800015 	stw	r18,0(r5)
  202548:	84a1c83a 	sub	r16,r16,r18
  20254c:	1000131e 	bne	r2,zero,20259c <__sflush_r+0x158>
  202550:	28800517 	ldw	r2,20(r5)
  202554:	88800215 	stw	r2,8(r17)
  202558:	04000316 	blt	zero,r16,202568 <__sflush_r+0x124>
  20255c:	003fed06 	br	202514 <__sflush_r+0xd0>
  202560:	90a5883a 	add	r18,r18,r2
  202564:	043feb0e 	bge	zero,r16,202514 <__sflush_r+0xd0>
  202568:	88800917 	ldw	r2,36(r17)
  20256c:	89400717 	ldw	r5,28(r17)
  202570:	800f883a 	mov	r7,r16
  202574:	900d883a 	mov	r6,r18
  202578:	9809883a 	mov	r4,r19
  20257c:	103ee83a 	callr	r2
  202580:	80a1c83a 	sub	r16,r16,r2
  202584:	00bff616 	blt	zero,r2,202560 <__sflush_r+0x11c>
  202588:	88c0030b 	ldhu	r3,12(r17)
  20258c:	00bfffc4 	movi	r2,-1
  202590:	18c01014 	ori	r3,r3,64
  202594:	88c0030d 	sth	r3,12(r17)
  202598:	003fdf06 	br	202518 <__sflush_r+0xd4>
  20259c:	0005883a 	mov	r2,zero
  2025a0:	003fec06 	br	202554 <__sflush_r+0x110>
  2025a4:	88801415 	stw	r2,80(r17)
  2025a8:	003fd206 	br	2024f4 <__sflush_r+0xb0>
  2025ac:	28c00f17 	ldw	r3,60(r5)
  2025b0:	00ffb316 	blt	zero,r3,202480 <__sflush_r+0x3c>
  2025b4:	003fd706 	br	202514 <__sflush_r+0xd0>
  2025b8:	89400717 	ldw	r5,28(r17)
  2025bc:	000d883a 	mov	r6,zero
  2025c0:	9809883a 	mov	r4,r19
  2025c4:	01c00044 	movi	r7,1
  2025c8:	403ee83a 	callr	r8
  2025cc:	100d883a 	mov	r6,r2
  2025d0:	00bfffc4 	movi	r2,-1
  2025d4:	30801426 	beq	r6,r2,202628 <__sflush_r+0x1e4>
  2025d8:	8880030b 	ldhu	r2,12(r17)
  2025dc:	8a000a17 	ldw	r8,40(r17)
  2025e0:	003fae06 	br	20249c <__sflush_r+0x58>
  2025e4:	98c00017 	ldw	r3,0(r19)
  2025e8:	183fba26 	beq	r3,zero,2024d4 <__sflush_r+0x90>
  2025ec:	01000744 	movi	r4,29
  2025f0:	19000626 	beq	r3,r4,20260c <__sflush_r+0x1c8>
  2025f4:	01000584 	movi	r4,22
  2025f8:	19000426 	beq	r3,r4,20260c <__sflush_r+0x1c8>
  2025fc:	88c0030b 	ldhu	r3,12(r17)
  202600:	18c01014 	ori	r3,r3,64
  202604:	88c0030d 	sth	r3,12(r17)
  202608:	003fc306 	br	202518 <__sflush_r+0xd4>
  20260c:	8880030b 	ldhu	r2,12(r17)
  202610:	88c00417 	ldw	r3,16(r17)
  202614:	88000115 	stw	zero,4(r17)
  202618:	10bdffcc 	andi	r2,r2,63487
  20261c:	8880030d 	sth	r2,12(r17)
  202620:	88c00015 	stw	r3,0(r17)
  202624:	003fb306 	br	2024f4 <__sflush_r+0xb0>
  202628:	98800017 	ldw	r2,0(r19)
  20262c:	103fea26 	beq	r2,zero,2025d8 <__sflush_r+0x194>
  202630:	00c00744 	movi	r3,29
  202634:	10c00226 	beq	r2,r3,202640 <__sflush_r+0x1fc>
  202638:	00c00584 	movi	r3,22
  20263c:	10ffd21e 	bne	r2,r3,202588 <__sflush_r+0x144>
  202640:	9c000015 	stw	r16,0(r19)
  202644:	0005883a 	mov	r2,zero
  202648:	003fb306 	br	202518 <__sflush_r+0xd4>

0020264c <_fflush_r>:
  20264c:	defffd04 	addi	sp,sp,-12
  202650:	dc000115 	stw	r16,4(sp)
  202654:	dfc00215 	stw	ra,8(sp)
  202658:	2021883a 	mov	r16,r4
  20265c:	20000226 	beq	r4,zero,202668 <_fflush_r+0x1c>
  202660:	20800e17 	ldw	r2,56(r4)
  202664:	10000c26 	beq	r2,zero,202698 <_fflush_r+0x4c>
  202668:	2880030f 	ldh	r2,12(r5)
  20266c:	1000051e 	bne	r2,zero,202684 <_fflush_r+0x38>
  202670:	0005883a 	mov	r2,zero
  202674:	dfc00217 	ldw	ra,8(sp)
  202678:	dc000117 	ldw	r16,4(sp)
  20267c:	dec00304 	addi	sp,sp,12
  202680:	f800283a 	ret
  202684:	8009883a 	mov	r4,r16
  202688:	dfc00217 	ldw	ra,8(sp)
  20268c:	dc000117 	ldw	r16,4(sp)
  202690:	dec00304 	addi	sp,sp,12
  202694:	02024441 	jmpi	202444 <__sflush_r>
  202698:	d9400015 	stw	r5,0(sp)
  20269c:	02007640 	call	200764 <__sinit>
  2026a0:	d9400017 	ldw	r5,0(sp)
  2026a4:	003ff006 	br	202668 <_fflush_r+0x1c>

002026a8 <fflush>:
  2026a8:	20000526 	beq	r4,zero,2026c0 <fflush+0x18>
  2026ac:	00800834 	movhi	r2,32
  2026b0:	109cab04 	addi	r2,r2,29356
  2026b4:	200b883a 	mov	r5,r4
  2026b8:	11000017 	ldw	r4,0(r2)
  2026bc:	020264c1 	jmpi	20264c <_fflush_r>
  2026c0:	00800834 	movhi	r2,32
  2026c4:	109caa04 	addi	r2,r2,29352
  2026c8:	11000017 	ldw	r4,0(r2)
  2026cc:	01400834 	movhi	r5,32
  2026d0:	29499304 	addi	r5,r5,9804
  2026d4:	0200d381 	jmpi	200d38 <_fwalk_reent>

002026d8 <_malloc_trim_r>:
  2026d8:	defffb04 	addi	sp,sp,-20
  2026dc:	dcc00315 	stw	r19,12(sp)
  2026e0:	04c00834 	movhi	r19,32
  2026e4:	dc800215 	stw	r18,8(sp)
  2026e8:	dc400115 	stw	r17,4(sp)
  2026ec:	dc000015 	stw	r16,0(sp)
  2026f0:	dfc00415 	stw	ra,16(sp)
  2026f4:	2821883a 	mov	r16,r5
  2026f8:	9cd72604 	addi	r19,r19,23704
  2026fc:	2025883a 	mov	r18,r4
  202700:	02034f40 	call	2034f4 <__malloc_lock>
  202704:	98800217 	ldw	r2,8(r19)
  202708:	14400117 	ldw	r17,4(r2)
  20270c:	00bfff04 	movi	r2,-4
  202710:	88a2703a 	and	r17,r17,r2
  202714:	8c21c83a 	sub	r16,r17,r16
  202718:	8403fbc4 	addi	r16,r16,4079
  20271c:	8020d33a 	srli	r16,r16,12
  202720:	0083ffc4 	movi	r2,4095
  202724:	843fffc4 	addi	r16,r16,-1
  202728:	8020933a 	slli	r16,r16,12
  20272c:	1400060e 	bge	r2,r16,202748 <_malloc_trim_r+0x70>
  202730:	9009883a 	mov	r4,r18
  202734:	000b883a 	mov	r5,zero
  202738:	0201fac0 	call	201fac <_sbrk_r>
  20273c:	98c00217 	ldw	r3,8(r19)
  202740:	1c47883a 	add	r3,r3,r17
  202744:	10c00a26 	beq	r2,r3,202770 <_malloc_trim_r+0x98>
  202748:	9009883a 	mov	r4,r18
  20274c:	02035140 	call	203514 <__malloc_unlock>
  202750:	0005883a 	mov	r2,zero
  202754:	dfc00417 	ldw	ra,16(sp)
  202758:	dcc00317 	ldw	r19,12(sp)
  20275c:	dc800217 	ldw	r18,8(sp)
  202760:	dc400117 	ldw	r17,4(sp)
  202764:	dc000017 	ldw	r16,0(sp)
  202768:	dec00504 	addi	sp,sp,20
  20276c:	f800283a 	ret
  202770:	9009883a 	mov	r4,r18
  202774:	040bc83a 	sub	r5,zero,r16
  202778:	0201fac0 	call	201fac <_sbrk_r>
  20277c:	00ffffc4 	movi	r3,-1
  202780:	10c00d26 	beq	r2,r3,2027b8 <_malloc_trim_r+0xe0>
  202784:	00c00874 	movhi	r3,33
  202788:	18e36204 	addi	r3,r3,-29304
  20278c:	18800017 	ldw	r2,0(r3)
  202790:	99000217 	ldw	r4,8(r19)
  202794:	8c23c83a 	sub	r17,r17,r16
  202798:	8c400054 	ori	r17,r17,1
  20279c:	1421c83a 	sub	r16,r2,r16
  2027a0:	24400115 	stw	r17,4(r4)
  2027a4:	9009883a 	mov	r4,r18
  2027a8:	1c000015 	stw	r16,0(r3)
  2027ac:	02035140 	call	203514 <__malloc_unlock>
  2027b0:	00800044 	movi	r2,1
  2027b4:	003fe706 	br	202754 <_malloc_trim_r+0x7c>
  2027b8:	9009883a 	mov	r4,r18
  2027bc:	000b883a 	mov	r5,zero
  2027c0:	0201fac0 	call	201fac <_sbrk_r>
  2027c4:	99000217 	ldw	r4,8(r19)
  2027c8:	014003c4 	movi	r5,15
  2027cc:	1107c83a 	sub	r3,r2,r4
  2027d0:	28ffdd0e 	bge	r5,r3,202748 <_malloc_trim_r+0x70>
  2027d4:	01400834 	movhi	r5,32
  2027d8:	295cac04 	addi	r5,r5,29360
  2027dc:	29400017 	ldw	r5,0(r5)
  2027e0:	18c00054 	ori	r3,r3,1
  2027e4:	20c00115 	stw	r3,4(r4)
  2027e8:	00c00874 	movhi	r3,33
  2027ec:	1145c83a 	sub	r2,r2,r5
  2027f0:	18e36204 	addi	r3,r3,-29304
  2027f4:	18800015 	stw	r2,0(r3)
  2027f8:	003fd306 	br	202748 <_malloc_trim_r+0x70>

002027fc <_free_r>:
  2027fc:	28004c26 	beq	r5,zero,202930 <_free_r+0x134>
  202800:	defffd04 	addi	sp,sp,-12
  202804:	dc400115 	stw	r17,4(sp)
  202808:	dc000015 	stw	r16,0(sp)
  20280c:	2023883a 	mov	r17,r4
  202810:	2821883a 	mov	r16,r5
  202814:	dfc00215 	stw	ra,8(sp)
  202818:	02034f40 	call	2034f4 <__malloc_lock>
  20281c:	813fff17 	ldw	r4,-4(r16)
  202820:	00bfff84 	movi	r2,-2
  202824:	02400834 	movhi	r9,32
  202828:	81bffe04 	addi	r6,r16,-8
  20282c:	2084703a 	and	r2,r4,r2
  202830:	4a572604 	addi	r9,r9,23704
  202834:	308b883a 	add	r5,r6,r2
  202838:	2a000117 	ldw	r8,4(r5)
  20283c:	49c00217 	ldw	r7,8(r9)
  202840:	00ffff04 	movi	r3,-4
  202844:	40c6703a 	and	r3,r8,r3
  202848:	39405326 	beq	r7,r5,202998 <_free_r+0x19c>
  20284c:	28c00115 	stw	r3,4(r5)
  202850:	2100004c 	andi	r4,r4,1
  202854:	2000091e 	bne	r4,zero,20287c <_free_r+0x80>
  202858:	81fffe17 	ldw	r7,-8(r16)
  20285c:	4a000204 	addi	r8,r9,8
  202860:	31cdc83a 	sub	r6,r6,r7
  202864:	31000217 	ldw	r4,8(r6)
  202868:	11c5883a 	add	r2,r2,r7
  20286c:	22006126 	beq	r4,r8,2029f4 <_free_r+0x1f8>
  202870:	31c00317 	ldw	r7,12(r6)
  202874:	21c00315 	stw	r7,12(r4)
  202878:	39000215 	stw	r4,8(r7)
  20287c:	28c9883a 	add	r4,r5,r3
  202880:	21c00117 	ldw	r7,4(r4)
  202884:	39c0004c 	andi	r7,r7,1
  202888:	38000d1e 	bne	r7,zero,2028c0 <_free_r+0xc4>
  20288c:	29000217 	ldw	r4,8(r5)
  202890:	10c5883a 	add	r2,r2,r3
  202894:	00c00834 	movhi	r3,32
  202898:	18d72804 	addi	r3,r3,23712
  20289c:	20c07526 	beq	r4,r3,202a74 <_free_r+0x278>
  2028a0:	29c00317 	ldw	r7,12(r5)
  2028a4:	11400054 	ori	r5,r2,1
  2028a8:	3087883a 	add	r3,r6,r2
  2028ac:	21c00315 	stw	r7,12(r4)
  2028b0:	39000215 	stw	r4,8(r7)
  2028b4:	31400115 	stw	r5,4(r6)
  2028b8:	18800015 	stw	r2,0(r3)
  2028bc:	00000406 	br	2028d0 <_free_r+0xd4>
  2028c0:	10c00054 	ori	r3,r2,1
  2028c4:	30c00115 	stw	r3,4(r6)
  2028c8:	3087883a 	add	r3,r6,r2
  2028cc:	18800015 	stw	r2,0(r3)
  2028d0:	00c07fc4 	movi	r3,511
  2028d4:	18801736 	bltu	r3,r2,202934 <_free_r+0x138>
  2028d8:	1004d0fa 	srli	r2,r2,3
  2028dc:	01400044 	movi	r5,1
  2028e0:	49000117 	ldw	r4,4(r9)
  2028e4:	1087883a 	add	r3,r2,r2
  2028e8:	18c7883a 	add	r3,r3,r3
  2028ec:	1005d0ba 	srai	r2,r2,2
  2028f0:	18c7883a 	add	r3,r3,r3
  2028f4:	1a47883a 	add	r3,r3,r9
  2028f8:	19c00217 	ldw	r7,8(r3)
  2028fc:	2884983a 	sll	r2,r5,r2
  202900:	30c00315 	stw	r3,12(r6)
  202904:	31c00215 	stw	r7,8(r6)
  202908:	1104b03a 	or	r2,r2,r4
  20290c:	19800215 	stw	r6,8(r3)
  202910:	48800115 	stw	r2,4(r9)
  202914:	39800315 	stw	r6,12(r7)
  202918:	8809883a 	mov	r4,r17
  20291c:	dfc00217 	ldw	ra,8(sp)
  202920:	dc400117 	ldw	r17,4(sp)
  202924:	dc000017 	ldw	r16,0(sp)
  202928:	dec00304 	addi	sp,sp,12
  20292c:	02035141 	jmpi	203514 <__malloc_unlock>
  202930:	f800283a 	ret
  202934:	1006d27a 	srli	r3,r2,9
  202938:	01000104 	movi	r4,4
  20293c:	20c04036 	bltu	r4,r3,202a40 <_free_r+0x244>
  202940:	1006d1ba 	srli	r3,r2,6
  202944:	19400e04 	addi	r5,r3,56
  202948:	2947883a 	add	r3,r5,r5
  20294c:	18c7883a 	add	r3,r3,r3
  202950:	18c7883a 	add	r3,r3,r3
  202954:	1a49883a 	add	r4,r3,r9
  202958:	20c00217 	ldw	r3,8(r4)
  20295c:	01c00834 	movhi	r7,32
  202960:	39d72604 	addi	r7,r7,23704
  202964:	19003b26 	beq	r3,r4,202a54 <_free_r+0x258>
  202968:	01ffff04 	movi	r7,-4
  20296c:	19400117 	ldw	r5,4(r3)
  202970:	29ca703a 	and	r5,r5,r7
  202974:	1140022e 	bgeu	r2,r5,202980 <_free_r+0x184>
  202978:	18c00217 	ldw	r3,8(r3)
  20297c:	20fffb1e 	bne	r4,r3,20296c <_free_r+0x170>
  202980:	18800317 	ldw	r2,12(r3)
  202984:	30800315 	stw	r2,12(r6)
  202988:	30c00215 	stw	r3,8(r6)
  20298c:	11800215 	stw	r6,8(r2)
  202990:	19800315 	stw	r6,12(r3)
  202994:	003fe006 	br	202918 <_free_r+0x11c>
  202998:	2100004c 	andi	r4,r4,1
  20299c:	1885883a 	add	r2,r3,r2
  2029a0:	2000071e 	bne	r4,zero,2029c0 <_free_r+0x1c4>
  2029a4:	817ffe17 	ldw	r5,-8(r16)
  2029a8:	314dc83a 	sub	r6,r6,r5
  2029ac:	30c00317 	ldw	r3,12(r6)
  2029b0:	31000217 	ldw	r4,8(r6)
  2029b4:	1145883a 	add	r2,r2,r5
  2029b8:	20c00315 	stw	r3,12(r4)
  2029bc:	19000215 	stw	r4,8(r3)
  2029c0:	10c00054 	ori	r3,r2,1
  2029c4:	30c00115 	stw	r3,4(r6)
  2029c8:	00c00834 	movhi	r3,32
  2029cc:	18dcad04 	addi	r3,r3,29364
  2029d0:	18c00017 	ldw	r3,0(r3)
  2029d4:	49800215 	stw	r6,8(r9)
  2029d8:	10ffcf36 	bltu	r2,r3,202918 <_free_r+0x11c>
  2029dc:	00800874 	movhi	r2,33
  2029e0:	10a35904 	addi	r2,r2,-29340
  2029e4:	11400017 	ldw	r5,0(r2)
  2029e8:	8809883a 	mov	r4,r17
  2029ec:	02026d80 	call	2026d8 <_malloc_trim_r>
  2029f0:	003fc906 	br	202918 <_free_r+0x11c>
  2029f4:	28c9883a 	add	r4,r5,r3
  2029f8:	21000117 	ldw	r4,4(r4)
  2029fc:	2100004c 	andi	r4,r4,1
  202a00:	20000a1e 	bne	r4,zero,202a2c <_free_r+0x230>
  202a04:	29000317 	ldw	r4,12(r5)
  202a08:	29400217 	ldw	r5,8(r5)
  202a0c:	10c5883a 	add	r2,r2,r3
  202a10:	10c00054 	ori	r3,r2,1
  202a14:	29000315 	stw	r4,12(r5)
  202a18:	21400215 	stw	r5,8(r4)
  202a1c:	30c00115 	stw	r3,4(r6)
  202a20:	308d883a 	add	r6,r6,r2
  202a24:	30800015 	stw	r2,0(r6)
  202a28:	003fbb06 	br	202918 <_free_r+0x11c>
  202a2c:	10c00054 	ori	r3,r2,1
  202a30:	30c00115 	stw	r3,4(r6)
  202a34:	308d883a 	add	r6,r6,r2
  202a38:	30800015 	stw	r2,0(r6)
  202a3c:	003fb606 	br	202918 <_free_r+0x11c>
  202a40:	01000504 	movi	r4,20
  202a44:	20c01436 	bltu	r4,r3,202a98 <_free_r+0x29c>
  202a48:	194016c4 	addi	r5,r3,91
  202a4c:	2947883a 	add	r3,r5,r5
  202a50:	003fbe06 	br	20294c <_free_r+0x150>
  202a54:	280bd0ba 	srai	r5,r5,2
  202a58:	00800044 	movi	r2,1
  202a5c:	39000117 	ldw	r4,4(r7)
  202a60:	114a983a 	sll	r5,r2,r5
  202a64:	1805883a 	mov	r2,r3
  202a68:	2908b03a 	or	r4,r5,r4
  202a6c:	39000115 	stw	r4,4(r7)
  202a70:	003fc406 	br	202984 <_free_r+0x188>
  202a74:	49800515 	stw	r6,20(r9)
  202a78:	49800415 	stw	r6,16(r9)
  202a7c:	10c00054 	ori	r3,r2,1
  202a80:	31000315 	stw	r4,12(r6)
  202a84:	31000215 	stw	r4,8(r6)
  202a88:	30c00115 	stw	r3,4(r6)
  202a8c:	308d883a 	add	r6,r6,r2
  202a90:	30800015 	stw	r2,0(r6)
  202a94:	003fa006 	br	202918 <_free_r+0x11c>
  202a98:	01001504 	movi	r4,84
  202a9c:	20c00436 	bltu	r4,r3,202ab0 <_free_r+0x2b4>
  202aa0:	1006d33a 	srli	r3,r2,12
  202aa4:	19401b84 	addi	r5,r3,110
  202aa8:	2947883a 	add	r3,r5,r5
  202aac:	003fa706 	br	20294c <_free_r+0x150>
  202ab0:	01005504 	movi	r4,340
  202ab4:	20c00436 	bltu	r4,r3,202ac8 <_free_r+0x2cc>
  202ab8:	1006d3fa 	srli	r3,r2,15
  202abc:	19401dc4 	addi	r5,r3,119
  202ac0:	2947883a 	add	r3,r5,r5
  202ac4:	003fa106 	br	20294c <_free_r+0x150>
  202ac8:	01015504 	movi	r4,1364
  202acc:	20c00436 	bltu	r4,r3,202ae0 <_free_r+0x2e4>
  202ad0:	1006d4ba 	srli	r3,r2,18
  202ad4:	19401f04 	addi	r5,r3,124
  202ad8:	2947883a 	add	r3,r5,r5
  202adc:	003f9b06 	br	20294c <_free_r+0x150>
  202ae0:	00c03f04 	movi	r3,252
  202ae4:	01401f84 	movi	r5,126
  202ae8:	003f9806 	br	20294c <_free_r+0x150>

00202aec <_lseek_r>:
  202aec:	defffd04 	addi	sp,sp,-12
  202af0:	dc000015 	stw	r16,0(sp)
  202af4:	04000874 	movhi	r16,33
  202af8:	dc400115 	stw	r17,4(sp)
  202afc:	84235a04 	addi	r16,r16,-29336
  202b00:	2023883a 	mov	r17,r4
  202b04:	2809883a 	mov	r4,r5
  202b08:	300b883a 	mov	r5,r6
  202b0c:	380d883a 	mov	r6,r7
  202b10:	dfc00215 	stw	ra,8(sp)
  202b14:	80000015 	stw	zero,0(r16)
  202b18:	02033a80 	call	2033a8 <lseek>
  202b1c:	00ffffc4 	movi	r3,-1
  202b20:	10c00526 	beq	r2,r3,202b38 <_lseek_r+0x4c>
  202b24:	dfc00217 	ldw	ra,8(sp)
  202b28:	dc400117 	ldw	r17,4(sp)
  202b2c:	dc000017 	ldw	r16,0(sp)
  202b30:	dec00304 	addi	sp,sp,12
  202b34:	f800283a 	ret
  202b38:	80c00017 	ldw	r3,0(r16)
  202b3c:	183ff926 	beq	r3,zero,202b24 <_lseek_r+0x38>
  202b40:	88c00015 	stw	r3,0(r17)
  202b44:	003ff706 	br	202b24 <_lseek_r+0x38>

00202b48 <__smakebuf_r>:
  202b48:	2880030b 	ldhu	r2,12(r5)
  202b4c:	10c0008c 	andi	r3,r2,2
  202b50:	1800401e 	bne	r3,zero,202c54 <__smakebuf_r+0x10c>
  202b54:	deffec04 	addi	sp,sp,-80
  202b58:	dc000f15 	stw	r16,60(sp)
  202b5c:	2821883a 	mov	r16,r5
  202b60:	2940038f 	ldh	r5,14(r5)
  202b64:	dc401015 	stw	r17,64(sp)
  202b68:	dfc01315 	stw	ra,76(sp)
  202b6c:	dcc01215 	stw	r19,72(sp)
  202b70:	dc801115 	stw	r18,68(sp)
  202b74:	2023883a 	mov	r17,r4
  202b78:	28001b16 	blt	r5,zero,202be8 <__smakebuf_r+0xa0>
  202b7c:	d80d883a 	mov	r6,sp
  202b80:	0202d5c0 	call	202d5c <_fstat_r>
  202b84:	10001716 	blt	r2,zero,202be4 <__smakebuf_r+0x9c>
  202b88:	d8800117 	ldw	r2,4(sp)
  202b8c:	00e00014 	movui	r3,32768
  202b90:	10bc000c 	andi	r2,r2,61440
  202b94:	10c03726 	beq	r2,r3,202c74 <__smakebuf_r+0x12c>
  202b98:	80c0030b 	ldhu	r3,12(r16)
  202b9c:	18c20014 	ori	r3,r3,2048
  202ba0:	80c0030d 	sth	r3,12(r16)
  202ba4:	00c80004 	movi	r3,8192
  202ba8:	10c03c1e 	bne	r2,r3,202c9c <__smakebuf_r+0x154>
  202bac:	8140038f 	ldh	r5,14(r16)
  202bb0:	8809883a 	mov	r4,r17
  202bb4:	0202db40 	call	202db4 <_isatty_r>
  202bb8:	10004e26 	beq	r2,zero,202cf4 <__smakebuf_r+0x1ac>
  202bbc:	8080030b 	ldhu	r2,12(r16)
  202bc0:	04c00044 	movi	r19,1
  202bc4:	80c010c4 	addi	r3,r16,67
  202bc8:	14c4b03a 	or	r2,r2,r19
  202bcc:	8080030d 	sth	r2,12(r16)
  202bd0:	80c00015 	stw	r3,0(r16)
  202bd4:	80c00415 	stw	r3,16(r16)
  202bd8:	84c00515 	stw	r19,20(r16)
  202bdc:	04810004 	movi	r18,1024
  202be0:	00000706 	br	202c00 <__smakebuf_r+0xb8>
  202be4:	8080030b 	ldhu	r2,12(r16)
  202be8:	10c0200c 	andi	r3,r2,128
  202bec:	18001f1e 	bne	r3,zero,202c6c <__smakebuf_r+0x124>
  202bf0:	04810004 	movi	r18,1024
  202bf4:	10820014 	ori	r2,r2,2048
  202bf8:	8080030d 	sth	r2,12(r16)
  202bfc:	0027883a 	mov	r19,zero
  202c00:	8809883a 	mov	r4,r17
  202c04:	900b883a 	mov	r5,r18
  202c08:	0200dfc0 	call	200dfc <_malloc_r>
  202c0c:	10002e26 	beq	r2,zero,202cc8 <__smakebuf_r+0x180>
  202c10:	80c0030b 	ldhu	r3,12(r16)
  202c14:	01000834 	movhi	r4,32
  202c18:	21010904 	addi	r4,r4,1060
  202c1c:	89000f15 	stw	r4,60(r17)
  202c20:	18c02014 	ori	r3,r3,128
  202c24:	80c0030d 	sth	r3,12(r16)
  202c28:	80800015 	stw	r2,0(r16)
  202c2c:	80800415 	stw	r2,16(r16)
  202c30:	84800515 	stw	r18,20(r16)
  202c34:	98001c1e 	bne	r19,zero,202ca8 <__smakebuf_r+0x160>
  202c38:	dfc01317 	ldw	ra,76(sp)
  202c3c:	dcc01217 	ldw	r19,72(sp)
  202c40:	dc801117 	ldw	r18,68(sp)
  202c44:	dc401017 	ldw	r17,64(sp)
  202c48:	dc000f17 	ldw	r16,60(sp)
  202c4c:	dec01404 	addi	sp,sp,80
  202c50:	f800283a 	ret
  202c54:	288010c4 	addi	r2,r5,67
  202c58:	28800015 	stw	r2,0(r5)
  202c5c:	28800415 	stw	r2,16(r5)
  202c60:	00800044 	movi	r2,1
  202c64:	28800515 	stw	r2,20(r5)
  202c68:	f800283a 	ret
  202c6c:	04801004 	movi	r18,64
  202c70:	003fe006 	br	202bf4 <__smakebuf_r+0xac>
  202c74:	81000a17 	ldw	r4,40(r16)
  202c78:	00c00834 	movhi	r3,32
  202c7c:	18c83604 	addi	r3,r3,8408
  202c80:	20ffc51e 	bne	r4,r3,202b98 <__smakebuf_r+0x50>
  202c84:	80c0030b 	ldhu	r3,12(r16)
  202c88:	01010004 	movi	r4,1024
  202c8c:	81001315 	stw	r4,76(r16)
  202c90:	1906b03a 	or	r3,r3,r4
  202c94:	80c0030d 	sth	r3,12(r16)
  202c98:	003fc206 	br	202ba4 <__smakebuf_r+0x5c>
  202c9c:	0027883a 	mov	r19,zero
  202ca0:	04810004 	movi	r18,1024
  202ca4:	003fd606 	br	202c00 <__smakebuf_r+0xb8>
  202ca8:	8140038f 	ldh	r5,14(r16)
  202cac:	8809883a 	mov	r4,r17
  202cb0:	0202db40 	call	202db4 <_isatty_r>
  202cb4:	103fe026 	beq	r2,zero,202c38 <__smakebuf_r+0xf0>
  202cb8:	8080030b 	ldhu	r2,12(r16)
  202cbc:	10800054 	ori	r2,r2,1
  202cc0:	8080030d 	sth	r2,12(r16)
  202cc4:	003fdc06 	br	202c38 <__smakebuf_r+0xf0>
  202cc8:	8080030b 	ldhu	r2,12(r16)
  202ccc:	10c0800c 	andi	r3,r2,512
  202cd0:	183fd91e 	bne	r3,zero,202c38 <__smakebuf_r+0xf0>
  202cd4:	10800094 	ori	r2,r2,2
  202cd8:	80c010c4 	addi	r3,r16,67
  202cdc:	8080030d 	sth	r2,12(r16)
  202ce0:	00800044 	movi	r2,1
  202ce4:	80c00015 	stw	r3,0(r16)
  202ce8:	80c00415 	stw	r3,16(r16)
  202cec:	80800515 	stw	r2,20(r16)
  202cf0:	003fd106 	br	202c38 <__smakebuf_r+0xf0>
  202cf4:	04c00044 	movi	r19,1
  202cf8:	04810004 	movi	r18,1024
  202cfc:	003fc006 	br	202c00 <__smakebuf_r+0xb8>

00202d00 <_read_r>:
  202d00:	defffd04 	addi	sp,sp,-12
  202d04:	dc000015 	stw	r16,0(sp)
  202d08:	04000874 	movhi	r16,33
  202d0c:	dc400115 	stw	r17,4(sp)
  202d10:	84235a04 	addi	r16,r16,-29336
  202d14:	2023883a 	mov	r17,r4
  202d18:	2809883a 	mov	r4,r5
  202d1c:	300b883a 	mov	r5,r6
  202d20:	380d883a 	mov	r6,r7
  202d24:	dfc00215 	stw	ra,8(sp)
  202d28:	80000015 	stw	zero,0(r16)
  202d2c:	02035840 	call	203584 <read>
  202d30:	00ffffc4 	movi	r3,-1
  202d34:	10c00526 	beq	r2,r3,202d4c <_read_r+0x4c>
  202d38:	dfc00217 	ldw	ra,8(sp)
  202d3c:	dc400117 	ldw	r17,4(sp)
  202d40:	dc000017 	ldw	r16,0(sp)
  202d44:	dec00304 	addi	sp,sp,12
  202d48:	f800283a 	ret
  202d4c:	80c00017 	ldw	r3,0(r16)
  202d50:	183ff926 	beq	r3,zero,202d38 <_read_r+0x38>
  202d54:	88c00015 	stw	r3,0(r17)
  202d58:	003ff706 	br	202d38 <_read_r+0x38>

00202d5c <_fstat_r>:
  202d5c:	defffd04 	addi	sp,sp,-12
  202d60:	dc000015 	stw	r16,0(sp)
  202d64:	04000874 	movhi	r16,33
  202d68:	dc400115 	stw	r17,4(sp)
  202d6c:	84235a04 	addi	r16,r16,-29336
  202d70:	2023883a 	mov	r17,r4
  202d74:	2809883a 	mov	r4,r5
  202d78:	300b883a 	mov	r5,r6
  202d7c:	dfc00215 	stw	ra,8(sp)
  202d80:	80000015 	stw	zero,0(r16)
  202d84:	02030d00 	call	2030d0 <fstat>
  202d88:	00ffffc4 	movi	r3,-1
  202d8c:	10c00526 	beq	r2,r3,202da4 <_fstat_r+0x48>
  202d90:	dfc00217 	ldw	ra,8(sp)
  202d94:	dc400117 	ldw	r17,4(sp)
  202d98:	dc000017 	ldw	r16,0(sp)
  202d9c:	dec00304 	addi	sp,sp,12
  202da0:	f800283a 	ret
  202da4:	80c00017 	ldw	r3,0(r16)
  202da8:	183ff926 	beq	r3,zero,202d90 <_fstat_r+0x34>
  202dac:	88c00015 	stw	r3,0(r17)
  202db0:	003ff706 	br	202d90 <_fstat_r+0x34>

00202db4 <_isatty_r>:
  202db4:	defffd04 	addi	sp,sp,-12
  202db8:	dc000015 	stw	r16,0(sp)
  202dbc:	04000874 	movhi	r16,33
  202dc0:	dc400115 	stw	r17,4(sp)
  202dc4:	84235a04 	addi	r16,r16,-29336
  202dc8:	2023883a 	mov	r17,r4
  202dcc:	2809883a 	mov	r4,r5
  202dd0:	dfc00215 	stw	ra,8(sp)
  202dd4:	80000015 	stw	zero,0(r16)
  202dd8:	02031d00 	call	2031d0 <isatty>
  202ddc:	00ffffc4 	movi	r3,-1
  202de0:	10c00526 	beq	r2,r3,202df8 <_isatty_r+0x44>
  202de4:	dfc00217 	ldw	ra,8(sp)
  202de8:	dc400117 	ldw	r17,4(sp)
  202dec:	dc000017 	ldw	r16,0(sp)
  202df0:	dec00304 	addi	sp,sp,12
  202df4:	f800283a 	ret
  202df8:	80c00017 	ldw	r3,0(r16)
  202dfc:	183ff926 	beq	r3,zero,202de4 <_isatty_r+0x30>
  202e00:	88c00015 	stw	r3,0(r17)
  202e04:	003ff706 	br	202de4 <_isatty_r+0x30>

00202e08 <udivmodsi4>:
  202e08:	2900182e 	bgeu	r5,r4,202e6c <udivmodsi4+0x64>
  202e0c:	28001716 	blt	r5,zero,202e6c <udivmodsi4+0x64>
  202e10:	00800804 	movi	r2,32
  202e14:	00c00044 	movi	r3,1
  202e18:	00000206 	br	202e24 <udivmodsi4+0x1c>
  202e1c:	10001126 	beq	r2,zero,202e64 <udivmodsi4+0x5c>
  202e20:	28000516 	blt	r5,zero,202e38 <udivmodsi4+0x30>
  202e24:	294b883a 	add	r5,r5,r5
  202e28:	10bfffc4 	addi	r2,r2,-1
  202e2c:	18c7883a 	add	r3,r3,r3
  202e30:	293ffa36 	bltu	r5,r4,202e1c <udivmodsi4+0x14>
  202e34:	18000b26 	beq	r3,zero,202e64 <udivmodsi4+0x5c>
  202e38:	0005883a 	mov	r2,zero
  202e3c:	21400236 	bltu	r4,r5,202e48 <udivmodsi4+0x40>
  202e40:	2149c83a 	sub	r4,r4,r5
  202e44:	10c4b03a 	or	r2,r2,r3
  202e48:	1806d07a 	srli	r3,r3,1
  202e4c:	280ad07a 	srli	r5,r5,1
  202e50:	183ffa1e 	bne	r3,zero,202e3c <udivmodsi4+0x34>
  202e54:	3000011e 	bne	r6,zero,202e5c <udivmodsi4+0x54>
  202e58:	f800283a 	ret
  202e5c:	2005883a 	mov	r2,r4
  202e60:	f800283a 	ret
  202e64:	0005883a 	mov	r2,zero
  202e68:	003ffa06 	br	202e54 <udivmodsi4+0x4c>
  202e6c:	00c00044 	movi	r3,1
  202e70:	003ff106 	br	202e38 <udivmodsi4+0x30>

00202e74 <__divsi3>:
  202e74:	defffe04 	addi	sp,sp,-8
  202e78:	dfc00115 	stw	ra,4(sp)
  202e7c:	dc000015 	stw	r16,0(sp)
  202e80:	20000b16 	blt	r4,zero,202eb0 <__divsi3+0x3c>
  202e84:	0021883a 	mov	r16,zero
  202e88:	28000c16 	blt	r5,zero,202ebc <__divsi3+0x48>
  202e8c:	000d883a 	mov	r6,zero
  202e90:	0202e080 	call	202e08 <udivmodsi4>
  202e94:	0407c83a 	sub	r3,zero,r16
  202e98:	1884f03a 	xor	r2,r3,r2
  202e9c:	1405883a 	add	r2,r2,r16
  202ea0:	dfc00117 	ldw	ra,4(sp)
  202ea4:	dc000017 	ldw	r16,0(sp)
  202ea8:	dec00204 	addi	sp,sp,8
  202eac:	f800283a 	ret
  202eb0:	0109c83a 	sub	r4,zero,r4
  202eb4:	04000044 	movi	r16,1
  202eb8:	283ff40e 	bge	r5,zero,202e8c <__divsi3+0x18>
  202ebc:	014bc83a 	sub	r5,zero,r5
  202ec0:	8400005c 	xori	r16,r16,1
  202ec4:	003ff106 	br	202e8c <__divsi3+0x18>

00202ec8 <__modsi3>:
  202ec8:	defffd04 	addi	sp,sp,-12
  202ecc:	dfc00215 	stw	ra,8(sp)
  202ed0:	dc400115 	stw	r17,4(sp)
  202ed4:	dc000015 	stw	r16,0(sp)
  202ed8:	20000c16 	blt	r4,zero,202f0c <__modsi3+0x44>
  202edc:	0023883a 	mov	r17,zero
  202ee0:	0021883a 	mov	r16,zero
  202ee4:	28000d16 	blt	r5,zero,202f1c <__modsi3+0x54>
  202ee8:	01800044 	movi	r6,1
  202eec:	0202e080 	call	202e08 <udivmodsi4>
  202ef0:	1404f03a 	xor	r2,r2,r16
  202ef4:	8885883a 	add	r2,r17,r2
  202ef8:	dfc00217 	ldw	ra,8(sp)
  202efc:	dc400117 	ldw	r17,4(sp)
  202f00:	dc000017 	ldw	r16,0(sp)
  202f04:	dec00304 	addi	sp,sp,12
  202f08:	f800283a 	ret
  202f0c:	0109c83a 	sub	r4,zero,r4
  202f10:	04400044 	movi	r17,1
  202f14:	043fffc4 	movi	r16,-1
  202f18:	283ff30e 	bge	r5,zero,202ee8 <__modsi3+0x20>
  202f1c:	014bc83a 	sub	r5,zero,r5
  202f20:	003ff106 	br	202ee8 <__modsi3+0x20>

00202f24 <__udivsi3>:
  202f24:	000d883a 	mov	r6,zero
  202f28:	0202e081 	jmpi	202e08 <udivmodsi4>

00202f2c <__umodsi3>:
  202f2c:	01800044 	movi	r6,1
  202f30:	0202e081 	jmpi	202e08 <udivmodsi4>

00202f34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  202f34:	defffe04 	addi	sp,sp,-8
  202f38:	dfc00115 	stw	ra,4(sp)
  202f3c:	df000015 	stw	fp,0(sp)
  202f40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  202f44:	00800834 	movhi	r2,32
  202f48:	109cb304 	addi	r2,r2,29388
  202f4c:	10800017 	ldw	r2,0(r2)
  202f50:	10000526 	beq	r2,zero,202f68 <alt_get_errno+0x34>
  202f54:	00800834 	movhi	r2,32
  202f58:	109cb304 	addi	r2,r2,29388
  202f5c:	10800017 	ldw	r2,0(r2)
  202f60:	103ee83a 	callr	r2
  202f64:	00000206 	br	202f70 <alt_get_errno+0x3c>
  202f68:	00800874 	movhi	r2,33
  202f6c:	10a35a04 	addi	r2,r2,-29336
}
  202f70:	e037883a 	mov	sp,fp
  202f74:	dfc00117 	ldw	ra,4(sp)
  202f78:	df000017 	ldw	fp,0(sp)
  202f7c:	dec00204 	addi	sp,sp,8
  202f80:	f800283a 	ret

00202f84 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  202f84:	defffb04 	addi	sp,sp,-20
  202f88:	dfc00415 	stw	ra,16(sp)
  202f8c:	df000315 	stw	fp,12(sp)
  202f90:	df000304 	addi	fp,sp,12
  202f94:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  202f98:	e0bfff17 	ldw	r2,-4(fp)
  202f9c:	10000616 	blt	r2,zero,202fb8 <close+0x34>
  202fa0:	e0bfff17 	ldw	r2,-4(fp)
  202fa4:	10c00324 	muli	r3,r2,12
  202fa8:	00800834 	movhi	r2,32
  202fac:	10983204 	addi	r2,r2,24776
  202fb0:	1885883a 	add	r2,r3,r2
  202fb4:	00000106 	br	202fbc <close+0x38>
  202fb8:	0005883a 	mov	r2,zero
  202fbc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  202fc0:	e0bffd17 	ldw	r2,-12(fp)
  202fc4:	10001926 	beq	r2,zero,20302c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  202fc8:	e0bffd17 	ldw	r2,-12(fp)
  202fcc:	10800017 	ldw	r2,0(r2)
  202fd0:	10800417 	ldw	r2,16(r2)
  202fd4:	10000626 	beq	r2,zero,202ff0 <close+0x6c>
  202fd8:	e0bffd17 	ldw	r2,-12(fp)
  202fdc:	10800017 	ldw	r2,0(r2)
  202fe0:	10800417 	ldw	r2,16(r2)
  202fe4:	e13ffd17 	ldw	r4,-12(fp)
  202fe8:	103ee83a 	callr	r2
  202fec:	00000106 	br	202ff4 <close+0x70>
  202ff0:	0005883a 	mov	r2,zero
  202ff4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  202ff8:	e13fff17 	ldw	r4,-4(fp)
  202ffc:	02036800 	call	203680 <alt_release_fd>
    if (rval < 0)
  203000:	e0bffe17 	ldw	r2,-8(fp)
  203004:	1000070e 	bge	r2,zero,203024 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  203008:	0202f340 	call	202f34 <alt_get_errno>
  20300c:	1007883a 	mov	r3,r2
  203010:	e0bffe17 	ldw	r2,-8(fp)
  203014:	0085c83a 	sub	r2,zero,r2
  203018:	18800015 	stw	r2,0(r3)
      return -1;
  20301c:	00bfffc4 	movi	r2,-1
  203020:	00000706 	br	203040 <close+0xbc>
    }
    return 0;
  203024:	0005883a 	mov	r2,zero
  203028:	00000506 	br	203040 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  20302c:	0202f340 	call	202f34 <alt_get_errno>
  203030:	1007883a 	mov	r3,r2
  203034:	00801444 	movi	r2,81
  203038:	18800015 	stw	r2,0(r3)
    return -1;
  20303c:	00bfffc4 	movi	r2,-1
  }
}
  203040:	e037883a 	mov	sp,fp
  203044:	dfc00117 	ldw	ra,4(sp)
  203048:	df000017 	ldw	fp,0(sp)
  20304c:	dec00204 	addi	sp,sp,8
  203050:	f800283a 	ret

00203054 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  203054:	defffc04 	addi	sp,sp,-16
  203058:	df000315 	stw	fp,12(sp)
  20305c:	df000304 	addi	fp,sp,12
  203060:	e13ffd15 	stw	r4,-12(fp)
  203064:	e17ffe15 	stw	r5,-8(fp)
  203068:	e1bfff15 	stw	r6,-4(fp)
  return len;
  20306c:	e0bfff17 	ldw	r2,-4(fp)
}
  203070:	e037883a 	mov	sp,fp
  203074:	df000017 	ldw	fp,0(sp)
  203078:	dec00104 	addi	sp,sp,4
  20307c:	f800283a 	ret

00203080 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  203080:	defffe04 	addi	sp,sp,-8
  203084:	dfc00115 	stw	ra,4(sp)
  203088:	df000015 	stw	fp,0(sp)
  20308c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  203090:	00800834 	movhi	r2,32
  203094:	109cb304 	addi	r2,r2,29388
  203098:	10800017 	ldw	r2,0(r2)
  20309c:	10000526 	beq	r2,zero,2030b4 <alt_get_errno+0x34>
  2030a0:	00800834 	movhi	r2,32
  2030a4:	109cb304 	addi	r2,r2,29388
  2030a8:	10800017 	ldw	r2,0(r2)
  2030ac:	103ee83a 	callr	r2
  2030b0:	00000206 	br	2030bc <alt_get_errno+0x3c>
  2030b4:	00800874 	movhi	r2,33
  2030b8:	10a35a04 	addi	r2,r2,-29336
}
  2030bc:	e037883a 	mov	sp,fp
  2030c0:	dfc00117 	ldw	ra,4(sp)
  2030c4:	df000017 	ldw	fp,0(sp)
  2030c8:	dec00204 	addi	sp,sp,8
  2030cc:	f800283a 	ret

002030d0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  2030d0:	defffb04 	addi	sp,sp,-20
  2030d4:	dfc00415 	stw	ra,16(sp)
  2030d8:	df000315 	stw	fp,12(sp)
  2030dc:	df000304 	addi	fp,sp,12
  2030e0:	e13ffe15 	stw	r4,-8(fp)
  2030e4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  2030e8:	e0bffe17 	ldw	r2,-8(fp)
  2030ec:	10000616 	blt	r2,zero,203108 <fstat+0x38>
  2030f0:	e0bffe17 	ldw	r2,-8(fp)
  2030f4:	10c00324 	muli	r3,r2,12
  2030f8:	00800834 	movhi	r2,32
  2030fc:	10983204 	addi	r2,r2,24776
  203100:	1885883a 	add	r2,r3,r2
  203104:	00000106 	br	20310c <fstat+0x3c>
  203108:	0005883a 	mov	r2,zero
  20310c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  203110:	e0bffd17 	ldw	r2,-12(fp)
  203114:	10001026 	beq	r2,zero,203158 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  203118:	e0bffd17 	ldw	r2,-12(fp)
  20311c:	10800017 	ldw	r2,0(r2)
  203120:	10800817 	ldw	r2,32(r2)
  203124:	10000726 	beq	r2,zero,203144 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  203128:	e0bffd17 	ldw	r2,-12(fp)
  20312c:	10800017 	ldw	r2,0(r2)
  203130:	10800817 	ldw	r2,32(r2)
  203134:	e13ffd17 	ldw	r4,-12(fp)
  203138:	e17fff17 	ldw	r5,-4(fp)
  20313c:	103ee83a 	callr	r2
  203140:	00000a06 	br	20316c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  203144:	e0bfff17 	ldw	r2,-4(fp)
  203148:	00c80004 	movi	r3,8192
  20314c:	10c00115 	stw	r3,4(r2)
      return 0;
  203150:	0005883a 	mov	r2,zero
  203154:	00000506 	br	20316c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  203158:	02030800 	call	203080 <alt_get_errno>
  20315c:	1007883a 	mov	r3,r2
  203160:	00801444 	movi	r2,81
  203164:	18800015 	stw	r2,0(r3)
    return -1;
  203168:	00bfffc4 	movi	r2,-1
  }
}
  20316c:	e037883a 	mov	sp,fp
  203170:	dfc00117 	ldw	ra,4(sp)
  203174:	df000017 	ldw	fp,0(sp)
  203178:	dec00204 	addi	sp,sp,8
  20317c:	f800283a 	ret

00203180 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  203180:	defffe04 	addi	sp,sp,-8
  203184:	dfc00115 	stw	ra,4(sp)
  203188:	df000015 	stw	fp,0(sp)
  20318c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  203190:	00800834 	movhi	r2,32
  203194:	109cb304 	addi	r2,r2,29388
  203198:	10800017 	ldw	r2,0(r2)
  20319c:	10000526 	beq	r2,zero,2031b4 <alt_get_errno+0x34>
  2031a0:	00800834 	movhi	r2,32
  2031a4:	109cb304 	addi	r2,r2,29388
  2031a8:	10800017 	ldw	r2,0(r2)
  2031ac:	103ee83a 	callr	r2
  2031b0:	00000206 	br	2031bc <alt_get_errno+0x3c>
  2031b4:	00800874 	movhi	r2,33
  2031b8:	10a35a04 	addi	r2,r2,-29336
}
  2031bc:	e037883a 	mov	sp,fp
  2031c0:	dfc00117 	ldw	ra,4(sp)
  2031c4:	df000017 	ldw	fp,0(sp)
  2031c8:	dec00204 	addi	sp,sp,8
  2031cc:	f800283a 	ret

002031d0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  2031d0:	deffed04 	addi	sp,sp,-76
  2031d4:	dfc01215 	stw	ra,72(sp)
  2031d8:	df001115 	stw	fp,68(sp)
  2031dc:	df001104 	addi	fp,sp,68
  2031e0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  2031e4:	e0bfff17 	ldw	r2,-4(fp)
  2031e8:	10000616 	blt	r2,zero,203204 <isatty+0x34>
  2031ec:	e0bfff17 	ldw	r2,-4(fp)
  2031f0:	10c00324 	muli	r3,r2,12
  2031f4:	00800834 	movhi	r2,32
  2031f8:	10983204 	addi	r2,r2,24776
  2031fc:	1885883a 	add	r2,r3,r2
  203200:	00000106 	br	203208 <isatty+0x38>
  203204:	0005883a 	mov	r2,zero
  203208:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  20320c:	e0bfef17 	ldw	r2,-68(fp)
  203210:	10000e26 	beq	r2,zero,20324c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  203214:	e0bfef17 	ldw	r2,-68(fp)
  203218:	10800017 	ldw	r2,0(r2)
  20321c:	10800817 	ldw	r2,32(r2)
  203220:	1000021e 	bne	r2,zero,20322c <isatty+0x5c>
    {
      return 1;
  203224:	00800044 	movi	r2,1
  203228:	00000d06 	br	203260 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  20322c:	e0bff004 	addi	r2,fp,-64
  203230:	e13fff17 	ldw	r4,-4(fp)
  203234:	100b883a 	mov	r5,r2
  203238:	02030d00 	call	2030d0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  20323c:	e0bff117 	ldw	r2,-60(fp)
  203240:	10880020 	cmpeqi	r2,r2,8192
  203244:	10803fcc 	andi	r2,r2,255
  203248:	00000506 	br	203260 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  20324c:	02031800 	call	203180 <alt_get_errno>
  203250:	1007883a 	mov	r3,r2
  203254:	00801444 	movi	r2,81
  203258:	18800015 	stw	r2,0(r3)
    return 0;
  20325c:	0005883a 	mov	r2,zero
  }
}
  203260:	e037883a 	mov	sp,fp
  203264:	dfc00117 	ldw	ra,4(sp)
  203268:	df000017 	ldw	fp,0(sp)
  20326c:	dec00204 	addi	sp,sp,8
  203270:	f800283a 	ret

00203274 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  203274:	defffc04 	addi	sp,sp,-16
  203278:	df000315 	stw	fp,12(sp)
  20327c:	df000304 	addi	fp,sp,12
  203280:	e13ffd15 	stw	r4,-12(fp)
  203284:	e17ffe15 	stw	r5,-8(fp)
  203288:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  20328c:	e0fffe17 	ldw	r3,-8(fp)
  203290:	e0bffd17 	ldw	r2,-12(fp)
  203294:	18800c26 	beq	r3,r2,2032c8 <alt_load_section+0x54>
  {
    while( to != end )
  203298:	00000806 	br	2032bc <alt_load_section+0x48>
    {
      *to++ = *from++;
  20329c:	e0bffe17 	ldw	r2,-8(fp)
  2032a0:	10c00104 	addi	r3,r2,4
  2032a4:	e0fffe15 	stw	r3,-8(fp)
  2032a8:	e0fffd17 	ldw	r3,-12(fp)
  2032ac:	19000104 	addi	r4,r3,4
  2032b0:	e13ffd15 	stw	r4,-12(fp)
  2032b4:	18c00017 	ldw	r3,0(r3)
  2032b8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  2032bc:	e0fffe17 	ldw	r3,-8(fp)
  2032c0:	e0bfff17 	ldw	r2,-4(fp)
  2032c4:	18bff51e 	bne	r3,r2,20329c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  2032c8:	e037883a 	mov	sp,fp
  2032cc:	df000017 	ldw	fp,0(sp)
  2032d0:	dec00104 	addi	sp,sp,4
  2032d4:	f800283a 	ret

002032d8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  2032d8:	defffe04 	addi	sp,sp,-8
  2032dc:	dfc00115 	stw	ra,4(sp)
  2032e0:	df000015 	stw	fp,0(sp)
  2032e4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  2032e8:	01000834 	movhi	r4,32
  2032ec:	211cb804 	addi	r4,r4,29408
  2032f0:	01400834 	movhi	r5,32
  2032f4:	29561d04 	addi	r5,r5,22644
  2032f8:	01800834 	movhi	r6,32
  2032fc:	319cb804 	addi	r6,r6,29408
  203300:	02032740 	call	203274 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  203304:	01000834 	movhi	r4,32
  203308:	21000004 	addi	r4,r4,0
  20330c:	01401074 	movhi	r5,65
  203310:	29600804 	addi	r5,r5,-32736
  203314:	01801074 	movhi	r6,65
  203318:	31a09004 	addi	r6,r6,-32192
  20331c:	02032740 	call	203274 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  203320:	01000834 	movhi	r4,32
  203324:	21160f04 	addi	r4,r4,22588
  203328:	01400834 	movhi	r5,32
  20332c:	29560f04 	addi	r5,r5,22588
  203330:	01800834 	movhi	r6,32
  203334:	31961d04 	addi	r6,r6,22644
  203338:	02032740 	call	203274 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  20333c:	02046280 	call	204628 <alt_dcache_flush_all>
  alt_icache_flush_all();
  203340:	02048180 	call	204818 <alt_icache_flush_all>
}
  203344:	e037883a 	mov	sp,fp
  203348:	dfc00117 	ldw	ra,4(sp)
  20334c:	df000017 	ldw	fp,0(sp)
  203350:	dec00204 	addi	sp,sp,8
  203354:	f800283a 	ret

00203358 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  203358:	defffe04 	addi	sp,sp,-8
  20335c:	dfc00115 	stw	ra,4(sp)
  203360:	df000015 	stw	fp,0(sp)
  203364:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  203368:	00800834 	movhi	r2,32
  20336c:	109cb304 	addi	r2,r2,29388
  203370:	10800017 	ldw	r2,0(r2)
  203374:	10000526 	beq	r2,zero,20338c <alt_get_errno+0x34>
  203378:	00800834 	movhi	r2,32
  20337c:	109cb304 	addi	r2,r2,29388
  203380:	10800017 	ldw	r2,0(r2)
  203384:	103ee83a 	callr	r2
  203388:	00000206 	br	203394 <alt_get_errno+0x3c>
  20338c:	00800874 	movhi	r2,33
  203390:	10a35a04 	addi	r2,r2,-29336
}
  203394:	e037883a 	mov	sp,fp
  203398:	dfc00117 	ldw	ra,4(sp)
  20339c:	df000017 	ldw	fp,0(sp)
  2033a0:	dec00204 	addi	sp,sp,8
  2033a4:	f800283a 	ret

002033a8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  2033a8:	defff904 	addi	sp,sp,-28
  2033ac:	dfc00615 	stw	ra,24(sp)
  2033b0:	df000515 	stw	fp,20(sp)
  2033b4:	df000504 	addi	fp,sp,20
  2033b8:	e13ffd15 	stw	r4,-12(fp)
  2033bc:	e17ffe15 	stw	r5,-8(fp)
  2033c0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  2033c4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  2033c8:	e0bffd17 	ldw	r2,-12(fp)
  2033cc:	10000616 	blt	r2,zero,2033e8 <lseek+0x40>
  2033d0:	e0bffd17 	ldw	r2,-12(fp)
  2033d4:	10c00324 	muli	r3,r2,12
  2033d8:	00800834 	movhi	r2,32
  2033dc:	10983204 	addi	r2,r2,24776
  2033e0:	1885883a 	add	r2,r3,r2
  2033e4:	00000106 	br	2033ec <lseek+0x44>
  2033e8:	0005883a 	mov	r2,zero
  2033ec:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  2033f0:	e0bffc17 	ldw	r2,-16(fp)
  2033f4:	10001026 	beq	r2,zero,203438 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  2033f8:	e0bffc17 	ldw	r2,-16(fp)
  2033fc:	10800017 	ldw	r2,0(r2)
  203400:	10800717 	ldw	r2,28(r2)
  203404:	10000926 	beq	r2,zero,20342c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  203408:	e0bffc17 	ldw	r2,-16(fp)
  20340c:	10800017 	ldw	r2,0(r2)
  203410:	10800717 	ldw	r2,28(r2)
  203414:	e13ffc17 	ldw	r4,-16(fp)
  203418:	e17ffe17 	ldw	r5,-8(fp)
  20341c:	e1bfff17 	ldw	r6,-4(fp)
  203420:	103ee83a 	callr	r2
  203424:	e0bffb15 	stw	r2,-20(fp)
  203428:	00000506 	br	203440 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  20342c:	00bfde84 	movi	r2,-134
  203430:	e0bffb15 	stw	r2,-20(fp)
  203434:	00000206 	br	203440 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  203438:	00bfebc4 	movi	r2,-81
  20343c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  203440:	e0bffb17 	ldw	r2,-20(fp)
  203444:	1000070e 	bge	r2,zero,203464 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  203448:	02033580 	call	203358 <alt_get_errno>
  20344c:	1007883a 	mov	r3,r2
  203450:	e0bffb17 	ldw	r2,-20(fp)
  203454:	0085c83a 	sub	r2,zero,r2
  203458:	18800015 	stw	r2,0(r3)
    rc = -1;
  20345c:	00bfffc4 	movi	r2,-1
  203460:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  203464:	e0bffb17 	ldw	r2,-20(fp)
}
  203468:	e037883a 	mov	sp,fp
  20346c:	dfc00117 	ldw	ra,4(sp)
  203470:	df000017 	ldw	fp,0(sp)
  203474:	dec00204 	addi	sp,sp,8
  203478:	f800283a 	ret

0020347c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  20347c:	defffd04 	addi	sp,sp,-12
  203480:	dfc00215 	stw	ra,8(sp)
  203484:	df000115 	stw	fp,4(sp)
  203488:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  20348c:	0009883a 	mov	r4,zero
  203490:	02039100 	call	203910 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  203494:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  203498:	02039440 	call	203944 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  20349c:	01000834 	movhi	r4,32
  2034a0:	21161704 	addi	r4,r4,22620
  2034a4:	01400834 	movhi	r5,32
  2034a8:	29561704 	addi	r5,r5,22620
  2034ac:	01800834 	movhi	r6,32
  2034b0:	31961704 	addi	r6,r6,22620
  2034b4:	0204bd80 	call	204bd8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  2034b8:	02047600 	call	204760 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  2034bc:	01000834 	movhi	r4,32
  2034c0:	2111ef04 	addi	r4,r4,18364
  2034c4:	02054000 	call	205400 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  2034c8:	d126b117 	ldw	r4,-25916(gp)
  2034cc:	d0e6b217 	ldw	r3,-25912(gp)
  2034d0:	d0a6b317 	ldw	r2,-25908(gp)
  2034d4:	180b883a 	mov	r5,r3
  2034d8:	100d883a 	mov	r6,r2
  2034dc:	02002b80 	call	2002b8 <main>
  2034e0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  2034e4:	01000044 	movi	r4,1
  2034e8:	0202f840 	call	202f84 <close>
  exit (result);
  2034ec:	e13fff17 	ldw	r4,-4(fp)
  2034f0:	02054140 	call	205414 <exit>

002034f4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  2034f4:	defffe04 	addi	sp,sp,-8
  2034f8:	df000115 	stw	fp,4(sp)
  2034fc:	df000104 	addi	fp,sp,4
  203500:	e13fff15 	stw	r4,-4(fp)
}
  203504:	e037883a 	mov	sp,fp
  203508:	df000017 	ldw	fp,0(sp)
  20350c:	dec00104 	addi	sp,sp,4
  203510:	f800283a 	ret

00203514 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  203514:	defffe04 	addi	sp,sp,-8
  203518:	df000115 	stw	fp,4(sp)
  20351c:	df000104 	addi	fp,sp,4
  203520:	e13fff15 	stw	r4,-4(fp)
}
  203524:	e037883a 	mov	sp,fp
  203528:	df000017 	ldw	fp,0(sp)
  20352c:	dec00104 	addi	sp,sp,4
  203530:	f800283a 	ret

00203534 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  203534:	defffe04 	addi	sp,sp,-8
  203538:	dfc00115 	stw	ra,4(sp)
  20353c:	df000015 	stw	fp,0(sp)
  203540:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  203544:	00800834 	movhi	r2,32
  203548:	109cb304 	addi	r2,r2,29388
  20354c:	10800017 	ldw	r2,0(r2)
  203550:	10000526 	beq	r2,zero,203568 <alt_get_errno+0x34>
  203554:	00800834 	movhi	r2,32
  203558:	109cb304 	addi	r2,r2,29388
  20355c:	10800017 	ldw	r2,0(r2)
  203560:	103ee83a 	callr	r2
  203564:	00000206 	br	203570 <alt_get_errno+0x3c>
  203568:	00800874 	movhi	r2,33
  20356c:	10a35a04 	addi	r2,r2,-29336
}
  203570:	e037883a 	mov	sp,fp
  203574:	dfc00117 	ldw	ra,4(sp)
  203578:	df000017 	ldw	fp,0(sp)
  20357c:	dec00204 	addi	sp,sp,8
  203580:	f800283a 	ret

00203584 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  203584:	defff904 	addi	sp,sp,-28
  203588:	dfc00615 	stw	ra,24(sp)
  20358c:	df000515 	stw	fp,20(sp)
  203590:	df000504 	addi	fp,sp,20
  203594:	e13ffd15 	stw	r4,-12(fp)
  203598:	e17ffe15 	stw	r5,-8(fp)
  20359c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  2035a0:	e0bffd17 	ldw	r2,-12(fp)
  2035a4:	10000616 	blt	r2,zero,2035c0 <read+0x3c>
  2035a8:	e0bffd17 	ldw	r2,-12(fp)
  2035ac:	10c00324 	muli	r3,r2,12
  2035b0:	00800834 	movhi	r2,32
  2035b4:	10983204 	addi	r2,r2,24776
  2035b8:	1885883a 	add	r2,r3,r2
  2035bc:	00000106 	br	2035c4 <read+0x40>
  2035c0:	0005883a 	mov	r2,zero
  2035c4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  2035c8:	e0bffb17 	ldw	r2,-20(fp)
  2035cc:	10002226 	beq	r2,zero,203658 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  2035d0:	e0bffb17 	ldw	r2,-20(fp)
  2035d4:	10800217 	ldw	r2,8(r2)
  2035d8:	108000cc 	andi	r2,r2,3
  2035dc:	10800060 	cmpeqi	r2,r2,1
  2035e0:	1000181e 	bne	r2,zero,203644 <read+0xc0>
        (fd->dev->read))
  2035e4:	e0bffb17 	ldw	r2,-20(fp)
  2035e8:	10800017 	ldw	r2,0(r2)
  2035ec:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  2035f0:	10001426 	beq	r2,zero,203644 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  2035f4:	e0bffb17 	ldw	r2,-20(fp)
  2035f8:	10800017 	ldw	r2,0(r2)
  2035fc:	10800517 	ldw	r2,20(r2)
  203600:	e0ffff17 	ldw	r3,-4(fp)
  203604:	e13ffb17 	ldw	r4,-20(fp)
  203608:	e17ffe17 	ldw	r5,-8(fp)
  20360c:	180d883a 	mov	r6,r3
  203610:	103ee83a 	callr	r2
  203614:	e0bffc15 	stw	r2,-16(fp)
  203618:	e0bffc17 	ldw	r2,-16(fp)
  20361c:	1000070e 	bge	r2,zero,20363c <read+0xb8>
        {
          ALT_ERRNO = -rval;
  203620:	02035340 	call	203534 <alt_get_errno>
  203624:	1007883a 	mov	r3,r2
  203628:	e0bffc17 	ldw	r2,-16(fp)
  20362c:	0085c83a 	sub	r2,zero,r2
  203630:	18800015 	stw	r2,0(r3)
          return -1;
  203634:	00bfffc4 	movi	r2,-1
  203638:	00000c06 	br	20366c <read+0xe8>
        }
        return rval;
  20363c:	e0bffc17 	ldw	r2,-16(fp)
  203640:	00000a06 	br	20366c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  203644:	02035340 	call	203534 <alt_get_errno>
  203648:	1007883a 	mov	r3,r2
  20364c:	00800344 	movi	r2,13
  203650:	18800015 	stw	r2,0(r3)
  203654:	00000406 	br	203668 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  203658:	02035340 	call	203534 <alt_get_errno>
  20365c:	1007883a 	mov	r3,r2
  203660:	00801444 	movi	r2,81
  203664:	18800015 	stw	r2,0(r3)
  }
  return -1;
  203668:	00bfffc4 	movi	r2,-1
}
  20366c:	e037883a 	mov	sp,fp
  203670:	dfc00117 	ldw	ra,4(sp)
  203674:	df000017 	ldw	fp,0(sp)
  203678:	dec00204 	addi	sp,sp,8
  20367c:	f800283a 	ret

00203680 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  203680:	defffe04 	addi	sp,sp,-8
  203684:	df000115 	stw	fp,4(sp)
  203688:	df000104 	addi	fp,sp,4
  20368c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  203690:	e0bfff17 	ldw	r2,-4(fp)
  203694:	108000d0 	cmplti	r2,r2,3
  203698:	10000d1e 	bne	r2,zero,2036d0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  20369c:	00800834 	movhi	r2,32
  2036a0:	10983204 	addi	r2,r2,24776
  2036a4:	e0ffff17 	ldw	r3,-4(fp)
  2036a8:	18c00324 	muli	r3,r3,12
  2036ac:	18c00204 	addi	r3,r3,8
  2036b0:	10c5883a 	add	r2,r2,r3
  2036b4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  2036b8:	00800834 	movhi	r2,32
  2036bc:	10983204 	addi	r2,r2,24776
  2036c0:	e0ffff17 	ldw	r3,-4(fp)
  2036c4:	18c00324 	muli	r3,r3,12
  2036c8:	10c5883a 	add	r2,r2,r3
  2036cc:	10000015 	stw	zero,0(r2)
  }
}
  2036d0:	e037883a 	mov	sp,fp
  2036d4:	df000017 	ldw	fp,0(sp)
  2036d8:	dec00104 	addi	sp,sp,4
  2036dc:	f800283a 	ret

002036e0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  2036e0:	defff904 	addi	sp,sp,-28
  2036e4:	df000615 	stw	fp,24(sp)
  2036e8:	df000604 	addi	fp,sp,24
  2036ec:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  2036f0:	0005303a 	rdctl	r2,status
  2036f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  2036f8:	e0fffc17 	ldw	r3,-16(fp)
  2036fc:	00bfff84 	movi	r2,-2
  203700:	1884703a 	and	r2,r3,r2
  203704:	1001703a 	wrctl	status,r2
  
  return context;
  203708:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  20370c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  203710:	d0a00a17 	ldw	r2,-32728(gp)
  203714:	10c000c4 	addi	r3,r2,3
  203718:	00bfff04 	movi	r2,-4
  20371c:	1884703a 	and	r2,r3,r2
  203720:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  203724:	d0e00a17 	ldw	r3,-32728(gp)
  203728:	e0bfff17 	ldw	r2,-4(fp)
  20372c:	1887883a 	add	r3,r3,r2
  203730:	00801034 	movhi	r2,64
  203734:	10800004 	addi	r2,r2,0
  203738:	10c0062e 	bgeu	r2,r3,203754 <sbrk+0x74>
  20373c:	e0bffa17 	ldw	r2,-24(fp)
  203740:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  203744:	e0bffd17 	ldw	r2,-12(fp)
  203748:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  20374c:	00bfffc4 	movi	r2,-1
  203750:	00000b06 	br	203780 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  203754:	d0a00a17 	ldw	r2,-32728(gp)
  203758:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
  20375c:	d0e00a17 	ldw	r3,-32728(gp)
  203760:	e0bfff17 	ldw	r2,-4(fp)
  203764:	1885883a 	add	r2,r3,r2
  203768:	d0a00a15 	stw	r2,-32728(gp)
  20376c:	e0bffa17 	ldw	r2,-24(fp)
  203770:	e0bffe15 	stw	r2,-8(fp)
  203774:	e0bffe17 	ldw	r2,-8(fp)
  203778:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  20377c:	e0bffb17 	ldw	r2,-20(fp)
} 
  203780:	e037883a 	mov	sp,fp
  203784:	df000017 	ldw	fp,0(sp)
  203788:	dec00104 	addi	sp,sp,4
  20378c:	f800283a 	ret

00203790 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  203790:	defffe04 	addi	sp,sp,-8
  203794:	dfc00115 	stw	ra,4(sp)
  203798:	df000015 	stw	fp,0(sp)
  20379c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  2037a0:	00800834 	movhi	r2,32
  2037a4:	109cb304 	addi	r2,r2,29388
  2037a8:	10800017 	ldw	r2,0(r2)
  2037ac:	10000526 	beq	r2,zero,2037c4 <alt_get_errno+0x34>
  2037b0:	00800834 	movhi	r2,32
  2037b4:	109cb304 	addi	r2,r2,29388
  2037b8:	10800017 	ldw	r2,0(r2)
  2037bc:	103ee83a 	callr	r2
  2037c0:	00000206 	br	2037cc <alt_get_errno+0x3c>
  2037c4:	00800874 	movhi	r2,33
  2037c8:	10a35a04 	addi	r2,r2,-29336
}
  2037cc:	e037883a 	mov	sp,fp
  2037d0:	dfc00117 	ldw	ra,4(sp)
  2037d4:	df000017 	ldw	fp,0(sp)
  2037d8:	dec00204 	addi	sp,sp,8
  2037dc:	f800283a 	ret

002037e0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  2037e0:	defff904 	addi	sp,sp,-28
  2037e4:	dfc00615 	stw	ra,24(sp)
  2037e8:	df000515 	stw	fp,20(sp)
  2037ec:	df000504 	addi	fp,sp,20
  2037f0:	e13ffd15 	stw	r4,-12(fp)
  2037f4:	e17ffe15 	stw	r5,-8(fp)
  2037f8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  2037fc:	e0bffd17 	ldw	r2,-12(fp)
  203800:	10000616 	blt	r2,zero,20381c <write+0x3c>
  203804:	e0bffd17 	ldw	r2,-12(fp)
  203808:	10c00324 	muli	r3,r2,12
  20380c:	00800834 	movhi	r2,32
  203810:	10983204 	addi	r2,r2,24776
  203814:	1885883a 	add	r2,r3,r2
  203818:	00000106 	br	203820 <write+0x40>
  20381c:	0005883a 	mov	r2,zero
  203820:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  203824:	e0bffb17 	ldw	r2,-20(fp)
  203828:	10002126 	beq	r2,zero,2038b0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  20382c:	e0bffb17 	ldw	r2,-20(fp)
  203830:	10800217 	ldw	r2,8(r2)
  203834:	108000cc 	andi	r2,r2,3
  203838:	10001826 	beq	r2,zero,20389c <write+0xbc>
  20383c:	e0bffb17 	ldw	r2,-20(fp)
  203840:	10800017 	ldw	r2,0(r2)
  203844:	10800617 	ldw	r2,24(r2)
  203848:	10001426 	beq	r2,zero,20389c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  20384c:	e0bffb17 	ldw	r2,-20(fp)
  203850:	10800017 	ldw	r2,0(r2)
  203854:	10800617 	ldw	r2,24(r2)
  203858:	e0ffff17 	ldw	r3,-4(fp)
  20385c:	e13ffb17 	ldw	r4,-20(fp)
  203860:	e17ffe17 	ldw	r5,-8(fp)
  203864:	180d883a 	mov	r6,r3
  203868:	103ee83a 	callr	r2
  20386c:	e0bffc15 	stw	r2,-16(fp)
  203870:	e0bffc17 	ldw	r2,-16(fp)
  203874:	1000070e 	bge	r2,zero,203894 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  203878:	02037900 	call	203790 <alt_get_errno>
  20387c:	1007883a 	mov	r3,r2
  203880:	e0bffc17 	ldw	r2,-16(fp)
  203884:	0085c83a 	sub	r2,zero,r2
  203888:	18800015 	stw	r2,0(r3)
        return -1;
  20388c:	00bfffc4 	movi	r2,-1
  203890:	00000c06 	br	2038c4 <write+0xe4>
      }
      return rval;
  203894:	e0bffc17 	ldw	r2,-16(fp)
  203898:	00000a06 	br	2038c4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  20389c:	02037900 	call	203790 <alt_get_errno>
  2038a0:	1007883a 	mov	r3,r2
  2038a4:	00800344 	movi	r2,13
  2038a8:	18800015 	stw	r2,0(r3)
  2038ac:	00000406 	br	2038c0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  2038b0:	02037900 	call	203790 <alt_get_errno>
  2038b4:	1007883a 	mov	r3,r2
  2038b8:	00801444 	movi	r2,81
  2038bc:	18800015 	stw	r2,0(r3)
  }
  return -1;
  2038c0:	00bfffc4 	movi	r2,-1
}
  2038c4:	e037883a 	mov	sp,fp
  2038c8:	dfc00117 	ldw	ra,4(sp)
  2038cc:	df000017 	ldw	fp,0(sp)
  2038d0:	dec00204 	addi	sp,sp,8
  2038d4:	f800283a 	ret

002038d8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  2038d8:	defffd04 	addi	sp,sp,-12
  2038dc:	dfc00215 	stw	ra,8(sp)
  2038e0:	df000115 	stw	fp,4(sp)
  2038e4:	df000104 	addi	fp,sp,4
  2038e8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  2038ec:	e13fff17 	ldw	r4,-4(fp)
  2038f0:	01400834 	movhi	r5,32
  2038f4:	295cb004 	addi	r5,r5,29376
  2038f8:	02046bc0 	call	2046bc <alt_dev_llist_insert>
}
  2038fc:	e037883a 	mov	sp,fp
  203900:	dfc00117 	ldw	ra,4(sp)
  203904:	df000017 	ldw	fp,0(sp)
  203908:	dec00204 	addi	sp,sp,8
  20390c:	f800283a 	ret

00203910 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  203910:	defffd04 	addi	sp,sp,-12
  203914:	dfc00215 	stw	ra,8(sp)
  203918:	df000115 	stw	fp,4(sp)
  20391c:	df000104 	addi	fp,sp,4
  203920:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  203924:	02050600 	call	205060 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  203928:	00800044 	movi	r2,1
  20392c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  203930:	e037883a 	mov	sp,fp
  203934:	dfc00117 	ldw	ra,4(sp)
  203938:	df000017 	ldw	fp,0(sp)
  20393c:	dec00204 	addi	sp,sp,8
  203940:	f800283a 	ret

00203944 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  203944:	defffe04 	addi	sp,sp,-8
  203948:	dfc00115 	stw	ra,4(sp)
  20394c:	df000015 	stw	fp,0(sp)
  203950:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
  203954:	01001074 	movhi	r4,65
  203958:	21040004 	addi	r4,r4,4096
  20395c:	000b883a 	mov	r5,zero
  203960:	01800084 	movi	r6,2
  203964:	01c0fa04 	movi	r7,1000
  203968:	02044600 	call	204460 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
  20396c:	01000834 	movhi	r4,32
  203970:	21189c04 	addi	r4,r4,25200
  203974:	000b883a 	mov	r5,zero
  203978:	000d883a 	mov	r6,zero
  20397c:	0203b040 	call	203b04 <altera_avalon_jtag_uart_init>
  203980:	01000834 	movhi	r4,32
  203984:	21189204 	addi	r4,r4,25160
  203988:	02038d80 	call	2038d8 <alt_dev_reg>
}
  20398c:	e037883a 	mov	sp,fp
  203990:	dfc00117 	ldw	ra,4(sp)
  203994:	df000017 	ldw	fp,0(sp)
  203998:	dec00204 	addi	sp,sp,8
  20399c:	f800283a 	ret

002039a0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  2039a0:	defffa04 	addi	sp,sp,-24
  2039a4:	dfc00515 	stw	ra,20(sp)
  2039a8:	df000415 	stw	fp,16(sp)
  2039ac:	df000404 	addi	fp,sp,16
  2039b0:	e13ffd15 	stw	r4,-12(fp)
  2039b4:	e17ffe15 	stw	r5,-8(fp)
  2039b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  2039bc:	e0bffd17 	ldw	r2,-12(fp)
  2039c0:	10800017 	ldw	r2,0(r2)
  2039c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  2039c8:	e0bffc17 	ldw	r2,-16(fp)
  2039cc:	10c00a04 	addi	r3,r2,40
  2039d0:	e0bffd17 	ldw	r2,-12(fp)
  2039d4:	10800217 	ldw	r2,8(r2)
  2039d8:	1809883a 	mov	r4,r3
  2039dc:	e17ffe17 	ldw	r5,-8(fp)
  2039e0:	e1bfff17 	ldw	r6,-4(fp)
  2039e4:	100f883a 	mov	r7,r2
  2039e8:	0203fc80 	call	203fc8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  2039ec:	e037883a 	mov	sp,fp
  2039f0:	dfc00117 	ldw	ra,4(sp)
  2039f4:	df000017 	ldw	fp,0(sp)
  2039f8:	dec00204 	addi	sp,sp,8
  2039fc:	f800283a 	ret

00203a00 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  203a00:	defffa04 	addi	sp,sp,-24
  203a04:	dfc00515 	stw	ra,20(sp)
  203a08:	df000415 	stw	fp,16(sp)
  203a0c:	df000404 	addi	fp,sp,16
  203a10:	e13ffd15 	stw	r4,-12(fp)
  203a14:	e17ffe15 	stw	r5,-8(fp)
  203a18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  203a1c:	e0bffd17 	ldw	r2,-12(fp)
  203a20:	10800017 	ldw	r2,0(r2)
  203a24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  203a28:	e0bffc17 	ldw	r2,-16(fp)
  203a2c:	10c00a04 	addi	r3,r2,40
  203a30:	e0bffd17 	ldw	r2,-12(fp)
  203a34:	10800217 	ldw	r2,8(r2)
  203a38:	1809883a 	mov	r4,r3
  203a3c:	e17ffe17 	ldw	r5,-8(fp)
  203a40:	e1bfff17 	ldw	r6,-4(fp)
  203a44:	100f883a 	mov	r7,r2
  203a48:	02041d40 	call	2041d4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  203a4c:	e037883a 	mov	sp,fp
  203a50:	dfc00117 	ldw	ra,4(sp)
  203a54:	df000017 	ldw	fp,0(sp)
  203a58:	dec00204 	addi	sp,sp,8
  203a5c:	f800283a 	ret

00203a60 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  203a60:	defffc04 	addi	sp,sp,-16
  203a64:	dfc00315 	stw	ra,12(sp)
  203a68:	df000215 	stw	fp,8(sp)
  203a6c:	df000204 	addi	fp,sp,8
  203a70:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  203a74:	e0bfff17 	ldw	r2,-4(fp)
  203a78:	10800017 	ldw	r2,0(r2)
  203a7c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  203a80:	e0bffe17 	ldw	r2,-8(fp)
  203a84:	10c00a04 	addi	r3,r2,40
  203a88:	e0bfff17 	ldw	r2,-4(fp)
  203a8c:	10800217 	ldw	r2,8(r2)
  203a90:	1809883a 	mov	r4,r3
  203a94:	100b883a 	mov	r5,r2
  203a98:	0203e740 	call	203e74 <altera_avalon_jtag_uart_close>
}
  203a9c:	e037883a 	mov	sp,fp
  203aa0:	dfc00117 	ldw	ra,4(sp)
  203aa4:	df000017 	ldw	fp,0(sp)
  203aa8:	dec00204 	addi	sp,sp,8
  203aac:	f800283a 	ret

00203ab0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  203ab0:	defffa04 	addi	sp,sp,-24
  203ab4:	dfc00515 	stw	ra,20(sp)
  203ab8:	df000415 	stw	fp,16(sp)
  203abc:	df000404 	addi	fp,sp,16
  203ac0:	e13ffd15 	stw	r4,-12(fp)
  203ac4:	e17ffe15 	stw	r5,-8(fp)
  203ac8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  203acc:	e0bffd17 	ldw	r2,-12(fp)
  203ad0:	10800017 	ldw	r2,0(r2)
  203ad4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  203ad8:	e0bffc17 	ldw	r2,-16(fp)
  203adc:	10800a04 	addi	r2,r2,40
  203ae0:	1009883a 	mov	r4,r2
  203ae4:	e17ffe17 	ldw	r5,-8(fp)
  203ae8:	e1bfff17 	ldw	r6,-4(fp)
  203aec:	0203edc0 	call	203edc <altera_avalon_jtag_uart_ioctl>
}
  203af0:	e037883a 	mov	sp,fp
  203af4:	dfc00117 	ldw	ra,4(sp)
  203af8:	df000017 	ldw	fp,0(sp)
  203afc:	dec00204 	addi	sp,sp,8
  203b00:	f800283a 	ret

00203b04 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  203b04:	defffa04 	addi	sp,sp,-24
  203b08:	dfc00515 	stw	ra,20(sp)
  203b0c:	df000415 	stw	fp,16(sp)
  203b10:	df000404 	addi	fp,sp,16
  203b14:	e13ffd15 	stw	r4,-12(fp)
  203b18:	e17ffe15 	stw	r5,-8(fp)
  203b1c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  203b20:	e0bffd17 	ldw	r2,-12(fp)
  203b24:	00c00044 	movi	r3,1
  203b28:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  203b2c:	e0bffd17 	ldw	r2,-12(fp)
  203b30:	10800017 	ldw	r2,0(r2)
  203b34:	10800104 	addi	r2,r2,4
  203b38:	1007883a 	mov	r3,r2
  203b3c:	e0bffd17 	ldw	r2,-12(fp)
  203b40:	10800817 	ldw	r2,32(r2)
  203b44:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  203b48:	e0fffe17 	ldw	r3,-8(fp)
  203b4c:	e0bfff17 	ldw	r2,-4(fp)
  203b50:	d8000015 	stw	zero,0(sp)
  203b54:	1809883a 	mov	r4,r3
  203b58:	100b883a 	mov	r5,r2
  203b5c:	01800834 	movhi	r6,32
  203b60:	318ef204 	addi	r6,r6,15304
  203b64:	e1fffd17 	ldw	r7,-12(fp)
  203b68:	02048480 	call	204848 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  203b6c:	e0bffd17 	ldw	r2,-12(fp)
  203b70:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  203b74:	e0bffd17 	ldw	r2,-12(fp)
  203b78:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  203b7c:	00800874 	movhi	r2,33
  203b80:	10a35f04 	addi	r2,r2,-29316
  203b84:	10800017 	ldw	r2,0(r2)
  203b88:	1809883a 	mov	r4,r3
  203b8c:	100b883a 	mov	r5,r2
  203b90:	01800834 	movhi	r6,32
  203b94:	318f7304 	addi	r6,r6,15820
  203b98:	e1fffd17 	ldw	r7,-12(fp)
  203b9c:	02044e80 	call	2044e8 <alt_alarm_start>
  203ba0:	1000040e 	bge	r2,zero,203bb4 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  203ba4:	e0fffd17 	ldw	r3,-12(fp)
  203ba8:	00a00034 	movhi	r2,32768
  203bac:	10bfffc4 	addi	r2,r2,-1
  203bb0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  203bb4:	e037883a 	mov	sp,fp
  203bb8:	dfc00117 	ldw	ra,4(sp)
  203bbc:	df000017 	ldw	fp,0(sp)
  203bc0:	dec00204 	addi	sp,sp,8
  203bc4:	f800283a 	ret

00203bc8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  203bc8:	defff804 	addi	sp,sp,-32
  203bcc:	df000715 	stw	fp,28(sp)
  203bd0:	df000704 	addi	fp,sp,28
  203bd4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  203bd8:	e0bfff17 	ldw	r2,-4(fp)
  203bdc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  203be0:	e0bffb17 	ldw	r2,-20(fp)
  203be4:	10800017 	ldw	r2,0(r2)
  203be8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  203bec:	e0bffc17 	ldw	r2,-16(fp)
  203bf0:	10800104 	addi	r2,r2,4
  203bf4:	10800037 	ldwio	r2,0(r2)
  203bf8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  203bfc:	e0bffd17 	ldw	r2,-12(fp)
  203c00:	1080c00c 	andi	r2,r2,768
  203c04:	1000011e 	bne	r2,zero,203c0c <altera_avalon_jtag_uart_irq+0x44>
      break;
  203c08:	00006c06 	br	203dbc <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  203c0c:	e0bffd17 	ldw	r2,-12(fp)
  203c10:	1080400c 	andi	r2,r2,256
  203c14:	10003426 	beq	r2,zero,203ce8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  203c18:	00800074 	movhi	r2,1
  203c1c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  203c20:	e0bffb17 	ldw	r2,-20(fp)
  203c24:	10800a17 	ldw	r2,40(r2)
  203c28:	10800044 	addi	r2,r2,1
  203c2c:	1081ffcc 	andi	r2,r2,2047
  203c30:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  203c34:	e0bffb17 	ldw	r2,-20(fp)
  203c38:	10c00b17 	ldw	r3,44(r2)
  203c3c:	e0bffe17 	ldw	r2,-8(fp)
  203c40:	1880011e 	bne	r3,r2,203c48 <altera_avalon_jtag_uart_irq+0x80>
          break;
  203c44:	00001606 	br	203ca0 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  203c48:	e0bffc17 	ldw	r2,-16(fp)
  203c4c:	10800037 	ldwio	r2,0(r2)
  203c50:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  203c54:	e0bff917 	ldw	r2,-28(fp)
  203c58:	10a0000c 	andi	r2,r2,32768
  203c5c:	1000011e 	bne	r2,zero,203c64 <altera_avalon_jtag_uart_irq+0x9c>
          break;
  203c60:	00000f06 	br	203ca0 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  203c64:	e0bffb17 	ldw	r2,-20(fp)
  203c68:	10800a17 	ldw	r2,40(r2)
  203c6c:	e0fff917 	ldw	r3,-28(fp)
  203c70:	1809883a 	mov	r4,r3
  203c74:	e0fffb17 	ldw	r3,-20(fp)
  203c78:	1885883a 	add	r2,r3,r2
  203c7c:	10800e04 	addi	r2,r2,56
  203c80:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  203c84:	e0bffb17 	ldw	r2,-20(fp)
  203c88:	10800a17 	ldw	r2,40(r2)
  203c8c:	10800044 	addi	r2,r2,1
  203c90:	10c1ffcc 	andi	r3,r2,2047
  203c94:	e0bffb17 	ldw	r2,-20(fp)
  203c98:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  203c9c:	003fe006 	br	203c20 <altera_avalon_jtag_uart_irq+0x58>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  203ca0:	e0bff917 	ldw	r2,-28(fp)
  203ca4:	10bfffec 	andhi	r2,r2,65535
  203ca8:	10000f26 	beq	r2,zero,203ce8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  203cac:	e0bffb17 	ldw	r2,-20(fp)
  203cb0:	10c00817 	ldw	r3,32(r2)
  203cb4:	00bfff84 	movi	r2,-2
  203cb8:	1886703a 	and	r3,r3,r2
  203cbc:	e0bffb17 	ldw	r2,-20(fp)
  203cc0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  203cc4:	e0bffc17 	ldw	r2,-16(fp)
  203cc8:	10800104 	addi	r2,r2,4
  203ccc:	1007883a 	mov	r3,r2
  203cd0:	e0bffb17 	ldw	r2,-20(fp)
  203cd4:	10800817 	ldw	r2,32(r2)
  203cd8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  203cdc:	e0bffc17 	ldw	r2,-16(fp)
  203ce0:	10800104 	addi	r2,r2,4
  203ce4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  203ce8:	e0bffd17 	ldw	r2,-12(fp)
  203cec:	1080800c 	andi	r2,r2,512
  203cf0:	10003126 	beq	r2,zero,203db8 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  203cf4:	e0bffd17 	ldw	r2,-12(fp)
  203cf8:	1004d43a 	srli	r2,r2,16
  203cfc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  203d00:	00001406 	br	203d54 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  203d04:	e0bffc17 	ldw	r2,-16(fp)
  203d08:	e0fffb17 	ldw	r3,-20(fp)
  203d0c:	18c00d17 	ldw	r3,52(r3)
  203d10:	e13ffb17 	ldw	r4,-20(fp)
  203d14:	20c7883a 	add	r3,r4,r3
  203d18:	18c20e04 	addi	r3,r3,2104
  203d1c:	18c00003 	ldbu	r3,0(r3)
  203d20:	18c03fcc 	andi	r3,r3,255
  203d24:	18c0201c 	xori	r3,r3,128
  203d28:	18ffe004 	addi	r3,r3,-128
  203d2c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  203d30:	e0bffb17 	ldw	r2,-20(fp)
  203d34:	10800d17 	ldw	r2,52(r2)
  203d38:	10800044 	addi	r2,r2,1
  203d3c:	10c1ffcc 	andi	r3,r2,2047
  203d40:	e0bffb17 	ldw	r2,-20(fp)
  203d44:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  203d48:	e0bffa17 	ldw	r2,-24(fp)
  203d4c:	10bfffc4 	addi	r2,r2,-1
  203d50:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  203d54:	e0bffa17 	ldw	r2,-24(fp)
  203d58:	10000526 	beq	r2,zero,203d70 <altera_avalon_jtag_uart_irq+0x1a8>
  203d5c:	e0bffb17 	ldw	r2,-20(fp)
  203d60:	10c00d17 	ldw	r3,52(r2)
  203d64:	e0bffb17 	ldw	r2,-20(fp)
  203d68:	10800c17 	ldw	r2,48(r2)
  203d6c:	18bfe51e 	bne	r3,r2,203d04 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  203d70:	e0bffa17 	ldw	r2,-24(fp)
  203d74:	10001026 	beq	r2,zero,203db8 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  203d78:	e0bffb17 	ldw	r2,-20(fp)
  203d7c:	10c00817 	ldw	r3,32(r2)
  203d80:	00bfff44 	movi	r2,-3
  203d84:	1886703a 	and	r3,r3,r2
  203d88:	e0bffb17 	ldw	r2,-20(fp)
  203d8c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  203d90:	e0bffb17 	ldw	r2,-20(fp)
  203d94:	10800017 	ldw	r2,0(r2)
  203d98:	10800104 	addi	r2,r2,4
  203d9c:	1007883a 	mov	r3,r2
  203da0:	e0bffb17 	ldw	r2,-20(fp)
  203da4:	10800817 	ldw	r2,32(r2)
  203da8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  203dac:	e0bffc17 	ldw	r2,-16(fp)
  203db0:	10800104 	addi	r2,r2,4
  203db4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  203db8:	003f8c06 	br	203bec <altera_avalon_jtag_uart_irq+0x24>
}
  203dbc:	e037883a 	mov	sp,fp
  203dc0:	df000017 	ldw	fp,0(sp)
  203dc4:	dec00104 	addi	sp,sp,4
  203dc8:	f800283a 	ret

00203dcc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  203dcc:	defff804 	addi	sp,sp,-32
  203dd0:	df000715 	stw	fp,28(sp)
  203dd4:	df000704 	addi	fp,sp,28
  203dd8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  203ddc:	e0bffb17 	ldw	r2,-20(fp)
  203de0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  203de4:	e0bff917 	ldw	r2,-28(fp)
  203de8:	10800017 	ldw	r2,0(r2)
  203dec:	10800104 	addi	r2,r2,4
  203df0:	10800037 	ldwio	r2,0(r2)
  203df4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  203df8:	e0bffa17 	ldw	r2,-24(fp)
  203dfc:	1081000c 	andi	r2,r2,1024
  203e00:	10000b26 	beq	r2,zero,203e30 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  203e04:	e0bff917 	ldw	r2,-28(fp)
  203e08:	10800017 	ldw	r2,0(r2)
  203e0c:	10800104 	addi	r2,r2,4
  203e10:	1007883a 	mov	r3,r2
  203e14:	e0bff917 	ldw	r2,-28(fp)
  203e18:	10800817 	ldw	r2,32(r2)
  203e1c:	10810014 	ori	r2,r2,1024
  203e20:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  203e24:	e0bff917 	ldw	r2,-28(fp)
  203e28:	10000915 	stw	zero,36(r2)
  203e2c:	00000a06 	br	203e58 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  203e30:	e0bff917 	ldw	r2,-28(fp)
  203e34:	10c00917 	ldw	r3,36(r2)
  203e38:	00a00034 	movhi	r2,32768
  203e3c:	10bfff04 	addi	r2,r2,-4
  203e40:	10c00536 	bltu	r2,r3,203e58 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  203e44:	e0bff917 	ldw	r2,-28(fp)
  203e48:	10800917 	ldw	r2,36(r2)
  203e4c:	10c00044 	addi	r3,r2,1
  203e50:	e0bff917 	ldw	r2,-28(fp)
  203e54:	10c00915 	stw	r3,36(r2)
  203e58:	00800874 	movhi	r2,33
  203e5c:	10a35f04 	addi	r2,r2,-29316
  203e60:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  203e64:	e037883a 	mov	sp,fp
  203e68:	df000017 	ldw	fp,0(sp)
  203e6c:	dec00104 	addi	sp,sp,4
  203e70:	f800283a 	ret

00203e74 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  203e74:	defffd04 	addi	sp,sp,-12
  203e78:	df000215 	stw	fp,8(sp)
  203e7c:	df000204 	addi	fp,sp,8
  203e80:	e13ffe15 	stw	r4,-8(fp)
  203e84:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  203e88:	00000506 	br	203ea0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  203e8c:	e0bfff17 	ldw	r2,-4(fp)
  203e90:	1090000c 	andi	r2,r2,16384
  203e94:	10000226 	beq	r2,zero,203ea0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  203e98:	00bffd44 	movi	r2,-11
  203e9c:	00000b06 	br	203ecc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  203ea0:	e0bffe17 	ldw	r2,-8(fp)
  203ea4:	10c00d17 	ldw	r3,52(r2)
  203ea8:	e0bffe17 	ldw	r2,-8(fp)
  203eac:	10800c17 	ldw	r2,48(r2)
  203eb0:	18800526 	beq	r3,r2,203ec8 <altera_avalon_jtag_uart_close+0x54>
  203eb4:	e0bffe17 	ldw	r2,-8(fp)
  203eb8:	10c00917 	ldw	r3,36(r2)
  203ebc:	e0bffe17 	ldw	r2,-8(fp)
  203ec0:	10800117 	ldw	r2,4(r2)
  203ec4:	18bff136 	bltu	r3,r2,203e8c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  203ec8:	0005883a 	mov	r2,zero
}
  203ecc:	e037883a 	mov	sp,fp
  203ed0:	df000017 	ldw	fp,0(sp)
  203ed4:	dec00104 	addi	sp,sp,4
  203ed8:	f800283a 	ret

00203edc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  203edc:	defffa04 	addi	sp,sp,-24
  203ee0:	df000515 	stw	fp,20(sp)
  203ee4:	df000504 	addi	fp,sp,20
  203ee8:	e13ffd15 	stw	r4,-12(fp)
  203eec:	e17ffe15 	stw	r5,-8(fp)
  203ef0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  203ef4:	00bff9c4 	movi	r2,-25
  203ef8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  203efc:	e0bffe17 	ldw	r2,-8(fp)
  203f00:	10da8060 	cmpeqi	r3,r2,27137
  203f04:	1800031e 	bne	r3,zero,203f14 <altera_avalon_jtag_uart_ioctl+0x38>
  203f08:	109a80a0 	cmpeqi	r2,r2,27138
  203f0c:	1000191e 	bne	r2,zero,203f74 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
  203f10:	00002806 	br	203fb4 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  203f14:	e0bffd17 	ldw	r2,-12(fp)
  203f18:	10c00117 	ldw	r3,4(r2)
  203f1c:	00a00034 	movhi	r2,32768
  203f20:	10bfffc4 	addi	r2,r2,-1
  203f24:	18801226 	beq	r3,r2,203f70 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
  203f28:	e0bfff17 	ldw	r2,-4(fp)
  203f2c:	10800017 	ldw	r2,0(r2)
  203f30:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  203f34:	e0bffc17 	ldw	r2,-16(fp)
  203f38:	10800090 	cmplti	r2,r2,2
  203f3c:	1000061e 	bne	r2,zero,203f58 <altera_avalon_jtag_uart_ioctl+0x7c>
  203f40:	e0fffc17 	ldw	r3,-16(fp)
  203f44:	00a00034 	movhi	r2,32768
  203f48:	10bfffc4 	addi	r2,r2,-1
  203f4c:	18800226 	beq	r3,r2,203f58 <altera_avalon_jtag_uart_ioctl+0x7c>
  203f50:	e0bffc17 	ldw	r2,-16(fp)
  203f54:	00000206 	br	203f60 <altera_avalon_jtag_uart_ioctl+0x84>
  203f58:	00a00034 	movhi	r2,32768
  203f5c:	10bfff84 	addi	r2,r2,-2
  203f60:	e0fffd17 	ldw	r3,-12(fp)
  203f64:	18800115 	stw	r2,4(r3)
      rc = 0;
  203f68:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  203f6c:	00001106 	br	203fb4 <altera_avalon_jtag_uart_ioctl+0xd8>
  203f70:	00001006 	br	203fb4 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  203f74:	e0bffd17 	ldw	r2,-12(fp)
  203f78:	10c00117 	ldw	r3,4(r2)
  203f7c:	00a00034 	movhi	r2,32768
  203f80:	10bfffc4 	addi	r2,r2,-1
  203f84:	18800a26 	beq	r3,r2,203fb0 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  203f88:	e0bffd17 	ldw	r2,-12(fp)
  203f8c:	10c00917 	ldw	r3,36(r2)
  203f90:	e0bffd17 	ldw	r2,-12(fp)
  203f94:	10800117 	ldw	r2,4(r2)
  203f98:	1885803a 	cmpltu	r2,r3,r2
  203f9c:	10c03fcc 	andi	r3,r2,255
  203fa0:	e0bfff17 	ldw	r2,-4(fp)
  203fa4:	10c00015 	stw	r3,0(r2)
      rc = 0;
  203fa8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  203fac:	00000006 	br	203fb0 <altera_avalon_jtag_uart_ioctl+0xd4>
  203fb0:	0001883a 	nop

  default:
    break;
  }

  return rc;
  203fb4:	e0bffb17 	ldw	r2,-20(fp)
}
  203fb8:	e037883a 	mov	sp,fp
  203fbc:	df000017 	ldw	fp,0(sp)
  203fc0:	dec00104 	addi	sp,sp,4
  203fc4:	f800283a 	ret

00203fc8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  203fc8:	defff304 	addi	sp,sp,-52
  203fcc:	dfc00c15 	stw	ra,48(sp)
  203fd0:	df000b15 	stw	fp,44(sp)
  203fd4:	df000b04 	addi	fp,sp,44
  203fd8:	e13ffc15 	stw	r4,-16(fp)
  203fdc:	e17ffd15 	stw	r5,-12(fp)
  203fe0:	e1bffe15 	stw	r6,-8(fp)
  203fe4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  203fe8:	e0bffd17 	ldw	r2,-12(fp)
  203fec:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  203ff0:	00004906 	br	204118 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  203ff4:	e0bffc17 	ldw	r2,-16(fp)
  203ff8:	10800a17 	ldw	r2,40(r2)
  203ffc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  204000:	e0bffc17 	ldw	r2,-16(fp)
  204004:	10800b17 	ldw	r2,44(r2)
  204008:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  20400c:	e0fff717 	ldw	r3,-36(fp)
  204010:	e0bff817 	ldw	r2,-32(fp)
  204014:	18800536 	bltu	r3,r2,20402c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  204018:	e0fff717 	ldw	r3,-36(fp)
  20401c:	e0bff817 	ldw	r2,-32(fp)
  204020:	1885c83a 	sub	r2,r3,r2
  204024:	e0bff615 	stw	r2,-40(fp)
  204028:	00000406 	br	20403c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  20402c:	00c20004 	movi	r3,2048
  204030:	e0bff817 	ldw	r2,-32(fp)
  204034:	1885c83a 	sub	r2,r3,r2
  204038:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  20403c:	e0bff617 	ldw	r2,-40(fp)
  204040:	1000011e 	bne	r2,zero,204048 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
  204044:	00001d06 	br	2040bc <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
  204048:	e0fffe17 	ldw	r3,-8(fp)
  20404c:	e0bff617 	ldw	r2,-40(fp)
  204050:	1880022e 	bgeu	r3,r2,20405c <altera_avalon_jtag_uart_read+0x94>
        n = space;
  204054:	e0bffe17 	ldw	r2,-8(fp)
  204058:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  20405c:	e0bff817 	ldw	r2,-32(fp)
  204060:	10800e04 	addi	r2,r2,56
  204064:	e0fffc17 	ldw	r3,-16(fp)
  204068:	1885883a 	add	r2,r3,r2
  20406c:	e13ff517 	ldw	r4,-44(fp)
  204070:	100b883a 	mov	r5,r2
  204074:	e1bff617 	ldw	r6,-40(fp)
  204078:	020168c0 	call	20168c <memcpy>
      ptr   += n;
  20407c:	e0fff517 	ldw	r3,-44(fp)
  204080:	e0bff617 	ldw	r2,-40(fp)
  204084:	1885883a 	add	r2,r3,r2
  204088:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  20408c:	e0fffe17 	ldw	r3,-8(fp)
  204090:	e0bff617 	ldw	r2,-40(fp)
  204094:	1885c83a 	sub	r2,r3,r2
  204098:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  20409c:	e0fff817 	ldw	r3,-32(fp)
  2040a0:	e0bff617 	ldw	r2,-40(fp)
  2040a4:	1885883a 	add	r2,r3,r2
  2040a8:	10c1ffcc 	andi	r3,r2,2047
  2040ac:	e0bffc17 	ldw	r2,-16(fp)
  2040b0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  2040b4:	e0bffe17 	ldw	r2,-8(fp)
  2040b8:	00bfce16 	blt	zero,r2,203ff4 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  2040bc:	e0fff517 	ldw	r3,-44(fp)
  2040c0:	e0bffd17 	ldw	r2,-12(fp)
  2040c4:	18800126 	beq	r3,r2,2040cc <altera_avalon_jtag_uart_read+0x104>
      break;
  2040c8:	00001506 	br	204120 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  2040cc:	e0bfff17 	ldw	r2,-4(fp)
  2040d0:	1090000c 	andi	r2,r2,16384
  2040d4:	10000126 	beq	r2,zero,2040dc <altera_avalon_jtag_uart_read+0x114>
      break;
  2040d8:	00001106 	br	204120 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  2040dc:	0001883a 	nop
  2040e0:	e0bffc17 	ldw	r2,-16(fp)
  2040e4:	10c00a17 	ldw	r3,40(r2)
  2040e8:	e0bff717 	ldw	r2,-36(fp)
  2040ec:	1880051e 	bne	r3,r2,204104 <altera_avalon_jtag_uart_read+0x13c>
  2040f0:	e0bffc17 	ldw	r2,-16(fp)
  2040f4:	10c00917 	ldw	r3,36(r2)
  2040f8:	e0bffc17 	ldw	r2,-16(fp)
  2040fc:	10800117 	ldw	r2,4(r2)
  204100:	18bff736 	bltu	r3,r2,2040e0 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  204104:	e0bffc17 	ldw	r2,-16(fp)
  204108:	10c00a17 	ldw	r3,40(r2)
  20410c:	e0bff717 	ldw	r2,-36(fp)
  204110:	1880011e 	bne	r3,r2,204118 <altera_avalon_jtag_uart_read+0x150>
      break;
  204114:	00000206 	br	204120 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  204118:	e0bffe17 	ldw	r2,-8(fp)
  20411c:	00bfb516 	blt	zero,r2,203ff4 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  204120:	e0fff517 	ldw	r3,-44(fp)
  204124:	e0bffd17 	ldw	r2,-12(fp)
  204128:	18801826 	beq	r3,r2,20418c <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  20412c:	0005303a 	rdctl	r2,status
  204130:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  204134:	e0fffa17 	ldw	r3,-24(fp)
  204138:	00bfff84 	movi	r2,-2
  20413c:	1884703a 	and	r2,r3,r2
  204140:	1001703a 	wrctl	status,r2
  
  return context;
  204144:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  204148:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  20414c:	e0bffc17 	ldw	r2,-16(fp)
  204150:	10800817 	ldw	r2,32(r2)
  204154:	10c00054 	ori	r3,r2,1
  204158:	e0bffc17 	ldw	r2,-16(fp)
  20415c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  204160:	e0bffc17 	ldw	r2,-16(fp)
  204164:	10800017 	ldw	r2,0(r2)
  204168:	10800104 	addi	r2,r2,4
  20416c:	1007883a 	mov	r3,r2
  204170:	e0bffc17 	ldw	r2,-16(fp)
  204174:	10800817 	ldw	r2,32(r2)
  204178:	18800035 	stwio	r2,0(r3)
  20417c:	e0bff917 	ldw	r2,-28(fp)
  204180:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  204184:	e0bffb17 	ldw	r2,-20(fp)
  204188:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  20418c:	e0fff517 	ldw	r3,-44(fp)
  204190:	e0bffd17 	ldw	r2,-12(fp)
  204194:	18800426 	beq	r3,r2,2041a8 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
  204198:	e0fff517 	ldw	r3,-44(fp)
  20419c:	e0bffd17 	ldw	r2,-12(fp)
  2041a0:	1885c83a 	sub	r2,r3,r2
  2041a4:	00000606 	br	2041c0 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
  2041a8:	e0bfff17 	ldw	r2,-4(fp)
  2041ac:	1090000c 	andi	r2,r2,16384
  2041b0:	10000226 	beq	r2,zero,2041bc <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
  2041b4:	00bffd44 	movi	r2,-11
  2041b8:	00000106 	br	2041c0 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
  2041bc:	00bffec4 	movi	r2,-5
}
  2041c0:	e037883a 	mov	sp,fp
  2041c4:	dfc00117 	ldw	ra,4(sp)
  2041c8:	df000017 	ldw	fp,0(sp)
  2041cc:	dec00204 	addi	sp,sp,8
  2041d0:	f800283a 	ret

002041d4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  2041d4:	defff304 	addi	sp,sp,-52
  2041d8:	dfc00c15 	stw	ra,48(sp)
  2041dc:	df000b15 	stw	fp,44(sp)
  2041e0:	df000b04 	addi	fp,sp,44
  2041e4:	e13ffc15 	stw	r4,-16(fp)
  2041e8:	e17ffd15 	stw	r5,-12(fp)
  2041ec:	e1bffe15 	stw	r6,-8(fp)
  2041f0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  2041f4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  2041f8:	e0bffd17 	ldw	r2,-12(fp)
  2041fc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  204200:	00003806 	br	2042e4 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  204204:	e0bffc17 	ldw	r2,-16(fp)
  204208:	10800c17 	ldw	r2,48(r2)
  20420c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
  204210:	e0bffc17 	ldw	r2,-16(fp)
  204214:	10800d17 	ldw	r2,52(r2)
  204218:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  20421c:	e0fff817 	ldw	r3,-32(fp)
  204220:	e0bff517 	ldw	r2,-44(fp)
  204224:	1880062e 	bgeu	r3,r2,204240 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  204228:	e0fff517 	ldw	r3,-44(fp)
  20422c:	e0bff817 	ldw	r2,-32(fp)
  204230:	1885c83a 	sub	r2,r3,r2
  204234:	10bfffc4 	addi	r2,r2,-1
  204238:	e0bff615 	stw	r2,-40(fp)
  20423c:	00000b06 	br	20426c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  204240:	e0bff517 	ldw	r2,-44(fp)
  204244:	10000526 	beq	r2,zero,20425c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  204248:	00c20004 	movi	r3,2048
  20424c:	e0bff817 	ldw	r2,-32(fp)
  204250:	1885c83a 	sub	r2,r3,r2
  204254:	e0bff615 	stw	r2,-40(fp)
  204258:	00000406 	br	20426c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  20425c:	00c1ffc4 	movi	r3,2047
  204260:	e0bff817 	ldw	r2,-32(fp)
  204264:	1885c83a 	sub	r2,r3,r2
  204268:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  20426c:	e0bff617 	ldw	r2,-40(fp)
  204270:	1000011e 	bne	r2,zero,204278 <altera_avalon_jtag_uart_write+0xa4>
        break;
  204274:	00001d06 	br	2042ec <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
  204278:	e0fffe17 	ldw	r3,-8(fp)
  20427c:	e0bff617 	ldw	r2,-40(fp)
  204280:	1880022e 	bgeu	r3,r2,20428c <altera_avalon_jtag_uart_write+0xb8>
        n = count;
  204284:	e0bffe17 	ldw	r2,-8(fp)
  204288:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  20428c:	e0bff817 	ldw	r2,-32(fp)
  204290:	10820e04 	addi	r2,r2,2104
  204294:	e0fffc17 	ldw	r3,-16(fp)
  204298:	1885883a 	add	r2,r3,r2
  20429c:	1009883a 	mov	r4,r2
  2042a0:	e17ffd17 	ldw	r5,-12(fp)
  2042a4:	e1bff617 	ldw	r6,-40(fp)
  2042a8:	020168c0 	call	20168c <memcpy>
      ptr   += n;
  2042ac:	e0fffd17 	ldw	r3,-12(fp)
  2042b0:	e0bff617 	ldw	r2,-40(fp)
  2042b4:	1885883a 	add	r2,r3,r2
  2042b8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  2042bc:	e0fffe17 	ldw	r3,-8(fp)
  2042c0:	e0bff617 	ldw	r2,-40(fp)
  2042c4:	1885c83a 	sub	r2,r3,r2
  2042c8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  2042cc:	e0fff817 	ldw	r3,-32(fp)
  2042d0:	e0bff617 	ldw	r2,-40(fp)
  2042d4:	1885883a 	add	r2,r3,r2
  2042d8:	10c1ffcc 	andi	r3,r2,2047
  2042dc:	e0bffc17 	ldw	r2,-16(fp)
  2042e0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  2042e4:	e0bffe17 	ldw	r2,-8(fp)
  2042e8:	00bfc616 	blt	zero,r2,204204 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  2042ec:	0005303a 	rdctl	r2,status
  2042f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  2042f4:	e0fffa17 	ldw	r3,-24(fp)
  2042f8:	00bfff84 	movi	r2,-2
  2042fc:	1884703a 	and	r2,r3,r2
  204300:	1001703a 	wrctl	status,r2
  
  return context;
  204304:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  204308:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  20430c:	e0bffc17 	ldw	r2,-16(fp)
  204310:	10800817 	ldw	r2,32(r2)
  204314:	10c00094 	ori	r3,r2,2
  204318:	e0bffc17 	ldw	r2,-16(fp)
  20431c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  204320:	e0bffc17 	ldw	r2,-16(fp)
  204324:	10800017 	ldw	r2,0(r2)
  204328:	10800104 	addi	r2,r2,4
  20432c:	1007883a 	mov	r3,r2
  204330:	e0bffc17 	ldw	r2,-16(fp)
  204334:	10800817 	ldw	r2,32(r2)
  204338:	18800035 	stwio	r2,0(r3)
  20433c:	e0bff917 	ldw	r2,-28(fp)
  204340:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  204344:	e0bffb17 	ldw	r2,-20(fp)
  204348:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  20434c:	e0bffe17 	ldw	r2,-8(fp)
  204350:	0080120e 	bge	zero,r2,20439c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
  204354:	e0bfff17 	ldw	r2,-4(fp)
  204358:	1090000c 	andi	r2,r2,16384
  20435c:	10000126 	beq	r2,zero,204364 <altera_avalon_jtag_uart_write+0x190>
        break;
  204360:	00001006 	br	2043a4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  204364:	0001883a 	nop
  204368:	e0bffc17 	ldw	r2,-16(fp)
  20436c:	10c00d17 	ldw	r3,52(r2)
  204370:	e0bff517 	ldw	r2,-44(fp)
  204374:	1880051e 	bne	r3,r2,20438c <altera_avalon_jtag_uart_write+0x1b8>
  204378:	e0bffc17 	ldw	r2,-16(fp)
  20437c:	10c00917 	ldw	r3,36(r2)
  204380:	e0bffc17 	ldw	r2,-16(fp)
  204384:	10800117 	ldw	r2,4(r2)
  204388:	18bff736 	bltu	r3,r2,204368 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  20438c:	e0bffc17 	ldw	r2,-16(fp)
  204390:	10800917 	ldw	r2,36(r2)
  204394:	10000126 	beq	r2,zero,20439c <altera_avalon_jtag_uart_write+0x1c8>
         break;
  204398:	00000206 	br	2043a4 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
  20439c:	e0bffe17 	ldw	r2,-8(fp)
  2043a0:	00bf9716 	blt	zero,r2,204200 <altera_avalon_jtag_uart_write+0x2c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  2043a4:	e0fffd17 	ldw	r3,-12(fp)
  2043a8:	e0bff717 	ldw	r2,-36(fp)
  2043ac:	18800426 	beq	r3,r2,2043c0 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
  2043b0:	e0fffd17 	ldw	r3,-12(fp)
  2043b4:	e0bff717 	ldw	r2,-36(fp)
  2043b8:	1885c83a 	sub	r2,r3,r2
  2043bc:	00000606 	br	2043d8 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
  2043c0:	e0bfff17 	ldw	r2,-4(fp)
  2043c4:	1090000c 	andi	r2,r2,16384
  2043c8:	10000226 	beq	r2,zero,2043d4 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
  2043cc:	00bffd44 	movi	r2,-11
  2043d0:	00000106 	br	2043d8 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  2043d4:	00bffec4 	movi	r2,-5
}
  2043d8:	e037883a 	mov	sp,fp
  2043dc:	dfc00117 	ldw	ra,4(sp)
  2043e0:	df000017 	ldw	fp,0(sp)
  2043e4:	dec00204 	addi	sp,sp,8
  2043e8:	f800283a 	ret

002043ec <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  2043ec:	defffa04 	addi	sp,sp,-24
  2043f0:	dfc00515 	stw	ra,20(sp)
  2043f4:	df000415 	stw	fp,16(sp)
  2043f8:	df000404 	addi	fp,sp,16
  2043fc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  204400:	0007883a 	mov	r3,zero
  204404:	e0bfff17 	ldw	r2,-4(fp)
  204408:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  20440c:	e0bfff17 	ldw	r2,-4(fp)
  204410:	10800104 	addi	r2,r2,4
  204414:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  204418:	0005303a 	rdctl	r2,status
  20441c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  204420:	e0fffd17 	ldw	r3,-12(fp)
  204424:	00bfff84 	movi	r2,-2
  204428:	1884703a 	and	r2,r3,r2
  20442c:	1001703a 	wrctl	status,r2
  
  return context;
  204430:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  204434:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  204438:	0204f5c0 	call	204f5c <alt_tick>
  20443c:	e0bffc17 	ldw	r2,-16(fp)
  204440:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  204444:	e0bffe17 	ldw	r2,-8(fp)
  204448:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  20444c:	e037883a 	mov	sp,fp
  204450:	dfc00117 	ldw	ra,4(sp)
  204454:	df000017 	ldw	fp,0(sp)
  204458:	dec00204 	addi	sp,sp,8
  20445c:	f800283a 	ret

00204460 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  204460:	defff804 	addi	sp,sp,-32
  204464:	dfc00715 	stw	ra,28(sp)
  204468:	df000615 	stw	fp,24(sp)
  20446c:	df000604 	addi	fp,sp,24
  204470:	e13ffc15 	stw	r4,-16(fp)
  204474:	e17ffd15 	stw	r5,-12(fp)
  204478:	e1bffe15 	stw	r6,-8(fp)
  20447c:	e1ffff15 	stw	r7,-4(fp)
  204480:	e0bfff17 	ldw	r2,-4(fp)
  204484:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  204488:	00800874 	movhi	r2,33
  20448c:	10a35f04 	addi	r2,r2,-29316
  204490:	10800017 	ldw	r2,0(r2)
  204494:	1000041e 	bne	r2,zero,2044a8 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
  204498:	00800874 	movhi	r2,33
  20449c:	10a35f04 	addi	r2,r2,-29316
  2044a0:	e0fffb17 	ldw	r3,-20(fp)
  2044a4:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  2044a8:	e0bffc17 	ldw	r2,-16(fp)
  2044ac:	10800104 	addi	r2,r2,4
  2044b0:	00c001c4 	movi	r3,7
  2044b4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  2044b8:	d8000015 	stw	zero,0(sp)
  2044bc:	e13ffd17 	ldw	r4,-12(fp)
  2044c0:	e17ffe17 	ldw	r5,-8(fp)
  2044c4:	01800834 	movhi	r6,32
  2044c8:	3190fb04 	addi	r6,r6,17388
  2044cc:	e1fffc17 	ldw	r7,-16(fp)
  2044d0:	02048480 	call	204848 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  2044d4:	e037883a 	mov	sp,fp
  2044d8:	dfc00117 	ldw	ra,4(sp)
  2044dc:	df000017 	ldw	fp,0(sp)
  2044e0:	dec00204 	addi	sp,sp,8
  2044e4:	f800283a 	ret

002044e8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  2044e8:	defff504 	addi	sp,sp,-44
  2044ec:	df000a15 	stw	fp,40(sp)
  2044f0:	df000a04 	addi	fp,sp,40
  2044f4:	e13ffc15 	stw	r4,-16(fp)
  2044f8:	e17ffd15 	stw	r5,-12(fp)
  2044fc:	e1bffe15 	stw	r6,-8(fp)
  204500:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  204504:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  204508:	00800874 	movhi	r2,33
  20450c:	10a35f04 	addi	r2,r2,-29316
  204510:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  204514:	10003f26 	beq	r2,zero,204614 <alt_alarm_start+0x12c>
  {
    if (alarm)
  204518:	e0bffc17 	ldw	r2,-16(fp)
  20451c:	10003b26 	beq	r2,zero,20460c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
  204520:	e0bffc17 	ldw	r2,-16(fp)
  204524:	e0fffe17 	ldw	r3,-8(fp)
  204528:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  20452c:	e0bffc17 	ldw	r2,-16(fp)
  204530:	e0ffff17 	ldw	r3,-4(fp)
  204534:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  204538:	0005303a 	rdctl	r2,status
  20453c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  204540:	e0fff817 	ldw	r3,-32(fp)
  204544:	00bfff84 	movi	r2,-2
  204548:	1884703a 	and	r2,r3,r2
  20454c:	1001703a 	wrctl	status,r2
  
  return context;
  204550:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  204554:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  204558:	00800874 	movhi	r2,33
  20455c:	10a36004 	addi	r2,r2,-29312
  204560:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  204564:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  204568:	e0fffd17 	ldw	r3,-12(fp)
  20456c:	e0bff617 	ldw	r2,-40(fp)
  204570:	1885883a 	add	r2,r3,r2
  204574:	10c00044 	addi	r3,r2,1
  204578:	e0bffc17 	ldw	r2,-16(fp)
  20457c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  204580:	e0bffc17 	ldw	r2,-16(fp)
  204584:	10c00217 	ldw	r3,8(r2)
  204588:	e0bff617 	ldw	r2,-40(fp)
  20458c:	1880042e 	bgeu	r3,r2,2045a0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
  204590:	e0bffc17 	ldw	r2,-16(fp)
  204594:	00c00044 	movi	r3,1
  204598:	10c00405 	stb	r3,16(r2)
  20459c:	00000206 	br	2045a8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
  2045a0:	e0bffc17 	ldw	r2,-16(fp)
  2045a4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  2045a8:	e0fffc17 	ldw	r3,-16(fp)
  2045ac:	00800834 	movhi	r2,32
  2045b0:	109cb604 	addi	r2,r2,29400
  2045b4:	e0bff915 	stw	r2,-28(fp)
  2045b8:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  2045bc:	e0bffa17 	ldw	r2,-24(fp)
  2045c0:	e0fff917 	ldw	r3,-28(fp)
  2045c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  2045c8:	e0bff917 	ldw	r2,-28(fp)
  2045cc:	10c00017 	ldw	r3,0(r2)
  2045d0:	e0bffa17 	ldw	r2,-24(fp)
  2045d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  2045d8:	e0bff917 	ldw	r2,-28(fp)
  2045dc:	10800017 	ldw	r2,0(r2)
  2045e0:	e0fffa17 	ldw	r3,-24(fp)
  2045e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  2045e8:	e0bff917 	ldw	r2,-28(fp)
  2045ec:	e0fffa17 	ldw	r3,-24(fp)
  2045f0:	10c00015 	stw	r3,0(r2)
  2045f4:	e0bff717 	ldw	r2,-36(fp)
  2045f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  2045fc:	e0bffb17 	ldw	r2,-20(fp)
  204600:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  204604:	0005883a 	mov	r2,zero
  204608:	00000306 	br	204618 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
  20460c:	00bffa84 	movi	r2,-22
  204610:	00000106 	br	204618 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
  204614:	00bfde84 	movi	r2,-134
  }
}
  204618:	e037883a 	mov	sp,fp
  20461c:	df000017 	ldw	fp,0(sp)
  204620:	dec00104 	addi	sp,sp,4
  204624:	f800283a 	ret

00204628 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  204628:	defffe04 	addi	sp,sp,-8
  20462c:	df000115 	stw	fp,4(sp)
  204630:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  204634:	e03fff15 	stw	zero,-4(fp)
  204638:	00000506 	br	204650 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  20463c:	e0bfff17 	ldw	r2,-4(fp)
  204640:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  204644:	e0bfff17 	ldw	r2,-4(fp)
  204648:	10800804 	addi	r2,r2,32
  20464c:	e0bfff15 	stw	r2,-4(fp)
  204650:	e0bfff17 	ldw	r2,-4(fp)
  204654:	10820030 	cmpltui	r2,r2,2048
  204658:	103ff81e 	bne	r2,zero,20463c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  20465c:	e037883a 	mov	sp,fp
  204660:	df000017 	ldw	fp,0(sp)
  204664:	dec00104 	addi	sp,sp,4
  204668:	f800283a 	ret

0020466c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  20466c:	defffe04 	addi	sp,sp,-8
  204670:	dfc00115 	stw	ra,4(sp)
  204674:	df000015 	stw	fp,0(sp)
  204678:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  20467c:	00800834 	movhi	r2,32
  204680:	109cb304 	addi	r2,r2,29388
  204684:	10800017 	ldw	r2,0(r2)
  204688:	10000526 	beq	r2,zero,2046a0 <alt_get_errno+0x34>
  20468c:	00800834 	movhi	r2,32
  204690:	109cb304 	addi	r2,r2,29388
  204694:	10800017 	ldw	r2,0(r2)
  204698:	103ee83a 	callr	r2
  20469c:	00000206 	br	2046a8 <alt_get_errno+0x3c>
  2046a0:	00800874 	movhi	r2,33
  2046a4:	10a35a04 	addi	r2,r2,-29336
}
  2046a8:	e037883a 	mov	sp,fp
  2046ac:	dfc00117 	ldw	ra,4(sp)
  2046b0:	df000017 	ldw	fp,0(sp)
  2046b4:	dec00204 	addi	sp,sp,8
  2046b8:	f800283a 	ret

002046bc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  2046bc:	defffa04 	addi	sp,sp,-24
  2046c0:	dfc00515 	stw	ra,20(sp)
  2046c4:	df000415 	stw	fp,16(sp)
  2046c8:	df000404 	addi	fp,sp,16
  2046cc:	e13ffe15 	stw	r4,-8(fp)
  2046d0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  2046d4:	e0bffe17 	ldw	r2,-8(fp)
  2046d8:	10000326 	beq	r2,zero,2046e8 <alt_dev_llist_insert+0x2c>
  2046dc:	e0bffe17 	ldw	r2,-8(fp)
  2046e0:	10800217 	ldw	r2,8(r2)
  2046e4:	1000061e 	bne	r2,zero,204700 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  2046e8:	020466c0 	call	20466c <alt_get_errno>
  2046ec:	1007883a 	mov	r3,r2
  2046f0:	00800584 	movi	r2,22
  2046f4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  2046f8:	00bffa84 	movi	r2,-22
  2046fc:	00001306 	br	20474c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  204700:	e0bffe17 	ldw	r2,-8(fp)
  204704:	e0ffff17 	ldw	r3,-4(fp)
  204708:	e0fffc15 	stw	r3,-16(fp)
  20470c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  204710:	e0bffd17 	ldw	r2,-12(fp)
  204714:	e0fffc17 	ldw	r3,-16(fp)
  204718:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  20471c:	e0bffc17 	ldw	r2,-16(fp)
  204720:	10c00017 	ldw	r3,0(r2)
  204724:	e0bffd17 	ldw	r2,-12(fp)
  204728:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  20472c:	e0bffc17 	ldw	r2,-16(fp)
  204730:	10800017 	ldw	r2,0(r2)
  204734:	e0fffd17 	ldw	r3,-12(fp)
  204738:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  20473c:	e0bffc17 	ldw	r2,-16(fp)
  204740:	e0fffd17 	ldw	r3,-12(fp)
  204744:	10c00015 	stw	r3,0(r2)

  return 0;  
  204748:	0005883a 	mov	r2,zero
}
  20474c:	e037883a 	mov	sp,fp
  204750:	dfc00117 	ldw	ra,4(sp)
  204754:	df000017 	ldw	fp,0(sp)
  204758:	dec00204 	addi	sp,sp,8
  20475c:	f800283a 	ret

00204760 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  204760:	defffd04 	addi	sp,sp,-12
  204764:	dfc00215 	stw	ra,8(sp)
  204768:	df000115 	stw	fp,4(sp)
  20476c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  204770:	00800834 	movhi	r2,32
  204774:	10960e04 	addi	r2,r2,22584
  204778:	e0bfff15 	stw	r2,-4(fp)
  20477c:	00000606 	br	204798 <_do_ctors+0x38>
        (*ctor) (); 
  204780:	e0bfff17 	ldw	r2,-4(fp)
  204784:	10800017 	ldw	r2,0(r2)
  204788:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  20478c:	e0bfff17 	ldw	r2,-4(fp)
  204790:	10bfff04 	addi	r2,r2,-4
  204794:	e0bfff15 	stw	r2,-4(fp)
  204798:	e0ffff17 	ldw	r3,-4(fp)
  20479c:	00800834 	movhi	r2,32
  2047a0:	10960f04 	addi	r2,r2,22588
  2047a4:	18bff62e 	bgeu	r3,r2,204780 <_do_ctors+0x20>
        (*ctor) (); 
}
  2047a8:	e037883a 	mov	sp,fp
  2047ac:	dfc00117 	ldw	ra,4(sp)
  2047b0:	df000017 	ldw	fp,0(sp)
  2047b4:	dec00204 	addi	sp,sp,8
  2047b8:	f800283a 	ret

002047bc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  2047bc:	defffd04 	addi	sp,sp,-12
  2047c0:	dfc00215 	stw	ra,8(sp)
  2047c4:	df000115 	stw	fp,4(sp)
  2047c8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  2047cc:	00800834 	movhi	r2,32
  2047d0:	10960e04 	addi	r2,r2,22584
  2047d4:	e0bfff15 	stw	r2,-4(fp)
  2047d8:	00000606 	br	2047f4 <_do_dtors+0x38>
        (*dtor) (); 
  2047dc:	e0bfff17 	ldw	r2,-4(fp)
  2047e0:	10800017 	ldw	r2,0(r2)
  2047e4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  2047e8:	e0bfff17 	ldw	r2,-4(fp)
  2047ec:	10bfff04 	addi	r2,r2,-4
  2047f0:	e0bfff15 	stw	r2,-4(fp)
  2047f4:	e0ffff17 	ldw	r3,-4(fp)
  2047f8:	00800834 	movhi	r2,32
  2047fc:	10960f04 	addi	r2,r2,22588
  204800:	18bff62e 	bgeu	r3,r2,2047dc <_do_dtors+0x20>
        (*dtor) (); 
}
  204804:	e037883a 	mov	sp,fp
  204808:	dfc00117 	ldw	ra,4(sp)
  20480c:	df000017 	ldw	fp,0(sp)
  204810:	dec00204 	addi	sp,sp,8
  204814:	f800283a 	ret

00204818 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  204818:	defffe04 	addi	sp,sp,-8
  20481c:	dfc00115 	stw	ra,4(sp)
  204820:	df000015 	stw	fp,0(sp)
  204824:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  204828:	0009883a 	mov	r4,zero
  20482c:	01440004 	movi	r5,4096
  204830:	02052d80 	call	2052d8 <alt_icache_flush>
#endif
}
  204834:	e037883a 	mov	sp,fp
  204838:	dfc00117 	ldw	ra,4(sp)
  20483c:	df000017 	ldw	fp,0(sp)
  204840:	dec00204 	addi	sp,sp,8
  204844:	f800283a 	ret

00204848 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  204848:	defff904 	addi	sp,sp,-28
  20484c:	dfc00615 	stw	ra,24(sp)
  204850:	df000515 	stw	fp,20(sp)
  204854:	df000504 	addi	fp,sp,20
  204858:	e13ffc15 	stw	r4,-16(fp)
  20485c:	e17ffd15 	stw	r5,-12(fp)
  204860:	e1bffe15 	stw	r6,-8(fp)
  204864:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  204868:	e0800217 	ldw	r2,8(fp)
  20486c:	d8800015 	stw	r2,0(sp)
  204870:	e13ffc17 	ldw	r4,-16(fp)
  204874:	e17ffd17 	ldw	r5,-12(fp)
  204878:	e1bffe17 	ldw	r6,-8(fp)
  20487c:	e1ffff17 	ldw	r7,-4(fp)
  204880:	0204a280 	call	204a28 <alt_iic_isr_register>
}  
  204884:	e037883a 	mov	sp,fp
  204888:	dfc00117 	ldw	ra,4(sp)
  20488c:	df000017 	ldw	fp,0(sp)
  204890:	dec00204 	addi	sp,sp,8
  204894:	f800283a 	ret

00204898 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  204898:	defff904 	addi	sp,sp,-28
  20489c:	df000615 	stw	fp,24(sp)
  2048a0:	df000604 	addi	fp,sp,24
  2048a4:	e13ffe15 	stw	r4,-8(fp)
  2048a8:	e17fff15 	stw	r5,-4(fp)
  2048ac:	e0bfff17 	ldw	r2,-4(fp)
  2048b0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  2048b4:	0005303a 	rdctl	r2,status
  2048b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  2048bc:	e0fffb17 	ldw	r3,-20(fp)
  2048c0:	00bfff84 	movi	r2,-2
  2048c4:	1884703a 	and	r2,r3,r2
  2048c8:	1001703a 	wrctl	status,r2
  
  return context;
  2048cc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  2048d0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  2048d4:	e0bffa17 	ldw	r2,-24(fp)
  2048d8:	00c00044 	movi	r3,1
  2048dc:	1884983a 	sll	r2,r3,r2
  2048e0:	1007883a 	mov	r3,r2
  2048e4:	00800874 	movhi	r2,33
  2048e8:	10a35e04 	addi	r2,r2,-29320
  2048ec:	10800017 	ldw	r2,0(r2)
  2048f0:	1886b03a 	or	r3,r3,r2
  2048f4:	00800874 	movhi	r2,33
  2048f8:	10a35e04 	addi	r2,r2,-29320
  2048fc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  204900:	00800874 	movhi	r2,33
  204904:	10a35e04 	addi	r2,r2,-29320
  204908:	10800017 	ldw	r2,0(r2)
  20490c:	100170fa 	wrctl	ienable,r2
  204910:	e0bffc17 	ldw	r2,-16(fp)
  204914:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  204918:	e0bffd17 	ldw	r2,-12(fp)
  20491c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  204920:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  204924:	0001883a 	nop
}
  204928:	e037883a 	mov	sp,fp
  20492c:	df000017 	ldw	fp,0(sp)
  204930:	dec00104 	addi	sp,sp,4
  204934:	f800283a 	ret

00204938 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  204938:	defff904 	addi	sp,sp,-28
  20493c:	df000615 	stw	fp,24(sp)
  204940:	df000604 	addi	fp,sp,24
  204944:	e13ffe15 	stw	r4,-8(fp)
  204948:	e17fff15 	stw	r5,-4(fp)
  20494c:	e0bfff17 	ldw	r2,-4(fp)
  204950:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  204954:	0005303a 	rdctl	r2,status
  204958:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  20495c:	e0fffb17 	ldw	r3,-20(fp)
  204960:	00bfff84 	movi	r2,-2
  204964:	1884703a 	and	r2,r3,r2
  204968:	1001703a 	wrctl	status,r2
  
  return context;
  20496c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  204970:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  204974:	e0bffa17 	ldw	r2,-24(fp)
  204978:	00c00044 	movi	r3,1
  20497c:	1884983a 	sll	r2,r3,r2
  204980:	0084303a 	nor	r2,zero,r2
  204984:	1007883a 	mov	r3,r2
  204988:	00800874 	movhi	r2,33
  20498c:	10a35e04 	addi	r2,r2,-29320
  204990:	10800017 	ldw	r2,0(r2)
  204994:	1886703a 	and	r3,r3,r2
  204998:	00800874 	movhi	r2,33
  20499c:	10a35e04 	addi	r2,r2,-29320
  2049a0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  2049a4:	00800874 	movhi	r2,33
  2049a8:	10a35e04 	addi	r2,r2,-29320
  2049ac:	10800017 	ldw	r2,0(r2)
  2049b0:	100170fa 	wrctl	ienable,r2
  2049b4:	e0bffc17 	ldw	r2,-16(fp)
  2049b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  2049bc:	e0bffd17 	ldw	r2,-12(fp)
  2049c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  2049c4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  2049c8:	0001883a 	nop
}
  2049cc:	e037883a 	mov	sp,fp
  2049d0:	df000017 	ldw	fp,0(sp)
  2049d4:	dec00104 	addi	sp,sp,4
  2049d8:	f800283a 	ret

002049dc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  2049dc:	defffc04 	addi	sp,sp,-16
  2049e0:	df000315 	stw	fp,12(sp)
  2049e4:	df000304 	addi	fp,sp,12
  2049e8:	e13ffe15 	stw	r4,-8(fp)
  2049ec:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  2049f0:	000530fa 	rdctl	r2,ienable
  2049f4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  2049f8:	e0bfff17 	ldw	r2,-4(fp)
  2049fc:	00c00044 	movi	r3,1
  204a00:	1884983a 	sll	r2,r3,r2
  204a04:	1007883a 	mov	r3,r2
  204a08:	e0bffd17 	ldw	r2,-12(fp)
  204a0c:	1884703a 	and	r2,r3,r2
  204a10:	1004c03a 	cmpne	r2,r2,zero
  204a14:	10803fcc 	andi	r2,r2,255
}
  204a18:	e037883a 	mov	sp,fp
  204a1c:	df000017 	ldw	fp,0(sp)
  204a20:	dec00104 	addi	sp,sp,4
  204a24:	f800283a 	ret

00204a28 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  204a28:	defff504 	addi	sp,sp,-44
  204a2c:	dfc00a15 	stw	ra,40(sp)
  204a30:	df000915 	stw	fp,36(sp)
  204a34:	df000904 	addi	fp,sp,36
  204a38:	e13ffc15 	stw	r4,-16(fp)
  204a3c:	e17ffd15 	stw	r5,-12(fp)
  204a40:	e1bffe15 	stw	r6,-8(fp)
  204a44:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  204a48:	00bffa84 	movi	r2,-22
  204a4c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  204a50:	e0bffd17 	ldw	r2,-12(fp)
  204a54:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  204a58:	e0bff817 	ldw	r2,-32(fp)
  204a5c:	10800808 	cmpgei	r2,r2,32
  204a60:	1000271e 	bne	r2,zero,204b00 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  204a64:	0005303a 	rdctl	r2,status
  204a68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  204a6c:	e0fffa17 	ldw	r3,-24(fp)
  204a70:	00bfff84 	movi	r2,-2
  204a74:	1884703a 	and	r2,r3,r2
  204a78:	1001703a 	wrctl	status,r2
  
  return context;
  204a7c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  204a80:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
  204a84:	00800874 	movhi	r2,33
  204a88:	10a36c04 	addi	r2,r2,-29264
  204a8c:	e0fff817 	ldw	r3,-32(fp)
  204a90:	180690fa 	slli	r3,r3,3
  204a94:	10c5883a 	add	r2,r2,r3
  204a98:	e0fffe17 	ldw	r3,-8(fp)
  204a9c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  204aa0:	00800874 	movhi	r2,33
  204aa4:	10a36c04 	addi	r2,r2,-29264
  204aa8:	e0fff817 	ldw	r3,-32(fp)
  204aac:	180690fa 	slli	r3,r3,3
  204ab0:	18c00104 	addi	r3,r3,4
  204ab4:	10c5883a 	add	r2,r2,r3
  204ab8:	e0ffff17 	ldw	r3,-4(fp)
  204abc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  204ac0:	e0bffe17 	ldw	r2,-8(fp)
  204ac4:	10000526 	beq	r2,zero,204adc <alt_iic_isr_register+0xb4>
  204ac8:	e0bff817 	ldw	r2,-32(fp)
  204acc:	e13ffc17 	ldw	r4,-16(fp)
  204ad0:	100b883a 	mov	r5,r2
  204ad4:	02048980 	call	204898 <alt_ic_irq_enable>
  204ad8:	00000406 	br	204aec <alt_iic_isr_register+0xc4>
  204adc:	e0bff817 	ldw	r2,-32(fp)
  204ae0:	e13ffc17 	ldw	r4,-16(fp)
  204ae4:	100b883a 	mov	r5,r2
  204ae8:	02049380 	call	204938 <alt_ic_irq_disable>
  204aec:	e0bff715 	stw	r2,-36(fp)
  204af0:	e0bff917 	ldw	r2,-28(fp)
  204af4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  204af8:	e0bffb17 	ldw	r2,-20(fp)
  204afc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  204b00:	e0bff717 	ldw	r2,-36(fp)
}
  204b04:	e037883a 	mov	sp,fp
  204b08:	dfc00117 	ldw	ra,4(sp)
  204b0c:	df000017 	ldw	fp,0(sp)
  204b10:	dec00204 	addi	sp,sp,8
  204b14:	f800283a 	ret

00204b18 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  204b18:	defff904 	addi	sp,sp,-28
  204b1c:	dfc00615 	stw	ra,24(sp)
  204b20:	df000515 	stw	fp,20(sp)
  204b24:	df000504 	addi	fp,sp,20
  204b28:	e13ffc15 	stw	r4,-16(fp)
  204b2c:	e17ffd15 	stw	r5,-12(fp)
  204b30:	e1bffe15 	stw	r6,-8(fp)
  204b34:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  204b38:	e13ffd17 	ldw	r4,-12(fp)
  204b3c:	e17ffe17 	ldw	r5,-8(fp)
  204b40:	e1bfff17 	ldw	r6,-4(fp)
  204b44:	0204d6c0 	call	204d6c <open>
  204b48:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  204b4c:	e0bffb17 	ldw	r2,-20(fp)
  204b50:	10001c16 	blt	r2,zero,204bc4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  204b54:	00800834 	movhi	r2,32
  204b58:	10983204 	addi	r2,r2,24776
  204b5c:	e0fffb17 	ldw	r3,-20(fp)
  204b60:	18c00324 	muli	r3,r3,12
  204b64:	10c5883a 	add	r2,r2,r3
  204b68:	10c00017 	ldw	r3,0(r2)
  204b6c:	e0bffc17 	ldw	r2,-16(fp)
  204b70:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  204b74:	00800834 	movhi	r2,32
  204b78:	10983204 	addi	r2,r2,24776
  204b7c:	e0fffb17 	ldw	r3,-20(fp)
  204b80:	18c00324 	muli	r3,r3,12
  204b84:	18c00104 	addi	r3,r3,4
  204b88:	10c5883a 	add	r2,r2,r3
  204b8c:	10c00017 	ldw	r3,0(r2)
  204b90:	e0bffc17 	ldw	r2,-16(fp)
  204b94:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  204b98:	00800834 	movhi	r2,32
  204b9c:	10983204 	addi	r2,r2,24776
  204ba0:	e0fffb17 	ldw	r3,-20(fp)
  204ba4:	18c00324 	muli	r3,r3,12
  204ba8:	18c00204 	addi	r3,r3,8
  204bac:	10c5883a 	add	r2,r2,r3
  204bb0:	10c00017 	ldw	r3,0(r2)
  204bb4:	e0bffc17 	ldw	r2,-16(fp)
  204bb8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  204bbc:	e13ffb17 	ldw	r4,-20(fp)
  204bc0:	02036800 	call	203680 <alt_release_fd>
  }
} 
  204bc4:	e037883a 	mov	sp,fp
  204bc8:	dfc00117 	ldw	ra,4(sp)
  204bcc:	df000017 	ldw	fp,0(sp)
  204bd0:	dec00204 	addi	sp,sp,8
  204bd4:	f800283a 	ret

00204bd8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  204bd8:	defffb04 	addi	sp,sp,-20
  204bdc:	dfc00415 	stw	ra,16(sp)
  204be0:	df000315 	stw	fp,12(sp)
  204be4:	df000304 	addi	fp,sp,12
  204be8:	e13ffd15 	stw	r4,-12(fp)
  204bec:	e17ffe15 	stw	r5,-8(fp)
  204bf0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  204bf4:	01000834 	movhi	r4,32
  204bf8:	21183504 	addi	r4,r4,24788
  204bfc:	e17ffd17 	ldw	r5,-12(fp)
  204c00:	01800044 	movi	r6,1
  204c04:	01c07fc4 	movi	r7,511
  204c08:	0204b180 	call	204b18 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  204c0c:	01000834 	movhi	r4,32
  204c10:	21183204 	addi	r4,r4,24776
  204c14:	e17ffe17 	ldw	r5,-8(fp)
  204c18:	000d883a 	mov	r6,zero
  204c1c:	01c07fc4 	movi	r7,511
  204c20:	0204b180 	call	204b18 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  204c24:	01000834 	movhi	r4,32
  204c28:	21183804 	addi	r4,r4,24800
  204c2c:	e17fff17 	ldw	r5,-4(fp)
  204c30:	01800044 	movi	r6,1
  204c34:	01c07fc4 	movi	r7,511
  204c38:	0204b180 	call	204b18 <alt_open_fd>
}  
  204c3c:	e037883a 	mov	sp,fp
  204c40:	dfc00117 	ldw	ra,4(sp)
  204c44:	df000017 	ldw	fp,0(sp)
  204c48:	dec00204 	addi	sp,sp,8
  204c4c:	f800283a 	ret

00204c50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  204c50:	defffe04 	addi	sp,sp,-8
  204c54:	dfc00115 	stw	ra,4(sp)
  204c58:	df000015 	stw	fp,0(sp)
  204c5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  204c60:	00800834 	movhi	r2,32
  204c64:	109cb304 	addi	r2,r2,29388
  204c68:	10800017 	ldw	r2,0(r2)
  204c6c:	10000526 	beq	r2,zero,204c84 <alt_get_errno+0x34>
  204c70:	00800834 	movhi	r2,32
  204c74:	109cb304 	addi	r2,r2,29388
  204c78:	10800017 	ldw	r2,0(r2)
  204c7c:	103ee83a 	callr	r2
  204c80:	00000206 	br	204c8c <alt_get_errno+0x3c>
  204c84:	00800874 	movhi	r2,33
  204c88:	10a35a04 	addi	r2,r2,-29336
}
  204c8c:	e037883a 	mov	sp,fp
  204c90:	dfc00117 	ldw	ra,4(sp)
  204c94:	df000017 	ldw	fp,0(sp)
  204c98:	dec00204 	addi	sp,sp,8
  204c9c:	f800283a 	ret

00204ca0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  204ca0:	defffd04 	addi	sp,sp,-12
  204ca4:	df000215 	stw	fp,8(sp)
  204ca8:	df000204 	addi	fp,sp,8
  204cac:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  204cb0:	e0bfff17 	ldw	r2,-4(fp)
  204cb4:	10800217 	ldw	r2,8(r2)
  204cb8:	10d00034 	orhi	r3,r2,16384
  204cbc:	e0bfff17 	ldw	r2,-4(fp)
  204cc0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  204cc4:	e03ffe15 	stw	zero,-8(fp)
  204cc8:	00001d06 	br	204d40 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  204ccc:	00800834 	movhi	r2,32
  204cd0:	10983204 	addi	r2,r2,24776
  204cd4:	e0fffe17 	ldw	r3,-8(fp)
  204cd8:	18c00324 	muli	r3,r3,12
  204cdc:	10c5883a 	add	r2,r2,r3
  204ce0:	10c00017 	ldw	r3,0(r2)
  204ce4:	e0bfff17 	ldw	r2,-4(fp)
  204ce8:	10800017 	ldw	r2,0(r2)
  204cec:	1880111e 	bne	r3,r2,204d34 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  204cf0:	00800834 	movhi	r2,32
  204cf4:	10983204 	addi	r2,r2,24776
  204cf8:	e0fffe17 	ldw	r3,-8(fp)
  204cfc:	18c00324 	muli	r3,r3,12
  204d00:	18c00204 	addi	r3,r3,8
  204d04:	10c5883a 	add	r2,r2,r3
  204d08:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  204d0c:	1000090e 	bge	r2,zero,204d34 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  204d10:	e0bffe17 	ldw	r2,-8(fp)
  204d14:	10c00324 	muli	r3,r2,12
  204d18:	00800834 	movhi	r2,32
  204d1c:	10983204 	addi	r2,r2,24776
  204d20:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  204d24:	e0bfff17 	ldw	r2,-4(fp)
  204d28:	18800226 	beq	r3,r2,204d34 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  204d2c:	00bffcc4 	movi	r2,-13
  204d30:	00000a06 	br	204d5c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  204d34:	e0bffe17 	ldw	r2,-8(fp)
  204d38:	10800044 	addi	r2,r2,1
  204d3c:	e0bffe15 	stw	r2,-8(fp)
  204d40:	00800834 	movhi	r2,32
  204d44:	109cb204 	addi	r2,r2,29384
  204d48:	10800017 	ldw	r2,0(r2)
  204d4c:	1007883a 	mov	r3,r2
  204d50:	e0bffe17 	ldw	r2,-8(fp)
  204d54:	18bfdd2e 	bgeu	r3,r2,204ccc <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  204d58:	0005883a 	mov	r2,zero
}
  204d5c:	e037883a 	mov	sp,fp
  204d60:	df000017 	ldw	fp,0(sp)
  204d64:	dec00104 	addi	sp,sp,4
  204d68:	f800283a 	ret

00204d6c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  204d6c:	defff604 	addi	sp,sp,-40
  204d70:	dfc00915 	stw	ra,36(sp)
  204d74:	df000815 	stw	fp,32(sp)
  204d78:	df000804 	addi	fp,sp,32
  204d7c:	e13ffd15 	stw	r4,-12(fp)
  204d80:	e17ffe15 	stw	r5,-8(fp)
  204d84:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  204d88:	00bfffc4 	movi	r2,-1
  204d8c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  204d90:	00bffb44 	movi	r2,-19
  204d94:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  204d98:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  204d9c:	e13ffd17 	ldw	r4,-12(fp)
  204da0:	01400834 	movhi	r5,32
  204da4:	295cb004 	addi	r5,r5,29376
  204da8:	02050800 	call	205080 <alt_find_dev>
  204dac:	e0bff815 	stw	r2,-32(fp)
  204db0:	e0bff817 	ldw	r2,-32(fp)
  204db4:	1000051e 	bne	r2,zero,204dcc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  204db8:	e13ffd17 	ldw	r4,-12(fp)
  204dbc:	02051100 	call	205110 <alt_find_file>
  204dc0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  204dc4:	00800044 	movi	r2,1
  204dc8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  204dcc:	e0bff817 	ldw	r2,-32(fp)
  204dd0:	10002926 	beq	r2,zero,204e78 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
  204dd4:	e13ff817 	ldw	r4,-32(fp)
  204dd8:	02052240 	call	205224 <alt_get_fd>
  204ddc:	e0bff915 	stw	r2,-28(fp)
  204de0:	e0bff917 	ldw	r2,-28(fp)
  204de4:	1000030e 	bge	r2,zero,204df4 <open+0x88>
    {
      status = index;
  204de8:	e0bff917 	ldw	r2,-28(fp)
  204dec:	e0bffa15 	stw	r2,-24(fp)
  204df0:	00002306 	br	204e80 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
  204df4:	e0bff917 	ldw	r2,-28(fp)
  204df8:	10c00324 	muli	r3,r2,12
  204dfc:	00800834 	movhi	r2,32
  204e00:	10983204 	addi	r2,r2,24776
  204e04:	1885883a 	add	r2,r3,r2
  204e08:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  204e0c:	e0fffe17 	ldw	r3,-8(fp)
  204e10:	00900034 	movhi	r2,16384
  204e14:	10bfffc4 	addi	r2,r2,-1
  204e18:	1886703a 	and	r3,r3,r2
  204e1c:	e0bffc17 	ldw	r2,-16(fp)
  204e20:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  204e24:	e0bffb17 	ldw	r2,-20(fp)
  204e28:	1000051e 	bne	r2,zero,204e40 <open+0xd4>
  204e2c:	e13ffc17 	ldw	r4,-16(fp)
  204e30:	0204ca00 	call	204ca0 <alt_file_locked>
  204e34:	e0bffa15 	stw	r2,-24(fp)
  204e38:	e0bffa17 	ldw	r2,-24(fp)
  204e3c:	10001016 	blt	r2,zero,204e80 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  204e40:	e0bff817 	ldw	r2,-32(fp)
  204e44:	10800317 	ldw	r2,12(r2)
  204e48:	10000826 	beq	r2,zero,204e6c <open+0x100>
  204e4c:	e0bff817 	ldw	r2,-32(fp)
  204e50:	10800317 	ldw	r2,12(r2)
  204e54:	e13ffc17 	ldw	r4,-16(fp)
  204e58:	e17ffd17 	ldw	r5,-12(fp)
  204e5c:	e1bffe17 	ldw	r6,-8(fp)
  204e60:	e1ffff17 	ldw	r7,-4(fp)
  204e64:	103ee83a 	callr	r2
  204e68:	00000106 	br	204e70 <open+0x104>
  204e6c:	0005883a 	mov	r2,zero
  204e70:	e0bffa15 	stw	r2,-24(fp)
  204e74:	00000206 	br	204e80 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
  204e78:	00bffb44 	movi	r2,-19
  204e7c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  204e80:	e0bffa17 	ldw	r2,-24(fp)
  204e84:	1000090e 	bge	r2,zero,204eac <open+0x140>
  {
    alt_release_fd (index);  
  204e88:	e13ff917 	ldw	r4,-28(fp)
  204e8c:	02036800 	call	203680 <alt_release_fd>
    ALT_ERRNO = -status;
  204e90:	0204c500 	call	204c50 <alt_get_errno>
  204e94:	1007883a 	mov	r3,r2
  204e98:	e0bffa17 	ldw	r2,-24(fp)
  204e9c:	0085c83a 	sub	r2,zero,r2
  204ea0:	18800015 	stw	r2,0(r3)
    return -1;
  204ea4:	00bfffc4 	movi	r2,-1
  204ea8:	00000106 	br	204eb0 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
  204eac:	e0bff917 	ldw	r2,-28(fp)
}
  204eb0:	e037883a 	mov	sp,fp
  204eb4:	dfc00117 	ldw	ra,4(sp)
  204eb8:	df000017 	ldw	fp,0(sp)
  204ebc:	dec00204 	addi	sp,sp,8
  204ec0:	f800283a 	ret

00204ec4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  204ec4:	defffa04 	addi	sp,sp,-24
  204ec8:	df000515 	stw	fp,20(sp)
  204ecc:	df000504 	addi	fp,sp,20
  204ed0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  204ed4:	0005303a 	rdctl	r2,status
  204ed8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  204edc:	e0fffc17 	ldw	r3,-16(fp)
  204ee0:	00bfff84 	movi	r2,-2
  204ee4:	1884703a 	and	r2,r3,r2
  204ee8:	1001703a 	wrctl	status,r2
  
  return context;
  204eec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  204ef0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  204ef4:	e0bfff17 	ldw	r2,-4(fp)
  204ef8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  204efc:	e0bffd17 	ldw	r2,-12(fp)
  204f00:	10800017 	ldw	r2,0(r2)
  204f04:	e0fffd17 	ldw	r3,-12(fp)
  204f08:	18c00117 	ldw	r3,4(r3)
  204f0c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  204f10:	e0bffd17 	ldw	r2,-12(fp)
  204f14:	10800117 	ldw	r2,4(r2)
  204f18:	e0fffd17 	ldw	r3,-12(fp)
  204f1c:	18c00017 	ldw	r3,0(r3)
  204f20:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  204f24:	e0bffd17 	ldw	r2,-12(fp)
  204f28:	e0fffd17 	ldw	r3,-12(fp)
  204f2c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  204f30:	e0bffd17 	ldw	r2,-12(fp)
  204f34:	e0fffd17 	ldw	r3,-12(fp)
  204f38:	10c00015 	stw	r3,0(r2)
  204f3c:	e0bffb17 	ldw	r2,-20(fp)
  204f40:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  204f44:	e0bffe17 	ldw	r2,-8(fp)
  204f48:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  204f4c:	e037883a 	mov	sp,fp
  204f50:	df000017 	ldw	fp,0(sp)
  204f54:	dec00104 	addi	sp,sp,4
  204f58:	f800283a 	ret

00204f5c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  204f5c:	defffb04 	addi	sp,sp,-20
  204f60:	dfc00415 	stw	ra,16(sp)
  204f64:	df000315 	stw	fp,12(sp)
  204f68:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  204f6c:	d0a00c17 	ldw	r2,-32720(gp)
  204f70:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  204f74:	d0a6b617 	ldw	r2,-25896(gp)
  204f78:	10800044 	addi	r2,r2,1
  204f7c:	d0a6b615 	stw	r2,-25896(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  204f80:	00002e06 	br	20503c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  204f84:	e0bffd17 	ldw	r2,-12(fp)
  204f88:	10800017 	ldw	r2,0(r2)
  204f8c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  204f90:	e0bffd17 	ldw	r2,-12(fp)
  204f94:	10800403 	ldbu	r2,16(r2)
  204f98:	10803fcc 	andi	r2,r2,255
  204f9c:	10000426 	beq	r2,zero,204fb0 <alt_tick+0x54>
  204fa0:	d0a6b617 	ldw	r2,-25896(gp)
  204fa4:	1000021e 	bne	r2,zero,204fb0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  204fa8:	e0bffd17 	ldw	r2,-12(fp)
  204fac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  204fb0:	e0bffd17 	ldw	r2,-12(fp)
  204fb4:	10800217 	ldw	r2,8(r2)
  204fb8:	d0e6b617 	ldw	r3,-25896(gp)
  204fbc:	18801d36 	bltu	r3,r2,205034 <alt_tick+0xd8>
  204fc0:	e0bffd17 	ldw	r2,-12(fp)
  204fc4:	10800403 	ldbu	r2,16(r2)
  204fc8:	10803fcc 	andi	r2,r2,255
  204fcc:	1000191e 	bne	r2,zero,205034 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  204fd0:	e0bffd17 	ldw	r2,-12(fp)
  204fd4:	10800317 	ldw	r2,12(r2)
  204fd8:	e0fffd17 	ldw	r3,-12(fp)
  204fdc:	18c00517 	ldw	r3,20(r3)
  204fe0:	1809883a 	mov	r4,r3
  204fe4:	103ee83a 	callr	r2
  204fe8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  204fec:	e0bfff17 	ldw	r2,-4(fp)
  204ff0:	1000031e 	bne	r2,zero,205000 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  204ff4:	e13ffd17 	ldw	r4,-12(fp)
  204ff8:	0204ec40 	call	204ec4 <alt_alarm_stop>
  204ffc:	00000d06 	br	205034 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  205000:	e0bffd17 	ldw	r2,-12(fp)
  205004:	10c00217 	ldw	r3,8(r2)
  205008:	e0bfff17 	ldw	r2,-4(fp)
  20500c:	1887883a 	add	r3,r3,r2
  205010:	e0bffd17 	ldw	r2,-12(fp)
  205014:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  205018:	e0bffd17 	ldw	r2,-12(fp)
  20501c:	10c00217 	ldw	r3,8(r2)
  205020:	d0a6b617 	ldw	r2,-25896(gp)
  205024:	1880032e 	bgeu	r3,r2,205034 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  205028:	e0bffd17 	ldw	r2,-12(fp)
  20502c:	00c00044 	movi	r3,1
  205030:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  205034:	e0bffe17 	ldw	r2,-8(fp)
  205038:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  20503c:	e0fffd17 	ldw	r3,-12(fp)
  205040:	d0a00c04 	addi	r2,gp,-32720
  205044:	18bfcf1e 	bne	r3,r2,204f84 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  205048:	0001883a 	nop
}
  20504c:	e037883a 	mov	sp,fp
  205050:	dfc00117 	ldw	ra,4(sp)
  205054:	df000017 	ldw	fp,0(sp)
  205058:	dec00204 	addi	sp,sp,8
  20505c:	f800283a 	ret

00205060 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  205060:	deffff04 	addi	sp,sp,-4
  205064:	df000015 	stw	fp,0(sp)
  205068:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  20506c:	000170fa 	wrctl	ienable,zero
}
  205070:	e037883a 	mov	sp,fp
  205074:	df000017 	ldw	fp,0(sp)
  205078:	dec00104 	addi	sp,sp,4
  20507c:	f800283a 	ret

00205080 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  205080:	defffa04 	addi	sp,sp,-24
  205084:	dfc00515 	stw	ra,20(sp)
  205088:	df000415 	stw	fp,16(sp)
  20508c:	df000404 	addi	fp,sp,16
  205090:	e13ffe15 	stw	r4,-8(fp)
  205094:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  205098:	e0bfff17 	ldw	r2,-4(fp)
  20509c:	10800017 	ldw	r2,0(r2)
  2050a0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  2050a4:	e13ffe17 	ldw	r4,-8(fp)
  2050a8:	02054c80 	call	2054c8 <strlen>
  2050ac:	10800044 	addi	r2,r2,1
  2050b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  2050b4:	00000d06 	br	2050ec <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  2050b8:	e0bffc17 	ldw	r2,-16(fp)
  2050bc:	10c00217 	ldw	r3,8(r2)
  2050c0:	e0bffd17 	ldw	r2,-12(fp)
  2050c4:	1809883a 	mov	r4,r3
  2050c8:	e17ffe17 	ldw	r5,-8(fp)
  2050cc:	100d883a 	mov	r6,r2
  2050d0:	020544c0 	call	20544c <memcmp>
  2050d4:	1000021e 	bne	r2,zero,2050e0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  2050d8:	e0bffc17 	ldw	r2,-16(fp)
  2050dc:	00000706 	br	2050fc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  2050e0:	e0bffc17 	ldw	r2,-16(fp)
  2050e4:	10800017 	ldw	r2,0(r2)
  2050e8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  2050ec:	e0fffc17 	ldw	r3,-16(fp)
  2050f0:	e0bfff17 	ldw	r2,-4(fp)
  2050f4:	18bff01e 	bne	r3,r2,2050b8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  2050f8:	0005883a 	mov	r2,zero
}
  2050fc:	e037883a 	mov	sp,fp
  205100:	dfc00117 	ldw	ra,4(sp)
  205104:	df000017 	ldw	fp,0(sp)
  205108:	dec00204 	addi	sp,sp,8
  20510c:	f800283a 	ret

00205110 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  205110:	defffb04 	addi	sp,sp,-20
  205114:	dfc00415 	stw	ra,16(sp)
  205118:	df000315 	stw	fp,12(sp)
  20511c:	df000304 	addi	fp,sp,12
  205120:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  205124:	00800834 	movhi	r2,32
  205128:	109cae04 	addi	r2,r2,29368
  20512c:	10800017 	ldw	r2,0(r2)
  205130:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  205134:	00003106 	br	2051fc <alt_find_file+0xec>
  {
    len = strlen(next->name);
  205138:	e0bffd17 	ldw	r2,-12(fp)
  20513c:	10800217 	ldw	r2,8(r2)
  205140:	1009883a 	mov	r4,r2
  205144:	02054c80 	call	2054c8 <strlen>
  205148:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  20514c:	e0bffd17 	ldw	r2,-12(fp)
  205150:	10c00217 	ldw	r3,8(r2)
  205154:	e0bffe17 	ldw	r2,-8(fp)
  205158:	10bfffc4 	addi	r2,r2,-1
  20515c:	1885883a 	add	r2,r3,r2
  205160:	10800003 	ldbu	r2,0(r2)
  205164:	10803fcc 	andi	r2,r2,255
  205168:	1080201c 	xori	r2,r2,128
  20516c:	10bfe004 	addi	r2,r2,-128
  205170:	10800bd8 	cmpnei	r2,r2,47
  205174:	1000031e 	bne	r2,zero,205184 <alt_find_file+0x74>
    {
      len -= 1;
  205178:	e0bffe17 	ldw	r2,-8(fp)
  20517c:	10bfffc4 	addi	r2,r2,-1
  205180:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  205184:	e0bffe17 	ldw	r2,-8(fp)
  205188:	e0ffff17 	ldw	r3,-4(fp)
  20518c:	1885883a 	add	r2,r3,r2
  205190:	10800003 	ldbu	r2,0(r2)
  205194:	10803fcc 	andi	r2,r2,255
  205198:	1080201c 	xori	r2,r2,128
  20519c:	10bfe004 	addi	r2,r2,-128
  2051a0:	10800be0 	cmpeqi	r2,r2,47
  2051a4:	1000081e 	bne	r2,zero,2051c8 <alt_find_file+0xb8>
  2051a8:	e0bffe17 	ldw	r2,-8(fp)
  2051ac:	e0ffff17 	ldw	r3,-4(fp)
  2051b0:	1885883a 	add	r2,r3,r2
  2051b4:	10800003 	ldbu	r2,0(r2)
  2051b8:	10803fcc 	andi	r2,r2,255
  2051bc:	1080201c 	xori	r2,r2,128
  2051c0:	10bfe004 	addi	r2,r2,-128
  2051c4:	10000a1e 	bne	r2,zero,2051f0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
  2051c8:	e0bffd17 	ldw	r2,-12(fp)
  2051cc:	10c00217 	ldw	r3,8(r2)
  2051d0:	e0bffe17 	ldw	r2,-8(fp)
  2051d4:	1809883a 	mov	r4,r3
  2051d8:	e17fff17 	ldw	r5,-4(fp)
  2051dc:	100d883a 	mov	r6,r2
  2051e0:	020544c0 	call	20544c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  2051e4:	1000021e 	bne	r2,zero,2051f0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  2051e8:	e0bffd17 	ldw	r2,-12(fp)
  2051ec:	00000806 	br	205210 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
  2051f0:	e0bffd17 	ldw	r2,-12(fp)
  2051f4:	10800017 	ldw	r2,0(r2)
  2051f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  2051fc:	e0fffd17 	ldw	r3,-12(fp)
  205200:	00800834 	movhi	r2,32
  205204:	109cae04 	addi	r2,r2,29368
  205208:	18bfcb1e 	bne	r3,r2,205138 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  20520c:	0005883a 	mov	r2,zero
}
  205210:	e037883a 	mov	sp,fp
  205214:	dfc00117 	ldw	ra,4(sp)
  205218:	df000017 	ldw	fp,0(sp)
  20521c:	dec00204 	addi	sp,sp,8
  205220:	f800283a 	ret

00205224 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  205224:	defffc04 	addi	sp,sp,-16
  205228:	df000315 	stw	fp,12(sp)
  20522c:	df000304 	addi	fp,sp,12
  205230:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  205234:	00bffa04 	movi	r2,-24
  205238:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  20523c:	e03ffd15 	stw	zero,-12(fp)
  205240:	00001d06 	br	2052b8 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
  205244:	00800834 	movhi	r2,32
  205248:	10983204 	addi	r2,r2,24776
  20524c:	e0fffd17 	ldw	r3,-12(fp)
  205250:	18c00324 	muli	r3,r3,12
  205254:	10c5883a 	add	r2,r2,r3
  205258:	10800017 	ldw	r2,0(r2)
  20525c:	1000131e 	bne	r2,zero,2052ac <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
  205260:	00800834 	movhi	r2,32
  205264:	10983204 	addi	r2,r2,24776
  205268:	e0fffd17 	ldw	r3,-12(fp)
  20526c:	18c00324 	muli	r3,r3,12
  205270:	10c5883a 	add	r2,r2,r3
  205274:	e0ffff17 	ldw	r3,-4(fp)
  205278:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  20527c:	00800834 	movhi	r2,32
  205280:	109cb204 	addi	r2,r2,29384
  205284:	10c00017 	ldw	r3,0(r2)
  205288:	e0bffd17 	ldw	r2,-12(fp)
  20528c:	1880040e 	bge	r3,r2,2052a0 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
  205290:	00800834 	movhi	r2,32
  205294:	109cb204 	addi	r2,r2,29384
  205298:	e0fffd17 	ldw	r3,-12(fp)
  20529c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
  2052a0:	e0bffd17 	ldw	r2,-12(fp)
  2052a4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  2052a8:	00000606 	br	2052c4 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  2052ac:	e0bffd17 	ldw	r2,-12(fp)
  2052b0:	10800044 	addi	r2,r2,1
  2052b4:	e0bffd15 	stw	r2,-12(fp)
  2052b8:	e0bffd17 	ldw	r2,-12(fp)
  2052bc:	10800810 	cmplti	r2,r2,32
  2052c0:	103fe01e 	bne	r2,zero,205244 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  2052c4:	e0bffe17 	ldw	r2,-8(fp)
}
  2052c8:	e037883a 	mov	sp,fp
  2052cc:	df000017 	ldw	fp,0(sp)
  2052d0:	dec00104 	addi	sp,sp,4
  2052d4:	f800283a 	ret

002052d8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  2052d8:	defffb04 	addi	sp,sp,-20
  2052dc:	df000415 	stw	fp,16(sp)
  2052e0:	df000404 	addi	fp,sp,16
  2052e4:	e13ffe15 	stw	r4,-8(fp)
  2052e8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  2052ec:	e0bfff17 	ldw	r2,-4(fp)
  2052f0:	10840070 	cmpltui	r2,r2,4097
  2052f4:	1000021e 	bne	r2,zero,205300 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  2052f8:	00840004 	movi	r2,4096
  2052fc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  205300:	e0fffe17 	ldw	r3,-8(fp)
  205304:	e0bfff17 	ldw	r2,-4(fp)
  205308:	1885883a 	add	r2,r3,r2
  20530c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  205310:	e0bffe17 	ldw	r2,-8(fp)
  205314:	e0bffc15 	stw	r2,-16(fp)
  205318:	00000506 	br	205330 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  20531c:	e0bffc17 	ldw	r2,-16(fp)
  205320:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  205324:	e0bffc17 	ldw	r2,-16(fp)
  205328:	10800804 	addi	r2,r2,32
  20532c:	e0bffc15 	stw	r2,-16(fp)
  205330:	e0fffc17 	ldw	r3,-16(fp)
  205334:	e0bffd17 	ldw	r2,-12(fp)
  205338:	18bff836 	bltu	r3,r2,20531c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  20533c:	e0bffe17 	ldw	r2,-8(fp)
  205340:	108007cc 	andi	r2,r2,31
  205344:	10000226 	beq	r2,zero,205350 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  205348:	e0bffc17 	ldw	r2,-16(fp)
  20534c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  205350:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  205354:	e037883a 	mov	sp,fp
  205358:	df000017 	ldw	fp,0(sp)
  20535c:	dec00104 	addi	sp,sp,4
  205360:	f800283a 	ret

00205364 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  205364:	defffe04 	addi	sp,sp,-8
  205368:	df000115 	stw	fp,4(sp)
  20536c:	df000104 	addi	fp,sp,4
  205370:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  205374:	e0bfff17 	ldw	r2,-4(fp)
  205378:	10bffe84 	addi	r2,r2,-6
  20537c:	10c00428 	cmpgeui	r3,r2,16
  205380:	18001a1e 	bne	r3,zero,2053ec <alt_exception_cause_generated_bad_addr+0x88>
  205384:	100690ba 	slli	r3,r2,2
  205388:	00800834 	movhi	r2,32
  20538c:	1094e704 	addi	r2,r2,21404
  205390:	1885883a 	add	r2,r3,r2
  205394:	10800017 	ldw	r2,0(r2)
  205398:	1000683a 	jmp	r2
  20539c:	002053dc 	xori	zero,zero,33103
  2053a0:	002053dc 	xori	zero,zero,33103
  2053a4:	002053ec 	andhi	zero,zero,33103
  2053a8:	002053ec 	andhi	zero,zero,33103
  2053ac:	002053ec 	andhi	zero,zero,33103
  2053b0:	002053dc 	xori	zero,zero,33103
  2053b4:	002053e4 	muli	zero,zero,-32433
  2053b8:	002053ec 	andhi	zero,zero,33103
  2053bc:	002053dc 	xori	zero,zero,33103
  2053c0:	002053dc 	xori	zero,zero,33103
  2053c4:	002053ec 	andhi	zero,zero,33103
  2053c8:	002053dc 	xori	zero,zero,33103
  2053cc:	002053e4 	muli	zero,zero,-32433
  2053d0:	002053ec 	andhi	zero,zero,33103
  2053d4:	002053ec 	andhi	zero,zero,33103
  2053d8:	002053dc 	xori	zero,zero,33103
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  2053dc:	00800044 	movi	r2,1
  2053e0:	00000306 	br	2053f0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  2053e4:	0005883a 	mov	r2,zero
  2053e8:	00000106 	br	2053f0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  2053ec:	0005883a 	mov	r2,zero
  }
}
  2053f0:	e037883a 	mov	sp,fp
  2053f4:	df000017 	ldw	fp,0(sp)
  2053f8:	dec00104 	addi	sp,sp,4
  2053fc:	f800283a 	ret

00205400 <atexit>:
  205400:	200b883a 	mov	r5,r4
  205404:	000d883a 	mov	r6,zero
  205408:	0009883a 	mov	r4,zero
  20540c:	000f883a 	mov	r7,zero
  205410:	02055601 	jmpi	205560 <__register_exitproc>

00205414 <exit>:
  205414:	defffe04 	addi	sp,sp,-8
  205418:	000b883a 	mov	r5,zero
  20541c:	dc000015 	stw	r16,0(sp)
  205420:	dfc00115 	stw	ra,4(sp)
  205424:	2021883a 	mov	r16,r4
  205428:	02056740 	call	205674 <__call_exitprocs>
  20542c:	00800834 	movhi	r2,32
  205430:	109caa04 	addi	r2,r2,29352
  205434:	11000017 	ldw	r4,0(r2)
  205438:	20800f17 	ldw	r2,60(r4)
  20543c:	10000126 	beq	r2,zero,205444 <exit+0x30>
  205440:	103ee83a 	callr	r2
  205444:	8009883a 	mov	r4,r16
  205448:	02058080 	call	205808 <_exit>

0020544c <memcmp>:
  20544c:	01c000c4 	movi	r7,3
  205450:	3980192e 	bgeu	r7,r6,2054b8 <memcmp+0x6c>
  205454:	2144b03a 	or	r2,r4,r5
  205458:	11c4703a 	and	r2,r2,r7
  20545c:	10000f26 	beq	r2,zero,20549c <memcmp+0x50>
  205460:	20800003 	ldbu	r2,0(r4)
  205464:	28c00003 	ldbu	r3,0(r5)
  205468:	10c0151e 	bne	r2,r3,2054c0 <memcmp+0x74>
  20546c:	31bfff84 	addi	r6,r6,-2
  205470:	01ffffc4 	movi	r7,-1
  205474:	00000406 	br	205488 <memcmp+0x3c>
  205478:	20800003 	ldbu	r2,0(r4)
  20547c:	28c00003 	ldbu	r3,0(r5)
  205480:	31bfffc4 	addi	r6,r6,-1
  205484:	10c00e1e 	bne	r2,r3,2054c0 <memcmp+0x74>
  205488:	21000044 	addi	r4,r4,1
  20548c:	29400044 	addi	r5,r5,1
  205490:	31fff91e 	bne	r6,r7,205478 <memcmp+0x2c>
  205494:	0005883a 	mov	r2,zero
  205498:	f800283a 	ret
  20549c:	20c00017 	ldw	r3,0(r4)
  2054a0:	28800017 	ldw	r2,0(r5)
  2054a4:	1880041e 	bne	r3,r2,2054b8 <memcmp+0x6c>
  2054a8:	31bfff04 	addi	r6,r6,-4
  2054ac:	21000104 	addi	r4,r4,4
  2054b0:	29400104 	addi	r5,r5,4
  2054b4:	39bff936 	bltu	r7,r6,20549c <memcmp+0x50>
  2054b8:	303fe91e 	bne	r6,zero,205460 <memcmp+0x14>
  2054bc:	003ff506 	br	205494 <memcmp+0x48>
  2054c0:	10c5c83a 	sub	r2,r2,r3
  2054c4:	f800283a 	ret

002054c8 <strlen>:
  2054c8:	208000cc 	andi	r2,r4,3
  2054cc:	10002026 	beq	r2,zero,205550 <strlen+0x88>
  2054d0:	20800007 	ldb	r2,0(r4)
  2054d4:	10002026 	beq	r2,zero,205558 <strlen+0x90>
  2054d8:	2005883a 	mov	r2,r4
  2054dc:	00000206 	br	2054e8 <strlen+0x20>
  2054e0:	10c00007 	ldb	r3,0(r2)
  2054e4:	18001826 	beq	r3,zero,205548 <strlen+0x80>
  2054e8:	10800044 	addi	r2,r2,1
  2054ec:	10c000cc 	andi	r3,r2,3
  2054f0:	183ffb1e 	bne	r3,zero,2054e0 <strlen+0x18>
  2054f4:	10c00017 	ldw	r3,0(r2)
  2054f8:	01ffbff4 	movhi	r7,65279
  2054fc:	39ffbfc4 	addi	r7,r7,-257
  205500:	00ca303a 	nor	r5,zero,r3
  205504:	01a02074 	movhi	r6,32897
  205508:	19c7883a 	add	r3,r3,r7
  20550c:	31a02004 	addi	r6,r6,-32640
  205510:	1946703a 	and	r3,r3,r5
  205514:	1986703a 	and	r3,r3,r6
  205518:	1800091e 	bne	r3,zero,205540 <strlen+0x78>
  20551c:	10800104 	addi	r2,r2,4
  205520:	10c00017 	ldw	r3,0(r2)
  205524:	19cb883a 	add	r5,r3,r7
  205528:	00c6303a 	nor	r3,zero,r3
  20552c:	28c6703a 	and	r3,r5,r3
  205530:	1986703a 	and	r3,r3,r6
  205534:	183ff926 	beq	r3,zero,20551c <strlen+0x54>
  205538:	00000106 	br	205540 <strlen+0x78>
  20553c:	10800044 	addi	r2,r2,1
  205540:	10c00007 	ldb	r3,0(r2)
  205544:	183ffd1e 	bne	r3,zero,20553c <strlen+0x74>
  205548:	1105c83a 	sub	r2,r2,r4
  20554c:	f800283a 	ret
  205550:	2005883a 	mov	r2,r4
  205554:	003fe706 	br	2054f4 <strlen+0x2c>
  205558:	0005883a 	mov	r2,zero
  20555c:	f800283a 	ret

00205560 <__register_exitproc>:
  205560:	00800834 	movhi	r2,32
  205564:	defffa04 	addi	sp,sp,-24
  205568:	109caa04 	addi	r2,r2,29352
  20556c:	dc000315 	stw	r16,12(sp)
  205570:	14000017 	ldw	r16,0(r2)
  205574:	dc400415 	stw	r17,16(sp)
  205578:	dfc00515 	stw	ra,20(sp)
  20557c:	80805217 	ldw	r2,328(r16)
  205580:	2023883a 	mov	r17,r4
  205584:	10003626 	beq	r2,zero,205660 <__register_exitproc+0x100>
  205588:	10c00117 	ldw	r3,4(r2)
  20558c:	010007c4 	movi	r4,31
  205590:	20c00e16 	blt	r4,r3,2055cc <__register_exitproc+0x6c>
  205594:	1a400044 	addi	r9,r3,1
  205598:	8800211e 	bne	r17,zero,205620 <__register_exitproc+0xc0>
  20559c:	18c00084 	addi	r3,r3,2
  2055a0:	18c7883a 	add	r3,r3,r3
  2055a4:	18c7883a 	add	r3,r3,r3
  2055a8:	12400115 	stw	r9,4(r2)
  2055ac:	10c7883a 	add	r3,r2,r3
  2055b0:	19400015 	stw	r5,0(r3)
  2055b4:	0005883a 	mov	r2,zero
  2055b8:	dfc00517 	ldw	ra,20(sp)
  2055bc:	dc400417 	ldw	r17,16(sp)
  2055c0:	dc000317 	ldw	r16,12(sp)
  2055c4:	dec00604 	addi	sp,sp,24
  2055c8:	f800283a 	ret
  2055cc:	00800034 	movhi	r2,0
  2055d0:	10800004 	addi	r2,r2,0
  2055d4:	10002526 	beq	r2,zero,20566c <__register_exitproc+0x10c>
  2055d8:	01006404 	movi	r4,400
  2055dc:	d9400015 	stw	r5,0(sp)
  2055e0:	d9800115 	stw	r6,4(sp)
  2055e4:	d9c00215 	stw	r7,8(sp)
  2055e8:	00000000 	call	0 <__alt_mem_sram-0x200000>
  2055ec:	d9400017 	ldw	r5,0(sp)
  2055f0:	d9800117 	ldw	r6,4(sp)
  2055f4:	d9c00217 	ldw	r7,8(sp)
  2055f8:	10001c26 	beq	r2,zero,20566c <__register_exitproc+0x10c>
  2055fc:	80c05217 	ldw	r3,328(r16)
  205600:	10000115 	stw	zero,4(r2)
  205604:	02400044 	movi	r9,1
  205608:	10c00015 	stw	r3,0(r2)
  20560c:	80805215 	stw	r2,328(r16)
  205610:	10006215 	stw	zero,392(r2)
  205614:	10006315 	stw	zero,396(r2)
  205618:	0007883a 	mov	r3,zero
  20561c:	883fdf26 	beq	r17,zero,20559c <__register_exitproc+0x3c>
  205620:	18d1883a 	add	r8,r3,r3
  205624:	4211883a 	add	r8,r8,r8
  205628:	1211883a 	add	r8,r2,r8
  20562c:	41802215 	stw	r6,136(r8)
  205630:	01000044 	movi	r4,1
  205634:	11806217 	ldw	r6,392(r2)
  205638:	20c8983a 	sll	r4,r4,r3
  20563c:	310cb03a 	or	r6,r6,r4
  205640:	11806215 	stw	r6,392(r2)
  205644:	41c04215 	stw	r7,264(r8)
  205648:	01800084 	movi	r6,2
  20564c:	89bfd31e 	bne	r17,r6,20559c <__register_exitproc+0x3c>
  205650:	11806317 	ldw	r6,396(r2)
  205654:	3108b03a 	or	r4,r6,r4
  205658:	11006315 	stw	r4,396(r2)
  20565c:	003fcf06 	br	20559c <__register_exitproc+0x3c>
  205660:	80805304 	addi	r2,r16,332
  205664:	80805215 	stw	r2,328(r16)
  205668:	003fc706 	br	205588 <__register_exitproc+0x28>
  20566c:	00bfffc4 	movi	r2,-1
  205670:	003fd106 	br	2055b8 <__register_exitproc+0x58>

00205674 <__call_exitprocs>:
  205674:	00800834 	movhi	r2,32
  205678:	109caa04 	addi	r2,r2,29352
  20567c:	10800017 	ldw	r2,0(r2)
  205680:	defff404 	addi	sp,sp,-48
  205684:	dd800815 	stw	r22,32(sp)
  205688:	d8800015 	stw	r2,0(sp)
  20568c:	10805204 	addi	r2,r2,328
  205690:	dd000615 	stw	r20,24(sp)
  205694:	dc800415 	stw	r18,16(sp)
  205698:	dfc00b15 	stw	ra,44(sp)
  20569c:	df000a15 	stw	fp,40(sp)
  2056a0:	ddc00915 	stw	r23,36(sp)
  2056a4:	dd400715 	stw	r21,28(sp)
  2056a8:	dcc00515 	stw	r19,20(sp)
  2056ac:	dc400315 	stw	r17,12(sp)
  2056b0:	dc000215 	stw	r16,8(sp)
  2056b4:	2025883a 	mov	r18,r4
  2056b8:	2829883a 	mov	r20,r5
  2056bc:	d8800115 	stw	r2,4(sp)
  2056c0:	05bfffc4 	movi	r22,-1
  2056c4:	d8800017 	ldw	r2,0(sp)
  2056c8:	14c05217 	ldw	r19,328(r2)
  2056cc:	98001d26 	beq	r19,zero,205744 <__call_exitprocs+0xd0>
  2056d0:	dd400117 	ldw	r21,4(sp)
  2056d4:	98800117 	ldw	r2,4(r19)
  2056d8:	173fffc4 	addi	fp,r2,-1
  2056dc:	e0000d16 	blt	fp,zero,205714 <__call_exitprocs+0xa0>
  2056e0:	14000044 	addi	r16,r2,1
  2056e4:	8421883a 	add	r16,r16,r16
  2056e8:	8421883a 	add	r16,r16,r16
  2056ec:	84402004 	addi	r17,r16,128
  2056f0:	9c63883a 	add	r17,r19,r17
  2056f4:	9c21883a 	add	r16,r19,r16
  2056f8:	a0001e26 	beq	r20,zero,205774 <__call_exitprocs+0x100>
  2056fc:	80804017 	ldw	r2,256(r16)
  205700:	15001c26 	beq	r2,r20,205774 <__call_exitprocs+0x100>
  205704:	e73fffc4 	addi	fp,fp,-1
  205708:	843fff04 	addi	r16,r16,-4
  20570c:	8c7fff04 	addi	r17,r17,-4
  205710:	e5bff91e 	bne	fp,r22,2056f8 <__call_exitprocs+0x84>
  205714:	00800034 	movhi	r2,0
  205718:	10800004 	addi	r2,r2,0
  20571c:	10000926 	beq	r2,zero,205744 <__call_exitprocs+0xd0>
  205720:	98800117 	ldw	r2,4(r19)
  205724:	1000311e 	bne	r2,zero,2057ec <__call_exitprocs+0x178>
  205728:	98800017 	ldw	r2,0(r19)
  20572c:	10003426 	beq	r2,zero,205800 <__call_exitprocs+0x18c>
  205730:	9809883a 	mov	r4,r19
  205734:	a8800015 	stw	r2,0(r21)
  205738:	00000000 	call	0 <__alt_mem_sram-0x200000>
  20573c:	acc00017 	ldw	r19,0(r21)
  205740:	983fe41e 	bne	r19,zero,2056d4 <__call_exitprocs+0x60>
  205744:	dfc00b17 	ldw	ra,44(sp)
  205748:	df000a17 	ldw	fp,40(sp)
  20574c:	ddc00917 	ldw	r23,36(sp)
  205750:	dd800817 	ldw	r22,32(sp)
  205754:	dd400717 	ldw	r21,28(sp)
  205758:	dd000617 	ldw	r20,24(sp)
  20575c:	dcc00517 	ldw	r19,20(sp)
  205760:	dc800417 	ldw	r18,16(sp)
  205764:	dc400317 	ldw	r17,12(sp)
  205768:	dc000217 	ldw	r16,8(sp)
  20576c:	dec00c04 	addi	sp,sp,48
  205770:	f800283a 	ret
  205774:	98800117 	ldw	r2,4(r19)
  205778:	80c00017 	ldw	r3,0(r16)
  20577c:	10bfffc4 	addi	r2,r2,-1
  205780:	17001526 	beq	r2,fp,2057d8 <__call_exitprocs+0x164>
  205784:	80000015 	stw	zero,0(r16)
  205788:	183fde26 	beq	r3,zero,205704 <__call_exitprocs+0x90>
  20578c:	00800044 	movi	r2,1
  205790:	1708983a 	sll	r4,r2,fp
  205794:	98806217 	ldw	r2,392(r19)
  205798:	9dc00117 	ldw	r23,4(r19)
  20579c:	2084703a 	and	r2,r4,r2
  2057a0:	1000061e 	bne	r2,zero,2057bc <__call_exitprocs+0x148>
  2057a4:	183ee83a 	callr	r3
  2057a8:	98800117 	ldw	r2,4(r19)
  2057ac:	15ffc51e 	bne	r2,r23,2056c4 <__call_exitprocs+0x50>
  2057b0:	a8800017 	ldw	r2,0(r21)
  2057b4:	14ffd326 	beq	r2,r19,205704 <__call_exitprocs+0x90>
  2057b8:	003fc206 	br	2056c4 <__call_exitprocs+0x50>
  2057bc:	98806317 	ldw	r2,396(r19)
  2057c0:	2084703a 	and	r2,r4,r2
  2057c4:	1000061e 	bne	r2,zero,2057e0 <__call_exitprocs+0x16c>
  2057c8:	89400017 	ldw	r5,0(r17)
  2057cc:	9009883a 	mov	r4,r18
  2057d0:	183ee83a 	callr	r3
  2057d4:	003ff406 	br	2057a8 <__call_exitprocs+0x134>
  2057d8:	9f000115 	stw	fp,4(r19)
  2057dc:	003fea06 	br	205788 <__call_exitprocs+0x114>
  2057e0:	89000017 	ldw	r4,0(r17)
  2057e4:	183ee83a 	callr	r3
  2057e8:	003fef06 	br	2057a8 <__call_exitprocs+0x134>
  2057ec:	98800017 	ldw	r2,0(r19)
  2057f0:	982b883a 	mov	r21,r19
  2057f4:	1027883a 	mov	r19,r2
  2057f8:	983fb61e 	bne	r19,zero,2056d4 <__call_exitprocs+0x60>
  2057fc:	003fd106 	br	205744 <__call_exitprocs+0xd0>
  205800:	0005883a 	mov	r2,zero
  205804:	003ffa06 	br	2057f0 <__call_exitprocs+0x17c>

00205808 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  205808:	defffd04 	addi	sp,sp,-12
  20580c:	df000215 	stw	fp,8(sp)
  205810:	df000204 	addi	fp,sp,8
  205814:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  205818:	0001883a 	nop
  20581c:	e0bfff17 	ldw	r2,-4(fp)
  205820:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  205824:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  205828:	10000226 	beq	r2,zero,205834 <_exit+0x2c>
    ALT_SIM_FAIL();
  20582c:	002af070 	cmpltui	zero,zero,43969
  205830:	00000106 	br	205838 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  205834:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  205838:	003fff06 	br	205838 <_exit+0x30>
