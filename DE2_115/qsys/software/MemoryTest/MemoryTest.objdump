
MemoryTest.elf:     file format elf32-littlenios2
MemoryTest.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10200220

Program Header:
    LOAD off    0x00001020 vaddr 0x10408020 paddr 0x10200000 align 2**12
         filesz 0x00000220 memsz 0x00000220 flags r-x
    LOAD off    0x00002220 vaddr 0x10200220 paddr 0x10200220 align 2**12
         filesz 0x0001d564 memsz 0x0001d564 flags r-x
    LOAD off    0x0001f784 vaddr 0x1021d784 paddr 0x1021f468 align 2**12
         filesz 0x00001ce4 memsz 0x00001ce4 flags rw-
    LOAD off    0x0002214c vaddr 0x1022114c paddr 0x1022114c align 2**12
         filesz 0x00000000 memsz 0x00000168 flags rw-
    LOAD off    0x00022000 vaddr 0x10408000 paddr 0x10408000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10408000  10408000  00022000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  10408020  10200000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001c314  10200220  10200220  00002220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001250  1021c534  1021c534  0001e534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ce4  1021d784  1021f468  0001f784  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000168  1022114c  1022114c  0002214c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  08000000  08000000  00022020  2**0
                  CONTENTS
  7 .sram         00000000  102212b4  102212b4  00022020  2**0
                  CONTENTS
  8 .onchip_memory 00000000  10408240  10408240  00022020  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00022020  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 000014d8  00000000  00000000  00022048  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000389ec  00000000  00000000  00023520  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000dc5e  00000000  00000000  0005bf0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00011fbc  00000000  00000000  00069b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000032e0  00000000  00000000  0007bb28  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004b52  00000000  00000000  0007ee08  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000245b9  00000000  00000000  0008395a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000060  00000000  00000000  000a7f14  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000021d0  00000000  00000000  000a7f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  000ae5f0  2**0
                  CONTENTS, READONLY
 20 .cpu          00000003  00000000  00000000  000ae5f3  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000ae5f6  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000ae5f7  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  000ae5f8  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  000ae5fc  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  000ae600  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000004  00000000  00000000  000ae604  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000004  00000000  00000000  000ae608  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000004  00000000  00000000  000ae60c  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000004  00000000  00000000  000ae610  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000001f  00000000  00000000  000ae614  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0006674f  00000000  00000000  000ae633  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10408000 l    d  .entry	00000000 .entry
10408020 l    d  .exceptions	00000000 .exceptions
10200220 l    d  .text	00000000 .text
1021c534 l    d  .rodata	00000000 .rodata
1021d784 l    d  .rwdata	00000000 .rwdata
1022114c l    d  .bss	00000000 .bss
08000000 l    d  .sdram	00000000 .sdram
102212b4 l    d  .sram	00000000 .sram
10408240 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../MemoryTest_bsp//obj/HAL/src/crt0.o
10200268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 memtest.c
1020026c l     F .text	00000078 MenuHeader
102002e4 l     F .text	00000054 MenuBegin
10200338 l     F .text	00000048 MenuItem
1020040c l     F .text	0000010c MenuEnd
1022114c l     O .bss	00000004 entry.3237
10221150 l     O .bss	00000001 ch.3238
10200518 l     F .text	00000124 MemGetAddressRange
1020063c l     F .text	00000074 MemTestDataBus
102006b0 l     F .text	000001e0 MemTestAddressBus
10200890 l     F .text	00000220 MemTest8_16BitAccess
10200ab0 l     F .text	000001a4 MemTestDevice
10200c54 l     F .text	000001ac TestRam
10200e00 l     F .text	00000144 FlashCheckIfBlockErased
10200f44 l     F .text	00000384 FlashTestBlockWrite
102012c8 l     F .text	000002fc FlashTestReadWrite
102015c4 l     F .text	00000118 FlashTestBlockErase
102016dc l     F .text	00000150 FlashRunTests
1020182c l     F .text	00000184 GetFlashName
102019b0 l     F .text	0000038c FlashErase
10201d3c l     F .text	0000027c FlashFindErasedBlocks
10201fb8 l     F .text	000001d4 TestFlash
1020218c l     F .text	00000178 TopMenu
00000000 l    df *ABS*	00000000 lib2-divmod.c
10202358 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
1021d784 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfscanf.c
1021d01e l     O .rodata	00000022 basefix.4191
00000000 l    df *ABS*	00000000 vfprintf.c
1021d082 l     O .rodata	00000010 zeroes.4255
10206a54 l     F .text	000000bc __sbprintf
1021d092 l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
1021d1a3 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
10206d14 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
102088d0 l     F .text	00000008 __fp_lock
102088d8 l     F .text	00000008 __fp_unlock
102088ec l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
1021dfd0 l     O .rwdata	00000020 lc_ctype_charset
1021dfb0 l     O .rwdata	00000020 lc_message_charset
1021dff0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
1021d340 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
1020b64c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
1020bae0 l     F .text	00000064 sulp
1021d488 l     O .rodata	00000014 fpi.2679
1021d49c l     O .rodata	00000028 tinytens
1021d474 l     O .rodata	00000014 fpinan.2715
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfscanf.c
1021d4c4 l     O .rodata	00000022 basefix.3642
00000000 l    df *ABS*	00000000 vfprintf.c
1021d4e6 l     O .rodata	00000010 zeroes.4240
1021d4f6 l     O .rodata	00000010 blanks.4239
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
10211238 l     F .text	000000fc __sprint_r.part.0
1021d516 l     O .rodata	00000010 blanks.4199
1021d506 l     O .rodata	00000010 zeroes.4200
10212640 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
10212c50 l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1021d626 l     O .rodata	00000010 zeroes.4184
1021d636 l     O .rodata	00000010 blanks.4183
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
10218290 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev.c
10218424 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10218508 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10218608 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
102186fc l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
102187e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
102189bc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
1021f454 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
10218c18 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10218d60 l     F .text	00000038 alt_dev_reg
1021e1d0 l     O .rwdata	00001060 jtag
1021f230 l     O .rwdata	00000120 lcd
1021f350 l     O .rwdata	000000c4 rs232
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1021908c l     F .text	00000204 altera_avalon_jtag_uart_irq
10219290 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
1021f458 l     O .rwdata	00000004 colstart
102198b0 l     F .text	000000b4 lcd_write_command
10219964 l     F .text	000000d4 lcd_write_data
10219a38 l     F .text	000000cc lcd_clear_screen
10219b04 l     F .text	000001e8 lcd_repaint_screen
10219cec l     F .text	000000c8 lcd_scroll_up
10219db4 l     F .text	000002a0 lcd_handle_escape
1021a53c l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
1021a780 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
1021aa34 l     F .text	00000098 altera_avalon_uart_irq
1021aacc l     F .text	000000e0 altera_avalon_uart_rxirq
1021abac l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
1021ad44 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
1021af70 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1021b2f0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1021b82c l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1021b964 l     F .text	00000050 alt_get_errno
1021b9b4 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10221188 g     O .bss	00000004 alt_instruction_exception_handler
10202f70 g     F .text	00000018 putchar
1020ada4 g     F .text	00000074 _mprec_log10
1020ae90 g     F .text	0000008c __any_on
102137f0 g     F .text	00000054 _isatty_r
1021d34c g     O .rodata	00000028 __mprec_tinytens
10218904 g     F .text	00000078 alt_main
10202f88 g     F .text	000000a8 _puts_r
102211b4 g     O .bss	00000100 alt_irq
102097dc g     F .text	0000005c _lseek_r
1021f468 g       *ABS*	00000000 __flash_rwdata_start
10216c60 g     F .text	00000084 .hidden __eqdf2
102212b4 g       *ABS*	00000000 __alt_heap_start
10202f2c g     F .text	0000003c printf
10214b08 g     F .text	0000009c _wcrtomb_r
10200000 g       *ABS*	00000000 __alt_mem_sram
102032ec g     F .text	0000005c __sseek
10208c20 g     F .text	00000010 __sinit
102126fc g     F .text	00000138 __swbuf_r
102096fc g     F .text	0000007c _setlocale_r
10208a88 g     F .text	00000068 __sfmoreglue
1021121c g     F .text	0000001c ungetc
1021899c g     F .text	00000020 __malloc_unlock
1020bb44 g     F .text	000015ec _strtod_r
10200380 g     F .text	0000008c GetInputString
1020ded0 g     F .text	000000f4 _sfread_r
10209cfc g     F .text	0000015c memmove
10208c08 g     F .text	00000018 _cleanup
10209f7c g     F .text	000000a8 _Balloc
10216ce4 g     F .text	000000e0 .hidden __gtdf2
1021bda4 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10408000 g     F .entry	0000001c __reset
10200000 g       *ABS*	00000000 __flash_exceptions_start
10212bf8 g     F .text	00000058 _fstat_r
10221160 g     O .bss	00000004 errno
102030b8 g     F .text	00000014 __srget
10203268 g     F .text	00000008 __seofread
10213ad0 g     F .text	00001038 ___svfiprintf_internal_r
10221174 g     O .bss	00000004 alt_argv
10227414 g       *ABS*	00000000 _gp
1021bd74 g     F .text	00000030 usleep
1021e050 g     O .rwdata	00000180 alt_fd_list
10202484 g     F .text	00000070 _getc_r
102024f4 g     F .text	00000088 getc
10202f68 g     F .text	00000008 _putchar_r
1021b49c g     F .text	00000090 alt_find_dev
10202dc8 g     F .text	00000138 memcpy
10213584 g     F .text	0000026c __hexnan
102088e0 g     F .text	0000000c _cleanup_r
10217f20 g     F .text	000000d0 .hidden __floatsidf
1021b8ec g     F .text	00000078 alt_io_redirect
10216dc4 g     F .text	000000e0 .hidden __ltdf2
1021c534 g       *ABS*	00000000 __DTOR_END__
10203030 g     F .text	00000014 puts
1021c170 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10209a9c g     F .text	000000d8 mbrtowc
1020b83c g     F .text	00000074 __fpclassifyd
1020ad00 g     F .text	000000a4 __ratio
1021261c g     F .text	00000024 __vfiprintf_internal
1021948c g     F .text	0000020c altera_avalon_jtag_uart_read
1020257c g     F .text	00000014 malloc
10202f00 g     F .text	0000002c _printf_r
10202474 g     F .text	00000008 .hidden __udivsi3
10218658 g     F .text	000000a4 isatty
102096cc g     F .text	00000030 iswspace
1021d39c g     O .rodata	000000c8 __mprec_tens
10209778 g     F .text	0000000c __locale_charset
10215a40 g     F .text	000000b8 .hidden __lesf2
10214d50 g     F .text	00000074 .hidden __fixunsdfsi
1021c0e4 g     F .text	0000008c alt_icache_flush
1022115c g     O .bss	00000004 __malloc_top_pad
1020de60 g     F .text	00000070 __ssrefill_r
1020da10 g     F .text	00000024 strtoul
1021f428 g     O .rwdata	00000004 __mb_cur_max
102097a8 g     F .text	0000000c _localeconv_r
1020da34 g     F .text	00000334 _strtoull_r
1020a388 g     F .text	0000003c __i2b
10209084 g     F .text	000004c0 __sfvwrite_r
102030cc g     F .text	00000054 _sbrk_r
1020b088 g     F .text	0000005c _read_r
102183b0 g     F .text	00000074 alt_dcache_flush
1021f444 g     O .rwdata	00000004 alt_max_fd
10212914 g     F .text	000000f0 _fclose_r
102088a0 g     F .text	00000030 fflush
10221158 g     O .bss	00000004 __malloc_max_sbrked_mem
102033e8 g     F .text	000016f8 __ssvfscanf_r
10215af8 g     F .text	0000089c .hidden __adddf3
10215914 g     F .text	00000074 .hidden __nesf2
1020aaa8 g     F .text	0000011c __b2d
10215384 g     F .text	00000590 .hidden __umoddi3
10218830 g     F .text	000000d4 lseek
1021f414 g     O .rwdata	00000004 _global_impure_ptr
1020b0e4 g     F .text	00000568 _realloc_r
102212b4 g       *ABS*	00000000 __bss_end
1021b73c g     F .text	000000f0 alt_iic_isr_register
1021bc70 g     F .text	00000104 alt_tick
1021d526 g     O .rodata	00000100 __hexdig
10214dc4 g     F .text	000005c0 .hidden __udivdi3
10212a18 g     F .text	00000184 _fputwc_r
1021d374 g     O .rodata	00000028 __mprec_bigtens
1020a16c g     F .text	00000104 __s2b
10217ff0 g     F .text	000000a4 .hidden __floatunsidf
1020a850 g     F .text	00000060 __mcmp
1021a98c g     F .text	000000a8 altera_avalon_uart_init
10208c40 g     F .text	00000018 __fp_lock_all
1021b6f0 g     F .text	0000004c alt_ic_irq_enabled
1021bbd8 g     F .text	00000098 alt_alarm_stop
1020d490 g     F .text	00000024 strtol
1022117c g     O .bss	00000004 alt_irq_active
104080fc g     F .exceptions	000000d0 alt_irq_handler
1021e028 g     O .rwdata	00000028 alt_dev_null
1021b2ac g     F .text	00000044 alt_dcache_flush_all
1020a270 g     F .text	00000068 __hi0bits
10217e98 g     F .text	00000088 .hidden __fixdfsi
1020d130 g     F .text	0000001c strtod
1021f468 g       *ABS*	00000000 __ram_rwdata_end
10408000 g       *ABS*	00000000 __alt_mem_onchip_memory
1021f43c g     O .rwdata	00000008 alt_dev_list
10218c68 g     F .text	000000f8 write
1020af1c g     F .text	000000a0 _putc_r
10215988 g     F .text	000000b8 .hidden __gtsf2
1021d784 g       *ABS*	00000000 __ram_rodata_end
10218558 g     F .text	000000b0 fstat
10216dc4 g     F .text	000000e0 .hidden __ledf2
1020a5c0 g     F .text	00000140 __pow5mult
1021134c g     F .text	000012d0 ___vfiprintf_internal_r
1022116c g     O .bss	00000004 __nlocale_changed
1020247c g     F .text	00000008 .hidden __umodsi3
102212b4 g       *ABS*	00000000 end
1021a054 g     F .text	000004e8 altera_avalon_lcd_16207_write
1021afc0 g     F .text	000001ac altera_avalon_uart_write
10218fc8 g     F .text	000000c4 altera_avalon_jtag_uart_init
104081cc g     F .exceptions	00000074 alt_instruction_exception_entry
1021c534 g       *ABS*	00000000 __CTOR_LIST__
10400000 g       *ABS*	00000000 __alt_stack_pointer
1021a7f4 g     F .text	00000088 alt_avalon_timer_sc_init
1021a8dc g     F .text	00000060 altera_avalon_uart_write_fd
1021822c g     F .text	00000064 .hidden __clzsi2
1021a93c g     F .text	00000050 altera_avalon_uart_close_fd
10219698 g     F .text	00000218 altera_avalon_jtag_uart_write
10208c30 g     F .text	00000004 __sfp_lock_acquire
10209c14 g     F .text	000000e8 memchr
10204ae0 g     F .text	00001f50 ___vfprintf_internal_r
1020b978 g     F .text	00000058 _sprintf_r
10208d94 g     F .text	000002f0 _free_r
10209784 g     F .text	00000010 __locale_mb_cur_max
1021c36c g     F .text	00000194 __call_exitprocs
10203044 g     F .text	00000074 __srget_r
1020dd68 g     F .text	000000f8 _sungetc_r
10221168 g     O .bss	00000004 __mlocale_changed
1021f41c g     O .rwdata	00000004 __malloc_sbrk_base
10200220 g     F .text	0000004c _start
10221180 g     O .bss	00000004 _alt_tick_rate
1020d4b4 g     F .text	000002f4 _strtoll_r
1020a700 g     F .text	00000150 __lshift
10221184 g     O .bss	00000004 _alt_nticks
10218a0c g     F .text	000000fc read
10218dcc g     F .text	00000098 alt_sys_init
10213904 g     F .text	000001cc __ssprint_r
1021c258 g     F .text	00000114 __register_exitproc
10213844 g     F .text	000000c0 strncmp
1020a3c4 g     F .text	000001fc __multiply
10219338 g     F .text	00000068 altera_avalon_jtag_uart_close
1021d784 g       *ABS*	00000000 __ram_rwdata_start
1021c534 g       *ABS*	00000000 __ram_rodata_start
1022118c g     O .bss	00000028 __malloc_current_mallinfo
10215914 g     F .text	00000074 .hidden __eqsf2
1020abc4 g     F .text	0000013c __d2b
10218e64 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1020d7a8 g     F .text	00000268 _strtoul_r
1021c030 g     F .text	000000b4 alt_get_fd
1021bdc4 g     F .text	00000158 alt_busy_sleep
10206cc0 g     F .text	00000054 _close_r
10202d4c g     F .text	0000007c memcmp
10218f24 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
102212b4 g       *ABS*	00000000 __alt_stack_base
10218f74 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10203120 g     F .text	0000007c sscanf
10206b6c g     F .text	00000154 __swsetup_r
10216394 g     F .text	000008cc .hidden __divdf3
10208af0 g     F .text	00000118 __sfp
1020ae18 g     F .text	00000078 __copybits
1021dba8 g     O .rwdata	00000408 __malloc_av_
10208c3c g     F .text	00000004 __sinit_lock_release
10216ea4 g     F .text	00000724 .hidden __muldf3
10203214 g     F .text	00000054 __sread
1021bf1c g     F .text	00000114 alt_find_file
1021b340 g     F .text	000000a4 alt_dev_llist_insert
1021897c g     F .text	00000020 __malloc_lock
10218b68 g     F .text	000000b0 sbrk
1020f030 g     F .text	00001f90 ___svfprintf_internal_r
10208844 g     F .text	0000005c _fflush_r
10212850 g     F .text	000000c4 _calloc_r
1021f44c g     O .rwdata	00000008 alt_flash_dev_list
1022114c g       *ABS*	00000000 __bss_start
10209e58 g     F .text	00000124 memset
10202304 g     F .text	00000054 main
10221178 g     O .bss	00000004 alt_envp
10221154 g     O .bss	00000004 __malloc_max_total_mem
10218ec4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10212834 g     F .text	0000001c __swbuf
10215a40 g     F .text	000000b8 .hidden __ltsf2
1021a5e8 g     F .text	00000138 altera_avalon_lcd_16207_init
10203348 g     F .text	00000008 __sclose
10400000 g       *ABS*	00000000 __alt_heap_limit
10212a04 g     F .text	00000014 fclose
1020d250 g     F .text	00000240 _strtol_r
10218094 g     F .text	00000198 .hidden __truncdfsf2
10206f14 g     F .text	00001728 _dtoa_r
102025a4 g     F .text	000007a8 _malloc_r
10214c64 g     F .text	00000030 __ascii_wctomb
1021f448 g     O .rwdata	00000004 alt_errno
10210fc0 g     F .text	000000d4 __submore
10209544 g     F .text	000000c4 _fwalk
10209bb8 g     F .text	0000005c _mbtowc_r
1020afbc g     F .text	000000cc putc
102023c4 g     F .text	00000054 .hidden __divsi3
10208c70 g     F .text	00000124 _malloc_trim_r
1021c534 g       *ABS*	00000000 __CTOR_END__
1020ba3c g     F .text	000000a4 strcmp
1021c534 g       *ABS*	00000000 __flash_rodata_start
1021c534 g       *ABS*	00000000 __DTOR_LIST__
10216c60 g     F .text	00000084 .hidden __nedf2
10218d98 g     F .text	00000034 alt_irq_init
10218b08 g     F .text	00000060 alt_release_fd
1020b9d0 g     F .text	0000006c sprintf
1021d646 g     O .rodata	00000100 .hidden __clz_tab
10221164 g     O .bss	00000004 _PathLocale
1020d14c g     F .text	00000104 strtof
1021c20c g     F .text	00000014 atexit
10215988 g     F .text	000000b8 .hidden __gesf2
10206b10 g     F .text	0000005c _write_r
102097b4 g     F .text	0000001c setlocale
1020b970 g     F .text	00000008 nanf
1021f418 g     O .rwdata	00000004 _impure_ptr
10221170 g     O .bss	00000004 alt_argc
1020863c g     F .text	00000208 __sflush_r
102099f0 g     F .text	000000ac _mbrtowc_r
1021b440 g     F .text	0000005c _do_dtors
102097a0 g     F .text	00000008 __locale_cjk_lang
1020b668 g     F .text	000001d4 __srefill_r
10408020 g       .exceptions	00000000 alt_irq_entry
10209b74 g     F .text	00000044 __ascii_mbtowc
1020aa48 g     F .text	00000060 __ulp
10208c58 g     F .text	00000018 __fp_unlock_all
1021a720 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
1021f434 g     O .rwdata	00000008 alt_fs_list
1020dfc4 g     F .text	0000106c __ssvfiscanf_r
10408020 g       *ABS*	00000000 __ram_exceptions_start
102097d0 g     F .text	0000000c localeconv
1021b55c g     F .text	00000050 alt_ic_isr_register
1020319c g     F .text	00000078 _sscanf_r
1021f468 g       *ABS*	00000000 _edata
1021a87c g     F .text	00000060 altera_avalon_uart_read_fd
102212b4 g       *ABS*	00000000 _end
10218450 g     F .text	00000068 alt_flash_open_dev
10408240 g       *ABS*	00000000 __ram_exceptions_end
102193a0 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
1021b64c g     F .text	000000a4 alt_ic_irq_disable
10203270 g     F .text	0000007c __swrite
1021f420 g     O .rwdata	00000004 __malloc_trim_threshold
10209794 g     F .text	0000000c __locale_msgcharset
1021c220 g     F .text	00000038 exit
10209608 g     F .text	000000c4 _fwalk_reent
1020a8b0 g     F .text	00000198 __mdiff
102184b8 g     F .text	00000050 alt_flash_close_dev
10202418 g     F .text	0000005c .hidden __modsi3
1021f424 g     O .rwdata	00000004 __ctype_ptr__
10400000 g       *ABS*	00000000 __alt_data_end
10408020 g     F .exceptions	00000000 alt_exception
10208c34 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
1020b8b0 g     F .text	000000c0 __sccl
1021d0a2 g     O .rodata	00000101 _ctype_
1021f42c g     O .rwdata	00000004 __mbtowc
1021acf0 g     F .text	00000054 altera_avalon_uart_close
1021c500 g     F .text	00000034 _exit
1021b16c g     F .text	00000140 alt_alarm_start
10214cf0 g     F .text	00000060 .hidden __muldi3
10209838 g     F .text	000001b8 __smakebuf_r
10203350 g     F .text	00000098 strlen
1021ba80 g     F .text	00000158 open
10216ce4 g     F .text	000000e0 .hidden __gedf2
10212d50 g     F .text	00000834 __gethex
1021f430 g     O .rwdata	00000004 __wctomb
10211334 g     F .text	00000018 __sprint_r
1021b52c g     F .text	00000030 alt_icache_flush_all
1021f45c g     O .rwdata	00000004 alt_priority_mask
1021b5ac g     F .text	000000a0 alt_ic_irq_enable
10206a30 g     F .text	00000024 __vfprintf_internal
1021ad94 g     F .text	000001dc altera_avalon_uart_read
10214c94 g     F .text	0000005c _wctomb_r
102175c8 g     F .text	000008d0 .hidden __subdf3
1020a2d8 g     F .text	000000b0 __lo0bits
1021f460 g     O .rwdata	00000008 alt_alarm_list
10211094 g     F .text	00000188 _ungetc_r
1021b3e4 g     F .text	0000005c _do_ctors
10214ba4 g     F .text	000000c0 wcrtomb
102182e0 g     F .text	000000d0 close
10218760 g     F .text	00000080 alt_load
10212b9c g     F .text	0000005c fputwc
10202590 g     F .text	00000014 free
10208c38 g     F .text	00000004 __sinit_lock_acquire
1020a04c g     F .text	00000120 __multadd
1020a024 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10408000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10408000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10408004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10408008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1040800c:	00bffd16 	blt	zero,r2,10408004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10408010:	00440834 	movhi	at,4128
    ori r1, r1, %lo(_start)
10408014:	08408814 	ori	at,at,544
    jmp r1
10408018:	0800683a 	jmp	at
1040801c:	00000000 	call	10000000 <__alt_mem_sdram+0x8000000>

Disassembly of section .exceptions:

10408020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10408020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10408024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10408028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1040802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10408030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10408034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10408038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1040803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10408040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10408044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10408048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1040804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10408050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10408054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10408058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1040805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10408060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10408064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10408068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1040806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10408070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10408074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10408078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1040807c:	10000326 	beq	r2,zero,1040808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10408080:	20000226 	beq	r4,zero,1040808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10408084:	04080fc0 	call	104080fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10408088:	00000706 	br	104080a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1040808c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10408090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10408094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10408098:	04081cc0 	call	104081cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1040809c:	1000021e 	bne	r2,zero,104080a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
104080a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
104080a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
104080a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
104080ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
104080b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
104080b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
104080b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
104080bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
104080c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
104080c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
104080c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
104080cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
104080d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
104080d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
104080d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
104080dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
104080e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
104080e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
104080e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
104080ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
104080f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
104080f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
104080f8:	ef80083a 	eret

104080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
104080fc:	defff904 	addi	sp,sp,-28
10408100:	dfc00615 	stw	ra,24(sp)
10408104:	df000515 	stw	fp,20(sp)
10408108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1040810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10408110:	0005313a 	rdctl	r2,ipending
10408114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10408118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1040811c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10408120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10408124:	00800044 	movi	r2,1
10408128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1040812c:	e0fffb17 	ldw	r3,-20(fp)
10408130:	e0bffc17 	ldw	r2,-16(fp)
10408134:	1884703a 	and	r2,r3,r2
10408138:	10001426 	beq	r2,zero,1040818c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1040813c:	008408b4 	movhi	r2,4130
10408140:	10846d04 	addi	r2,r2,4532
10408144:	e0fffd17 	ldw	r3,-12(fp)
10408148:	180690fa 	slli	r3,r3,3
1040814c:	10c5883a 	add	r2,r2,r3
10408150:	10c00017 	ldw	r3,0(r2)
10408154:	008408b4 	movhi	r2,4130
10408158:	10846d04 	addi	r2,r2,4532
1040815c:	e13ffd17 	ldw	r4,-12(fp)
10408160:	200890fa 	slli	r4,r4,3
10408164:	21000104 	addi	r4,r4,4
10408168:	1105883a 	add	r2,r2,r4
1040816c:	10800017 	ldw	r2,0(r2)
10408170:	1009883a 	mov	r4,r2
10408174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10408178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1040817c:	0005313a 	rdctl	r2,ipending
10408180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10408184:	e0bfff17 	ldw	r2,-4(fp)
10408188:	00000706 	br	104081a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1040818c:	e0bffc17 	ldw	r2,-16(fp)
10408190:	1085883a 	add	r2,r2,r2
10408194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10408198:	e0bffd17 	ldw	r2,-12(fp)
1040819c:	10800044 	addi	r2,r2,1
104081a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
104081a4:	003fe106 	br	1040812c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
104081a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
104081ac:	e0bffb17 	ldw	r2,-20(fp)
104081b0:	103fdb1e 	bne	r2,zero,10408120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
104081b4:	0001883a 	nop
}
104081b8:	e037883a 	mov	sp,fp
104081bc:	dfc00117 	ldw	ra,4(sp)
104081c0:	df000017 	ldw	fp,0(sp)
104081c4:	dec00204 	addi	sp,sp,8
104081c8:	f800283a 	ret

104081cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
104081cc:	defffb04 	addi	sp,sp,-20
104081d0:	dfc00415 	stw	ra,16(sp)
104081d4:	df000315 	stw	fp,12(sp)
104081d8:	df000304 	addi	fp,sp,12
104081dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
104081e0:	000531fa 	rdctl	r2,exception
104081e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
104081e8:	e0bffd17 	ldw	r2,-12(fp)
104081ec:	10801f0c 	andi	r2,r2,124
104081f0:	1004d0ba 	srli	r2,r2,2
104081f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
104081f8:	0005333a 	rdctl	r2,badaddr
104081fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
10408200:	d0a75d17 	ldw	r2,-25228(gp)
10408204:	10000726 	beq	r2,zero,10408224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
10408208:	d0a75d17 	ldw	r2,-25228(gp)
1040820c:	e0fffd17 	ldw	r3,-12(fp)
10408210:	1809883a 	mov	r4,r3
10408214:	e17fff17 	ldw	r5,-4(fp)
10408218:	e1bffe17 	ldw	r6,-8(fp)
1040821c:	103ee83a 	callr	r2
10408220:	00000206 	br	1040822c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10408224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10408228:	0005883a 	mov	r2,zero
}
1040822c:	e037883a 	mov	sp,fp
10408230:	dfc00117 	ldw	ra,4(sp)
10408234:	df000017 	ldw	fp,0(sp)
10408238:	dec00204 	addi	sp,sp,8
1040823c:	f800283a 	ret

Disassembly of section .text:

10200220 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10200220:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
10200224:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
10200228:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
1020022c:	00bffd16 	blt	zero,r2,10200224 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10200230:	06c41034 	movhi	sp,4160
    ori sp, sp, %lo(__alt_stack_pointer)
10200234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10200238:	068408b4 	movhi	gp,4130
    ori gp, gp, %lo(_gp)
1020023c:	d69d0514 	ori	gp,gp,29716
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10200240:	008408b4 	movhi	r2,4130
    ori r2, r2, %lo(__bss_start)
10200244:	10845314 	ori	r2,r2,4428

    movhi r3, %hi(__bss_end)
10200248:	00c408b4 	movhi	r3,4130
    ori r3, r3, %lo(__bss_end)
1020024c:	18c4ad14 	ori	r3,r3,4788

    beq r2, r3, 1f
10200250:	10c00326 	beq	r2,r3,10200260 <_start+0x40>

0:
    stw zero, (r2)
10200254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10200258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1020025c:	10fffd36 	bltu	r2,r3,10200254 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10200260:	02187600 	call	10218760 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10200264:	02189040 	call	10218904 <alt_main>

10200268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10200268:	003fff06 	br	10200268 <alt_after_alt_main>

1020026c <MenuHeader>:
*
*  Purpose: Prints the menu header.
*
******************************************************************/
static void MenuHeader(void)
{
1020026c:	defffe04 	addi	sp,sp,-8
10200270:	dfc00115 	stw	ra,4(sp)
10200274:	df000015 	stw	fp,0(sp)
10200278:	d839883a 	mov	fp,sp
  printf("\n\n");
1020027c:	010408b4 	movhi	r4,4130
10200280:	21314d04 	addi	r4,r4,-15052
10200284:	02030300 	call	10203030 <puts>
  printf("             <---->   Nios II Memory Test.   <---->\n");
10200288:	010408b4 	movhi	r4,4130
1020028c:	21314e04 	addi	r4,r4,-15048
10200290:	02030300 	call	10203030 <puts>
  printf("This software example tests the memory in your system to assure it\n");
10200294:	010408b4 	movhi	r4,4130
10200298:	21315b04 	addi	r4,r4,-14996
1020029c:	02030300 	call	10203030 <puts>
  printf("is working properly.  This test is destructive to the contents of\n");
102002a0:	010408b4 	movhi	r4,4130
102002a4:	21316c04 	addi	r4,r4,-14928
102002a8:	02030300 	call	10203030 <puts>
  printf("the memory it tests. Assure the memory being tested does not contain\n");
102002ac:	010408b4 	movhi	r4,4130
102002b0:	21317d04 	addi	r4,r4,-14860
102002b4:	02030300 	call	10203030 <puts>
  printf("the executable or data sections of this code or the exception address\n");
102002b8:	010408b4 	movhi	r4,4130
102002bc:	21318f04 	addi	r4,r4,-14788
102002c0:	02030300 	call	10203030 <puts>
  printf("of the system.\n");
102002c4:	010408b4 	movhi	r4,4130
102002c8:	2131a104 	addi	r4,r4,-14716
102002cc:	02030300 	call	10203030 <puts>
}
102002d0:	e037883a 	mov	sp,fp
102002d4:	dfc00117 	ldw	ra,4(sp)
102002d8:	df000017 	ldw	fp,0(sp)
102002dc:	dec00204 	addi	sp,sp,8
102002e0:	f800283a 	ret

102002e4 <MenuBegin>:
*
*  Purpose: Prints the top portion of the menu.
*
******************************************************************/
static void MenuBegin( char *title )
{
102002e4:	defffd04 	addi	sp,sp,-12
102002e8:	dfc00215 	stw	ra,8(sp)
102002ec:	df000115 	stw	fp,4(sp)
102002f0:	df000104 	addi	fp,sp,4
102002f4:	e13fff15 	stw	r4,-4(fp)
  printf("\n\n");
102002f8:	010408b4 	movhi	r4,4130
102002fc:	21314d04 	addi	r4,r4,-15052
10200300:	02030300 	call	10203030 <puts>
  printf("----------------------------------\n");
10200304:	010408b4 	movhi	r4,4130
10200308:	2131a504 	addi	r4,r4,-14700
1020030c:	02030300 	call	10203030 <puts>
  printf("%s\n",title);
10200310:	e13fff17 	ldw	r4,-4(fp)
10200314:	02030300 	call	10203030 <puts>
  printf("----------------------------------\n");
10200318:	010408b4 	movhi	r4,4130
1020031c:	2131a504 	addi	r4,r4,-14700
10200320:	02030300 	call	10203030 <puts>
}
10200324:	e037883a 	mov	sp,fp
10200328:	dfc00117 	ldw	ra,4(sp)
1020032c:	df000017 	ldw	fp,0(sp)
10200330:	dec00204 	addi	sp,sp,8
10200334:	f800283a 	ret

10200338 <MenuItem>:
*  Purpose: Prints selection items in the menu, enumerated by the 
*           specified letter.
*
******************************************************************/
static void MenuItem( char letter, char *name )
{
10200338:	defffc04 	addi	sp,sp,-16
1020033c:	dfc00315 	stw	ra,12(sp)
10200340:	df000215 	stw	fp,8(sp)
10200344:	df000204 	addi	fp,sp,8
10200348:	2005883a 	mov	r2,r4
1020034c:	e17fff15 	stw	r5,-4(fp)
10200350:	e0bffe05 	stb	r2,-8(fp)
  printf("     %c:  %s\n" ,letter, name);
10200354:	e0bffe07 	ldb	r2,-8(fp)
10200358:	010408b4 	movhi	r4,4130
1020035c:	2131ae04 	addi	r4,r4,-14664
10200360:	100b883a 	mov	r5,r2
10200364:	e1bfff17 	ldw	r6,-4(fp)
10200368:	0202f2c0 	call	10202f2c <printf>
}
1020036c:	e037883a 	mov	sp,fp
10200370:	dfc00117 	ldw	ra,4(sp)
10200374:	df000017 	ldw	fp,0(sp)
10200378:	dec00204 	addi	sp,sp,8
1020037c:	f800283a 	ret

10200380 <GetInputString>:
*           returns the string, minus any '\r' characters it 
*           encounters.
*
******************************************************************/
void GetInputString( char* entry, int size, FILE * stream )
{
10200380:	defff904 	addi	sp,sp,-28
10200384:	dfc00615 	stw	ra,24(sp)
10200388:	df000515 	stw	fp,20(sp)
1020038c:	df000504 	addi	fp,sp,20
10200390:	e13ffd15 	stw	r4,-12(fp)
10200394:	e17ffe15 	stw	r5,-8(fp)
10200398:	e1bfff15 	stw	r6,-4(fp)
  int i;
  int ch = 0;
1020039c:	e03ffc15 	stw	zero,-16(fp)
  
  for(i = 0; (ch != '\n') && (i < size); )
102003a0:	e03ffb15 	stw	zero,-20(fp)
102003a4:	00000e06 	br	102003e0 <GetInputString+0x60>
  {
    if( (ch = getc(stream)) != '\r')
102003a8:	e13fff17 	ldw	r4,-4(fp)
102003ac:	02024f40 	call	102024f4 <getc>
102003b0:	e0bffc15 	stw	r2,-16(fp)
102003b4:	e0bffc17 	ldw	r2,-16(fp)
102003b8:	10800360 	cmpeqi	r2,r2,13
102003bc:	1000081e 	bne	r2,zero,102003e0 <GetInputString+0x60>
    {
      entry[i] = ch;
102003c0:	e0bffb17 	ldw	r2,-20(fp)
102003c4:	e0fffd17 	ldw	r3,-12(fp)
102003c8:	1885883a 	add	r2,r3,r2
102003cc:	e0fffc17 	ldw	r3,-16(fp)
102003d0:	10c00005 	stb	r3,0(r2)
      i++;
102003d4:	e0bffb17 	ldw	r2,-20(fp)
102003d8:	10800044 	addi	r2,r2,1
102003dc:	e0bffb15 	stw	r2,-20(fp)
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;
  
  for(i = 0; (ch != '\n') && (i < size); )
102003e0:	e0bffc17 	ldw	r2,-16(fp)
102003e4:	108002a0 	cmpeqi	r2,r2,10
102003e8:	1000031e 	bne	r2,zero,102003f8 <GetInputString+0x78>
102003ec:	e0fffb17 	ldw	r3,-20(fp)
102003f0:	e0bffe17 	ldw	r2,-8(fp)
102003f4:	18bfec16 	blt	r3,r2,102003a8 <GetInputString+0x28>
    {
      entry[i] = ch;
      i++;
    }
  }
}
102003f8:	e037883a 	mov	sp,fp
102003fc:	dfc00117 	ldw	ra,4(sp)
10200400:	df000017 	ldw	fp,0(sp)
10200404:	dec00204 	addi	sp,sp,8
10200408:	f800283a 	ret

1020040c <MenuEnd>:
*  Purpose: Prints the end of the menu, then captures and returns
*           the user's selection.
*
******************************************************************/
static int MenuEnd( char lowLetter, char highLetter )
{
1020040c:	defffc04 	addi	sp,sp,-16
10200410:	dfc00315 	stw	ra,12(sp)
10200414:	df000215 	stw	fp,8(sp)
10200418:	df000204 	addi	fp,sp,8
1020041c:	2007883a 	mov	r3,r4
10200420:	2805883a 	mov	r2,r5
10200424:	e0fffe05 	stb	r3,-8(fp)
10200428:	e0bfff05 	stb	r2,-4(fp)
  static char entry[4];
  static char ch;

  printf("     q:  Exit\n");
1020042c:	010408b4 	movhi	r4,4130
10200430:	2131b204 	addi	r4,r4,-14648
10200434:	02030300 	call	10203030 <puts>
  printf("----------------------------------\n");
10200438:	010408b4 	movhi	r4,4130
1020043c:	2131a504 	addi	r4,r4,-14700
10200440:	02030300 	call	10203030 <puts>
  printf("\nSelect Choice (%c-%c): [Followed by <enter>]",lowLetter,highLetter);
10200444:	e0fffe07 	ldb	r3,-8(fp)
10200448:	e0bfff07 	ldb	r2,-4(fp)
1020044c:	010408b4 	movhi	r4,4130
10200450:	2131b604 	addi	r4,r4,-14632
10200454:	180b883a 	mov	r5,r3
10200458:	100d883a 	mov	r6,r2
1020045c:	0202f2c0 	call	10202f2c <printf>

  GetInputString( entry, sizeof(entry), stdin );
10200460:	008408b4 	movhi	r2,4130
10200464:	10bd0604 	addi	r2,r2,-3048
10200468:	10800017 	ldw	r2,0(r2)
1020046c:	10800117 	ldw	r2,4(r2)
10200470:	d1274e04 	addi	r4,gp,-25288
10200474:	01400104 	movi	r5,4
10200478:	100d883a 	mov	r6,r2
1020047c:	02003800 	call	10200380 <GetInputString>
  if(sscanf(entry, "%c\n", &ch))
10200480:	d1274e04 	addi	r4,gp,-25288
10200484:	014408b4 	movhi	r5,4130
10200488:	2971c204 	addi	r5,r5,-14584
1020048c:	d1a74f04 	addi	r6,gp,-25284
10200490:	02031200 	call	10203120 <sscanf>
10200494:	10001726 	beq	r2,zero,102004f4 <MenuEnd+0xe8>
  {
    if( ch >= 'A' && ch <= 'Z' )
10200498:	d0a74f03 	ldbu	r2,-25284(gp)
1020049c:	10803fcc 	andi	r2,r2,255
102004a0:	1080201c 	xori	r2,r2,128
102004a4:	10bfe004 	addi	r2,r2,-128
102004a8:	10801050 	cmplti	r2,r2,65
102004ac:	1000091e 	bne	r2,zero,102004d4 <MenuEnd+0xc8>
102004b0:	d0a74f03 	ldbu	r2,-25284(gp)
102004b4:	10803fcc 	andi	r2,r2,255
102004b8:	1080201c 	xori	r2,r2,128
102004bc:	10bfe004 	addi	r2,r2,-128
102004c0:	108016c8 	cmpgei	r2,r2,91
102004c4:	1000031e 	bne	r2,zero,102004d4 <MenuEnd+0xc8>
      ch += 'a' - 'A';
102004c8:	d0a74f03 	ldbu	r2,-25284(gp)
102004cc:	10800804 	addi	r2,r2,32
102004d0:	d0a74f05 	stb	r2,-25284(gp)
    if( ch == 27 )
102004d4:	d0a74f03 	ldbu	r2,-25284(gp)
102004d8:	10803fcc 	andi	r2,r2,255
102004dc:	1080201c 	xori	r2,r2,128
102004e0:	10bfe004 	addi	r2,r2,-128
102004e4:	108006d8 	cmpnei	r2,r2,27
102004e8:	1000021e 	bne	r2,zero,102004f4 <MenuEnd+0xe8>
      ch = 'q';
102004ec:	00801c44 	movi	r2,113
102004f0:	d0a74f05 	stb	r2,-25284(gp)
  }
  return ch;
102004f4:	d0a74f03 	ldbu	r2,-25284(gp)
102004f8:	10803fcc 	andi	r2,r2,255
102004fc:	1080201c 	xori	r2,r2,128
10200500:	10bfe004 	addi	r2,r2,-128
}
10200504:	e037883a 	mov	sp,fp
10200508:	dfc00117 	ldw	ra,4(sp)
1020050c:	df000017 	ldw	fp,0(sp)
10200510:	dec00204 	addi	sp,sp,8
10200514:	f800283a 	ret

10200518 <MemGetAddressRange>:
*
*  Purpose: Gathers a range of memory from the user.
*
******************************************************************/
static int MemGetAddressRange(int* base_address, int* end_address)
{
10200518:	defff904 	addi	sp,sp,-28
1020051c:	dfc00615 	stw	ra,24(sp)
10200520:	df000515 	stw	fp,20(sp)
10200524:	df000504 	addi	fp,sp,20
10200528:	e13ffe15 	stw	r4,-8(fp)
1020052c:	e17fff15 	stw	r5,-4(fp)
  char line[12];

  while(1)
  {
    /* Get the base address */
    printf("Base address to start memory test: (i.e. 0x800000)\n");
10200530:	010408b4 	movhi	r4,4130
10200534:	2131c304 	addi	r4,r4,-14580
10200538:	02030300 	call	10203030 <puts>
    printf(">");
1020053c:	01000f84 	movi	r4,62
10200540:	0202f700 	call	10202f70 <putchar>

    GetInputString( line, sizeof(line), stdin );
10200544:	008408b4 	movhi	r2,4130
10200548:	10bd0604 	addi	r2,r2,-3048
1020054c:	10800017 	ldw	r2,0(r2)
10200550:	10800117 	ldw	r2,4(r2)
10200554:	e13ffb04 	addi	r4,fp,-20
10200558:	01400304 	movi	r5,12
1020055c:	100d883a 	mov	r6,r2
10200560:	02003800 	call	10200380 <GetInputString>
   
    /* Check the format to make sure it was entered as hex */
    if(sscanf(line, "0x%X", base_address) != 1)
10200564:	e13ffb04 	addi	r4,fp,-20
10200568:	014408b4 	movhi	r5,4130
1020056c:	2971d004 	addi	r5,r5,-14528
10200570:	e1bffe17 	ldw	r6,-8(fp)
10200574:	02031200 	call	10203120 <sscanf>
10200578:	10800060 	cmpeqi	r2,r2,1
1020057c:	1000061e 	bne	r2,zero,10200598 <MemGetAddressRange+0x80>
    {
      printf("%s\n", line);
10200580:	e13ffb04 	addi	r4,fp,-20
10200584:	02030300 	call	10203030 <puts>
      printf(" -ERROR: Invalid base address entered.  Address must be in the form '0x800000'\n\n");
10200588:	010408b4 	movhi	r4,4130
1020058c:	2131d204 	addi	r4,r4,-14520
10200590:	02030300 	call	10203030 <puts>
      continue;
10200594:	00002206 	br	10200620 <MemGetAddressRange+0x108>
    }
    
    /* Get the end address */
    printf("End Address:\n");
10200598:	010408b4 	movhi	r4,4130
1020059c:	2131e604 	addi	r4,r4,-14440
102005a0:	02030300 	call	10203030 <puts>
    printf(">");
102005a4:	01000f84 	movi	r4,62
102005a8:	0202f700 	call	10202f70 <putchar>

    GetInputString( line, sizeof(line), stdin );
102005ac:	008408b4 	movhi	r2,4130
102005b0:	10bd0604 	addi	r2,r2,-3048
102005b4:	10800017 	ldw	r2,0(r2)
102005b8:	10800117 	ldw	r2,4(r2)
102005bc:	e13ffb04 	addi	r4,fp,-20
102005c0:	01400304 	movi	r5,12
102005c4:	100d883a 	mov	r6,r2
102005c8:	02003800 	call	10200380 <GetInputString>
    
    /* Check the format to make sure it was entered as hex */
    if(sscanf(line, "0x%X", end_address) != 1)
102005cc:	e13ffb04 	addi	r4,fp,-20
102005d0:	014408b4 	movhi	r5,4130
102005d4:	2971d004 	addi	r5,r5,-14528
102005d8:	e1bfff17 	ldw	r6,-4(fp)
102005dc:	02031200 	call	10203120 <sscanf>
102005e0:	10800060 	cmpeqi	r2,r2,1
102005e4:	1000041e 	bne	r2,zero,102005f8 <MemGetAddressRange+0xe0>
    {
      printf(" -ERROR: Invalid end address entered.  Address must be in the form '0x8FFFFF'\n\n");
102005e8:	010408b4 	movhi	r4,4130
102005ec:	2131ea04 	addi	r4,r4,-14424
102005f0:	02030300 	call	10203030 <puts>
      continue;
102005f4:	00000a06 	br	10200620 <MemGetAddressRange+0x108>
    }
    
    /* Make sure end address is greater than base address. */
    if (*end_address <= *base_address)
102005f8:	e0bfff17 	ldw	r2,-4(fp)
102005fc:	10800017 	ldw	r2,0(r2)
10200600:	e0fffe17 	ldw	r3,-8(fp)
10200604:	18c00017 	ldw	r3,0(r3)
10200608:	18800416 	blt	r3,r2,1020061c <MemGetAddressRange+0x104>
    {
      printf(" -ERROR: End address must be greater than the start address\n\n");
1020060c:	010408b4 	movhi	r4,4130
10200610:	2131fe04 	addi	r4,r4,-14344
10200614:	02030300 	call	10203030 <puts>

      continue;
10200618:	00000106 	br	10200620 <MemGetAddressRange+0x108>
    }
    break;
1020061c:	00000106 	br	10200624 <MemGetAddressRange+0x10c>
  }
10200620:	003fc306 	br	10200530 <MemGetAddressRange+0x18>

  return(0);
10200624:	0005883a 	mov	r2,zero
}
10200628:	e037883a 	mov	sp,fp
1020062c:	dfc00117 	ldw	ra,4(sp)
10200630:	df000017 	ldw	fp,0(sp)
10200634:	dec00204 	addi	sp,sp,8
10200638:	f800283a 	ret

1020063c <MemTestDataBus>:
*  Purpose: Tests that the data bus is connected with no 
*           stuck-at's, shorts, or open circuits.
*
******************************************************************/
static int MemTestDataBus(unsigned int address)
{
1020063c:	defffc04 	addi	sp,sp,-16
10200640:	df000315 	stw	fp,12(sp)
10200644:	df000304 	addi	fp,sp,12
10200648:	e13fff15 	stw	r4,-4(fp)
  unsigned int pattern;
  unsigned int ret_code = 0x0;
1020064c:	e03ffe15 	stw	zero,-8(fp)

  /* Perform a walking 1's test at the given address. */
  for (pattern = 1; pattern != 0; pattern <<= 1)
10200650:	00800044 	movi	r2,1
10200654:	e0bffd15 	stw	r2,-12(fp)
10200658:	00000e06 	br	10200694 <MemTestDataBus+0x58>
  {
    /* Write the test pattern. */
    IOWR_32DIRECT(address, 0, pattern);
1020065c:	e0bfff17 	ldw	r2,-4(fp)
10200660:	e0fffd17 	ldw	r3,-12(fp)
10200664:	10c00035 	stwio	r3,0(r2)

    /* Read it back (immediately is okay for this test). */
    if (IORD_32DIRECT(address, 0) != pattern)
10200668:	e0bfff17 	ldw	r2,-4(fp)
1020066c:	10800037 	ldwio	r2,0(r2)
10200670:	1007883a 	mov	r3,r2
10200674:	e0bffd17 	ldw	r2,-12(fp)
10200678:	18800326 	beq	r3,r2,10200688 <MemTestDataBus+0x4c>
    {
      ret_code = pattern;
1020067c:	e0bffd17 	ldw	r2,-12(fp)
10200680:	e0bffe15 	stw	r2,-8(fp)
      break;
10200684:	00000506 	br	1020069c <MemTestDataBus+0x60>
{
  unsigned int pattern;
  unsigned int ret_code = 0x0;

  /* Perform a walking 1's test at the given address. */
  for (pattern = 1; pattern != 0; pattern <<= 1)
10200688:	e0bffd17 	ldw	r2,-12(fp)
1020068c:	1085883a 	add	r2,r2,r2
10200690:	e0bffd15 	stw	r2,-12(fp)
10200694:	e0bffd17 	ldw	r2,-12(fp)
10200698:	103ff01e 	bne	r2,zero,1020065c <MemTestDataBus+0x20>
    {
      ret_code = pattern;
      break;
    }
  }
  return ret_code;
1020069c:	e0bffe17 	ldw	r2,-8(fp)
}
102006a0:	e037883a 	mov	sp,fp
102006a4:	df000017 	ldw	fp,0(sp)
102006a8:	dec00104 	addi	sp,sp,4
102006ac:	f800283a 	ret

102006b0 <MemTestAddressBus>:
*  Purpose: Tests that the address bus is connected with no 
*           stuck-at's, shorts, or open circuits.
*
******************************************************************/
static int MemTestAddressBus(unsigned int memory_base, unsigned int nBytes)
{
102006b0:	defff704 	addi	sp,sp,-36
102006b4:	df000815 	stw	fp,32(sp)
102006b8:	df000804 	addi	fp,sp,32
102006bc:	e13ffe15 	stw	r4,-8(fp)
102006c0:	e17fff15 	stw	r5,-4(fp)
  unsigned int address_mask = (nBytes - 1);
102006c4:	e0bfff17 	ldw	r2,-4(fp)
102006c8:	10bfffc4 	addi	r2,r2,-1
102006cc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int offset;
  unsigned int test_offset;

  unsigned int pattern     = 0xAAAAAAAA;
102006d0:	00aaaaf4 	movhi	r2,43691
102006d4:	10aaaa84 	addi	r2,r2,-21846
102006d8:	e0bffc15 	stw	r2,-16(fp)
  unsigned int antipattern  = 0x55555555;
102006dc:	00955574 	movhi	r2,21845
102006e0:	10955544 	addi	r2,r2,21845
102006e4:	e0bffd15 	stw	r2,-12(fp)

  unsigned int ret_code = 0x0;
102006e8:	e03ffa15 	stw	zero,-24(fp)

  /* Write the default pattern at each of the power-of-two offsets. */
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
102006ec:	00800104 	movi	r2,4
102006f0:	e0bff815 	stw	r2,-32(fp)
102006f4:	00000906 	br	1020071c <MemTestAddressBus+0x6c>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
102006f8:	e0fff817 	ldw	r3,-32(fp)
102006fc:	e0bffe17 	ldw	r2,-8(fp)
10200700:	1885883a 	add	r2,r3,r2
10200704:	1007883a 	mov	r3,r2
10200708:	e0bffc17 	ldw	r2,-16(fp)
1020070c:	18800035 	stwio	r2,0(r3)
  unsigned int antipattern  = 0x55555555;

  unsigned int ret_code = 0x0;

  /* Write the default pattern at each of the power-of-two offsets. */
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
10200710:	e0bff817 	ldw	r2,-32(fp)
10200714:	1085883a 	add	r2,r2,r2
10200718:	e0bff815 	stw	r2,-32(fp)
1020071c:	e0fff817 	ldw	r3,-32(fp)
10200720:	e0bffb17 	ldw	r2,-20(fp)
10200724:	1884703a 	and	r2,r3,r2
10200728:	103ff31e 	bne	r2,zero,102006f8 <MemTestAddressBus+0x48>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
  }

  /* Check for address bits stuck high. */
  test_offset = 0;
1020072c:	e03ff915 	stw	zero,-28(fp)
  IOWR_32DIRECT(memory_base, test_offset, antipattern);
10200730:	e0fff917 	ldw	r3,-28(fp)
10200734:	e0bffe17 	ldw	r2,-8(fp)
10200738:	1885883a 	add	r2,r3,r2
1020073c:	1007883a 	mov	r3,r2
10200740:	e0bffd17 	ldw	r2,-12(fp)
10200744:	18800035 	stwio	r2,0(r3)
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
10200748:	00800104 	movi	r2,4
1020074c:	e0bff815 	stw	r2,-32(fp)
10200750:	00000f06 	br	10200790 <MemTestAddressBus+0xe0>
  {
     if (IORD_32DIRECT(memory_base, offset) != pattern)
10200754:	e0fff817 	ldw	r3,-32(fp)
10200758:	e0bffe17 	ldw	r2,-8(fp)
1020075c:	1885883a 	add	r2,r3,r2
10200760:	10800037 	ldwio	r2,0(r2)
10200764:	1007883a 	mov	r3,r2
10200768:	e0bffc17 	ldw	r2,-16(fp)
1020076c:	18800526 	beq	r3,r2,10200784 <MemTestAddressBus+0xd4>
     {
        ret_code = (memory_base+offset);
10200770:	e0fffe17 	ldw	r3,-8(fp)
10200774:	e0bff817 	ldw	r2,-32(fp)
10200778:	1885883a 	add	r2,r3,r2
1020077c:	e0bffa15 	stw	r2,-24(fp)
        break;
10200780:	00000706 	br	102007a0 <MemTestAddressBus+0xf0>
  }

  /* Check for address bits stuck high. */
  test_offset = 0;
  IOWR_32DIRECT(memory_base, test_offset, antipattern);
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
10200784:	e0bff817 	ldw	r2,-32(fp)
10200788:	1085883a 	add	r2,r2,r2
1020078c:	e0bff815 	stw	r2,-32(fp)
10200790:	e0fff817 	ldw	r3,-32(fp)
10200794:	e0bffb17 	ldw	r2,-20(fp)
10200798:	1884703a 	and	r2,r3,r2
1020079c:	103fed1e 	bne	r2,zero,10200754 <MemTestAddressBus+0xa4>
        break;
     }
  }

  /* Check for address bits stuck low or shorted. */
  IOWR_32DIRECT(memory_base, test_offset, pattern);
102007a0:	e0fff917 	ldw	r3,-28(fp)
102007a4:	e0bffe17 	ldw	r2,-8(fp)
102007a8:	1885883a 	add	r2,r3,r2
102007ac:	1007883a 	mov	r3,r2
102007b0:	e0bffc17 	ldw	r2,-16(fp)
102007b4:	18800035 	stwio	r2,0(r3)
  for (test_offset = sizeof(unsigned int); (test_offset & address_mask) != 0; test_offset <<= 1)
102007b8:	00800104 	movi	r2,4
102007bc:	e0bff915 	stw	r2,-28(fp)
102007c0:	00002a06 	br	1020086c <MemTestAddressBus+0x1bc>
  {
    if (!ret_code)
102007c4:	e0bffa17 	ldw	r2,-24(fp)
102007c8:	1000251e 	bne	r2,zero,10200860 <MemTestAddressBus+0x1b0>
    {
      IOWR_32DIRECT(memory_base, test_offset, antipattern);
102007cc:	e0fff917 	ldw	r3,-28(fp)
102007d0:	e0bffe17 	ldw	r2,-8(fp)
102007d4:	1885883a 	add	r2,r3,r2
102007d8:	1007883a 	mov	r3,r2
102007dc:	e0bffd17 	ldw	r2,-12(fp)
102007e0:	18800035 	stwio	r2,0(r3)
      for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
102007e4:	00800104 	movi	r2,4
102007e8:	e0bff815 	stw	r2,-32(fp)
102007ec:	00001206 	br	10200838 <MemTestAddressBus+0x188>
      {
        if ((IORD_32DIRECT(memory_base, offset) != pattern) && (offset != test_offset))
102007f0:	e0fff817 	ldw	r3,-32(fp)
102007f4:	e0bffe17 	ldw	r2,-8(fp)
102007f8:	1885883a 	add	r2,r3,r2
102007fc:	10800037 	ldwio	r2,0(r2)
10200800:	1007883a 	mov	r3,r2
10200804:	e0bffc17 	ldw	r2,-16(fp)
10200808:	18800826 	beq	r3,r2,1020082c <MemTestAddressBus+0x17c>
1020080c:	e0fff817 	ldw	r3,-32(fp)
10200810:	e0bff917 	ldw	r2,-28(fp)
10200814:	18800526 	beq	r3,r2,1020082c <MemTestAddressBus+0x17c>
        {
          ret_code = (memory_base + test_offset);
10200818:	e0fffe17 	ldw	r3,-8(fp)
1020081c:	e0bff917 	ldw	r2,-28(fp)
10200820:	1885883a 	add	r2,r3,r2
10200824:	e0bffa15 	stw	r2,-24(fp)
          break;
10200828:	00000706 	br	10200848 <MemTestAddressBus+0x198>
  for (test_offset = sizeof(unsigned int); (test_offset & address_mask) != 0; test_offset <<= 1)
  {
    if (!ret_code)
    {
      IOWR_32DIRECT(memory_base, test_offset, antipattern);
      for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
1020082c:	e0bff817 	ldw	r2,-32(fp)
10200830:	1085883a 	add	r2,r2,r2
10200834:	e0bff815 	stw	r2,-32(fp)
10200838:	e0fff817 	ldw	r3,-32(fp)
1020083c:	e0bffb17 	ldw	r2,-20(fp)
10200840:	1884703a 	and	r2,r3,r2
10200844:	103fea1e 	bne	r2,zero,102007f0 <MemTestAddressBus+0x140>
        {
          ret_code = (memory_base + test_offset);
          break;
        }
      }
      IOWR_32DIRECT(memory_base, test_offset, pattern);
10200848:	e0fff917 	ldw	r3,-28(fp)
1020084c:	e0bffe17 	ldw	r2,-8(fp)
10200850:	1885883a 	add	r2,r3,r2
10200854:	1007883a 	mov	r3,r2
10200858:	e0bffc17 	ldw	r2,-16(fp)
1020085c:	18800035 	stwio	r2,0(r3)
     }
  }

  /* Check for address bits stuck low or shorted. */
  IOWR_32DIRECT(memory_base, test_offset, pattern);
  for (test_offset = sizeof(unsigned int); (test_offset & address_mask) != 0; test_offset <<= 1)
10200860:	e0bff917 	ldw	r2,-28(fp)
10200864:	1085883a 	add	r2,r2,r2
10200868:	e0bff915 	stw	r2,-28(fp)
1020086c:	e0fff917 	ldw	r3,-28(fp)
10200870:	e0bffb17 	ldw	r2,-20(fp)
10200874:	1884703a 	and	r2,r3,r2
10200878:	103fd21e 	bne	r2,zero,102007c4 <MemTestAddressBus+0x114>
      }
      IOWR_32DIRECT(memory_base, test_offset, pattern);
    }
  }

  return ret_code;
1020087c:	e0bffa17 	ldw	r2,-24(fp)
}
10200880:	e037883a 	mov	sp,fp
10200884:	df000017 	ldw	fp,0(sp)
10200888:	dec00104 	addi	sp,sp,4
1020088c:	f800283a 	ret

10200890 <MemTest8_16BitAccess>:
*           can be read and written in both byte and half-word 
*           modes.
*
******************************************************************/
static int MemTest8_16BitAccess(unsigned int memory_base)
{
10200890:	defffd04 	addi	sp,sp,-12
10200894:	df000215 	stw	fp,8(sp)
10200898:	df000204 	addi	fp,sp,8
1020089c:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0x0;
102008a0:	e03ffe15 	stw	zero,-8(fp)

  /* Write 4 bytes */
  IOWR_8DIRECT(memory_base, 0, 0x0A);
102008a4:	e0bfff17 	ldw	r2,-4(fp)
102008a8:	00c00284 	movi	r3,10
102008ac:	10c00025 	stbio	r3,0(r2)
  IOWR_8DIRECT(memory_base, 1, 0x05);
102008b0:	e0bfff17 	ldw	r2,-4(fp)
102008b4:	10800044 	addi	r2,r2,1
102008b8:	1007883a 	mov	r3,r2
102008bc:	00800144 	movi	r2,5
102008c0:	18800025 	stbio	r2,0(r3)
  IOWR_8DIRECT(memory_base, 2, 0xA0);
102008c4:	e0bfff17 	ldw	r2,-4(fp)
102008c8:	10800084 	addi	r2,r2,2
102008cc:	1007883a 	mov	r3,r2
102008d0:	00bfe804 	movi	r2,-96
102008d4:	18800025 	stbio	r2,0(r3)
  IOWR_8DIRECT(memory_base, 3, 0x50);
102008d8:	e0bfff17 	ldw	r2,-4(fp)
102008dc:	108000c4 	addi	r2,r2,3
102008e0:	1007883a 	mov	r3,r2
102008e4:	00801404 	movi	r2,80
102008e8:	18800025 	stbio	r2,0(r3)

  /* Read it back as one word */
  if(IORD_32DIRECT(memory_base, 0) != 0x50A0050A)
102008ec:	e0bfff17 	ldw	r2,-4(fp)
102008f0:	10c00037 	ldwio	r3,0(r2)
102008f4:	00942834 	movhi	r2,20640
102008f8:	10814284 	addi	r2,r2,1290
102008fc:	18800226 	beq	r3,r2,10200908 <MemTest8_16BitAccess+0x78>
  {
    ret_code = memory_base;
10200900:	e0bfff17 	ldw	r2,-4(fp)
10200904:	e0bffe15 	stw	r2,-8(fp)
  }

  /* Read it back as two half-words */
  if (!ret_code)
10200908:	e0bffe17 	ldw	r2,-8(fp)
1020090c:	10000d1e 	bne	r2,zero,10200944 <MemTest8_16BitAccess+0xb4>
  {
    if ((IORD_16DIRECT(memory_base, 2) != 0x50A0) ||
10200910:	e0bfff17 	ldw	r2,-4(fp)
10200914:	10800084 	addi	r2,r2,2
10200918:	1080002b 	ldhuio	r2,0(r2)
1020091c:	10bfffcc 	andi	r2,r2,65535
10200920:	10942818 	cmpnei	r2,r2,20640
10200924:	1000051e 	bne	r2,zero,1020093c <MemTest8_16BitAccess+0xac>
        (IORD_16DIRECT(memory_base, 0) != 0x050A))
10200928:	e0bfff17 	ldw	r2,-4(fp)
1020092c:	1080002b 	ldhuio	r2,0(r2)
10200930:	10bfffcc 	andi	r2,r2,65535
  }

  /* Read it back as two half-words */
  if (!ret_code)
  {
    if ((IORD_16DIRECT(memory_base, 2) != 0x50A0) ||
10200934:	108142a0 	cmpeqi	r2,r2,1290
10200938:	1000021e 	bne	r2,zero,10200944 <MemTest8_16BitAccess+0xb4>
        (IORD_16DIRECT(memory_base, 0) != 0x050A))
    {
      ret_code = memory_base;
1020093c:	e0bfff17 	ldw	r2,-4(fp)
10200940:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Read it back as 4 bytes */
  if (!ret_code)
10200944:	e0bffe17 	ldw	r2,-8(fp)
10200948:	1000191e 	bne	r2,zero,102009b0 <MemTest8_16BitAccess+0x120>
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x50) ||
1020094c:	e0bfff17 	ldw	r2,-4(fp)
10200950:	108000c4 	addi	r2,r2,3
10200954:	10800023 	ldbuio	r2,0(r2)
10200958:	10803fcc 	andi	r2,r2,255
1020095c:	10801418 	cmpnei	r2,r2,80
10200960:	1000111e 	bne	r2,zero,102009a8 <MemTest8_16BitAccess+0x118>
        (IORD_8DIRECT(memory_base, 2) != 0xA0) ||
10200964:	e0bfff17 	ldw	r2,-4(fp)
10200968:	10800084 	addi	r2,r2,2
1020096c:	10800023 	ldbuio	r2,0(r2)
10200970:	10803fcc 	andi	r2,r2,255
  }

  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x50) ||
10200974:	10802818 	cmpnei	r2,r2,160
10200978:	10000b1e 	bne	r2,zero,102009a8 <MemTest8_16BitAccess+0x118>
        (IORD_8DIRECT(memory_base, 2) != 0xA0) ||
        (IORD_8DIRECT(memory_base, 1) != 0x05) ||
1020097c:	e0bfff17 	ldw	r2,-4(fp)
10200980:	10800044 	addi	r2,r2,1
10200984:	10800023 	ldbuio	r2,0(r2)
10200988:	10803fcc 	andi	r2,r2,255

  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x50) ||
        (IORD_8DIRECT(memory_base, 2) != 0xA0) ||
1020098c:	10800158 	cmpnei	r2,r2,5
10200990:	1000051e 	bne	r2,zero,102009a8 <MemTest8_16BitAccess+0x118>
        (IORD_8DIRECT(memory_base, 1) != 0x05) ||
        (IORD_8DIRECT(memory_base, 0) != 0x0A))
10200994:	e0bfff17 	ldw	r2,-4(fp)
10200998:	10800023 	ldbuio	r2,0(r2)
1020099c:	10803fcc 	andi	r2,r2,255
  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x50) ||
        (IORD_8DIRECT(memory_base, 2) != 0xA0) ||
        (IORD_8DIRECT(memory_base, 1) != 0x05) ||
102009a0:	108002a0 	cmpeqi	r2,r2,10
102009a4:	1000021e 	bne	r2,zero,102009b0 <MemTest8_16BitAccess+0x120>
        (IORD_8DIRECT(memory_base, 0) != 0x0A))
    {
    ret_code = memory_base;
102009a8:	e0bfff17 	ldw	r2,-4(fp)
102009ac:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Write 2 half-words */
  if (!ret_code)
102009b0:	e0bffe17 	ldw	r2,-8(fp)
102009b4:	10000f1e 	bne	r2,zero,102009f4 <MemTest8_16BitAccess+0x164>
  {
    IOWR_16DIRECT(memory_base, 0, 0x50A0);
102009b8:	e0bfff17 	ldw	r2,-4(fp)
102009bc:	00d42804 	movi	r3,20640
102009c0:	10c0002d 	sthio	r3,0(r2)
    IOWR_16DIRECT(memory_base, 2, 0x050A);
102009c4:	e0bfff17 	ldw	r2,-4(fp)
102009c8:	10800084 	addi	r2,r2,2
102009cc:	1007883a 	mov	r3,r2
102009d0:	00814284 	movi	r2,1290
102009d4:	1880002d 	sthio	r2,0(r3)

    /* Read it back as one word */
    if(IORD_32DIRECT(memory_base, 0) != 0x050A50A0)
102009d8:	e0bfff17 	ldw	r2,-4(fp)
102009dc:	10c00037 	ldwio	r3,0(r2)
102009e0:	008142b4 	movhi	r2,1290
102009e4:	10942804 	addi	r2,r2,20640
102009e8:	18800226 	beq	r3,r2,102009f4 <MemTest8_16BitAccess+0x164>
    {
      ret_code = memory_base;
102009ec:	e0bfff17 	ldw	r2,-4(fp)
102009f0:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Read it back as two half-words */
  if (!ret_code)
102009f4:	e0bffe17 	ldw	r2,-8(fp)
102009f8:	10000d1e 	bne	r2,zero,10200a30 <MemTest8_16BitAccess+0x1a0>
  {
    if ((IORD_16DIRECT(memory_base, 2) != 0x050A) ||
102009fc:	e0bfff17 	ldw	r2,-4(fp)
10200a00:	10800084 	addi	r2,r2,2
10200a04:	1080002b 	ldhuio	r2,0(r2)
10200a08:	10bfffcc 	andi	r2,r2,65535
10200a0c:	10814298 	cmpnei	r2,r2,1290
10200a10:	1000051e 	bne	r2,zero,10200a28 <MemTest8_16BitAccess+0x198>
        (IORD_16DIRECT(memory_base, 0) != 0x50A0))
10200a14:	e0bfff17 	ldw	r2,-4(fp)
10200a18:	1080002b 	ldhuio	r2,0(r2)
10200a1c:	10bfffcc 	andi	r2,r2,65535
  }

  /* Read it back as two half-words */
  if (!ret_code)
  {
    if ((IORD_16DIRECT(memory_base, 2) != 0x050A) ||
10200a20:	10942820 	cmpeqi	r2,r2,20640
10200a24:	1000021e 	bne	r2,zero,10200a30 <MemTest8_16BitAccess+0x1a0>
        (IORD_16DIRECT(memory_base, 0) != 0x50A0))
    {
      ret_code = memory_base;
10200a28:	e0bfff17 	ldw	r2,-4(fp)
10200a2c:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Read it back as 4 bytes */
  if (!ret_code)
10200a30:	e0bffe17 	ldw	r2,-8(fp)
10200a34:	1000191e 	bne	r2,zero,10200a9c <MemTest8_16BitAccess+0x20c>
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x05) ||
10200a38:	e0bfff17 	ldw	r2,-4(fp)
10200a3c:	108000c4 	addi	r2,r2,3
10200a40:	10800023 	ldbuio	r2,0(r2)
10200a44:	10803fcc 	andi	r2,r2,255
10200a48:	10800158 	cmpnei	r2,r2,5
10200a4c:	1000111e 	bne	r2,zero,10200a94 <MemTest8_16BitAccess+0x204>
        (IORD_8DIRECT(memory_base, 2) != 0x0A) ||
10200a50:	e0bfff17 	ldw	r2,-4(fp)
10200a54:	10800084 	addi	r2,r2,2
10200a58:	10800023 	ldbuio	r2,0(r2)
10200a5c:	10803fcc 	andi	r2,r2,255
  }

  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x05) ||
10200a60:	10800298 	cmpnei	r2,r2,10
10200a64:	10000b1e 	bne	r2,zero,10200a94 <MemTest8_16BitAccess+0x204>
        (IORD_8DIRECT(memory_base, 2) != 0x0A) ||
        (IORD_8DIRECT(memory_base, 1) != 0x50) ||
10200a68:	e0bfff17 	ldw	r2,-4(fp)
10200a6c:	10800044 	addi	r2,r2,1
10200a70:	10800023 	ldbuio	r2,0(r2)
10200a74:	10803fcc 	andi	r2,r2,255

  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x05) ||
        (IORD_8DIRECT(memory_base, 2) != 0x0A) ||
10200a78:	10801418 	cmpnei	r2,r2,80
10200a7c:	1000051e 	bne	r2,zero,10200a94 <MemTest8_16BitAccess+0x204>
        (IORD_8DIRECT(memory_base, 1) != 0x50) ||
        (IORD_8DIRECT(memory_base, 0) != 0xA0))
10200a80:	e0bfff17 	ldw	r2,-4(fp)
10200a84:	10800023 	ldbuio	r2,0(r2)
10200a88:	10803fcc 	andi	r2,r2,255
  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x05) ||
        (IORD_8DIRECT(memory_base, 2) != 0x0A) ||
        (IORD_8DIRECT(memory_base, 1) != 0x50) ||
10200a8c:	10802820 	cmpeqi	r2,r2,160
10200a90:	1000021e 	bne	r2,zero,10200a9c <MemTest8_16BitAccess+0x20c>
        (IORD_8DIRECT(memory_base, 0) != 0xA0))
    {
      ret_code = memory_base;
10200a94:	e0bfff17 	ldw	r2,-4(fp)
10200a98:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  return(ret_code);
10200a9c:	e0bffe17 	ldw	r2,-8(fp)
}
10200aa0:	e037883a 	mov	sp,fp
10200aa4:	df000017 	ldw	fp,0(sp)
10200aa8:	dec00104 	addi	sp,sp,4
10200aac:	f800283a 	ret

10200ab0 <MemTestDevice>:
*  Purpose: Tests that every bit in the memory device within the 
*           specified address range can store both a '1' and a '0'.
*
******************************************************************/
static int MemTestDevice(unsigned int memory_base, unsigned int nBytes)
{
10200ab0:	defff804 	addi	sp,sp,-32
10200ab4:	dfc00715 	stw	ra,28(sp)
10200ab8:	df000615 	stw	fp,24(sp)
10200abc:	df000604 	addi	fp,sp,24
10200ac0:	e13ffe15 	stw	r4,-8(fp)
10200ac4:	e17fff15 	stw	r5,-4(fp)
  unsigned int offset;
  unsigned int pattern;
  unsigned int antipattern;
  unsigned int ret_code = 0x0;
10200ac8:	e03ffc15 	stw	zero,-16(fp)

  /* Fill memory with a known pattern. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
10200acc:	00800044 	movi	r2,1
10200ad0:	e0bffb15 	stw	r2,-20(fp)
10200ad4:	e03ffa15 	stw	zero,-24(fp)
10200ad8:	00000c06 	br	10200b0c <MemTestDevice+0x5c>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
10200adc:	e0fffa17 	ldw	r3,-24(fp)
10200ae0:	e0bffe17 	ldw	r2,-8(fp)
10200ae4:	1885883a 	add	r2,r3,r2
10200ae8:	1007883a 	mov	r3,r2
10200aec:	e0bffb17 	ldw	r2,-20(fp)
10200af0:	18800035 	stwio	r2,0(r3)
  unsigned int pattern;
  unsigned int antipattern;
  unsigned int ret_code = 0x0;

  /* Fill memory with a known pattern. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
10200af4:	e0bffb17 	ldw	r2,-20(fp)
10200af8:	10800044 	addi	r2,r2,1
10200afc:	e0bffb15 	stw	r2,-20(fp)
10200b00:	e0bffa17 	ldw	r2,-24(fp)
10200b04:	10800104 	addi	r2,r2,4
10200b08:	e0bffa15 	stw	r2,-24(fp)
10200b0c:	e0fffa17 	ldw	r3,-24(fp)
10200b10:	e0bfff17 	ldw	r2,-4(fp)
10200b14:	18bff136 	bltu	r3,r2,10200adc <MemTestDevice+0x2c>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
  }

  printf(" .");
10200b18:	010408b4 	movhi	r4,4130
10200b1c:	21320e04 	addi	r4,r4,-14280
10200b20:	0202f2c0 	call	10202f2c <printf>

  /* Check each location and invert it for the second pass. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
10200b24:	00800044 	movi	r2,1
10200b28:	e0bffb15 	stw	r2,-20(fp)
10200b2c:	e03ffa15 	stw	zero,-24(fp)
10200b30:	00001b06 	br	10200ba0 <MemTestDevice+0xf0>
  {
    if (IORD_32DIRECT(memory_base, offset) != pattern)
10200b34:	e0fffa17 	ldw	r3,-24(fp)
10200b38:	e0bffe17 	ldw	r2,-8(fp)
10200b3c:	1885883a 	add	r2,r3,r2
10200b40:	10800037 	ldwio	r2,0(r2)
10200b44:	1007883a 	mov	r3,r2
10200b48:	e0bffb17 	ldw	r2,-20(fp)
10200b4c:	18800526 	beq	r3,r2,10200b64 <MemTestDevice+0xb4>
    {
      ret_code = (memory_base + offset);
10200b50:	e0fffe17 	ldw	r3,-8(fp)
10200b54:	e0bffa17 	ldw	r2,-24(fp)
10200b58:	1885883a 	add	r2,r3,r2
10200b5c:	e0bffc15 	stw	r2,-16(fp)
      break;
10200b60:	00001206 	br	10200bac <MemTestDevice+0xfc>
    }
    antipattern = ~pattern;
10200b64:	e0bffb17 	ldw	r2,-20(fp)
10200b68:	0084303a 	nor	r2,zero,r2
10200b6c:	e0bffd15 	stw	r2,-12(fp)
    IOWR_32DIRECT(memory_base, offset, antipattern);
10200b70:	e0fffa17 	ldw	r3,-24(fp)
10200b74:	e0bffe17 	ldw	r2,-8(fp)
10200b78:	1885883a 	add	r2,r3,r2
10200b7c:	1007883a 	mov	r3,r2
10200b80:	e0bffd17 	ldw	r2,-12(fp)
10200b84:	18800035 	stwio	r2,0(r3)
  }

  printf(" .");

  /* Check each location and invert it for the second pass. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
10200b88:	e0bffb17 	ldw	r2,-20(fp)
10200b8c:	10800044 	addi	r2,r2,1
10200b90:	e0bffb15 	stw	r2,-20(fp)
10200b94:	e0bffa17 	ldw	r2,-24(fp)
10200b98:	10800104 	addi	r2,r2,4
10200b9c:	e0bffa15 	stw	r2,-24(fp)
10200ba0:	e0fffa17 	ldw	r3,-24(fp)
10200ba4:	e0bfff17 	ldw	r2,-4(fp)
10200ba8:	18bfe236 	bltu	r3,r2,10200b34 <MemTestDevice+0x84>
    }
    antipattern = ~pattern;
    IOWR_32DIRECT(memory_base, offset, antipattern);
  }

  printf(" .");
10200bac:	010408b4 	movhi	r4,4130
10200bb0:	21320e04 	addi	r4,r4,-14280
10200bb4:	0202f2c0 	call	10202f2c <printf>

  /* Check each location for the inverted pattern and zero it. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
10200bb8:	00800044 	movi	r2,1
10200bbc:	e0bffb15 	stw	r2,-20(fp)
10200bc0:	e03ffa15 	stw	zero,-24(fp)
10200bc4:	00001a06 	br	10200c30 <MemTestDevice+0x180>
  {
    antipattern = ~pattern;
10200bc8:	e0bffb17 	ldw	r2,-20(fp)
10200bcc:	0084303a 	nor	r2,zero,r2
10200bd0:	e0bffd15 	stw	r2,-12(fp)
    if (IORD_32DIRECT(memory_base, offset) != antipattern)
10200bd4:	e0fffa17 	ldw	r3,-24(fp)
10200bd8:	e0bffe17 	ldw	r2,-8(fp)
10200bdc:	1885883a 	add	r2,r3,r2
10200be0:	10800037 	ldwio	r2,0(r2)
10200be4:	1007883a 	mov	r3,r2
10200be8:	e0bffd17 	ldw	r2,-12(fp)
10200bec:	18800526 	beq	r3,r2,10200c04 <MemTestDevice+0x154>
    {
      ret_code = (memory_base + offset);
10200bf0:	e0fffe17 	ldw	r3,-8(fp)
10200bf4:	e0bffa17 	ldw	r2,-24(fp)
10200bf8:	1885883a 	add	r2,r3,r2
10200bfc:	e0bffc15 	stw	r2,-16(fp)
      break;
10200c00:	00000e06 	br	10200c3c <MemTestDevice+0x18c>
    }
    IOWR_32DIRECT(memory_base, offset, 0x0);
10200c04:	e0fffa17 	ldw	r3,-24(fp)
10200c08:	e0bffe17 	ldw	r2,-8(fp)
10200c0c:	1885883a 	add	r2,r3,r2
10200c10:	0007883a 	mov	r3,zero
10200c14:	10c00035 	stwio	r3,0(r2)
  }

  printf(" .");

  /* Check each location for the inverted pattern and zero it. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
10200c18:	e0bffb17 	ldw	r2,-20(fp)
10200c1c:	10800044 	addi	r2,r2,1
10200c20:	e0bffb15 	stw	r2,-20(fp)
10200c24:	e0bffa17 	ldw	r2,-24(fp)
10200c28:	10800104 	addi	r2,r2,4
10200c2c:	e0bffa15 	stw	r2,-24(fp)
10200c30:	e0fffa17 	ldw	r3,-24(fp)
10200c34:	e0bfff17 	ldw	r2,-4(fp)
10200c38:	18bfe336 	bltu	r3,r2,10200bc8 <MemTestDevice+0x118>
      ret_code = (memory_base + offset);
      break;
    }
    IOWR_32DIRECT(memory_base, offset, 0x0);
  }
  return ret_code;
10200c3c:	e0bffc17 	ldw	r2,-16(fp)
}
10200c40:	e037883a 	mov	sp,fp
10200c44:	dfc00117 	ldw	ra,4(sp)
10200c48:	df000017 	ldw	fp,0(sp)
10200c4c:	dec00204 	addi	sp,sp,8
10200c50:	f800283a 	ret

10200c54 <TestRam>:
*             - MemTestDevice
*             - MemDMATest
*
******************************************************************/
static void TestRam(void)
{
10200c54:	defffa04 	addi	sp,sp,-24
10200c58:	dfc00515 	stw	ra,20(sp)
10200c5c:	df000415 	stw	fp,16(sp)
10200c60:	df000404 	addi	fp,sp,16
  
  int memory_base, memory_end, memory_size;
  int ret_code = 0x0;
10200c64:	e03ffc15 	stw	zero,-16(fp)

  /* Find out what range of memory we are testing */
  MemGetAddressRange(&memory_base, &memory_end);
10200c68:	e0fffe04 	addi	r3,fp,-8
10200c6c:	e0bfff04 	addi	r2,fp,-4
10200c70:	1809883a 	mov	r4,r3
10200c74:	100b883a 	mov	r5,r2
10200c78:	02005180 	call	10200518 <MemGetAddressRange>
  memory_size = (memory_end - memory_base);
10200c7c:	e0ffff17 	ldw	r3,-4(fp)
10200c80:	e0bffe17 	ldw	r2,-8(fp)
10200c84:	1885c83a 	sub	r2,r3,r2
10200c88:	e0bffd15 	stw	r2,-12(fp)

  printf("\n");
10200c8c:	01000284 	movi	r4,10
10200c90:	0202f700 	call	10202f70 <putchar>
  printf("Testing RAM from 0x%X to 0x%X\n", memory_base, (memory_base + memory_size));
10200c94:	e17ffe17 	ldw	r5,-8(fp)
10200c98:	e0fffe17 	ldw	r3,-8(fp)
10200c9c:	e0bffd17 	ldw	r2,-12(fp)
10200ca0:	1885883a 	add	r2,r3,r2
10200ca4:	010408b4 	movhi	r4,4130
10200ca8:	21320f04 	addi	r4,r4,-14276
10200cac:	100d883a 	mov	r6,r2
10200cb0:	0202f2c0 	call	10202f2c <printf>

  /* Test Data Bus. */
  ret_code = MemTestDataBus(memory_base);
10200cb4:	e0bffe17 	ldw	r2,-8(fp)
10200cb8:	1009883a 	mov	r4,r2
10200cbc:	020063c0 	call	1020063c <MemTestDataBus>
10200cc0:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code)
10200cc4:	e0bffc17 	ldw	r2,-16(fp)
10200cc8:	10000526 	beq	r2,zero,10200ce0 <TestRam+0x8c>
   printf(" -Data bus test failed at bit 0x%X", (int)ret_code);
10200ccc:	010408b4 	movhi	r4,4130
10200cd0:	21321704 	addi	r4,r4,-14244
10200cd4:	e17ffc17 	ldw	r5,-16(fp)
10200cd8:	0202f2c0 	call	10202f2c <printf>
10200cdc:	00000306 	br	10200cec <TestRam+0x98>
  else
    printf(" -Data bus test passed\n");
10200ce0:	010408b4 	movhi	r4,4130
10200ce4:	21322004 	addi	r4,r4,-14208
10200ce8:	02030300 	call	10203030 <puts>

  /* Test Address Bus. */
  if (!ret_code)
10200cec:	e0bffc17 	ldw	r2,-16(fp)
10200cf0:	1000111e 	bne	r2,zero,10200d38 <TestRam+0xe4>
  {
    ret_code  = MemTestAddressBus(memory_base, memory_size);
10200cf4:	e0bffe17 	ldw	r2,-8(fp)
10200cf8:	1007883a 	mov	r3,r2
10200cfc:	e0bffd17 	ldw	r2,-12(fp)
10200d00:	1809883a 	mov	r4,r3
10200d04:	100b883a 	mov	r5,r2
10200d08:	02006b00 	call	102006b0 <MemTestAddressBus>
10200d0c:	e0bffc15 	stw	r2,-16(fp)
    if  (ret_code)
10200d10:	e0bffc17 	ldw	r2,-16(fp)
10200d14:	10000526 	beq	r2,zero,10200d2c <TestRam+0xd8>
      printf(" -Address bus test failed at address 0x%X", (int)ret_code);
10200d18:	010408b4 	movhi	r4,4130
10200d1c:	21322604 	addi	r4,r4,-14184
10200d20:	e17ffc17 	ldw	r5,-16(fp)
10200d24:	0202f2c0 	call	10202f2c <printf>
10200d28:	00000306 	br	10200d38 <TestRam+0xe4>
    else
      printf(" -Address bus test passed\n");
10200d2c:	010408b4 	movhi	r4,4130
10200d30:	21323104 	addi	r4,r4,-14140
10200d34:	02030300 	call	10203030 <puts>
  }

  /* Test byte and half-word access. */
  if (!ret_code)
10200d38:	e0bffc17 	ldw	r2,-16(fp)
10200d3c:	10000e1e 	bne	r2,zero,10200d78 <TestRam+0x124>
  {
    ret_code = MemTest8_16BitAccess(memory_base);
10200d40:	e0bffe17 	ldw	r2,-8(fp)
10200d44:	1009883a 	mov	r4,r2
10200d48:	02008900 	call	10200890 <MemTest8_16BitAccess>
10200d4c:	e0bffc15 	stw	r2,-16(fp)
    if  (ret_code)
10200d50:	e0bffc17 	ldw	r2,-16(fp)
10200d54:	10000526 	beq	r2,zero,10200d6c <TestRam+0x118>
      printf(" -Byte and half-word access test failed at address 0x%X", (int)ret_code);
10200d58:	010408b4 	movhi	r4,4130
10200d5c:	21323804 	addi	r4,r4,-14112
10200d60:	e17ffc17 	ldw	r5,-16(fp)
10200d64:	0202f2c0 	call	10202f2c <printf>
10200d68:	00000306 	br	10200d78 <TestRam+0x124>
    else
      printf(" -Byte and half-word access test passed\n");
10200d6c:	010408b4 	movhi	r4,4130
10200d70:	21324604 	addi	r4,r4,-14056
10200d74:	02030300 	call	10203030 <puts>
  }

  /* Test that each bit in the device can store both 1 and 0. */
  if (!ret_code)
10200d78:	e0bffc17 	ldw	r2,-16(fp)
10200d7c:	1000141e 	bne	r2,zero,10200dd0 <TestRam+0x17c>
  {
    printf(" -Testing each bit in memory device.");
10200d80:	010408b4 	movhi	r4,4130
10200d84:	21325004 	addi	r4,r4,-14016
10200d88:	0202f2c0 	call	10202f2c <printf>
    ret_code = MemTestDevice(memory_base, memory_size);
10200d8c:	e0bffe17 	ldw	r2,-8(fp)
10200d90:	1007883a 	mov	r3,r2
10200d94:	e0bffd17 	ldw	r2,-12(fp)
10200d98:	1809883a 	mov	r4,r3
10200d9c:	100b883a 	mov	r5,r2
10200da0:	0200ab00 	call	10200ab0 <MemTestDevice>
10200da4:	e0bffc15 	stw	r2,-16(fp)
    if  (ret_code)
10200da8:	e0bffc17 	ldw	r2,-16(fp)
10200dac:	10000526 	beq	r2,zero,10200dc4 <TestRam+0x170>
      printf("  failed at address 0x%X", (int)ret_code);
10200db0:	010408b4 	movhi	r4,4130
10200db4:	21325a04 	addi	r4,r4,-13976
10200db8:	e17ffc17 	ldw	r5,-16(fp)
10200dbc:	0202f2c0 	call	10202f2c <printf>
10200dc0:	00000306 	br	10200dd0 <TestRam+0x17c>
    else
      printf("  passed\n");
10200dc4:	010408b4 	movhi	r4,4130
10200dc8:	21326104 	addi	r4,r4,-13948
10200dcc:	02030300 	call	10203030 <puts>
    else
      printf("  passed\n");
  }
#endif /* DMA_NAME */
      
  if (!ret_code)
10200dd0:	e0bffc17 	ldw	r2,-16(fp)
10200dd4:	1000051e 	bne	r2,zero,10200dec <TestRam+0x198>
    printf("Memory at 0x%X Okay\n", memory_base);
10200dd8:	e0bffe17 	ldw	r2,-8(fp)
10200ddc:	010408b4 	movhi	r4,4130
10200de0:	21326404 	addi	r4,r4,-13936
10200de4:	100b883a 	mov	r5,r2
10200de8:	0202f2c0 	call	10202f2c <printf>
}
10200dec:	e037883a 	mov	sp,fp
10200df0:	dfc00117 	ldw	ra,4(sp)
10200df4:	df000017 	ldw	fp,0(sp)
10200df8:	dec00204 	addi	sp,sp,8
10200dfc:	f800283a 	ret

10200e00 <FlashCheckIfBlockErased>:
*  Purpose: Checks the specified flash block to see if it is 
*           completely erased (all 0xFFFFFFFF).
*
******************************************************************/
static int FlashCheckIfBlockErased(alt_flash_fd* fd, int block, flash_region* regions)
{
10200e00:	defff204 	addi	sp,sp,-56
10200e04:	dfc00d15 	stw	ra,52(sp)
10200e08:	df000c15 	stw	fp,48(sp)
10200e0c:	df000c04 	addi	fp,sp,48
10200e10:	e13ffd15 	stw	r4,-12(fp)
10200e14:	e17ffe15 	stw	r5,-8(fp)
10200e18:	e1bfff15 	stw	r6,-4(fp)
  int i, j;
  int ret_code = 0x0;
10200e1c:	e03ff615 	stw	zero,-40(fp)
  char block_is_erased = 0x1;
10200e20:	00800044 	movi	r2,1
10200e24:	e0bff705 	stb	r2,-36(fp)
  alt_u8 *data_read;
 
  /* Get a buffer */
  data_read = malloc(64);
10200e28:	01001004 	movi	r4,64
10200e2c:	020257c0 	call	1020257c <malloc>
10200e30:	e0bff815 	stw	r2,-32(fp)
  
  /* Initialize the flag */
  block_is_erased = 0x1;
10200e34:	00800044 	movi	r2,1
10200e38:	e0bff705 	stb	r2,-36(fp)

  for(i = 0; i < regions->block_size; i += 64)
10200e3c:	e03ff415 	stw	zero,-48(fp)
10200e40:	00002c06 	br	10200ef4 <FlashCheckIfBlockErased+0xf4>
  {
    ret_code = alt_read_flash(fd, ((block * regions->block_size) + i), data_read, 64);
10200e44:	e0bfff17 	ldw	r2,-4(fp)
10200e48:	10c00317 	ldw	r3,12(r2)
10200e4c:	e0bffe17 	ldw	r2,-8(fp)
10200e50:	1887383a 	mul	r3,r3,r2
10200e54:	e0bff417 	ldw	r2,-48(fp)
10200e58:	1885883a 	add	r2,r3,r2
10200e5c:	e0fffd17 	ldw	r3,-12(fp)
10200e60:	e0fff915 	stw	r3,-28(fp)
10200e64:	e0bffa15 	stw	r2,-24(fp)
10200e68:	e0bff817 	ldw	r2,-32(fp)
10200e6c:	e0bffb15 	stw	r2,-20(fp)
10200e70:	00801004 	movi	r2,64
10200e74:	e0bffc15 	stw	r2,-16(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
10200e78:	e0bff917 	ldw	r2,-28(fp)
10200e7c:	10800617 	ldw	r2,24(r2)
10200e80:	e13ff917 	ldw	r4,-28(fp)
10200e84:	e17ffa17 	ldw	r5,-24(fp)
10200e88:	e1bffb17 	ldw	r6,-20(fp)
10200e8c:	e1fffc17 	ldw	r7,-16(fp)
10200e90:	103ee83a 	callr	r2
10200e94:	e0bff615 	stw	r2,-40(fp)

    for(j=0; j < 64; j+=1)
10200e98:	e03ff515 	stw	zero,-44(fp)
10200e9c:	00000c06 	br	10200ed0 <FlashCheckIfBlockErased+0xd0>
    {
      if(*(data_read+j) != 0xFF)
10200ea0:	e0bff517 	ldw	r2,-44(fp)
10200ea4:	e0fff817 	ldw	r3,-32(fp)
10200ea8:	1885883a 	add	r2,r3,r2
10200eac:	10800003 	ldbu	r2,0(r2)
10200eb0:	10803fcc 	andi	r2,r2,255
10200eb4:	10803fe0 	cmpeqi	r2,r2,255
10200eb8:	1000021e 	bne	r2,zero,10200ec4 <FlashCheckIfBlockErased+0xc4>
      {
        /* If this byte isn't erased, then neither is the block */
        block_is_erased = 0x0;
10200ebc:	e03ff705 	stb	zero,-36(fp)
        break;
10200ec0:	00000606 	br	10200edc <FlashCheckIfBlockErased+0xdc>

  for(i = 0; i < regions->block_size; i += 64)
  {
    ret_code = alt_read_flash(fd, ((block * regions->block_size) + i), data_read, 64);

    for(j=0; j < 64; j+=1)
10200ec4:	e0bff517 	ldw	r2,-44(fp)
10200ec8:	10800044 	addi	r2,r2,1
10200ecc:	e0bff515 	stw	r2,-44(fp)
10200ed0:	e0bff517 	ldw	r2,-44(fp)
10200ed4:	10801010 	cmplti	r2,r2,64
10200ed8:	103ff11e 	bne	r2,zero,10200ea0 <FlashCheckIfBlockErased+0xa0>
        /* If this byte isn't erased, then neither is the block */
        block_is_erased = 0x0;
        break;
      }
    }
    if (block_is_erased == 0x0)
10200edc:	e0bff707 	ldb	r2,-36(fp)
10200ee0:	1000011e 	bne	r2,zero,10200ee8 <FlashCheckIfBlockErased+0xe8>
      break;
10200ee4:	00000706 	br	10200f04 <FlashCheckIfBlockErased+0x104>
  data_read = malloc(64);
  
  /* Initialize the flag */
  block_is_erased = 0x1;

  for(i = 0; i < regions->block_size; i += 64)
10200ee8:	e0bff417 	ldw	r2,-48(fp)
10200eec:	10801004 	addi	r2,r2,64
10200ef0:	e0bff415 	stw	r2,-48(fp)
10200ef4:	e0bfff17 	ldw	r2,-4(fp)
10200ef8:	10800317 	ldw	r2,12(r2)
10200efc:	e0fff417 	ldw	r3,-48(fp)
10200f00:	18bfd016 	blt	r3,r2,10200e44 <FlashCheckIfBlockErased+0x44>
    }
    if (block_is_erased == 0x0)
      break;
  }
  /* Block is erased if we indexed through all block locations */
  if(i == regions->block_size)
10200f04:	e0bfff17 	ldw	r2,-4(fp)
10200f08:	10c00317 	ldw	r3,12(r2)
10200f0c:	e0bff417 	ldw	r2,-48(fp)
10200f10:	1880031e 	bne	r3,r2,10200f20 <FlashCheckIfBlockErased+0x120>
    ret_code = 1;
10200f14:	00800044 	movi	r2,1
10200f18:	e0bff615 	stw	r2,-40(fp)
10200f1c:	00000106 	br	10200f24 <FlashCheckIfBlockErased+0x124>
  else
    ret_code = 0;
10200f20:	e03ff615 	stw	zero,-40(fp)
  
  free(data_read);
10200f24:	e13ff817 	ldw	r4,-32(fp)
10200f28:	02025900 	call	10202590 <free>
 
  return ret_code;
10200f2c:	e0bff617 	ldw	r2,-40(fp)
}
10200f30:	e037883a 	mov	sp,fp
10200f34:	dfc00117 	ldw	ra,4(sp)
10200f38:	df000017 	ldw	fp,0(sp)
10200f3c:	dec00204 	addi	sp,sp,8
10200f40:	f800283a 	ret

10200f44 <FlashTestBlockWrite>:
*  Purpose: Tests that the function alt_write_flash_block is
*           is working properly.
*
******************************************************************/
static int FlashTestBlockWrite(int block, int *error, alt_flash_fd* fd, flash_region* regions)
{
10200f44:	deffdc04 	addi	sp,sp,-144
10200f48:	dfc02315 	stw	ra,140(sp)
10200f4c:	df002215 	stw	fp,136(sp)
10200f50:	df002204 	addi	fp,sp,136
10200f54:	e13ffc15 	stw	r4,-16(fp)
10200f58:	e17ffd15 	stw	r5,-12(fp)
10200f5c:	e1bffe15 	stw	r6,-8(fp)
10200f60:	e1ffff15 	stw	r7,-4(fp)
  int i;
  int ret_code = 0x0;
10200f64:	e03fe015 	stw	zero,-128(fp)
  alt_u8 *data_written;
  alt_u8 *data_read;


  /* Get a couple buffers for the test */
  data_written = malloc(100);
10200f68:	01001904 	movi	r4,100
10200f6c:	020257c0 	call	1020257c <malloc>
10200f70:	e0bfe115 	stw	r2,-124(fp)
  data_read = malloc(100);
10200f74:	01001904 	movi	r4,100
10200f78:	020257c0 	call	1020257c <malloc>
10200f7c:	e0bfe215 	stw	r2,-120(fp)

  test_offset = (regions->offset + (block * regions->block_size));
10200f80:	e0bfff17 	ldw	r2,-4(fp)
10200f84:	10c00017 	ldw	r3,0(r2)
10200f88:	e0bfff17 	ldw	r2,-4(fp)
10200f8c:	11000317 	ldw	r4,12(r2)
10200f90:	e0bffc17 	ldw	r2,-16(fp)
10200f94:	2085383a 	mul	r2,r4,r2
10200f98:	1885883a 	add	r2,r3,r2
10200f9c:	e0bfe315 	stw	r2,-116(fp)

  /* Fill write buffer with 100 values (incremented by 3) */
  for(i=0; i < 100; i++)
10200fa0:	e03fdf15 	stw	zero,-132(fp)
10200fa4:	00000c06 	br	10200fd8 <FlashTestBlockWrite+0x94>
    *(data_written + i) = (i * 3);
10200fa8:	e0bfdf17 	ldw	r2,-132(fp)
10200fac:	e0ffe117 	ldw	r3,-124(fp)
10200fb0:	1887883a 	add	r3,r3,r2
10200fb4:	e0bfdf17 	ldw	r2,-132(fp)
10200fb8:	1009883a 	mov	r4,r2
10200fbc:	2005883a 	mov	r2,r4
10200fc0:	1085883a 	add	r2,r2,r2
10200fc4:	1105883a 	add	r2,r2,r4
10200fc8:	18800005 	stb	r2,0(r3)
  data_read = malloc(100);

  test_offset = (regions->offset + (block * regions->block_size));

  /* Fill write buffer with 100 values (incremented by 3) */
  for(i=0; i < 100; i++)
10200fcc:	e0bfdf17 	ldw	r2,-132(fp)
10200fd0:	10800044 	addi	r2,r2,1
10200fd4:	e0bfdf15 	stw	r2,-132(fp)
10200fd8:	e0bfdf17 	ldw	r2,-132(fp)
10200fdc:	10801910 	cmplti	r2,r2,100
10200fe0:	103ff11e 	bne	r2,zero,10200fa8 <FlashTestBlockWrite+0x64>
    *(data_written + i) = (i * 3);

  /* Write the buffer to flash starting 0x40 bytes from the beginning of the block. */
  printf(" -Testing \"alt_write_flash_block\".");
10200fe4:	010408b4 	movhi	r4,4130
10200fe8:	21326a04 	addi	r4,r4,-13912
10200fec:	0202f2c0 	call	10202f2c <printf>
  ret_code = alt_write_flash_block(fd, test_offset, (test_offset + 0x40), data_written, 100);
10200ff0:	e0bfe317 	ldw	r2,-116(fp)
10200ff4:	10801004 	addi	r2,r2,64
10200ff8:	e0fffe17 	ldw	r3,-8(fp)
10200ffc:	e0ffe415 	stw	r3,-112(fp)
10201000:	e0ffe317 	ldw	r3,-116(fp)
10201004:	e0ffe515 	stw	r3,-108(fp)
10201008:	e0bfe615 	stw	r2,-104(fp)
1020100c:	e0bfe117 	ldw	r2,-124(fp)
10201010:	e0bfe715 	stw	r2,-100(fp)
10201014:	00801904 	movi	r2,100
10201018:	e0bfe815 	stw	r2,-96(fp)
                                      int data_offset,
                                      const void *data, int length)
{

  int ret_code;
  ret_code = fd->write_block( fd, block_offset, data_offset, data, length );
1020101c:	e0bfe417 	ldw	r2,-112(fp)
10201020:	10800917 	ldw	r2,36(r2)
10201024:	e0ffe817 	ldw	r3,-96(fp)
10201028:	d8c00015 	stw	r3,0(sp)
1020102c:	e13fe417 	ldw	r4,-112(fp)
10201030:	e17fe517 	ldw	r5,-108(fp)
10201034:	e1bfe617 	ldw	r6,-104(fp)
10201038:	e1ffe717 	ldw	r7,-100(fp)
1020103c:	103ee83a 	callr	r2
10201040:	e0bfe915 	stw	r2,-92(fp)

  if(!ret_code)
10201044:	e0bfe917 	ldw	r2,-92(fp)
10201048:	1000081e 	bne	r2,zero,1020106c <FlashTestBlockWrite+0x128>
      alt_dcache_flush((alt_u8*)fd->base_addr + data_offset, length);
1020104c:	e0bfe417 	ldw	r2,-112(fp)
10201050:	10c00a17 	ldw	r3,40(r2)
10201054:	e0bfe617 	ldw	r2,-104(fp)
10201058:	1887883a 	add	r3,r3,r2
1020105c:	e0bfe817 	ldw	r2,-96(fp)
10201060:	1809883a 	mov	r4,r3
10201064:	100b883a 	mov	r5,r2
10201068:	02183b00 	call	102183b0 <alt_dcache_flush>

  return ret_code;
1020106c:	e0bfe917 	ldw	r2,-92(fp)
10201070:	e0bfe015 	stw	r2,-128(fp)
  if (!ret_code)
10201074:	e0bfe017 	ldw	r2,-128(fp)
10201078:	1000241e 	bne	r2,zero,1020110c <FlashTestBlockWrite+0x1c8>
  {
    /* Now read it back into the read_buffer */
    ret_code = alt_read_flash(fd, (test_offset + 0x40), data_read, 100);
1020107c:	e0bfe317 	ldw	r2,-116(fp)
10201080:	10801004 	addi	r2,r2,64
10201084:	e0fffe17 	ldw	r3,-8(fp)
10201088:	e0ffea15 	stw	r3,-88(fp)
1020108c:	e0bfeb15 	stw	r2,-84(fp)
10201090:	e0bfe217 	ldw	r2,-120(fp)
10201094:	e0bfec15 	stw	r2,-80(fp)
10201098:	00801904 	movi	r2,100
1020109c:	e0bfed15 	stw	r2,-76(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
102010a0:	e0bfea17 	ldw	r2,-88(fp)
102010a4:	10800617 	ldw	r2,24(r2)
102010a8:	e13fea17 	ldw	r4,-88(fp)
102010ac:	e17feb17 	ldw	r5,-84(fp)
102010b0:	e1bfec17 	ldw	r6,-80(fp)
102010b4:	e1ffed17 	ldw	r7,-76(fp)
102010b8:	103ee83a 	callr	r2
102010bc:	e0bfe015 	stw	r2,-128(fp)
    if(!ret_code)
102010c0:	e0bfe017 	ldw	r2,-128(fp)
102010c4:	1000111e 	bne	r2,zero,1020110c <FlashTestBlockWrite+0x1c8>
    {
      /* See if they match */
      if (memcmp(data_written, data_read, 100))
102010c8:	e13fe117 	ldw	r4,-124(fp)
102010cc:	e17fe217 	ldw	r5,-120(fp)
102010d0:	01801904 	movi	r6,100
102010d4:	0202d4c0 	call	10202d4c <memcmp>
102010d8:	10000926 	beq	r2,zero,10201100 <FlashTestBlockWrite+0x1bc>
      {
        printf("  FAILED.\n");
102010dc:	010408b4 	movhi	r4,4130
102010e0:	21327304 	addi	r4,r4,-13876
102010e4:	02030300 	call	10203030 <puts>
        (*error)++;
102010e8:	e0bffd17 	ldw	r2,-12(fp)
102010ec:	10800017 	ldw	r2,0(r2)
102010f0:	10c00044 	addi	r3,r2,1
102010f4:	e0bffd17 	ldw	r2,-12(fp)
102010f8:	10c00015 	stw	r3,0(r2)
102010fc:	00000306 	br	1020110c <FlashTestBlockWrite+0x1c8>
      }
      else
        printf("  passed.\n");
10201100:	010408b4 	movhi	r4,4130
10201104:	21327604 	addi	r4,r4,-13864
10201108:	02030300 	call	10203030 <puts>
    }
  }

  /* Test unaligned writes */
  if(!ret_code)
1020110c:	e0bfe017 	ldw	r2,-128(fp)
10201110:	1000631e 	bne	r2,zero,102012a0 <FlashTestBlockWrite+0x35c>
  {
    /* Erase the block */
    ret_code = alt_erase_flash_block(fd, test_offset, regions->block_size);
10201114:	e0bfff17 	ldw	r2,-4(fp)
10201118:	10800317 	ldw	r2,12(r2)
1020111c:	e0fffe17 	ldw	r3,-8(fp)
10201120:	e0ffee15 	stw	r3,-72(fp)
10201124:	e0ffe317 	ldw	r3,-116(fp)
10201128:	e0ffef15 	stw	r3,-68(fp)
1020112c:	e0bff015 	stw	r2,-64(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
10201130:	e0bfee17 	ldw	r2,-72(fp)
10201134:	10800817 	ldw	r2,32(r2)
10201138:	e13fee17 	ldw	r4,-72(fp)
1020113c:	e17fef17 	ldw	r5,-68(fp)
10201140:	103ee83a 	callr	r2
10201144:	e0bff115 	stw	r2,-60(fp)
  
  if(!ret_code)
10201148:	e0bff117 	ldw	r2,-60(fp)
1020114c:	1000081e 	bne	r2,zero,10201170 <FlashTestBlockWrite+0x22c>
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
10201150:	e0bfee17 	ldw	r2,-72(fp)
10201154:	10c00a17 	ldw	r3,40(r2)
10201158:	e0bfef17 	ldw	r2,-68(fp)
1020115c:	1887883a 	add	r3,r3,r2
10201160:	e0bff017 	ldw	r2,-64(fp)
10201164:	1809883a 	mov	r4,r3
10201168:	100b883a 	mov	r5,r2
1020116c:	02183b00 	call	102183b0 <alt_dcache_flush>

  return ret_code;
10201170:	e0bff117 	ldw	r2,-60(fp)
10201174:	e0bfe015 	stw	r2,-128(fp)
  
    /* Write the buffer to flash on an unaligned address. */
    printf(" -Testing unaligned writes.");
10201178:	010408b4 	movhi	r4,4130
1020117c:	21327904 	addi	r4,r4,-13852
10201180:	0202f2c0 	call	10202f2c <printf>
    ret_code = alt_write_flash_block(fd, test_offset, (test_offset + 0x43), data_written, 100);
10201184:	e0bfe317 	ldw	r2,-116(fp)
10201188:	108010c4 	addi	r2,r2,67
1020118c:	e0fffe17 	ldw	r3,-8(fp)
10201190:	e0fff215 	stw	r3,-56(fp)
10201194:	e0ffe317 	ldw	r3,-116(fp)
10201198:	e0fff315 	stw	r3,-52(fp)
1020119c:	e0bff415 	stw	r2,-48(fp)
102011a0:	e0bfe117 	ldw	r2,-124(fp)
102011a4:	e0bff515 	stw	r2,-44(fp)
102011a8:	00801904 	movi	r2,100
102011ac:	e0bff615 	stw	r2,-40(fp)
                                      int data_offset,
                                      const void *data, int length)
{

  int ret_code;
  ret_code = fd->write_block( fd, block_offset, data_offset, data, length );
102011b0:	e0bff217 	ldw	r2,-56(fp)
102011b4:	10800917 	ldw	r2,36(r2)
102011b8:	e0fff617 	ldw	r3,-40(fp)
102011bc:	d8c00015 	stw	r3,0(sp)
102011c0:	e13ff217 	ldw	r4,-56(fp)
102011c4:	e17ff317 	ldw	r5,-52(fp)
102011c8:	e1bff417 	ldw	r6,-48(fp)
102011cc:	e1fff517 	ldw	r7,-44(fp)
102011d0:	103ee83a 	callr	r2
102011d4:	e0bff715 	stw	r2,-36(fp)

  if(!ret_code)
102011d8:	e0bff717 	ldw	r2,-36(fp)
102011dc:	1000081e 	bne	r2,zero,10201200 <FlashTestBlockWrite+0x2bc>
      alt_dcache_flush((alt_u8*)fd->base_addr + data_offset, length);
102011e0:	e0bff217 	ldw	r2,-56(fp)
102011e4:	10c00a17 	ldw	r3,40(r2)
102011e8:	e0bff417 	ldw	r2,-48(fp)
102011ec:	1887883a 	add	r3,r3,r2
102011f0:	e0bff617 	ldw	r2,-40(fp)
102011f4:	1809883a 	mov	r4,r3
102011f8:	100b883a 	mov	r5,r2
102011fc:	02183b00 	call	102183b0 <alt_dcache_flush>

  return ret_code;
10201200:	e0bff717 	ldw	r2,-36(fp)
10201204:	e0bfe015 	stw	r2,-128(fp)
    if (!ret_code)
10201208:	e0bfe017 	ldw	r2,-128(fp)
1020120c:	1000241e 	bne	r2,zero,102012a0 <FlashTestBlockWrite+0x35c>
    {
      /* Now read it back into the read_buffer */
      ret_code = alt_read_flash(fd, (test_offset + 0x43), data_read, 100);
10201210:	e0bfe317 	ldw	r2,-116(fp)
10201214:	108010c4 	addi	r2,r2,67
10201218:	e0fffe17 	ldw	r3,-8(fp)
1020121c:	e0fff815 	stw	r3,-32(fp)
10201220:	e0bff915 	stw	r2,-28(fp)
10201224:	e0bfe217 	ldw	r2,-120(fp)
10201228:	e0bffa15 	stw	r2,-24(fp)
1020122c:	00801904 	movi	r2,100
10201230:	e0bffb15 	stw	r2,-20(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
10201234:	e0bff817 	ldw	r2,-32(fp)
10201238:	10800617 	ldw	r2,24(r2)
1020123c:	e13ff817 	ldw	r4,-32(fp)
10201240:	e17ff917 	ldw	r5,-28(fp)
10201244:	e1bffa17 	ldw	r6,-24(fp)
10201248:	e1fffb17 	ldw	r7,-20(fp)
1020124c:	103ee83a 	callr	r2
10201250:	e0bfe015 	stw	r2,-128(fp)
      if(!ret_code)
10201254:	e0bfe017 	ldw	r2,-128(fp)
10201258:	1000111e 	bne	r2,zero,102012a0 <FlashTestBlockWrite+0x35c>
      {
        /* See if they match */
        if (memcmp(data_written, data_read, 100))
1020125c:	e13fe117 	ldw	r4,-124(fp)
10201260:	e17fe217 	ldw	r5,-120(fp)
10201264:	01801904 	movi	r6,100
10201268:	0202d4c0 	call	10202d4c <memcmp>
1020126c:	10000926 	beq	r2,zero,10201294 <FlashTestBlockWrite+0x350>
        {
          printf("  FAILED.\n");
10201270:	010408b4 	movhi	r4,4130
10201274:	21327304 	addi	r4,r4,-13876
10201278:	02030300 	call	10203030 <puts>
          (*error)++;
1020127c:	e0bffd17 	ldw	r2,-12(fp)
10201280:	10800017 	ldw	r2,0(r2)
10201284:	10c00044 	addi	r3,r2,1
10201288:	e0bffd17 	ldw	r2,-12(fp)
1020128c:	10c00015 	stw	r3,0(r2)
10201290:	00000306 	br	102012a0 <FlashTestBlockWrite+0x35c>
        }
        else
          printf("  passed.\n");
10201294:	010408b4 	movhi	r4,4130
10201298:	21327604 	addi	r4,r4,-13864
1020129c:	02030300 	call	10203030 <puts>
      }
    }
  }

  /* Free up the buffers we allocated. */
  free(data_written);
102012a0:	e13fe117 	ldw	r4,-124(fp)
102012a4:	02025900 	call	10202590 <free>
  free(data_read);
102012a8:	e13fe217 	ldw	r4,-120(fp)
102012ac:	02025900 	call	10202590 <free>
  
  return ret_code;
102012b0:	e0bfe017 	ldw	r2,-128(fp)
}
102012b4:	e037883a 	mov	sp,fp
102012b8:	dfc00117 	ldw	ra,4(sp)
102012bc:	df000017 	ldw	fp,0(sp)
102012c0:	dec00204 	addi	sp,sp,8
102012c4:	f800283a 	ret

102012c8 <FlashTestReadWrite>:
*           that every bit in the specified block can store both
*           a '1' and '0'.
*
******************************************************************/
static int FlashTestReadWrite(int block, int *error, alt_flash_fd* fd, flash_region* regions)
{
102012c8:	deffe504 	addi	sp,sp,-108
102012cc:	dfc01a15 	stw	ra,104(sp)
102012d0:	df001915 	stw	fp,100(sp)
102012d4:	df001904 	addi	fp,sp,100
102012d8:	e13ffc15 	stw	r4,-16(fp)
102012dc:	e17ffd15 	stw	r5,-12(fp)
102012e0:	e1bffe15 	stw	r6,-8(fp)
102012e4:	e1ffff15 	stw	r7,-4(fp)
  int i;
  int ret_code = 0x0;
102012e8:	e03fe815 	stw	zero,-96(fp)
  alt_u8 *data_written;
  alt_u8 *data_read;
 

  /* Get a couple buffers for the tests */
  data_written = malloc(regions->block_size);
102012ec:	e0bfff17 	ldw	r2,-4(fp)
102012f0:	10800317 	ldw	r2,12(r2)
102012f4:	1009883a 	mov	r4,r2
102012f8:	020257c0 	call	1020257c <malloc>
102012fc:	e0bfe915 	stw	r2,-92(fp)
  data_read = malloc(regions->block_size);
10201300:	e0bfff17 	ldw	r2,-4(fp)
10201304:	10800317 	ldw	r2,12(r2)
10201308:	1009883a 	mov	r4,r2
1020130c:	020257c0 	call	1020257c <malloc>
10201310:	e0bfea15 	stw	r2,-88(fp)
 
  /* Calculate the offset at which the block lives */
  test_offset = (regions->offset + (block * regions->block_size));
10201314:	e0bfff17 	ldw	r2,-4(fp)
10201318:	10c00017 	ldw	r3,0(r2)
1020131c:	e0bfff17 	ldw	r2,-4(fp)
10201320:	11000317 	ldw	r4,12(r2)
10201324:	e0bffc17 	ldw	r2,-16(fp)
10201328:	2085383a 	mul	r2,r4,r2
1020132c:	1885883a 	add	r2,r3,r2
10201330:	e0bfeb15 	stw	r2,-84(fp)

  printf("\n -Starting Flash Test.\n");
10201334:	010408b4 	movhi	r4,4130
10201338:	21328004 	addi	r4,r4,-13824
1020133c:	02030300 	call	10203030 <puts>
 
  printf(" -Testing \"alt_write_flash\" and \"alt_read_flash\".\n");
10201340:	010408b4 	movhi	r4,4130
10201344:	21328604 	addi	r4,r4,-13800
10201348:	02030300 	call	10203030 <puts>
  /* Fill buffer with incrementing values */
  for(i=0; i < regions->block_size; i++)
1020134c:	e03fe715 	stw	zero,-100(fp)
10201350:	00000806 	br	10201374 <FlashTestReadWrite+0xac>
    *(data_written + i) = i;
10201354:	e0bfe717 	ldw	r2,-100(fp)
10201358:	e0ffe917 	ldw	r3,-92(fp)
1020135c:	1885883a 	add	r2,r3,r2
10201360:	e0ffe717 	ldw	r3,-100(fp)
10201364:	10c00005 	stb	r3,0(r2)

  printf("\n -Starting Flash Test.\n");
 
  printf(" -Testing \"alt_write_flash\" and \"alt_read_flash\".\n");
  /* Fill buffer with incrementing values */
  for(i=0; i < regions->block_size; i++)
10201368:	e0bfe717 	ldw	r2,-100(fp)
1020136c:	10800044 	addi	r2,r2,1
10201370:	e0bfe715 	stw	r2,-100(fp)
10201374:	e0bfff17 	ldw	r2,-4(fp)
10201378:	10800317 	ldw	r2,12(r2)
1020137c:	e0ffe717 	ldw	r3,-100(fp)
10201380:	18bff416 	blt	r3,r2,10201354 <FlashTestReadWrite+0x8c>
    *(data_written + i) = i;

  /* Write the buffer to flash block */
  ret_code = alt_write_flash(fd, test_offset, data_written, regions->block_size);
10201384:	e0bfff17 	ldw	r2,-4(fp)
10201388:	10800317 	ldw	r2,12(r2)
1020138c:	e0fffe17 	ldw	r3,-8(fp)
10201390:	e0ffec15 	stw	r3,-80(fp)
10201394:	e0ffeb17 	ldw	r3,-84(fp)
10201398:	e0ffed15 	stw	r3,-76(fp)
1020139c:	e0ffe917 	ldw	r3,-92(fp)
102013a0:	e0ffee15 	stw	r3,-72(fp)
102013a4:	e0bfef15 	stw	r2,-68(fp)
                                                           alt_flash_fd* fd, 
                                                           int offset, 
                                                           const void* src_addr, 
                                                           int length )
{
  return fd->write( fd, offset, src_addr, length );
102013a8:	e0bfec17 	ldw	r2,-80(fp)
102013ac:	10800517 	ldw	r2,20(r2)
102013b0:	e13fec17 	ldw	r4,-80(fp)
102013b4:	e17fed17 	ldw	r5,-76(fp)
102013b8:	e1bfee17 	ldw	r6,-72(fp)
102013bc:	e1ffef17 	ldw	r7,-68(fp)
102013c0:	103ee83a 	callr	r2
102013c4:	e0bfe815 	stw	r2,-96(fp)
     
  if (!ret_code)
102013c8:	e0bfe817 	ldw	r2,-96(fp)
102013cc:	1000731e 	bne	r2,zero,1020159c <FlashTestReadWrite+0x2d4>
  {
    /* Read flash block into read buffer */
    ret_code = alt_read_flash(fd, test_offset, data_read, regions->block_size);
102013d0:	e0bfff17 	ldw	r2,-4(fp)
102013d4:	10800317 	ldw	r2,12(r2)
102013d8:	e0fffe17 	ldw	r3,-8(fp)
102013dc:	e0fff015 	stw	r3,-64(fp)
102013e0:	e0ffeb17 	ldw	r3,-84(fp)
102013e4:	e0fff115 	stw	r3,-60(fp)
102013e8:	e0ffea17 	ldw	r3,-88(fp)
102013ec:	e0fff215 	stw	r3,-56(fp)
102013f0:	e0bff315 	stw	r2,-52(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
102013f4:	e0bff017 	ldw	r2,-64(fp)
102013f8:	10800617 	ldw	r2,24(r2)
102013fc:	e13ff017 	ldw	r4,-64(fp)
10201400:	e17ff117 	ldw	r5,-60(fp)
10201404:	e1bff217 	ldw	r6,-56(fp)
10201408:	e1fff317 	ldw	r7,-52(fp)
1020140c:	103ee83a 	callr	r2
10201410:	e0bfe815 	stw	r2,-96(fp)
    if(!ret_code)
10201414:	e0bfe817 	ldw	r2,-96(fp)
10201418:	1000131e 	bne	r2,zero,10201468 <FlashTestReadWrite+0x1a0>
    {
      /* See if they match */
      if (memcmp(data_written, data_read, regions->block_size))
1020141c:	e0bfff17 	ldw	r2,-4(fp)
10201420:	10800317 	ldw	r2,12(r2)
10201424:	e13fe917 	ldw	r4,-92(fp)
10201428:	e17fea17 	ldw	r5,-88(fp)
1020142c:	100d883a 	mov	r6,r2
10201430:	0202d4c0 	call	10202d4c <memcmp>
10201434:	10000926 	beq	r2,zero,1020145c <FlashTestReadWrite+0x194>
      {
        printf("    pass 1 - FAILED.\n");
10201438:	010408b4 	movhi	r4,4130
1020143c:	21329304 	addi	r4,r4,-13748
10201440:	02030300 	call	10203030 <puts>
        (*error)++;
10201444:	e0bffd17 	ldw	r2,-12(fp)
10201448:	10800017 	ldw	r2,0(r2)
1020144c:	10c00044 	addi	r3,r2,1
10201450:	e0bffd17 	ldw	r2,-12(fp)
10201454:	10c00015 	stw	r3,0(r2)
10201458:	00000306 	br	10201468 <FlashTestReadWrite+0x1a0>
      }
      else
        printf("    pass 1 - passed.\n");
1020145c:	010408b4 	movhi	r4,4130
10201460:	21329904 	addi	r4,r4,-13724
10201464:	02030300 	call	10203030 <puts>
    }
  
    /* Now fill the buffer with decrementing values (invert the incrementing ones) */
    for(i=0; i < regions->block_size; i++)
10201468:	e03fe715 	stw	zero,-100(fp)
1020146c:	00000906 	br	10201494 <FlashTestReadWrite+0x1cc>
      *(data_written + i) = ~((alt_u8)(i));
10201470:	e0bfe717 	ldw	r2,-100(fp)
10201474:	e0ffe917 	ldw	r3,-92(fp)
10201478:	1885883a 	add	r2,r3,r2
1020147c:	e0ffe717 	ldw	r3,-100(fp)
10201480:	00c6303a 	nor	r3,zero,r3
10201484:	10c00005 	stb	r3,0(r2)
      else
        printf("    pass 1 - passed.\n");
    }
  
    /* Now fill the buffer with decrementing values (invert the incrementing ones) */
    for(i=0; i < regions->block_size; i++)
10201488:	e0bfe717 	ldw	r2,-100(fp)
1020148c:	10800044 	addi	r2,r2,1
10201490:	e0bfe715 	stw	r2,-100(fp)
10201494:	e0bfff17 	ldw	r2,-4(fp)
10201498:	10800317 	ldw	r2,12(r2)
1020149c:	e0ffe717 	ldw	r3,-100(fp)
102014a0:	18bff316 	blt	r3,r2,10201470 <FlashTestReadWrite+0x1a8>
      *(data_written + i) = ~((alt_u8)(i));
 
    /* Write the buffer to flash block */
    ret_code = alt_write_flash(fd, test_offset, data_written, regions->block_size);
102014a4:	e0bfff17 	ldw	r2,-4(fp)
102014a8:	10800317 	ldw	r2,12(r2)
102014ac:	e0fffe17 	ldw	r3,-8(fp)
102014b0:	e0fff415 	stw	r3,-48(fp)
102014b4:	e0ffeb17 	ldw	r3,-84(fp)
102014b8:	e0fff515 	stw	r3,-44(fp)
102014bc:	e0ffe917 	ldw	r3,-92(fp)
102014c0:	e0fff615 	stw	r3,-40(fp)
102014c4:	e0bff715 	stw	r2,-36(fp)
                                                           alt_flash_fd* fd, 
                                                           int offset, 
                                                           const void* src_addr, 
                                                           int length )
{
  return fd->write( fd, offset, src_addr, length );
102014c8:	e0bff417 	ldw	r2,-48(fp)
102014cc:	10800517 	ldw	r2,20(r2)
102014d0:	e13ff417 	ldw	r4,-48(fp)
102014d4:	e17ff517 	ldw	r5,-44(fp)
102014d8:	e1bff617 	ldw	r6,-40(fp)
102014dc:	e1fff717 	ldw	r7,-36(fp)
102014e0:	103ee83a 	callr	r2
102014e4:	e0bfe815 	stw	r2,-96(fp)
    
    if (!ret_code)
102014e8:	e0bfe817 	ldw	r2,-96(fp)
102014ec:	1000261e 	bne	r2,zero,10201588 <FlashTestReadWrite+0x2c0>
    {
      /* Read flash block into read buffer */
      ret_code = alt_read_flash(fd, test_offset, data_read, regions->block_size);
102014f0:	e0bfff17 	ldw	r2,-4(fp)
102014f4:	10800317 	ldw	r2,12(r2)
102014f8:	e0fffe17 	ldw	r3,-8(fp)
102014fc:	e0fff815 	stw	r3,-32(fp)
10201500:	e0ffeb17 	ldw	r3,-84(fp)
10201504:	e0fff915 	stw	r3,-28(fp)
10201508:	e0ffea17 	ldw	r3,-88(fp)
1020150c:	e0fffa15 	stw	r3,-24(fp)
10201510:	e0bffb15 	stw	r2,-20(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
10201514:	e0bff817 	ldw	r2,-32(fp)
10201518:	10800617 	ldw	r2,24(r2)
1020151c:	e13ff817 	ldw	r4,-32(fp)
10201520:	e17ff917 	ldw	r5,-28(fp)
10201524:	e1bffa17 	ldw	r6,-24(fp)
10201528:	e1fffb17 	ldw	r7,-20(fp)
1020152c:	103ee83a 	callr	r2
10201530:	e0bfe815 	stw	r2,-96(fp)
      if(!ret_code)
10201534:	e0bfe817 	ldw	r2,-96(fp)
10201538:	1000131e 	bne	r2,zero,10201588 <FlashTestReadWrite+0x2c0>
      {
        /* See if they match */
        if (memcmp(data_written, data_read, regions->block_size))
1020153c:	e0bfff17 	ldw	r2,-4(fp)
10201540:	10800317 	ldw	r2,12(r2)
10201544:	e13fe917 	ldw	r4,-92(fp)
10201548:	e17fea17 	ldw	r5,-88(fp)
1020154c:	100d883a 	mov	r6,r2
10201550:	0202d4c0 	call	10202d4c <memcmp>
10201554:	10000926 	beq	r2,zero,1020157c <FlashTestReadWrite+0x2b4>
        {
          printf("    pass 2 - FAILED.\n");
10201558:	010408b4 	movhi	r4,4130
1020155c:	21329f04 	addi	r4,r4,-13700
10201560:	02030300 	call	10203030 <puts>
          (*error)++;
10201564:	e0bffd17 	ldw	r2,-12(fp)
10201568:	10800017 	ldw	r2,0(r2)
1020156c:	10c00044 	addi	r3,r2,1
10201570:	e0bffd17 	ldw	r2,-12(fp)
10201574:	10c00015 	stw	r3,0(r2)
10201578:	00000306 	br	10201588 <FlashTestReadWrite+0x2c0>
        }
        else
          printf("    pass 2 - passed.\n");
1020157c:	010408b4 	movhi	r4,4130
10201580:	2132a504 	addi	r4,r4,-13676
10201584:	02030300 	call	10203030 <puts>
      }
    }
    if (*error)
10201588:	e0bffd17 	ldw	r2,-12(fp)
1020158c:	10800017 	ldw	r2,0(r2)
10201590:	10000226 	beq	r2,zero,1020159c <FlashTestReadWrite+0x2d4>
      ret_code = 1;
10201594:	00800044 	movi	r2,1
10201598:	e0bfe815 	stw	r2,-96(fp)
  }

  /* Free up the buffers we allocated */
  free(data_written);
1020159c:	e13fe917 	ldw	r4,-92(fp)
102015a0:	02025900 	call	10202590 <free>
  free(data_read);
102015a4:	e13fea17 	ldw	r4,-88(fp)
102015a8:	02025900 	call	10202590 <free>
  
  return ret_code;
102015ac:	e0bfe817 	ldw	r2,-96(fp)
}
102015b0:	e037883a 	mov	sp,fp
102015b4:	dfc00117 	ldw	ra,4(sp)
102015b8:	df000017 	ldw	fp,0(sp)
102015bc:	dec00204 	addi	sp,sp,8
102015c0:	f800283a 	ret

102015c4 <FlashTestBlockErase>:
*           flash block contains some non-0xFFFFFFFF data before
*           this function is called.
*
******************************************************************/
static int FlashTestBlockErase(int block, int *error, alt_flash_fd* fd, flash_region* regions)
{
102015c4:	defff404 	addi	sp,sp,-48
102015c8:	dfc00b15 	stw	ra,44(sp)
102015cc:	df000a15 	stw	fp,40(sp)
102015d0:	df000a04 	addi	fp,sp,40
102015d4:	e13ffc15 	stw	r4,-16(fp)
102015d8:	e17ffd15 	stw	r5,-12(fp)
102015dc:	e1bffe15 	stw	r6,-8(fp)
102015e0:	e1ffff15 	stw	r7,-4(fp)

  int ret_code = 0x0;
102015e4:	e03ff615 	stw	zero,-40(fp)
  int test_offset;

  /* Calculate the offset of the block */
  test_offset = (regions->offset + (block * regions->block_size));
102015e8:	e0bfff17 	ldw	r2,-4(fp)
102015ec:	10c00017 	ldw	r3,0(r2)
102015f0:	e0bfff17 	ldw	r2,-4(fp)
102015f4:	11000317 	ldw	r4,12(r2)
102015f8:	e0bffc17 	ldw	r2,-16(fp)
102015fc:	2085383a 	mul	r2,r4,r2
10201600:	1885883a 	add	r2,r3,r2
10201604:	e0bff715 	stw	r2,-36(fp)

  printf(" -Testing \"alt_erase_flash_block\".");
10201608:	010408b4 	movhi	r4,4130
1020160c:	2132ab04 	addi	r4,r4,-13652
10201610:	0202f2c0 	call	10202f2c <printf>
  ret_code = alt_erase_flash_block(fd, test_offset, regions->block_size);
10201614:	e0bfff17 	ldw	r2,-4(fp)
10201618:	10800317 	ldw	r2,12(r2)
1020161c:	e0fffe17 	ldw	r3,-8(fp)
10201620:	e0fff815 	stw	r3,-32(fp)
10201624:	e0fff717 	ldw	r3,-36(fp)
10201628:	e0fff915 	stw	r3,-28(fp)
1020162c:	e0bffa15 	stw	r2,-24(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
10201630:	e0bff817 	ldw	r2,-32(fp)
10201634:	10800817 	ldw	r2,32(r2)
10201638:	e13ff817 	ldw	r4,-32(fp)
1020163c:	e17ff917 	ldw	r5,-28(fp)
10201640:	103ee83a 	callr	r2
10201644:	e0bffb15 	stw	r2,-20(fp)
  
  if(!ret_code)
10201648:	e0bffb17 	ldw	r2,-20(fp)
1020164c:	1000081e 	bne	r2,zero,10201670 <FlashTestBlockErase+0xac>
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
10201650:	e0bff817 	ldw	r2,-32(fp)
10201654:	10c00a17 	ldw	r3,40(r2)
10201658:	e0bff917 	ldw	r2,-28(fp)
1020165c:	1887883a 	add	r3,r3,r2
10201660:	e0bffa17 	ldw	r2,-24(fp)
10201664:	1809883a 	mov	r4,r3
10201668:	100b883a 	mov	r5,r2
1020166c:	02183b00 	call	102183b0 <alt_dcache_flush>

  return ret_code;
10201670:	e0bffb17 	ldw	r2,-20(fp)
10201674:	e0bff615 	stw	r2,-40(fp)
  /* Check that the erase was successful. */
  if (!ret_code)
10201678:	e0bff617 	ldw	r2,-40(fp)
1020167c:	1000111e 	bne	r2,zero,102016c4 <FlashTestBlockErase+0x100>
  {
    if(FlashCheckIfBlockErased(fd, block, regions))
10201680:	e13ffe17 	ldw	r4,-8(fp)
10201684:	e17ffc17 	ldw	r5,-16(fp)
10201688:	e1bfff17 	ldw	r6,-4(fp)
1020168c:	0200e000 	call	10200e00 <FlashCheckIfBlockErased>
10201690:	10000426 	beq	r2,zero,102016a4 <FlashTestBlockErase+0xe0>
      printf("  passed.\n");
10201694:	010408b4 	movhi	r4,4130
10201698:	21327604 	addi	r4,r4,-13864
1020169c:	02030300 	call	10203030 <puts>
102016a0:	00000806 	br	102016c4 <FlashTestBlockErase+0x100>
    else
    {
      printf("  FAILED\n");  
102016a4:	010408b4 	movhi	r4,4130
102016a8:	2132b404 	addi	r4,r4,-13616
102016ac:	02030300 	call	10203030 <puts>
      (*error)++;
102016b0:	e0bffd17 	ldw	r2,-12(fp)
102016b4:	10800017 	ldw	r2,0(r2)
102016b8:	10c00044 	addi	r3,r2,1
102016bc:	e0bffd17 	ldw	r2,-12(fp)
102016c0:	10c00015 	stw	r3,0(r2)
    }
  }
  
  return ret_code;
102016c4:	e0bff617 	ldw	r2,-40(fp)
}
102016c8:	e037883a 	mov	sp,fp
102016cc:	dfc00117 	ldw	ra,4(sp)
102016d0:	df000017 	ldw	fp,0(sp)
102016d4:	dec00204 	addi	sp,sp,8
102016d8:	f800283a 	ret

102016dc <FlashRunTests>:
*             - alt_erase_flash_block
*             - alt_write_flash_block
* 
******************************************************************/
static void FlashRunTests(alt_flash_fd* fd, int block, flash_region* regions)
{
102016dc:	defff404 	addi	sp,sp,-48
102016e0:	dfc00b15 	stw	ra,44(sp)
102016e4:	df000a15 	stw	fp,40(sp)
102016e8:	df000a04 	addi	fp,sp,40
102016ec:	e13ffd15 	stw	r4,-12(fp)
102016f0:	e17ffe15 	stw	r5,-8(fp)
102016f4:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0x0;
102016f8:	e03ff615 	stw	zero,-40(fp)
  int error = 0x0;
102016fc:	e03ffc15 	stw	zero,-16(fp)
  int test_offset;

  /* Calculate the offset of the block */
  test_offset = (regions->offset + (block * regions->block_size));
10201700:	e0bfff17 	ldw	r2,-4(fp)
10201704:	10c00017 	ldw	r3,0(r2)
10201708:	e0bfff17 	ldw	r2,-4(fp)
1020170c:	11000317 	ldw	r4,12(r2)
10201710:	e0bffe17 	ldw	r2,-8(fp)
10201714:	2085383a 	mul	r2,r4,r2
10201718:	1885883a 	add	r2,r3,r2
1020171c:	e0bff715 	stw	r2,-36(fp)
  
  /* Test reading and writing functions */
  ret_code = FlashTestReadWrite(block, &error, fd, regions);
10201720:	e0bffc04 	addi	r2,fp,-16
10201724:	e13ffe17 	ldw	r4,-8(fp)
10201728:	100b883a 	mov	r5,r2
1020172c:	e1bffd17 	ldw	r6,-12(fp)
10201730:	e1ffff17 	ldw	r7,-4(fp)
10201734:	02012c80 	call	102012c8 <FlashTestReadWrite>
10201738:	e0bff615 	stw	r2,-40(fp)
 
  /* Test the erase function */
  if (!ret_code)
1020173c:	e0bff617 	ldw	r2,-40(fp)
10201740:	1000071e 	bne	r2,zero,10201760 <FlashRunTests+0x84>
  {
    ret_code = FlashTestBlockErase(block, &error, fd, regions);
10201744:	e0bffc04 	addi	r2,fp,-16
10201748:	e13ffe17 	ldw	r4,-8(fp)
1020174c:	100b883a 	mov	r5,r2
10201750:	e1bffd17 	ldw	r6,-12(fp)
10201754:	e1ffff17 	ldw	r7,-4(fp)
10201758:	02015c40 	call	102015c4 <FlashTestBlockErase>
1020175c:	e0bff615 	stw	r2,-40(fp)
  }
  /* Test the block write function */
  if (!ret_code)
10201760:	e0bff617 	ldw	r2,-40(fp)
10201764:	1000071e 	bne	r2,zero,10201784 <FlashRunTests+0xa8>
  {
    ret_code = FlashTestBlockWrite(block, &error, fd, regions);
10201768:	e0bffc04 	addi	r2,fp,-16
1020176c:	e13ffe17 	ldw	r4,-8(fp)
10201770:	100b883a 	mov	r5,r2
10201774:	e1bffd17 	ldw	r6,-12(fp)
10201778:	e1ffff17 	ldw	r7,-4(fp)
1020177c:	0200f440 	call	10200f44 <FlashTestBlockWrite>
10201780:	e0bff615 	stw	r2,-40(fp)
  }

  /* Erase the block so we dont fill one up each time we run the test */
  printf(" -Returning block %d to its erased state.\n", block);
10201784:	010408b4 	movhi	r4,4130
10201788:	2132b704 	addi	r4,r4,-13604
1020178c:	e17ffe17 	ldw	r5,-8(fp)
10201790:	0202f2c0 	call	10202f2c <printf>
  alt_erase_flash_block(fd, test_offset, regions->block_size);
10201794:	e0bfff17 	ldw	r2,-4(fp)
10201798:	10800317 	ldw	r2,12(r2)
1020179c:	e0fffd17 	ldw	r3,-12(fp)
102017a0:	e0fff815 	stw	r3,-32(fp)
102017a4:	e0fff717 	ldw	r3,-36(fp)
102017a8:	e0fff915 	stw	r3,-28(fp)
102017ac:	e0bffa15 	stw	r2,-24(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
102017b0:	e0bff817 	ldw	r2,-32(fp)
102017b4:	10800817 	ldw	r2,32(r2)
102017b8:	e13ff817 	ldw	r4,-32(fp)
102017bc:	e17ff917 	ldw	r5,-28(fp)
102017c0:	103ee83a 	callr	r2
102017c4:	e0bffb15 	stw	r2,-20(fp)
  
  if(!ret_code)
102017c8:	e0bffb17 	ldw	r2,-20(fp)
102017cc:	1000081e 	bne	r2,zero,102017f0 <FlashRunTests+0x114>
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
102017d0:	e0bff817 	ldw	r2,-32(fp)
102017d4:	10c00a17 	ldw	r3,40(r2)
102017d8:	e0bff917 	ldw	r2,-28(fp)
102017dc:	1887883a 	add	r3,r3,r2
102017e0:	e0bffa17 	ldw	r2,-24(fp)
102017e4:	1809883a 	mov	r4,r3
102017e8:	100b883a 	mov	r5,r2
102017ec:	02183b00 	call	102183b0 <alt_dcache_flush>
 
  printf(" -Flash tests complete.\n");
102017f0:	010408b4 	movhi	r4,4130
102017f4:	2132c204 	addi	r4,r4,-13560
102017f8:	02030300 	call	10203030 <puts>
  if(ret_code || error)
102017fc:	e0bff617 	ldw	r2,-40(fp)
10201800:	1000021e 	bne	r2,zero,1020180c <FlashRunTests+0x130>
10201804:	e0bffc17 	ldw	r2,-16(fp)
10201808:	10000326 	beq	r2,zero,10201818 <FlashRunTests+0x13c>
  {
    printf(" -At least one test failed.\n\n");
1020180c:	010408b4 	movhi	r4,4130
10201810:	2132c804 	addi	r4,r4,-13536
10201814:	02030300 	call	10203030 <puts>
  }
}
10201818:	e037883a 	mov	sp,fp
1020181c:	dfc00117 	ldw	ra,4(sp)
10201820:	df000017 	ldw	fp,0(sp)
10201824:	dec00204 	addi	sp,sp,8
10201828:	f800283a 	ret

1020182c <GetFlashName>:
*           Defaults to "/dev/ext_flash", the name of the flash
*           component in the Nios II example designs.
* 
******************************************************************/
static int GetFlashName(char line[30], int flash_type)
{
1020182c:	defffa04 	addi	sp,sp,-24
10201830:	dfc00515 	stw	ra,20(sp)
10201834:	df000415 	stw	fp,16(sp)
10201838:	df000404 	addi	fp,sp,16
1020183c:	e13ffe15 	stw	r4,-8(fp)
10201840:	e17fff15 	stw	r5,-4(fp)

  char ch = 0x0;
10201844:	e03ffc05 	stb	zero,-16(fp)
  int i;

  if (flash_type == CFI)
10201848:	e0bfff17 	ldw	r2,-4(fp)
1020184c:	108000d8 	cmpnei	r2,r2,3
10201850:	1000091e 	bne	r2,zero,10201878 <GetFlashName+0x4c>
  { 
    printf("\nEnter the name of the CFI flash device to be opened,\n");
10201854:	010408b4 	movhi	r4,4130
10201858:	2132d004 	addi	r4,r4,-13504
1020185c:	02030300 	call	10203030 <puts>
    printf("or just press <enter> to open \"/dev/ext_flash\"\n");
10201860:	010408b4 	movhi	r4,4130
10201864:	2132de04 	addi	r4,r4,-13448
10201868:	02030300 	call	10203030 <puts>
    printf(">");
1020186c:	01000f84 	movi	r4,62
10201870:	0202f700 	call	10202f70 <putchar>
10201874:	00000b06 	br	102018a4 <GetFlashName+0x78>
  }
  else if (flash_type == EPCS)
10201878:	e0bfff17 	ldw	r2,-4(fp)
1020187c:	10800118 	cmpnei	r2,r2,4
10201880:	1000081e 	bne	r2,zero,102018a4 <GetFlashName+0x78>
  {
    printf("\nEnter the name of the EPCS flash device to be opened,\n");
10201884:	010408b4 	movhi	r4,4130
10201888:	2132ea04 	addi	r4,r4,-13400
1020188c:	02030300 	call	10203030 <puts>
    printf("or just press <enter> to open \"/dev/epcs_controller\"\n");
10201890:	010408b4 	movhi	r4,4130
10201894:	2132f804 	addi	r4,r4,-13344
10201898:	02030300 	call	10203030 <puts>
    printf(">");
1020189c:	01000f84 	movi	r4,62
102018a0:	0202f700 	call	10202f70 <putchar>
  }
 
  for(i = 0; ch != '\n'; i++)
102018a4:	e03ffd15 	stw	zero,-12(fp)
102018a8:	00003806 	br	1020198c <GetFlashName+0x160>
  {
    ch = getc(stdin);
102018ac:	008408b4 	movhi	r2,4130
102018b0:	10bd0604 	addi	r2,r2,-3048
102018b4:	10800017 	ldw	r2,0(r2)
102018b8:	10800117 	ldw	r2,4(r2)
102018bc:	1009883a 	mov	r4,r2
102018c0:	02024f40 	call	102024f4 <getc>
102018c4:	e0bffc05 	stb	r2,-16(fp)
    if(ch == '\r' || ch == '\n')
102018c8:	e0bffc07 	ldb	r2,-16(fp)
102018cc:	10800360 	cmpeqi	r2,r2,13
102018d0:	1000031e 	bne	r2,zero,102018e0 <GetFlashName+0xb4>
102018d4:	e0bffc07 	ldb	r2,-16(fp)
102018d8:	10800298 	cmpnei	r2,r2,10
102018dc:	1000231e 	bne	r2,zero,1020196c <GetFlashName+0x140>
    {
      /* Hitting <enter> defaults to the standard component name */
      if( i <= 1 )
102018e0:	e0bffd17 	ldw	r2,-12(fp)
102018e4:	10800088 	cmpgei	r2,r2,2
102018e8:	10001a1e 	bne	r2,zero,10201954 <GetFlashName+0x128>
      {
        if (flash_type == CFI)
102018ec:	e0bfff17 	ldw	r2,-4(fp)
102018f0:	108000d8 	cmpnei	r2,r2,3
102018f4:	10000a1e 	bne	r2,zero,10201920 <GetFlashName+0xf4>
          strcpy(line, "/dev/ext_flash\0");
102018f8:	e0fffe17 	ldw	r3,-8(fp)
102018fc:	008408b4 	movhi	r2,4130
10201900:	10b30604 	addi	r2,r2,-13288
10201904:	1809883a 	mov	r4,r3
10201908:	1007883a 	mov	r3,r2
1020190c:	008003c4 	movi	r2,15
10201910:	180b883a 	mov	r5,r3
10201914:	100d883a 	mov	r6,r2
10201918:	0202dc80 	call	10202dc8 <memcpy>
1020191c:	00001206 	br	10201968 <GetFlashName+0x13c>
        else if (flash_type == EPCS)
10201920:	e0bfff17 	ldw	r2,-4(fp)
10201924:	10800118 	cmpnei	r2,r2,4
10201928:	10000f1e 	bne	r2,zero,10201968 <GetFlashName+0x13c>
          strcpy(line, "/dev/epcs_controller\0");
1020192c:	e0fffe17 	ldw	r3,-8(fp)
10201930:	008408b4 	movhi	r2,4130
10201934:	10b30a04 	addi	r2,r2,-13272
10201938:	1809883a 	mov	r4,r3
1020193c:	1007883a 	mov	r3,r2
10201940:	00800544 	movi	r2,21
10201944:	180b883a 	mov	r5,r3
10201948:	100d883a 	mov	r6,r2
1020194c:	0202dc80 	call	10202dc8 <memcpy>
  {
    ch = getc(stdin);
    if(ch == '\r' || ch == '\n')
    {
      /* Hitting <enter> defaults to the standard component name */
      if( i <= 1 )
10201950:	00000b06 	br	10201980 <GetFlashName+0x154>
          strcpy(line, "/dev/epcs_controller\0");
      }
         
      else
        /* Properly terminate the string. */
        line[i] = '\0';
10201954:	e0bffd17 	ldw	r2,-12(fp)
10201958:	e0fffe17 	ldw	r3,-8(fp)
1020195c:	1885883a 	add	r2,r3,r2
10201960:	10000005 	stb	zero,0(r2)
  {
    ch = getc(stdin);
    if(ch == '\r' || ch == '\n')
    {
      /* Hitting <enter> defaults to the standard component name */
      if( i <= 1 )
10201964:	00000606 	br	10201980 <GetFlashName+0x154>
10201968:	00000506 	br	10201980 <GetFlashName+0x154>
      else
        /* Properly terminate the string. */
        line[i] = '\0';
    }
    else
     line[i] = ch;
1020196c:	e0bffd17 	ldw	r2,-12(fp)
10201970:	e0fffe17 	ldw	r3,-8(fp)
10201974:	1885883a 	add	r2,r3,r2
10201978:	e0fffc03 	ldbu	r3,-16(fp)
1020197c:	10c00005 	stb	r3,0(r2)
    printf("\nEnter the name of the EPCS flash device to be opened,\n");
    printf("or just press <enter> to open \"/dev/epcs_controller\"\n");
    printf(">");
  }
 
  for(i = 0; ch != '\n'; i++)
10201980:	e0bffd17 	ldw	r2,-12(fp)
10201984:	10800044 	addi	r2,r2,1
10201988:	e0bffd15 	stw	r2,-12(fp)
1020198c:	e0bffc07 	ldb	r2,-16(fp)
10201990:	10800298 	cmpnei	r2,r2,10
10201994:	103fc51e 	bne	r2,zero,102018ac <GetFlashName+0x80>
    }
    else
     line[i] = ch;
  }
 
  return 0;
10201998:	0005883a 	mov	r2,zero
}
1020199c:	e037883a 	mov	sp,fp
102019a0:	dfc00117 	ldw	ra,4(sp)
102019a4:	df000017 	ldw	fp,0(sp)
102019a8:	dec00204 	addi	sp,sp,8
102019ac:	f800283a 	ret

102019b0 <FlashErase>:
*
*  Purpose: Erases 1 or all blocks in the specified flash device.
* 
******************************************************************/
static void FlashErase(int flash_type)
{
102019b0:	deffe304 	addi	sp,sp,-116
102019b4:	dfc01c15 	stw	ra,112(sp)
102019b8:	df001b15 	stw	fp,108(sp)
102019bc:	df001b04 	addi	fp,sp,108
102019c0:	e13fff15 	stw	r4,-4(fp)
  char entry[4];
  char flashname[30];
  unsigned int block;
 
  /* Get the name of the flash we are erasing */
  ret_code = GetFlashName(flashname, flash_type);
102019c4:	e0bff604 	addi	r2,fp,-40
102019c8:	1009883a 	mov	r4,r2
102019cc:	e17fff17 	ldw	r5,-4(fp)
102019d0:	020182c0 	call	1020182c <GetFlashName>
102019d4:	e0bfe515 	stw	r2,-108(fp)
 
  fd = alt_flash_open_dev(flashname);
102019d8:	e0bff604 	addi	r2,fp,-40
102019dc:	1009883a 	mov	r4,r2
102019e0:	02184500 	call	10218450 <alt_flash_open_dev>
102019e4:	e0bfe615 	stw	r2,-104(fp)
  if (fd)
102019e8:	e0bfe617 	ldw	r2,-104(fp)
102019ec:	1000ce26 	beq	r2,zero,10201d28 <FlashErase+0x378>
102019f0:	e0bfe617 	ldw	r2,-104(fp)
102019f4:	e0bfe815 	stw	r2,-96(fp)
102019f8:	e0bff304 	addi	r2,fp,-52
102019fc:	e0bfe915 	stw	r2,-92(fp)
10201a00:	e0bff404 	addi	r2,fp,-48
10201a04:	e0bfea15 	stw	r2,-88(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_get_flash_info( 
                                      alt_flash_fd* fd, flash_region** info, 
                                      int* number_of_regions)
{
  return fd->get_info( fd, info, number_of_regions);
10201a08:	e0bfe817 	ldw	r2,-96(fp)
10201a0c:	10800717 	ldw	r2,28(r2)
10201a10:	e13fe817 	ldw	r4,-96(fp)
10201a14:	e17fe917 	ldw	r5,-92(fp)
10201a18:	e1bfea17 	ldw	r6,-88(fp)
10201a1c:	103ee83a 	callr	r2
  {
    /* Find out some useful stuff about the flash */
    ret_code = alt_get_flash_info(fd, &regions, &number_of_regions);
10201a20:	e0bfe515 	stw	r2,-108(fp)
    if (!ret_code)
10201a24:	e0bfe517 	ldw	r2,-108(fp)
10201a28:	1000b81e 	bne	r2,zero,10201d0c <FlashErase+0x35c>
    {
      printf(" -Region has %d blocks.\n", regions->number_of_blocks);
10201a2c:	e0bff317 	ldw	r2,-52(fp)
10201a30:	10800217 	ldw	r2,8(r2)
10201a34:	010408b4 	movhi	r4,4130
10201a38:	21331004 	addi	r4,r4,-13248
10201a3c:	100b883a 	mov	r5,r2
10201a40:	0202f2c0 	call	10202f2c <printf>
      printf(" -Which block would you like to erase?\n");
10201a44:	010408b4 	movhi	r4,4130
10201a48:	21331704 	addi	r4,r4,-13220
10201a4c:	02030300 	call	10203030 <puts>
      printf(" -> ");
10201a50:	010408b4 	movhi	r4,4130
10201a54:	21332104 	addi	r4,r4,-13180
10201a58:	0202f2c0 	call	10202f2c <printf>
      
      GetInputString( entry, sizeof(entry), stdin );
10201a5c:	008408b4 	movhi	r2,4130
10201a60:	10bd0604 	addi	r2,r2,-3048
10201a64:	10800017 	ldw	r2,0(r2)
10201a68:	10800117 	ldw	r2,4(r2)
10201a6c:	e0fff504 	addi	r3,fp,-44
10201a70:	1809883a 	mov	r4,r3
10201a74:	01400104 	movi	r5,4
10201a78:	100d883a 	mov	r6,r2
10201a7c:	02003800 	call	10200380 <GetInputString>

      if(entry[0] == 'a')
10201a80:	e0bff503 	ldbu	r2,-44(fp)
10201a84:	10803fcc 	andi	r2,r2,255
10201a88:	1080201c 	xori	r2,r2,128
10201a8c:	10bfe004 	addi	r2,r2,-128
10201a90:	10801858 	cmpnei	r2,r2,97
10201a94:	10005c1e 	bne	r2,zero,10201c08 <FlashErase+0x258>
      {
        printf(" -Erase ALL blocks? (y/n) ");
10201a98:	010408b4 	movhi	r4,4130
10201a9c:	21332304 	addi	r4,r4,-13172
10201aa0:	0202f2c0 	call	10202f2c <printf>

        GetInputString( entry, sizeof(entry), stdin );
10201aa4:	008408b4 	movhi	r2,4130
10201aa8:	10bd0604 	addi	r2,r2,-3048
10201aac:	10800017 	ldw	r2,0(r2)
10201ab0:	10800117 	ldw	r2,4(r2)
10201ab4:	e0fff504 	addi	r3,fp,-44
10201ab8:	1809883a 	mov	r4,r3
10201abc:	01400104 	movi	r5,4
10201ac0:	100d883a 	mov	r6,r2
10201ac4:	02003800 	call	10200380 <GetInputString>
        
        if(entry[0] == 'y')
10201ac8:	e0bff503 	ldbu	r2,-44(fp)
10201acc:	10803fcc 	andi	r2,r2,255
10201ad0:	1080201c 	xori	r2,r2,128
10201ad4:	10bfe004 	addi	r2,r2,-128
10201ad8:	10801e58 	cmpnei	r2,r2,121
10201adc:	1000471e 	bne	r2,zero,10201bfc <FlashErase+0x24c>
        {
          /* Erase all blocks */
          printf(" -Erasing %d blocks.  Please Wait.\n", (regions->number_of_blocks));
10201ae0:	e0bff317 	ldw	r2,-52(fp)
10201ae4:	10800217 	ldw	r2,8(r2)
10201ae8:	010408b4 	movhi	r4,4130
10201aec:	21332a04 	addi	r4,r4,-13144
10201af0:	100b883a 	mov	r5,r2
10201af4:	0202f2c0 	call	10202f2c <printf>
          for(block = 0; block < regions->number_of_blocks; block++)
10201af8:	e03ffe15 	stw	zero,-8(fp)
10201afc:	00003606 	br	10201bd8 <FlashErase+0x228>
          {
            /* Dont erase it if it's already erased silly. */
            if ((FlashCheckIfBlockErased(fd, block, regions)) == 0)
10201b00:	e0bffe17 	ldw	r2,-8(fp)
10201b04:	1007883a 	mov	r3,r2
10201b08:	e0bff317 	ldw	r2,-52(fp)
10201b0c:	e13fe617 	ldw	r4,-104(fp)
10201b10:	180b883a 	mov	r5,r3
10201b14:	100d883a 	mov	r6,r2
10201b18:	0200e000 	call	10200e00 <FlashCheckIfBlockErased>
10201b1c:	1000211e 	bne	r2,zero,10201ba4 <FlashErase+0x1f4>
            {
              test_offset = (regions->offset + (block * regions->block_size));
10201b20:	e0bff317 	ldw	r2,-52(fp)
10201b24:	10800017 	ldw	r2,0(r2)
10201b28:	1007883a 	mov	r3,r2
10201b2c:	e0bff317 	ldw	r2,-52(fp)
10201b30:	10800317 	ldw	r2,12(r2)
10201b34:	1009883a 	mov	r4,r2
10201b38:	e0bffe17 	ldw	r2,-8(fp)
10201b3c:	2085383a 	mul	r2,r4,r2
10201b40:	1885883a 	add	r2,r3,r2
10201b44:	e0bfe715 	stw	r2,-100(fp)
              alt_erase_flash_block(fd, test_offset, regions->block_size);
10201b48:	e0bff317 	ldw	r2,-52(fp)
10201b4c:	10800317 	ldw	r2,12(r2)
10201b50:	e0ffe617 	ldw	r3,-104(fp)
10201b54:	e0ffeb15 	stw	r3,-84(fp)
10201b58:	e0ffe717 	ldw	r3,-100(fp)
10201b5c:	e0ffec15 	stw	r3,-80(fp)
10201b60:	e0bfed15 	stw	r2,-76(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
10201b64:	e0bfeb17 	ldw	r2,-84(fp)
10201b68:	10800817 	ldw	r2,32(r2)
10201b6c:	e13feb17 	ldw	r4,-84(fp)
10201b70:	e17fec17 	ldw	r5,-80(fp)
10201b74:	103ee83a 	callr	r2
10201b78:	e0bfee15 	stw	r2,-72(fp)
  
  if(!ret_code)
10201b7c:	e0bfee17 	ldw	r2,-72(fp)
10201b80:	1000081e 	bne	r2,zero,10201ba4 <FlashErase+0x1f4>
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
10201b84:	e0bfeb17 	ldw	r2,-84(fp)
10201b88:	10c00a17 	ldw	r3,40(r2)
10201b8c:	e0bfec17 	ldw	r2,-80(fp)
10201b90:	1887883a 	add	r3,r3,r2
10201b94:	e0bfed17 	ldw	r2,-76(fp)
10201b98:	1809883a 	mov	r4,r3
10201b9c:	100b883a 	mov	r5,r2
10201ba0:	02183b00 	call	102183b0 <alt_dcache_flush>
            }
            /* Just a simple progress meter so we dont get bored waiting for the flash to erase. */
            printf(".");
10201ba4:	01000b84 	movi	r4,46
10201ba8:	0202f700 	call	10202f70 <putchar>
            if(((block + 1) % 80) == 0)
10201bac:	e0bffe17 	ldw	r2,-8(fp)
10201bb0:	10800044 	addi	r2,r2,1
10201bb4:	1009883a 	mov	r4,r2
10201bb8:	01401404 	movi	r5,80
10201bbc:	020247c0 	call	1020247c <__umodsi3>
10201bc0:	1000021e 	bne	r2,zero,10201bcc <FlashErase+0x21c>
            {
              printf("\n");
10201bc4:	01000284 	movi	r4,10
10201bc8:	0202f700 	call	10202f70 <putchar>
        
        if(entry[0] == 'y')
        {
          /* Erase all blocks */
          printf(" -Erasing %d blocks.  Please Wait.\n", (regions->number_of_blocks));
          for(block = 0; block < regions->number_of_blocks; block++)
10201bcc:	e0bffe17 	ldw	r2,-8(fp)
10201bd0:	10800044 	addi	r2,r2,1
10201bd4:	e0bffe15 	stw	r2,-8(fp)
10201bd8:	e0bff317 	ldw	r2,-52(fp)
10201bdc:	10800217 	ldw	r2,8(r2)
10201be0:	1007883a 	mov	r3,r2
10201be4:	e0bffe17 	ldw	r2,-8(fp)
10201be8:	10ffc536 	bltu	r2,r3,10201b00 <FlashErase+0x150>
            if(((block + 1) % 80) == 0)
            {
              printf("\n");
            }
          }
          printf("\n -All Blocks Erased.\n");
10201bec:	010408b4 	movhi	r4,4130
10201bf0:	21333304 	addi	r4,r4,-13108
10201bf4:	02030300 	call	10203030 <puts>
10201bf8:	00000306 	br	10201c08 <FlashErase+0x258>
        }
        else
        {
          printf("Erased zero blocks.\n");
10201bfc:	010408b4 	movhi	r4,4130
10201c00:	21333904 	addi	r4,r4,-13084
10201c04:	02030300 	call	10203030 <puts>
        }
      }
      /* Just erase one block */
      if(sscanf(entry, "%d\n", &block))
10201c08:	e0fff504 	addi	r3,fp,-44
10201c0c:	e0bffe04 	addi	r2,fp,-8
10201c10:	1809883a 	mov	r4,r3
10201c14:	014408b4 	movhi	r5,4130
10201c18:	29733e04 	addi	r5,r5,-13064
10201c1c:	100d883a 	mov	r6,r2
10201c20:	02031200 	call	10203120 <sscanf>
10201c24:	10003926 	beq	r2,zero,10201d0c <FlashErase+0x35c>
      {
        if ((block >= 0) && (block <= (regions->number_of_blocks - 1)))
10201c28:	e0bff317 	ldw	r2,-52(fp)
10201c2c:	10800217 	ldw	r2,8(r2)
10201c30:	10bfffc4 	addi	r2,r2,-1
10201c34:	1007883a 	mov	r3,r2
10201c38:	e0bffe17 	ldw	r2,-8(fp)
10201c3c:	18802736 	bltu	r3,r2,10201cdc <FlashErase+0x32c>
        {
          test_offset = (regions->offset + (block * regions->block_size));
10201c40:	e0bff317 	ldw	r2,-52(fp)
10201c44:	10800017 	ldw	r2,0(r2)
10201c48:	1007883a 	mov	r3,r2
10201c4c:	e0bff317 	ldw	r2,-52(fp)
10201c50:	10800317 	ldw	r2,12(r2)
10201c54:	1009883a 	mov	r4,r2
10201c58:	e0bffe17 	ldw	r2,-8(fp)
10201c5c:	2085383a 	mul	r2,r4,r2
10201c60:	1885883a 	add	r2,r3,r2
10201c64:	e0bfe715 	stw	r2,-100(fp)
          alt_erase_flash_block(fd, test_offset, regions->block_size);
10201c68:	e0bff317 	ldw	r2,-52(fp)
10201c6c:	10800317 	ldw	r2,12(r2)
10201c70:	e0ffe617 	ldw	r3,-104(fp)
10201c74:	e0ffef15 	stw	r3,-68(fp)
10201c78:	e0ffe717 	ldw	r3,-100(fp)
10201c7c:	e0fff015 	stw	r3,-64(fp)
10201c80:	e0bff115 	stw	r2,-60(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
10201c84:	e0bfef17 	ldw	r2,-68(fp)
10201c88:	10800817 	ldw	r2,32(r2)
10201c8c:	e13fef17 	ldw	r4,-68(fp)
10201c90:	e17ff017 	ldw	r5,-64(fp)
10201c94:	103ee83a 	callr	r2
10201c98:	e0bff215 	stw	r2,-56(fp)
  
  if(!ret_code)
10201c9c:	e0bff217 	ldw	r2,-56(fp)
10201ca0:	1000081e 	bne	r2,zero,10201cc4 <FlashErase+0x314>
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
10201ca4:	e0bfef17 	ldw	r2,-68(fp)
10201ca8:	10c00a17 	ldw	r3,40(r2)
10201cac:	e0bff017 	ldw	r2,-64(fp)
10201cb0:	1887883a 	add	r3,r3,r2
10201cb4:	e0bff117 	ldw	r2,-60(fp)
10201cb8:	1809883a 	mov	r4,r3
10201cbc:	100b883a 	mov	r5,r2
10201cc0:	02183b00 	call	102183b0 <alt_dcache_flush>
          printf(" -Block %d erased.\n", block);
10201cc4:	e0bffe17 	ldw	r2,-8(fp)
10201cc8:	010408b4 	movhi	r4,4130
10201ccc:	21333f04 	addi	r4,r4,-13060
10201cd0:	100b883a 	mov	r5,r2
10201cd4:	0202f2c0 	call	10202f2c <printf>
10201cd8:	00000c06 	br	10201d0c <FlashErase+0x35c>
        }
        else
        {
          printf(" -Block number entered is %d\n", block);
10201cdc:	e0bffe17 	ldw	r2,-8(fp)
10201ce0:	010408b4 	movhi	r4,4130
10201ce4:	21334404 	addi	r4,r4,-13040
10201ce8:	100b883a 	mov	r5,r2
10201cec:	0202f2c0 	call	10202f2c <printf>
          printf(" -Block number must be between 0 and %d.\n", (regions->number_of_blocks - 1));
10201cf0:	e0bff317 	ldw	r2,-52(fp)
10201cf4:	10800217 	ldw	r2,8(r2)
10201cf8:	10bfffc4 	addi	r2,r2,-1
10201cfc:	010408b4 	movhi	r4,4130
10201d00:	21334c04 	addi	r4,r4,-13008
10201d04:	100b883a 	mov	r5,r2
10201d08:	0202f2c0 	call	10202f2c <printf>
        }
      }
    }
    printf(" -Closing flash \"%s\".\n", flashname);
10201d0c:	e0bff604 	addi	r2,fp,-40
10201d10:	010408b4 	movhi	r4,4130
10201d14:	21335704 	addi	r4,r4,-12964
10201d18:	100b883a 	mov	r5,r2
10201d1c:	0202f2c0 	call	10202f2c <printf>
    alt_flash_close_dev(fd);
10201d20:	e13fe617 	ldw	r4,-104(fp)
10201d24:	02184b80 	call	102184b8 <alt_flash_close_dev>
  }
}
10201d28:	e037883a 	mov	sp,fp
10201d2c:	dfc00117 	ldw	ra,4(sp)
10201d30:	df000017 	ldw	fp,0(sp)
10201d34:	dec00204 	addi	sp,sp,8
10201d38:	f800283a 	ret

10201d3c <FlashFindErasedBlocks>:
*           parameter is SHOWMAP, the function prints a list of 
*           all blocks, indicating which ones are erased.
* 
******************************************************************/
static int FlashFindErasedBlocks(alt_flash_fd* fd, flash_region* regions, int number_of_regions, int mode)
{ 
10201d3c:	defff404 	addi	sp,sp,-48
10201d40:	dfc00b15 	stw	ra,44(sp)
10201d44:	df000a15 	stw	fp,40(sp)
10201d48:	df000a04 	addi	fp,sp,40
10201d4c:	e13ffc15 	stw	r4,-16(fp)
10201d50:	e17ffd15 	stw	r5,-12(fp)
10201d54:	e1bffe15 	stw	r6,-8(fp)
10201d58:	e1ffff15 	stw	r7,-4(fp)
  int region_index, block_index;
  int block_erased = 0x0;
10201d5c:	e03ff815 	stw	zero,-32(fp)
  char entry[5];
  unsigned int block;

  /* Currently only supports flashes with 1 region, but region loop is left here for possible */
  /* future implementation */
  for(region_index = 0; region_index < number_of_regions; region_index++)
10201d60:	e03ff615 	stw	zero,-40(fp)
10201d64:	00008b06 	br	10201f94 <FlashFindErasedBlocks+0x258>
  {
    printf(" -Checking Region %d for erased blocks.\n", region_index);
10201d68:	010408b4 	movhi	r4,4130
10201d6c:	21335d04 	addi	r4,r4,-12940
10201d70:	e17ff617 	ldw	r5,-40(fp)
10201d74:	0202f2c0 	call	10202f2c <printf>
    /* SHOWMAP mode has a legend reminding us what little plus and minus signs mean */
    if(mode == SHOWMAP)
10201d78:	e0bfff17 	ldw	r2,-4(fp)
10201d7c:	10800098 	cmpnei	r2,r2,2
10201d80:	1000061e 	bne	r2,zero,10201d9c <FlashFindErasedBlocks+0x60>
    {
      printf("            erased block = '-'\n");     
10201d84:	010408b4 	movhi	r4,4130
10201d88:	21336804 	addi	r4,r4,-12896
10201d8c:	02030300 	call	10203030 <puts>
      printf("          unerased block = '+'\n\n");     
10201d90:	010408b4 	movhi	r4,4130
10201d94:	21337004 	addi	r4,r4,-12864
10201d98:	02030300 	call	10203030 <puts>
    }
    /* Check those blocks. */
    for(block_index = 0; block_index < (regions->number_of_blocks); block_index++)
10201d9c:	e03ff715 	stw	zero,-36(fp)
10201da0:	00003006 	br	10201e64 <FlashFindErasedBlocks+0x128>
    {
      block_erased = FlashCheckIfBlockErased(fd, block_index, regions);
10201da4:	e13ffc17 	ldw	r4,-16(fp)
10201da8:	e17ff717 	ldw	r5,-36(fp)
10201dac:	e1bffd17 	ldw	r6,-12(fp)
10201db0:	0200e000 	call	10200e00 <FlashCheckIfBlockErased>
10201db4:	e0bff815 	stw	r2,-32(fp)
      /* If it's erased and were running in TEST mode, we're done */
      if(block_erased && (mode == TEST))
10201db8:	e0bff817 	ldw	r2,-32(fp)
10201dbc:	10000326 	beq	r2,zero,10201dcc <FlashFindErasedBlocks+0x90>
10201dc0:	e0bfff17 	ldw	r2,-4(fp)
10201dc4:	10800060 	cmpeqi	r2,r2,1
10201dc8:	10002a1e 	bne	r2,zero,10201e74 <FlashFindErasedBlocks+0x138>
        break;
      /* If in SHOWMAP mode, mark block as either erased or not-erased. */
      else if(block_erased && (mode == SHOWMAP))
10201dcc:	e0bff817 	ldw	r2,-32(fp)
10201dd0:	10001026 	beq	r2,zero,10201e14 <FlashFindErasedBlocks+0xd8>
10201dd4:	e0bfff17 	ldw	r2,-4(fp)
10201dd8:	10800098 	cmpnei	r2,r2,2
10201ddc:	10000d1e 	bne	r2,zero,10201e14 <FlashFindErasedBlocks+0xd8>
        printf("  Block %3d @ 0x%8.8X:\t-\n", block_index, (regions->offset + (block_index * regions->block_size)));           
10201de0:	e0bffd17 	ldw	r2,-12(fp)
10201de4:	10c00017 	ldw	r3,0(r2)
10201de8:	e0bffd17 	ldw	r2,-12(fp)
10201dec:	11000317 	ldw	r4,12(r2)
10201df0:	e0bff717 	ldw	r2,-36(fp)
10201df4:	2085383a 	mul	r2,r4,r2
10201df8:	1885883a 	add	r2,r3,r2
10201dfc:	010408b4 	movhi	r4,4130
10201e00:	21337804 	addi	r4,r4,-12832
10201e04:	e17ff717 	ldw	r5,-36(fp)
10201e08:	100d883a 	mov	r6,r2
10201e0c:	0202f2c0 	call	10202f2c <printf>
10201e10:	00001106 	br	10201e58 <FlashFindErasedBlocks+0x11c>
      else if(!block_erased && (mode == SHOWMAP))
10201e14:	e0bff817 	ldw	r2,-32(fp)
10201e18:	10000f1e 	bne	r2,zero,10201e58 <FlashFindErasedBlocks+0x11c>
10201e1c:	e0bfff17 	ldw	r2,-4(fp)
10201e20:	10800098 	cmpnei	r2,r2,2
10201e24:	10000c1e 	bne	r2,zero,10201e58 <FlashFindErasedBlocks+0x11c>
        printf("  Block %3d @ 0x%8.8X:\t+\n", block_index, (regions->offset + (block_index * regions->block_size)));           
10201e28:	e0bffd17 	ldw	r2,-12(fp)
10201e2c:	10c00017 	ldw	r3,0(r2)
10201e30:	e0bffd17 	ldw	r2,-12(fp)
10201e34:	11000317 	ldw	r4,12(r2)
10201e38:	e0bff717 	ldw	r2,-36(fp)
10201e3c:	2085383a 	mul	r2,r4,r2
10201e40:	1885883a 	add	r2,r3,r2
10201e44:	010408b4 	movhi	r4,4130
10201e48:	21337f04 	addi	r4,r4,-12804
10201e4c:	e17ff717 	ldw	r5,-36(fp)
10201e50:	100d883a 	mov	r6,r2
10201e54:	0202f2c0 	call	10202f2c <printf>
    {
      printf("            erased block = '-'\n");     
      printf("          unerased block = '+'\n\n");     
    }
    /* Check those blocks. */
    for(block_index = 0; block_index < (regions->number_of_blocks); block_index++)
10201e58:	e0bff717 	ldw	r2,-36(fp)
10201e5c:	10800044 	addi	r2,r2,1
10201e60:	e0bff715 	stw	r2,-36(fp)
10201e64:	e0bffd17 	ldw	r2,-12(fp)
10201e68:	10800217 	ldw	r2,8(r2)
10201e6c:	e0fff717 	ldw	r3,-36(fp)
10201e70:	18bfcc16 	blt	r3,r2,10201da4 <FlashFindErasedBlocks+0x68>
        printf("  Block %3d @ 0x%8.8X:\t-\n", block_index, (regions->offset + (block_index * regions->block_size)));           
      else if(!block_erased && (mode == SHOWMAP))
        printf("  Block %3d @ 0x%8.8X:\t+\n", block_index, (regions->offset + (block_index * regions->block_size)));           
    }
    /* Special case if no blocks are erased (TEST mode only)*/
    if(( block_index == ( regions->number_of_blocks )) && ( mode == TEST ))
10201e74:	e0bffd17 	ldw	r2,-12(fp)
10201e78:	10c00217 	ldw	r3,8(r2)
10201e7c:	e0bff717 	ldw	r2,-36(fp)
10201e80:	18803b1e 	bne	r3,r2,10201f70 <FlashFindErasedBlocks+0x234>
10201e84:	e0bfff17 	ldw	r2,-4(fp)
10201e88:	10800058 	cmpnei	r2,r2,1
10201e8c:	1000381e 	bne	r2,zero,10201f70 <FlashFindErasedBlocks+0x234>
    {
      printf(" -Found no erased blocks.  Please enter the number of the block\n");
10201e90:	010408b4 	movhi	r4,4130
10201e94:	21338604 	addi	r4,r4,-12776
10201e98:	02030300 	call	10203030 <puts>
      printf("  you would like to test.  Enter 'q' to quit without testing flash.\n");
10201e9c:	010408b4 	movhi	r4,4130
10201ea0:	21339604 	addi	r4,r4,-12712
10201ea4:	02030300 	call	10203030 <puts>
      printf(" -> ");
10201ea8:	010408b4 	movhi	r4,4130
10201eac:	21332104 	addi	r4,r4,-13180
10201eb0:	0202f2c0 	call	10202f2c <printf>

      GetInputString( entry, sizeof(entry), stdin );
10201eb4:	008408b4 	movhi	r2,4130
10201eb8:	10bd0604 	addi	r2,r2,-3048
10201ebc:	10800017 	ldw	r2,0(r2)
10201ec0:	10800117 	ldw	r2,4(r2)
10201ec4:	e0fff904 	addi	r3,fp,-28
10201ec8:	1809883a 	mov	r4,r3
10201ecc:	01400144 	movi	r5,5
10201ed0:	100d883a 	mov	r6,r2
10201ed4:	02003800 	call	10200380 <GetInputString>

      if(entry[0] == 'q')
10201ed8:	e0bff903 	ldbu	r2,-28(fp)
10201edc:	10803fcc 	andi	r2,r2,255
10201ee0:	1080201c 	xori	r2,r2,128
10201ee4:	10bfe004 	addi	r2,r2,-128
10201ee8:	10801c58 	cmpnei	r2,r2,113
10201eec:	1000031e 	bne	r2,zero,10201efc <FlashFindErasedBlocks+0x1c0>
      {
    		block_index = QUIT_WITHOUT_TESTING;
10201ef0:	00bfffc4 	movi	r2,-1
10201ef4:	e0bff715 	stw	r2,-36(fp)
    		break;
10201ef8:	00002906 	br	10201fa0 <FlashFindErasedBlocks+0x264>
    	}
      else if(sscanf(entry, "%d\n", &block))
10201efc:	e0fff904 	addi	r3,fp,-28
10201f00:	e0bffb04 	addi	r2,fp,-20
10201f04:	1809883a 	mov	r4,r3
10201f08:	014408b4 	movhi	r5,4130
10201f0c:	29733e04 	addi	r5,r5,-13064
10201f10:	100d883a 	mov	r6,r2
10201f14:	02031200 	call	10203120 <sscanf>
10201f18:	10001526 	beq	r2,zero,10201f70 <FlashFindErasedBlocks+0x234>
      {
        if ((block >= 0) && (block <= (regions->number_of_blocks - 1)))
10201f1c:	e0bffd17 	ldw	r2,-12(fp)
10201f20:	10800217 	ldw	r2,8(r2)
10201f24:	10bfffc4 	addi	r2,r2,-1
10201f28:	1007883a 	mov	r3,r2
10201f2c:	e0bffb17 	ldw	r2,-20(fp)
10201f30:	18800336 	bltu	r3,r2,10201f40 <FlashFindErasedBlocks+0x204>
        {
        	block_index = block;
10201f34:	e0bffb17 	ldw	r2,-20(fp)
10201f38:	e0bff715 	stw	r2,-36(fp)
        	break;
10201f3c:	00001806 	br	10201fa0 <FlashFindErasedBlocks+0x264>
        }
        else 
        {
          printf(" -Block number entered is %d\n", block);
10201f40:	e0bffb17 	ldw	r2,-20(fp)
10201f44:	010408b4 	movhi	r4,4130
10201f48:	21334404 	addi	r4,r4,-13040
10201f4c:	100b883a 	mov	r5,r2
10201f50:	0202f2c0 	call	10202f2c <printf>
          printf(" -Block number must be between 0 and %d.\n", (regions->number_of_blocks - 1));
10201f54:	e0bffd17 	ldw	r2,-12(fp)
10201f58:	10800217 	ldw	r2,8(r2)
10201f5c:	10bfffc4 	addi	r2,r2,-1
10201f60:	010408b4 	movhi	r4,4130
10201f64:	21334c04 	addi	r4,r4,-13008
10201f68:	100b883a 	mov	r5,r2
10201f6c:	0202f2c0 	call	10202f2c <printf>
        }
      }    	
    }
    /* Break out of the region loop if we've found an erased block to test. */
    if(block_erased && (mode == TEST))
10201f70:	e0bff817 	ldw	r2,-32(fp)
10201f74:	10000426 	beq	r2,zero,10201f88 <FlashFindErasedBlocks+0x24c>
10201f78:	e0bfff17 	ldw	r2,-4(fp)
10201f7c:	10800058 	cmpnei	r2,r2,1
10201f80:	1000011e 	bne	r2,zero,10201f88 <FlashFindErasedBlocks+0x24c>
      break;
10201f84:	00000606 	br	10201fa0 <FlashFindErasedBlocks+0x264>
  char entry[5];
  unsigned int block;

  /* Currently only supports flashes with 1 region, but region loop is left here for possible */
  /* future implementation */
  for(region_index = 0; region_index < number_of_regions; region_index++)
10201f88:	e0bff617 	ldw	r2,-40(fp)
10201f8c:	10800044 	addi	r2,r2,1
10201f90:	e0bff615 	stw	r2,-40(fp)
10201f94:	e0fff617 	ldw	r3,-40(fp)
10201f98:	e0bffe17 	ldw	r2,-8(fp)
10201f9c:	18bf7216 	blt	r3,r2,10201d68 <FlashFindErasedBlocks+0x2c>
    /* Break out of the region loop if we've found an erased block to test. */
    if(block_erased && (mode == TEST))
      break;
  }

  return block_index;
10201fa0:	e0bff717 	ldw	r2,-36(fp)
}
10201fa4:	e037883a 	mov	sp,fp
10201fa8:	dfc00117 	ldw	ra,4(sp)
10201fac:	df000017 	ldw	fp,0(sp)
10201fb0:	dec00204 	addi	sp,sp,8
10201fb4:	f800283a 	ret

10201fb8 <TestFlash>:
*           indicates which ones are erased.  The flash is closed
*           at the end of the function.
* 
******************************************************************/
static void TestFlash(int mode, int flash_type)
{
10201fb8:	deffeb04 	addi	sp,sp,-84
10201fbc:	dfc01415 	stw	ra,80(sp)
10201fc0:	df001315 	stw	fp,76(sp)
10201fc4:	df001304 	addi	fp,sp,76
10201fc8:	e13ffe15 	stw	r4,-8(fp)
10201fcc:	e17fff15 	stw	r5,-4(fp)
  alt_flash_fd* fd;
  int number_of_regions;
  int block;
  flash_region* regions;
  int ret_code = 0x0;
10201fd0:	e03fed15 	stw	zero,-76(fp)
  char entry[4];
  char flashname[30];
  
  ret_code = GetFlashName(flashname, flash_type);
10201fd4:	e0bff604 	addi	r2,fp,-40
10201fd8:	1009883a 	mov	r4,r2
10201fdc:	e17fff17 	ldw	r5,-4(fp)
10201fe0:	020182c0 	call	1020182c <GetFlashName>
10201fe4:	e0bfed15 	stw	r2,-76(fp)

  fd = alt_flash_open_dev(flashname);
10201fe8:	e0bff604 	addi	r2,fp,-40
10201fec:	1009883a 	mov	r4,r2
10201ff0:	02184500 	call	10218450 <alt_flash_open_dev>
10201ff4:	e0bfee15 	stw	r2,-72(fp)
  if (fd)
10201ff8:	e0bfee17 	ldw	r2,-72(fp)
10201ffc:	10005926 	beq	r2,zero,10202164 <TestFlash+0x1ac>
  {
    printf(" -Successfully opened %s\n", flashname);
10202000:	e0bff604 	addi	r2,fp,-40
10202004:	010408b4 	movhi	r4,4130
10202008:	2133a704 	addi	r4,r4,-12644
1020200c:	100b883a 	mov	r5,r2
10202010:	0202f2c0 	call	10202f2c <printf>
10202014:	e0bfee17 	ldw	r2,-72(fp)
10202018:	e0bff015 	stw	r2,-64(fp)
1020201c:	e0bff404 	addi	r2,fp,-48
10202020:	e0bff115 	stw	r2,-60(fp)
10202024:	e0bff304 	addi	r2,fp,-52
10202028:	e0bff215 	stw	r2,-56(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_get_flash_info( 
                                      alt_flash_fd* fd, flash_region** info, 
                                      int* number_of_regions)
{
  return fd->get_info( fd, info, number_of_regions);
1020202c:	e0bff017 	ldw	r2,-64(fp)
10202030:	10800717 	ldw	r2,28(r2)
10202034:	e13ff017 	ldw	r4,-64(fp)
10202038:	e17ff117 	ldw	r5,-60(fp)
1020203c:	e1bff217 	ldw	r6,-56(fp)
10202040:	103ee83a 	callr	r2
    
    /* Get some useful info about the flash */
    ret_code = alt_get_flash_info(fd, &regions, &number_of_regions);
10202044:	e0bfed15 	stw	r2,-76(fp)
      
    if (!ret_code)
10202048:	e0bfed17 	ldw	r2,-76(fp)
1020204c:	10004a1e 	bne	r2,zero,10202178 <TestFlash+0x1c0>
    {
      printf(" -Region 0 contains %d blocks.\n", regions->number_of_blocks);
10202050:	e0bff417 	ldw	r2,-48(fp)
10202054:	10800217 	ldw	r2,8(r2)
10202058:	010408b4 	movhi	r4,4130
1020205c:	2133ae04 	addi	r4,r4,-12616
10202060:	100b883a 	mov	r5,r2
10202064:	0202f2c0 	call	10202f2c <printf>
      
      block = FlashFindErasedBlocks(fd, regions, number_of_regions, mode);
10202068:	e0fff417 	ldw	r3,-48(fp)
1020206c:	e0bff317 	ldw	r2,-52(fp)
10202070:	e13fee17 	ldw	r4,-72(fp)
10202074:	180b883a 	mov	r5,r3
10202078:	100d883a 	mov	r6,r2
1020207c:	e1fffe17 	ldw	r7,-8(fp)
10202080:	0201d3c0 	call	10201d3c <FlashFindErasedBlocks>
10202084:	e0bfef15 	stw	r2,-68(fp)

      /* If we're in TEST mode, ask if this block is okay to test. */
      if(( mode == TEST ) && ( block != QUIT_WITHOUT_TESTING ))
10202088:	e0bffe17 	ldw	r2,-8(fp)
1020208c:	10800058 	cmpnei	r2,r2,1
10202090:	1000391e 	bne	r2,zero,10202178 <TestFlash+0x1c0>
10202094:	e0bfef17 	ldw	r2,-68(fp)
10202098:	10bfffe0 	cmpeqi	r2,r2,-1
1020209c:	1000361e 	bne	r2,zero,10202178 <TestFlash+0x1c0>
      {
        printf(" -Block %d, at address 0x%X identified.\n", block, (regions->offset + (block * regions->block_size)));
102020a0:	e0bff417 	ldw	r2,-48(fp)
102020a4:	10c00017 	ldw	r3,0(r2)
102020a8:	e0bff417 	ldw	r2,-48(fp)
102020ac:	11000317 	ldw	r4,12(r2)
102020b0:	e0bfef17 	ldw	r2,-68(fp)
102020b4:	2085383a 	mul	r2,r4,r2
102020b8:	1885883a 	add	r2,r3,r2
102020bc:	010408b4 	movhi	r4,4130
102020c0:	2133b604 	addi	r4,r4,-12584
102020c4:	e17fef17 	ldw	r5,-68(fp)
102020c8:	100d883a 	mov	r6,r2
102020cc:	0202f2c0 	call	10202f2c <printf>
        printf(" -Would you like to test this block? (y/n)");
102020d0:	010408b4 	movhi	r4,4130
102020d4:	2133c104 	addi	r4,r4,-12540
102020d8:	0202f2c0 	call	10202f2c <printf>

        GetInputString(entry, sizeof(entry), stdin);
102020dc:	008408b4 	movhi	r2,4130
102020e0:	10bd0604 	addi	r2,r2,-3048
102020e4:	10800017 	ldw	r2,0(r2)
102020e8:	10800117 	ldw	r2,4(r2)
102020ec:	e0fff504 	addi	r3,fp,-44
102020f0:	1809883a 	mov	r4,r3
102020f4:	01400104 	movi	r5,4
102020f8:	100d883a 	mov	r6,r2
102020fc:	02003800 	call	10200380 <GetInputString>

        if ( entry[0] == 'y' && entry[1] == '\n' )
10202100:	e0bff503 	ldbu	r2,-44(fp)
10202104:	10803fcc 	andi	r2,r2,255
10202108:	1080201c 	xori	r2,r2,128
1020210c:	10bfe004 	addi	r2,r2,-128
10202110:	10801e58 	cmpnei	r2,r2,121
10202114:	1000181e 	bne	r2,zero,10202178 <TestFlash+0x1c0>
10202118:	e0bff543 	ldbu	r2,-43(fp)
1020211c:	10803fcc 	andi	r2,r2,255
10202120:	1080201c 	xori	r2,r2,128
10202124:	10bfe004 	addi	r2,r2,-128
10202128:	10800298 	cmpnei	r2,r2,10
1020212c:	1000121e 	bne	r2,zero,10202178 <TestFlash+0x1c0>
        {
          /* Test that Flash! */
          FlashRunTests(fd, block, regions);
10202130:	e0bff417 	ldw	r2,-48(fp)
10202134:	e13fee17 	ldw	r4,-72(fp)
10202138:	e17fef17 	ldw	r5,-68(fp)
1020213c:	100d883a 	mov	r6,r2
10202140:	02016dc0 	call	102016dc <FlashRunTests>
          printf(" -Closing flash device \"%s\".\n", flashname);
10202144:	e0bff604 	addi	r2,fp,-40
10202148:	010408b4 	movhi	r4,4130
1020214c:	2133cc04 	addi	r4,r4,-12496
10202150:	100b883a 	mov	r5,r2
10202154:	0202f2c0 	call	10202f2c <printf>
          alt_flash_close_dev(fd);
10202158:	e13fee17 	ldw	r4,-72(fp)
1020215c:	02184b80 	call	102184b8 <alt_flash_close_dev>
10202160:	00000506 	br	10202178 <TestFlash+0x1c0>
      }
    }
  }
  else
  {
    printf(" -ERROR: Could not open %s\n", flashname);   
10202164:	e0bff604 	addi	r2,fp,-40
10202168:	010408b4 	movhi	r4,4130
1020216c:	2133d404 	addi	r4,r4,-12464
10202170:	100b883a 	mov	r5,r2
10202174:	0202f2c0 	call	10202f2c <printf>
  }
}
10202178:	e037883a 	mov	sp,fp
1020217c:	dfc00117 	ldw	ra,4(sp)
10202180:	df000017 	ldw	fp,0(sp)
10202184:	dec00204 	addi	sp,sp,8
10202188:	f800283a 	ret

1020218c <TopMenu>:
*
*  Purpose: Generates the top level menu.
* 
******************************************************************/
static int TopMenu( void )
{
1020218c:	defffd04 	addi	sp,sp,-12
10202190:	dfc00215 	stw	ra,8(sp)
10202194:	df000115 	stw	fp,4(sp)
10202198:	df000104 	addi	fp,sp,4
  char ch;

  /* Print the top-level menu to stdout */
  while (1)
  {
    MenuBegin("      Memory Test Main Menu");
1020219c:	010408b4 	movhi	r4,4130
102021a0:	2133db04 	addi	r4,r4,-12436
102021a4:	02002e40 	call	102002e4 <MenuBegin>
    MenuItem( 'a', "Test RAM" );
102021a8:	01001844 	movi	r4,97
102021ac:	014408b4 	movhi	r5,4130
102021b0:	2973e204 	addi	r5,r5,-12408
102021b4:	02003380 	call	10200338 <MenuItem>
    MenuItem( 'b', "Test Flash");
102021b8:	01001884 	movi	r4,98
102021bc:	014408b4 	movhi	r5,4130
102021c0:	2973e504 	addi	r5,r5,-12396
102021c4:	02003380 	call	10200338 <MenuItem>
#ifdef EPCS_CONTROLLER_NAME    
    MenuItem( 'c', "Test EPCS Serial Flash");
    ch = MenuEnd( 'a', 'c' );    
#else
    ch = MenuEnd( 'a', 'b' );
102021c8:	01001844 	movi	r4,97
102021cc:	01401884 	movi	r5,98
102021d0:	020040c0 	call	1020040c <MenuEnd>
102021d4:	e0bfff05 	stb	r2,-4(fp)
#endif /* EPCS_CONTROLLER_NAME */

    switch(ch)
102021d8:	e0bfff07 	ldb	r2,-4(fp)
102021dc:	10bfe7c4 	addi	r2,r2,-97
102021e0:	10c00468 	cmpgeui	r3,r2,17
102021e4:	1800241e 	bne	r3,zero,10202278 <TopMenu+0xec>
102021e8:	100690ba 	slli	r3,r2,2
102021ec:	00840834 	movhi	r2,4128
102021f0:	10888004 	addi	r2,r2,8704
102021f4:	1885883a 	add	r2,r3,r2
102021f8:	10800017 	ldw	r2,0(r2)
102021fc:	1000683a 	jmp	r2
10202200:	10202244 	addi	zero,r2,-32631
10202204:	1020224c 	andi	zero,r2,32905
10202208:	10202278 	rdprs	zero,r2,-32631
1020220c:	10202278 	rdprs	zero,r2,-32631
10202210:	1020225c 	xori	zero,r2,32905
10202214:	10202278 	rdprs	zero,r2,-32631
10202218:	10202278 	rdprs	zero,r2,-32631
1020221c:	10202278 	rdprs	zero,r2,-32631
10202220:	10202278 	rdprs	zero,r2,-32631
10202224:	10202278 	rdprs	zero,r2,-32631
10202228:	10202278 	rdprs	zero,r2,-32631
1020222c:	10202278 	rdprs	zero,r2,-32631
10202230:	10202268 	cmpgeui	zero,r2,32905
10202234:	10202278 	rdprs	zero,r2,-32631
10202238:	10202278 	rdprs	zero,r2,-32631
1020223c:	10202278 	rdprs	zero,r2,-32631
10202240:	10202290 	cmplti	zero,r2,-32630
    {
      MenuCase('a',TestRam());
10202244:	0200c540 	call	10200c54 <TestRam>
10202248:	00001206 	br	10202294 <TopMenu+0x108>
      MenuCase('b',TestFlash(TEST, CFI));
1020224c:	01000044 	movi	r4,1
10202250:	014000c4 	movi	r5,3
10202254:	0201fb80 	call	10201fb8 <TestFlash>
10202258:	00000e06 	br	10202294 <TopMenu+0x108>
      MenuCase('e',FlashErase(CFI));       /* hidden option */
1020225c:	010000c4 	movi	r4,3
10202260:	02019b00 	call	102019b0 <FlashErase>
10202264:	00000b06 	br	10202294 <TopMenu+0x108>
      MenuCase('m',TestFlash(SHOWMAP, CFI)); /* hidden option */
10202268:	01000084 	movi	r4,2
1020226c:	014000c4 	movi	r5,3
10202270:	0201fb80 	call	10201fb8 <TestFlash>
10202274:	00000706 	br	10202294 <TopMenu+0x108>
      MenuCase('c',TestFlash(TEST, EPCS));
      MenuCase('f',FlashErase(EPCS));       /* hidden option */
      MenuCase('s',TestFlash(SHOWMAP, EPCS)); /* hidden option */
#endif /* EPCS_CONTROLLER_NAME */
      case 'q':	break;
      default:	printf("\n -ERROR: %c is an invalid entry.  Please try again\n", ch); break;
10202278:	e0bfff07 	ldb	r2,-4(fp)
1020227c:	010408b4 	movhi	r4,4130
10202280:	2133e804 	addi	r4,r4,-12384
10202284:	100b883a 	mov	r5,r2
10202288:	0202f2c0 	call	10202f2c <printf>
1020228c:	00000106 	br	10202294 <TopMenu+0x108>
#ifdef EPCS_CONTROLLER_NAME    
      MenuCase('c',TestFlash(TEST, EPCS));
      MenuCase('f',FlashErase(EPCS));       /* hidden option */
      MenuCase('s',TestFlash(SHOWMAP, EPCS)); /* hidden option */
#endif /* EPCS_CONTROLLER_NAME */
      case 'q':	break;
10202290:	0001883a 	nop
      default:	printf("\n -ERROR: %c is an invalid entry.  Please try again\n", ch); break;
    }
    if (ch == 'q')
10202294:	e0bfff07 	ldb	r2,-4(fp)
10202298:	10801c58 	cmpnei	r2,r2,113
1020229c:	1000011e 	bne	r2,zero,102022a4 <TopMenu+0x118>
      break;
102022a0:	00001206 	br	102022ec <TopMenu+0x160>
    printf("\nPress enter to continue...\n");
102022a4:	010408b4 	movhi	r4,4130
102022a8:	2133f604 	addi	r4,r4,-12328
102022ac:	02030300 	call	10203030 <puts>
    while( (( ch = getc(stdin)) != '\n' ) && ( ch != EOF ));
102022b0:	0001883a 	nop
102022b4:	008408b4 	movhi	r2,4130
102022b8:	10bd0604 	addi	r2,r2,-3048
102022bc:	10800017 	ldw	r2,0(r2)
102022c0:	10800117 	ldw	r2,4(r2)
102022c4:	1009883a 	mov	r4,r2
102022c8:	02024f40 	call	102024f4 <getc>
102022cc:	e0bfff05 	stb	r2,-4(fp)
102022d0:	e0bfff07 	ldb	r2,-4(fp)
102022d4:	108002a0 	cmpeqi	r2,r2,10
102022d8:	1000031e 	bne	r2,zero,102022e8 <TopMenu+0x15c>
102022dc:	e0bfff07 	ldb	r2,-4(fp)
102022e0:	10bfffd8 	cmpnei	r2,r2,-1
102022e4:	103ff31e 	bne	r2,zero,102022b4 <TopMenu+0x128>

  }
102022e8:	003fac06 	br	1020219c <TopMenu+0x10>
  return (ch);
102022ec:	e0bfff07 	ldb	r2,-4(fp)
}
102022f0:	e037883a 	mov	sp,fp
102022f4:	dfc00117 	ldw	ra,4(sp)
102022f8:	df000017 	ldw	fp,0(sp)
102022fc:	dec00204 	addi	sp,sp,8
10202300:	f800283a 	ret

10202304 <main>:
*  Purpose: Continually prints the menu and performs the actions
*           requested by the user.
* 
******************************************************************/
int main(void)
{
10202304:	defffd04 	addi	sp,sp,-12
10202308:	dfc00215 	stw	ra,8(sp)
1020230c:	df000115 	stw	fp,4(sp)
10202310:	df000104 	addi	fp,sp,4

  int ch;

  /* Print the Header */
  MenuHeader();
10202314:	020026c0 	call	1020026c <MenuHeader>
  /* Print the menu and do what the user requests, until they hit 'q' */
  while (1)
  {
    ch = TopMenu();
10202318:	020218c0 	call	1020218c <TopMenu>
1020231c:	e0bfff15 	stw	r2,-4(fp)
    if (ch == 'q')
10202320:	e0bfff17 	ldw	r2,-4(fp)
10202324:	10801c58 	cmpnei	r2,r2,113
10202328:	1000041e 	bne	r2,zero,1020233c <main+0x38>
    {
      printf( "\nExiting from Memory Test.\n");
1020232c:	010408b4 	movhi	r4,4130
10202330:	2133fd04 	addi	r4,r4,-12300
10202334:	02030300 	call	10203030 <puts>
      break;
10202338:	00000106 	br	10202340 <main+0x3c>
    }
  }
1020233c:	003ff606 	br	10202318 <main+0x14>
  return (0);
10202340:	0005883a 	mov	r2,zero
}
10202344:	e037883a 	mov	sp,fp
10202348:	dfc00117 	ldw	ra,4(sp)
1020234c:	df000017 	ldw	fp,0(sp)
10202350:	dec00204 	addi	sp,sp,8
10202354:	f800283a 	ret

10202358 <udivmodsi4>:
10202358:	2900182e 	bgeu	r5,r4,102023bc <udivmodsi4+0x64>
1020235c:	28001716 	blt	r5,zero,102023bc <udivmodsi4+0x64>
10202360:	00800804 	movi	r2,32
10202364:	00c00044 	movi	r3,1
10202368:	00000206 	br	10202374 <udivmodsi4+0x1c>
1020236c:	10001126 	beq	r2,zero,102023b4 <udivmodsi4+0x5c>
10202370:	28000516 	blt	r5,zero,10202388 <udivmodsi4+0x30>
10202374:	294b883a 	add	r5,r5,r5
10202378:	10bfffc4 	addi	r2,r2,-1
1020237c:	18c7883a 	add	r3,r3,r3
10202380:	293ffa36 	bltu	r5,r4,1020236c <udivmodsi4+0x14>
10202384:	18000b26 	beq	r3,zero,102023b4 <udivmodsi4+0x5c>
10202388:	0005883a 	mov	r2,zero
1020238c:	21400236 	bltu	r4,r5,10202398 <udivmodsi4+0x40>
10202390:	2149c83a 	sub	r4,r4,r5
10202394:	10c4b03a 	or	r2,r2,r3
10202398:	1806d07a 	srli	r3,r3,1
1020239c:	280ad07a 	srli	r5,r5,1
102023a0:	183ffa1e 	bne	r3,zero,1020238c <udivmodsi4+0x34>
102023a4:	3000011e 	bne	r6,zero,102023ac <udivmodsi4+0x54>
102023a8:	f800283a 	ret
102023ac:	2005883a 	mov	r2,r4
102023b0:	f800283a 	ret
102023b4:	0005883a 	mov	r2,zero
102023b8:	003ffa06 	br	102023a4 <udivmodsi4+0x4c>
102023bc:	00c00044 	movi	r3,1
102023c0:	003ff106 	br	10202388 <udivmodsi4+0x30>

102023c4 <__divsi3>:
102023c4:	defffe04 	addi	sp,sp,-8
102023c8:	dfc00115 	stw	ra,4(sp)
102023cc:	dc000015 	stw	r16,0(sp)
102023d0:	20000b16 	blt	r4,zero,10202400 <__divsi3+0x3c>
102023d4:	0021883a 	mov	r16,zero
102023d8:	28000c16 	blt	r5,zero,1020240c <__divsi3+0x48>
102023dc:	000d883a 	mov	r6,zero
102023e0:	02023580 	call	10202358 <udivmodsi4>
102023e4:	0407c83a 	sub	r3,zero,r16
102023e8:	1884f03a 	xor	r2,r3,r2
102023ec:	1405883a 	add	r2,r2,r16
102023f0:	dfc00117 	ldw	ra,4(sp)
102023f4:	dc000017 	ldw	r16,0(sp)
102023f8:	dec00204 	addi	sp,sp,8
102023fc:	f800283a 	ret
10202400:	0109c83a 	sub	r4,zero,r4
10202404:	04000044 	movi	r16,1
10202408:	283ff40e 	bge	r5,zero,102023dc <__divsi3+0x18>
1020240c:	014bc83a 	sub	r5,zero,r5
10202410:	8400005c 	xori	r16,r16,1
10202414:	003ff106 	br	102023dc <__divsi3+0x18>

10202418 <__modsi3>:
10202418:	defffd04 	addi	sp,sp,-12
1020241c:	dfc00215 	stw	ra,8(sp)
10202420:	dc400115 	stw	r17,4(sp)
10202424:	dc000015 	stw	r16,0(sp)
10202428:	20000c16 	blt	r4,zero,1020245c <__modsi3+0x44>
1020242c:	0023883a 	mov	r17,zero
10202430:	0021883a 	mov	r16,zero
10202434:	28000d16 	blt	r5,zero,1020246c <__modsi3+0x54>
10202438:	01800044 	movi	r6,1
1020243c:	02023580 	call	10202358 <udivmodsi4>
10202440:	1404f03a 	xor	r2,r2,r16
10202444:	8885883a 	add	r2,r17,r2
10202448:	dfc00217 	ldw	ra,8(sp)
1020244c:	dc400117 	ldw	r17,4(sp)
10202450:	dc000017 	ldw	r16,0(sp)
10202454:	dec00304 	addi	sp,sp,12
10202458:	f800283a 	ret
1020245c:	0109c83a 	sub	r4,zero,r4
10202460:	04400044 	movi	r17,1
10202464:	043fffc4 	movi	r16,-1
10202468:	283ff30e 	bge	r5,zero,10202438 <__modsi3+0x20>
1020246c:	014bc83a 	sub	r5,zero,r5
10202470:	003ff106 	br	10202438 <__modsi3+0x20>

10202474 <__udivsi3>:
10202474:	000d883a 	mov	r6,zero
10202478:	02023581 	jmpi	10202358 <udivmodsi4>

1020247c <__umodsi3>:
1020247c:	01800044 	movi	r6,1
10202480:	02023581 	jmpi	10202358 <udivmodsi4>

10202484 <_getc_r>:
10202484:	defffd04 	addi	sp,sp,-12
10202488:	dc000115 	stw	r16,4(sp)
1020248c:	dfc00215 	stw	ra,8(sp)
10202490:	2021883a 	mov	r16,r4
10202494:	20000226 	beq	r4,zero,102024a0 <_getc_r+0x1c>
10202498:	20800e17 	ldw	r2,56(r4)
1020249c:	10000c26 	beq	r2,zero,102024d0 <_getc_r+0x4c>
102024a0:	28800117 	ldw	r2,4(r5)
102024a4:	10bfffc4 	addi	r2,r2,-1
102024a8:	28800115 	stw	r2,4(r5)
102024ac:	10000c16 	blt	r2,zero,102024e0 <_getc_r+0x5c>
102024b0:	28800017 	ldw	r2,0(r5)
102024b4:	10c00044 	addi	r3,r2,1
102024b8:	28c00015 	stw	r3,0(r5)
102024bc:	10800003 	ldbu	r2,0(r2)
102024c0:	dfc00217 	ldw	ra,8(sp)
102024c4:	dc000117 	ldw	r16,4(sp)
102024c8:	dec00304 	addi	sp,sp,12
102024cc:	f800283a 	ret
102024d0:	d9400015 	stw	r5,0(sp)
102024d4:	0208c200 	call	10208c20 <__sinit>
102024d8:	d9400017 	ldw	r5,0(sp)
102024dc:	003ff006 	br	102024a0 <_getc_r+0x1c>
102024e0:	8009883a 	mov	r4,r16
102024e4:	dfc00217 	ldw	ra,8(sp)
102024e8:	dc000117 	ldw	r16,4(sp)
102024ec:	dec00304 	addi	sp,sp,12
102024f0:	02030441 	jmpi	10203044 <__srget_r>

102024f4 <getc>:
102024f4:	008408b4 	movhi	r2,4130
102024f8:	defffd04 	addi	sp,sp,-12
102024fc:	10bd0604 	addi	r2,r2,-3048
10202500:	dc400115 	stw	r17,4(sp)
10202504:	14400017 	ldw	r17,0(r2)
10202508:	dc000015 	stw	r16,0(sp)
1020250c:	dfc00215 	stw	ra,8(sp)
10202510:	2021883a 	mov	r16,r4
10202514:	88000226 	beq	r17,zero,10202520 <getc+0x2c>
10202518:	88800e17 	ldw	r2,56(r17)
1020251c:	10000d26 	beq	r2,zero,10202554 <getc+0x60>
10202520:	80800117 	ldw	r2,4(r16)
10202524:	10bfffc4 	addi	r2,r2,-1
10202528:	80800115 	stw	r2,4(r16)
1020252c:	10000c16 	blt	r2,zero,10202560 <getc+0x6c>
10202530:	80800017 	ldw	r2,0(r16)
10202534:	10c00044 	addi	r3,r2,1
10202538:	80c00015 	stw	r3,0(r16)
1020253c:	10800003 	ldbu	r2,0(r2)
10202540:	dfc00217 	ldw	ra,8(sp)
10202544:	dc400117 	ldw	r17,4(sp)
10202548:	dc000017 	ldw	r16,0(sp)
1020254c:	dec00304 	addi	sp,sp,12
10202550:	f800283a 	ret
10202554:	8809883a 	mov	r4,r17
10202558:	0208c200 	call	10208c20 <__sinit>
1020255c:	003ff006 	br	10202520 <getc+0x2c>
10202560:	8809883a 	mov	r4,r17
10202564:	800b883a 	mov	r5,r16
10202568:	dfc00217 	ldw	ra,8(sp)
1020256c:	dc400117 	ldw	r17,4(sp)
10202570:	dc000017 	ldw	r16,0(sp)
10202574:	dec00304 	addi	sp,sp,12
10202578:	02030441 	jmpi	10203044 <__srget_r>

1020257c <malloc>:
1020257c:	008408b4 	movhi	r2,4130
10202580:	10bd0604 	addi	r2,r2,-3048
10202584:	200b883a 	mov	r5,r4
10202588:	11000017 	ldw	r4,0(r2)
1020258c:	02025a41 	jmpi	102025a4 <_malloc_r>

10202590 <free>:
10202590:	008408b4 	movhi	r2,4130
10202594:	10bd0604 	addi	r2,r2,-3048
10202598:	200b883a 	mov	r5,r4
1020259c:	11000017 	ldw	r4,0(r2)
102025a0:	0208d941 	jmpi	10208d94 <_free_r>

102025a4 <_malloc_r>:
102025a4:	defff504 	addi	sp,sp,-44
102025a8:	dc800315 	stw	r18,12(sp)
102025ac:	dfc00a15 	stw	ra,40(sp)
102025b0:	df000915 	stw	fp,36(sp)
102025b4:	ddc00815 	stw	r23,32(sp)
102025b8:	dd800715 	stw	r22,28(sp)
102025bc:	dd400615 	stw	r21,24(sp)
102025c0:	dd000515 	stw	r20,20(sp)
102025c4:	dcc00415 	stw	r19,16(sp)
102025c8:	dc400215 	stw	r17,8(sp)
102025cc:	dc000115 	stw	r16,4(sp)
102025d0:	288002c4 	addi	r2,r5,11
102025d4:	00c00584 	movi	r3,22
102025d8:	2025883a 	mov	r18,r4
102025dc:	18802a2e 	bgeu	r3,r2,10202688 <_malloc_r+0xe4>
102025e0:	047ffe04 	movi	r17,-8
102025e4:	1462703a 	and	r17,r2,r17
102025e8:	88009e16 	blt	r17,zero,10202864 <_malloc_r+0x2c0>
102025ec:	89409d36 	bltu	r17,r5,10202864 <_malloc_r+0x2c0>
102025f0:	021897c0 	call	1021897c <__malloc_lock>
102025f4:	00807dc4 	movi	r2,503
102025f8:	14402736 	bltu	r2,r17,10202698 <_malloc_r+0xf4>
102025fc:	8806d0fa 	srli	r3,r17,3
10202600:	04c408b4 	movhi	r19,4130
10202604:	9cf6ea04 	addi	r19,r19,-9304
10202608:	18c5883a 	add	r2,r3,r3
1020260c:	1085883a 	add	r2,r2,r2
10202610:	1085883a 	add	r2,r2,r2
10202614:	9885883a 	add	r2,r19,r2
10202618:	14000317 	ldw	r16,12(r2)
1020261c:	80814a26 	beq	r16,r2,10202b48 <_malloc_r+0x5a4>
10202620:	80c00117 	ldw	r3,4(r16)
10202624:	81000317 	ldw	r4,12(r16)
10202628:	00bfff04 	movi	r2,-4
1020262c:	1884703a 	and	r2,r3,r2
10202630:	81400217 	ldw	r5,8(r16)
10202634:	8085883a 	add	r2,r16,r2
10202638:	10c00117 	ldw	r3,4(r2)
1020263c:	29000315 	stw	r4,12(r5)
10202640:	21400215 	stw	r5,8(r4)
10202644:	18c00054 	ori	r3,r3,1
10202648:	10c00115 	stw	r3,4(r2)
1020264c:	9009883a 	mov	r4,r18
10202650:	021899c0 	call	1021899c <__malloc_unlock>
10202654:	80800204 	addi	r2,r16,8
10202658:	dfc00a17 	ldw	ra,40(sp)
1020265c:	df000917 	ldw	fp,36(sp)
10202660:	ddc00817 	ldw	r23,32(sp)
10202664:	dd800717 	ldw	r22,28(sp)
10202668:	dd400617 	ldw	r21,24(sp)
1020266c:	dd000517 	ldw	r20,20(sp)
10202670:	dcc00417 	ldw	r19,16(sp)
10202674:	dc800317 	ldw	r18,12(sp)
10202678:	dc400217 	ldw	r17,8(sp)
1020267c:	dc000117 	ldw	r16,4(sp)
10202680:	dec00b04 	addi	sp,sp,44
10202684:	f800283a 	ret
10202688:	04400404 	movi	r17,16
1020268c:	89407536 	bltu	r17,r5,10202864 <_malloc_r+0x2c0>
10202690:	021897c0 	call	1021897c <__malloc_lock>
10202694:	003fd906 	br	102025fc <_malloc_r+0x58>
10202698:	8806d27a 	srli	r3,r17,9
1020269c:	18007526 	beq	r3,zero,10202874 <_malloc_r+0x2d0>
102026a0:	00800104 	movi	r2,4
102026a4:	10c0ef36 	bltu	r2,r3,10202a64 <_malloc_r+0x4c0>
102026a8:	8806d1ba 	srli	r3,r17,6
102026ac:	19c00e04 	addi	r7,r3,56
102026b0:	39cb883a 	add	r5,r7,r7
102026b4:	04c408b4 	movhi	r19,4130
102026b8:	294b883a 	add	r5,r5,r5
102026bc:	9cf6ea04 	addi	r19,r19,-9304
102026c0:	294b883a 	add	r5,r5,r5
102026c4:	994b883a 	add	r5,r19,r5
102026c8:	2c000317 	ldw	r16,12(r5)
102026cc:	2c000e26 	beq	r5,r16,10202708 <_malloc_r+0x164>
102026d0:	80800117 	ldw	r2,4(r16)
102026d4:	01bfff04 	movi	r6,-4
102026d8:	010003c4 	movi	r4,15
102026dc:	1184703a 	and	r2,r2,r6
102026e0:	1447c83a 	sub	r3,r2,r17
102026e4:	20c00716 	blt	r4,r3,10202704 <_malloc_r+0x160>
102026e8:	1800650e 	bge	r3,zero,10202880 <_malloc_r+0x2dc>
102026ec:	84000317 	ldw	r16,12(r16)
102026f0:	2c000526 	beq	r5,r16,10202708 <_malloc_r+0x164>
102026f4:	80800117 	ldw	r2,4(r16)
102026f8:	1184703a 	and	r2,r2,r6
102026fc:	1447c83a 	sub	r3,r2,r17
10202700:	20fff90e 	bge	r4,r3,102026e8 <_malloc_r+0x144>
10202704:	39ffffc4 	addi	r7,r7,-1
10202708:	38c00044 	addi	r3,r7,1
1020270c:	018408b4 	movhi	r6,4130
10202710:	9c000417 	ldw	r16,16(r19)
10202714:	31b6ea04 	addi	r6,r6,-9304
10202718:	32400204 	addi	r9,r6,8
1020271c:	82410326 	beq	r16,r9,10202b2c <_malloc_r+0x588>
10202720:	81000117 	ldw	r4,4(r16)
10202724:	00bfff04 	movi	r2,-4
10202728:	208e703a 	and	r7,r4,r2
1020272c:	3c45c83a 	sub	r2,r7,r17
10202730:	010003c4 	movi	r4,15
10202734:	2080ee16 	blt	r4,r2,10202af0 <_malloc_r+0x54c>
10202738:	32400515 	stw	r9,20(r6)
1020273c:	32400415 	stw	r9,16(r6)
10202740:	1000510e 	bge	r2,zero,10202888 <_malloc_r+0x2e4>
10202744:	00807fc4 	movi	r2,511
10202748:	11c0ce36 	bltu	r2,r7,10202a84 <_malloc_r+0x4e0>
1020274c:	3808d0fa 	srli	r4,r7,3
10202750:	01c00044 	movi	r7,1
10202754:	30800117 	ldw	r2,4(r6)
10202758:	210b883a 	add	r5,r4,r4
1020275c:	294b883a 	add	r5,r5,r5
10202760:	2009d0ba 	srai	r4,r4,2
10202764:	294b883a 	add	r5,r5,r5
10202768:	298b883a 	add	r5,r5,r6
1020276c:	2a000217 	ldw	r8,8(r5)
10202770:	3908983a 	sll	r4,r7,r4
10202774:	81400315 	stw	r5,12(r16)
10202778:	82000215 	stw	r8,8(r16)
1020277c:	2088b03a 	or	r4,r4,r2
10202780:	2c000215 	stw	r16,8(r5)
10202784:	31000115 	stw	r4,4(r6)
10202788:	44000315 	stw	r16,12(r8)
1020278c:	1805d0ba 	srai	r2,r3,2
10202790:	01400044 	movi	r5,1
10202794:	288a983a 	sll	r5,r5,r2
10202798:	21404336 	bltu	r4,r5,102028a8 <_malloc_r+0x304>
1020279c:	2144703a 	and	r2,r4,r5
102027a0:	10000a1e 	bne	r2,zero,102027cc <_malloc_r+0x228>
102027a4:	00bfff04 	movi	r2,-4
102027a8:	294b883a 	add	r5,r5,r5
102027ac:	1886703a 	and	r3,r3,r2
102027b0:	2144703a 	and	r2,r4,r5
102027b4:	18c00104 	addi	r3,r3,4
102027b8:	1000041e 	bne	r2,zero,102027cc <_malloc_r+0x228>
102027bc:	294b883a 	add	r5,r5,r5
102027c0:	2144703a 	and	r2,r4,r5
102027c4:	18c00104 	addi	r3,r3,4
102027c8:	103ffc26 	beq	r2,zero,102027bc <_malloc_r+0x218>
102027cc:	023fff04 	movi	r8,-4
102027d0:	01c003c4 	movi	r7,15
102027d4:	18c5883a 	add	r2,r3,r3
102027d8:	1085883a 	add	r2,r2,r2
102027dc:	1085883a 	add	r2,r2,r2
102027e0:	9895883a 	add	r10,r19,r2
102027e4:	52c00304 	addi	r11,r10,12
102027e8:	1819883a 	mov	r12,r3
102027ec:	5c000017 	ldw	r16,0(r11)
102027f0:	59bffd04 	addi	r6,r11,-12
102027f4:	8180041e 	bne	r16,r6,10202808 <_malloc_r+0x264>
102027f8:	0000ce06 	br	10202b34 <_malloc_r+0x590>
102027fc:	2000d70e 	bge	r4,zero,10202b5c <_malloc_r+0x5b8>
10202800:	84000317 	ldw	r16,12(r16)
10202804:	8180cb26 	beq	r16,r6,10202b34 <_malloc_r+0x590>
10202808:	80800117 	ldw	r2,4(r16)
1020280c:	1204703a 	and	r2,r2,r8
10202810:	1449c83a 	sub	r4,r2,r17
10202814:	393ff90e 	bge	r7,r4,102027fc <_malloc_r+0x258>
10202818:	80800317 	ldw	r2,12(r16)
1020281c:	80c00217 	ldw	r3,8(r16)
10202820:	89400054 	ori	r5,r17,1
10202824:	81400115 	stw	r5,4(r16)
10202828:	18800315 	stw	r2,12(r3)
1020282c:	10c00215 	stw	r3,8(r2)
10202830:	8463883a 	add	r17,r16,r17
10202834:	9c400515 	stw	r17,20(r19)
10202838:	9c400415 	stw	r17,16(r19)
1020283c:	20800054 	ori	r2,r4,1
10202840:	88800115 	stw	r2,4(r17)
10202844:	8a400315 	stw	r9,12(r17)
10202848:	8a400215 	stw	r9,8(r17)
1020284c:	8923883a 	add	r17,r17,r4
10202850:	89000015 	stw	r4,0(r17)
10202854:	9009883a 	mov	r4,r18
10202858:	021899c0 	call	1021899c <__malloc_unlock>
1020285c:	80800204 	addi	r2,r16,8
10202860:	003f7d06 	br	10202658 <_malloc_r+0xb4>
10202864:	00800304 	movi	r2,12
10202868:	90800015 	stw	r2,0(r18)
1020286c:	0005883a 	mov	r2,zero
10202870:	003f7906 	br	10202658 <_malloc_r+0xb4>
10202874:	01401f84 	movi	r5,126
10202878:	01c00fc4 	movi	r7,63
1020287c:	003f8d06 	br	102026b4 <_malloc_r+0x110>
10202880:	81000317 	ldw	r4,12(r16)
10202884:	003f6a06 	br	10202630 <_malloc_r+0x8c>
10202888:	81c5883a 	add	r2,r16,r7
1020288c:	10c00117 	ldw	r3,4(r2)
10202890:	9009883a 	mov	r4,r18
10202894:	18c00054 	ori	r3,r3,1
10202898:	10c00115 	stw	r3,4(r2)
1020289c:	021899c0 	call	1021899c <__malloc_unlock>
102028a0:	80800204 	addi	r2,r16,8
102028a4:	003f6c06 	br	10202658 <_malloc_r+0xb4>
102028a8:	9c000217 	ldw	r16,8(r19)
102028ac:	00bfff04 	movi	r2,-4
102028b0:	85800117 	ldw	r22,4(r16)
102028b4:	b0ac703a 	and	r22,r22,r2
102028b8:	b4400336 	bltu	r22,r17,102028c8 <_malloc_r+0x324>
102028bc:	b445c83a 	sub	r2,r22,r17
102028c0:	00c003c4 	movi	r3,15
102028c4:	18805d16 	blt	r3,r2,10202a3c <_malloc_r+0x498>
102028c8:	05c408b4 	movhi	r23,4130
102028cc:	008408b4 	movhi	r2,4130
102028d0:	bdfd0704 	addi	r23,r23,-3044
102028d4:	10845704 	addi	r2,r2,4444
102028d8:	15400017 	ldw	r21,0(r2)
102028dc:	b9000017 	ldw	r4,0(r23)
102028e0:	00ffffc4 	movi	r3,-1
102028e4:	858d883a 	add	r6,r16,r22
102028e8:	8d6b883a 	add	r21,r17,r21
102028ec:	20c0e426 	beq	r4,r3,10202c80 <_malloc_r+0x6dc>
102028f0:	ad4403c4 	addi	r21,r21,4111
102028f4:	00fc0004 	movi	r3,-4096
102028f8:	a8ea703a 	and	r21,r21,r3
102028fc:	9009883a 	mov	r4,r18
10202900:	a80b883a 	mov	r5,r21
10202904:	d9800015 	stw	r6,0(sp)
10202908:	02030cc0 	call	102030cc <_sbrk_r>
1020290c:	00ffffc4 	movi	r3,-1
10202910:	1029883a 	mov	r20,r2
10202914:	d9800017 	ldw	r6,0(sp)
10202918:	10c0a426 	beq	r2,r3,10202bac <_malloc_r+0x608>
1020291c:	1180a236 	bltu	r2,r6,10202ba8 <_malloc_r+0x604>
10202920:	070408b4 	movhi	fp,4130
10202924:	e7046304 	addi	fp,fp,4492
10202928:	e0c00017 	ldw	r3,0(fp)
1020292c:	a8c7883a 	add	r3,r21,r3
10202930:	e0c00015 	stw	r3,0(fp)
10202934:	3500da26 	beq	r6,r20,10202ca0 <_malloc_r+0x6fc>
10202938:	b9000017 	ldw	r4,0(r23)
1020293c:	00bfffc4 	movi	r2,-1
10202940:	2080e426 	beq	r4,r2,10202cd4 <_malloc_r+0x730>
10202944:	a185c83a 	sub	r2,r20,r6
10202948:	1885883a 	add	r2,r3,r2
1020294c:	e0800015 	stw	r2,0(fp)
10202950:	a0c001cc 	andi	r3,r20,7
10202954:	1800b526 	beq	r3,zero,10202c2c <_malloc_r+0x688>
10202958:	a0e9c83a 	sub	r20,r20,r3
1020295c:	00840204 	movi	r2,4104
10202960:	a5000204 	addi	r20,r20,8
10202964:	10c7c83a 	sub	r3,r2,r3
10202968:	a545883a 	add	r2,r20,r21
1020296c:	1083ffcc 	andi	r2,r2,4095
10202970:	18abc83a 	sub	r21,r3,r2
10202974:	9009883a 	mov	r4,r18
10202978:	a80b883a 	mov	r5,r21
1020297c:	02030cc0 	call	102030cc <_sbrk_r>
10202980:	00ffffc4 	movi	r3,-1
10202984:	10c0d026 	beq	r2,r3,10202cc8 <_malloc_r+0x724>
10202988:	1507c83a 	sub	r3,r2,r20
1020298c:	a8c7883a 	add	r3,r21,r3
10202990:	18c00054 	ori	r3,r3,1
10202994:	e0800017 	ldw	r2,0(fp)
10202998:	9d000215 	stw	r20,8(r19)
1020299c:	a0c00115 	stw	r3,4(r20)
102029a0:	a887883a 	add	r3,r21,r2
102029a4:	e0c00015 	stw	r3,0(fp)
102029a8:	84c00e26 	beq	r16,r19,102029e4 <_malloc_r+0x440>
102029ac:	018003c4 	movi	r6,15
102029b0:	3580a02e 	bgeu	r6,r22,10202c34 <_malloc_r+0x690>
102029b4:	81400117 	ldw	r5,4(r16)
102029b8:	013ffe04 	movi	r4,-8
102029bc:	b0bffd04 	addi	r2,r22,-12
102029c0:	1104703a 	and	r2,r2,r4
102029c4:	2900004c 	andi	r4,r5,1
102029c8:	1108b03a 	or	r4,r2,r4
102029cc:	81000115 	stw	r4,4(r16)
102029d0:	01400144 	movi	r5,5
102029d4:	8089883a 	add	r4,r16,r2
102029d8:	21400115 	stw	r5,4(r4)
102029dc:	21400215 	stw	r5,8(r4)
102029e0:	3080c036 	bltu	r6,r2,10202ce4 <_malloc_r+0x740>
102029e4:	008408b4 	movhi	r2,4130
102029e8:	10845604 	addi	r2,r2,4440
102029ec:	11000017 	ldw	r4,0(r2)
102029f0:	20c0012e 	bgeu	r4,r3,102029f8 <_malloc_r+0x454>
102029f4:	10c00015 	stw	r3,0(r2)
102029f8:	008408b4 	movhi	r2,4130
102029fc:	10845504 	addi	r2,r2,4436
10202a00:	11000017 	ldw	r4,0(r2)
10202a04:	9c000217 	ldw	r16,8(r19)
10202a08:	20c0012e 	bgeu	r4,r3,10202a10 <_malloc_r+0x46c>
10202a0c:	10c00015 	stw	r3,0(r2)
10202a10:	80c00117 	ldw	r3,4(r16)
10202a14:	00bfff04 	movi	r2,-4
10202a18:	1886703a 	and	r3,r3,r2
10202a1c:	1c45c83a 	sub	r2,r3,r17
10202a20:	1c400236 	bltu	r3,r17,10202a2c <_malloc_r+0x488>
10202a24:	00c003c4 	movi	r3,15
10202a28:	18800416 	blt	r3,r2,10202a3c <_malloc_r+0x498>
10202a2c:	9009883a 	mov	r4,r18
10202a30:	021899c0 	call	1021899c <__malloc_unlock>
10202a34:	0005883a 	mov	r2,zero
10202a38:	003f0706 	br	10202658 <_malloc_r+0xb4>
10202a3c:	88c00054 	ori	r3,r17,1
10202a40:	80c00115 	stw	r3,4(r16)
10202a44:	8463883a 	add	r17,r16,r17
10202a48:	10800054 	ori	r2,r2,1
10202a4c:	9c400215 	stw	r17,8(r19)
10202a50:	88800115 	stw	r2,4(r17)
10202a54:	9009883a 	mov	r4,r18
10202a58:	021899c0 	call	1021899c <__malloc_unlock>
10202a5c:	80800204 	addi	r2,r16,8
10202a60:	003efd06 	br	10202658 <_malloc_r+0xb4>
10202a64:	00800504 	movi	r2,20
10202a68:	10c0482e 	bgeu	r2,r3,10202b8c <_malloc_r+0x5e8>
10202a6c:	00801504 	movi	r2,84
10202a70:	10c06836 	bltu	r2,r3,10202c14 <_malloc_r+0x670>
10202a74:	8806d33a 	srli	r3,r17,12
10202a78:	19c01b84 	addi	r7,r3,110
10202a7c:	39cb883a 	add	r5,r7,r7
10202a80:	003f0c06 	br	102026b4 <_malloc_r+0x110>
10202a84:	3804d27a 	srli	r2,r7,9
10202a88:	01000104 	movi	r4,4
10202a8c:	2080422e 	bgeu	r4,r2,10202b98 <_malloc_r+0x5f4>
10202a90:	01000504 	movi	r4,20
10202a94:	20807c36 	bltu	r4,r2,10202c88 <_malloc_r+0x6e4>
10202a98:	110016c4 	addi	r4,r2,91
10202a9c:	210b883a 	add	r5,r4,r4
10202aa0:	294b883a 	add	r5,r5,r5
10202aa4:	294b883a 	add	r5,r5,r5
10202aa8:	994b883a 	add	r5,r19,r5
10202aac:	28800217 	ldw	r2,8(r5)
10202ab0:	020408b4 	movhi	r8,4130
10202ab4:	4236ea04 	addi	r8,r8,-9304
10202ab8:	11406326 	beq	r2,r5,10202c48 <_malloc_r+0x6a4>
10202abc:	01bfff04 	movi	r6,-4
10202ac0:	11000117 	ldw	r4,4(r2)
10202ac4:	2188703a 	and	r4,r4,r6
10202ac8:	3900022e 	bgeu	r7,r4,10202ad4 <_malloc_r+0x530>
10202acc:	10800217 	ldw	r2,8(r2)
10202ad0:	28bffb1e 	bne	r5,r2,10202ac0 <_malloc_r+0x51c>
10202ad4:	11800317 	ldw	r6,12(r2)
10202ad8:	99000117 	ldw	r4,4(r19)
10202adc:	81800315 	stw	r6,12(r16)
10202ae0:	80800215 	stw	r2,8(r16)
10202ae4:	34000215 	stw	r16,8(r6)
10202ae8:	14000315 	stw	r16,12(r2)
10202aec:	003f2706 	br	1020278c <_malloc_r+0x1e8>
10202af0:	88c00054 	ori	r3,r17,1
10202af4:	80c00115 	stw	r3,4(r16)
10202af8:	8463883a 	add	r17,r16,r17
10202afc:	34400515 	stw	r17,20(r6)
10202b00:	34400415 	stw	r17,16(r6)
10202b04:	10c00054 	ori	r3,r2,1
10202b08:	8a400315 	stw	r9,12(r17)
10202b0c:	8a400215 	stw	r9,8(r17)
10202b10:	88c00115 	stw	r3,4(r17)
10202b14:	88a3883a 	add	r17,r17,r2
10202b18:	88800015 	stw	r2,0(r17)
10202b1c:	9009883a 	mov	r4,r18
10202b20:	021899c0 	call	1021899c <__malloc_unlock>
10202b24:	80800204 	addi	r2,r16,8
10202b28:	003ecb06 	br	10202658 <_malloc_r+0xb4>
10202b2c:	31000117 	ldw	r4,4(r6)
10202b30:	003f1606 	br	1020278c <_malloc_r+0x1e8>
10202b34:	63000044 	addi	r12,r12,1
10202b38:	608000cc 	andi	r2,r12,3
10202b3c:	5ac00204 	addi	r11,r11,8
10202b40:	103f2a1e 	bne	r2,zero,102027ec <_malloc_r+0x248>
10202b44:	00002106 	br	10202bcc <_malloc_r+0x628>
10202b48:	80800204 	addi	r2,r16,8
10202b4c:	84000517 	ldw	r16,20(r16)
10202b50:	143eb31e 	bne	r2,r16,10202620 <_malloc_r+0x7c>
10202b54:	18c00084 	addi	r3,r3,2
10202b58:	003eec06 	br	1020270c <_malloc_r+0x168>
10202b5c:	8085883a 	add	r2,r16,r2
10202b60:	10c00117 	ldw	r3,4(r2)
10202b64:	81000317 	ldw	r4,12(r16)
10202b68:	81400217 	ldw	r5,8(r16)
10202b6c:	18c00054 	ori	r3,r3,1
10202b70:	10c00115 	stw	r3,4(r2)
10202b74:	29000315 	stw	r4,12(r5)
10202b78:	21400215 	stw	r5,8(r4)
10202b7c:	9009883a 	mov	r4,r18
10202b80:	021899c0 	call	1021899c <__malloc_unlock>
10202b84:	80800204 	addi	r2,r16,8
10202b88:	003eb306 	br	10202658 <_malloc_r+0xb4>
10202b8c:	19c016c4 	addi	r7,r3,91
10202b90:	39cb883a 	add	r5,r7,r7
10202b94:	003ec706 	br	102026b4 <_malloc_r+0x110>
10202b98:	3804d1ba 	srli	r2,r7,6
10202b9c:	11000e04 	addi	r4,r2,56
10202ba0:	210b883a 	add	r5,r4,r4
10202ba4:	003fbe06 	br	10202aa0 <_malloc_r+0x4fc>
10202ba8:	84ff5d26 	beq	r16,r19,10202920 <_malloc_r+0x37c>
10202bac:	9c000217 	ldw	r16,8(r19)
10202bb0:	00bfff04 	movi	r2,-4
10202bb4:	80c00117 	ldw	r3,4(r16)
10202bb8:	1886703a 	and	r3,r3,r2
10202bbc:	003f9706 	br	10202a1c <_malloc_r+0x478>
10202bc0:	52800017 	ldw	r10,0(r10)
10202bc4:	18ffffc4 	addi	r3,r3,-1
10202bc8:	50805c1e 	bne	r10,r2,10202d3c <_malloc_r+0x798>
10202bcc:	190000cc 	andi	r4,r3,3
10202bd0:	50bffe04 	addi	r2,r10,-8
10202bd4:	203ffa1e 	bne	r4,zero,10202bc0 <_malloc_r+0x61c>
10202bd8:	98800117 	ldw	r2,4(r19)
10202bdc:	0146303a 	nor	r3,zero,r5
10202be0:	1884703a 	and	r2,r3,r2
10202be4:	98800115 	stw	r2,4(r19)
10202be8:	294b883a 	add	r5,r5,r5
10202bec:	117f2e36 	bltu	r2,r5,102028a8 <_malloc_r+0x304>
10202bf0:	283f2d26 	beq	r5,zero,102028a8 <_malloc_r+0x304>
10202bf4:	1146703a 	and	r3,r2,r5
10202bf8:	1800521e 	bne	r3,zero,10202d44 <_malloc_r+0x7a0>
10202bfc:	6007883a 	mov	r3,r12
10202c00:	294b883a 	add	r5,r5,r5
10202c04:	1148703a 	and	r4,r2,r5
10202c08:	18c00104 	addi	r3,r3,4
10202c0c:	203ffc26 	beq	r4,zero,10202c00 <_malloc_r+0x65c>
10202c10:	003ef006 	br	102027d4 <_malloc_r+0x230>
10202c14:	00805504 	movi	r2,340
10202c18:	10c01336 	bltu	r2,r3,10202c68 <_malloc_r+0x6c4>
10202c1c:	8806d3fa 	srli	r3,r17,15
10202c20:	19c01dc4 	addi	r7,r3,119
10202c24:	39cb883a 	add	r5,r7,r7
10202c28:	003ea206 	br	102026b4 <_malloc_r+0x110>
10202c2c:	00c40004 	movi	r3,4096
10202c30:	003f4d06 	br	10202968 <_malloc_r+0x3c4>
10202c34:	00800044 	movi	r2,1
10202c38:	a0800115 	stw	r2,4(r20)
10202c3c:	a021883a 	mov	r16,r20
10202c40:	0007883a 	mov	r3,zero
10202c44:	003f7506 	br	10202a1c <_malloc_r+0x478>
10202c48:	200bd0ba 	srai	r5,r4,2
10202c4c:	01800044 	movi	r6,1
10202c50:	41000117 	ldw	r4,4(r8)
10202c54:	314a983a 	sll	r5,r6,r5
10202c58:	100d883a 	mov	r6,r2
10202c5c:	2908b03a 	or	r4,r5,r4
10202c60:	41000115 	stw	r4,4(r8)
10202c64:	003f9d06 	br	10202adc <_malloc_r+0x538>
10202c68:	00815504 	movi	r2,1364
10202c6c:	10c01336 	bltu	r2,r3,10202cbc <_malloc_r+0x718>
10202c70:	8806d4ba 	srli	r3,r17,18
10202c74:	19c01f04 	addi	r7,r3,124
10202c78:	39cb883a 	add	r5,r7,r7
10202c7c:	003e8d06 	br	102026b4 <_malloc_r+0x110>
10202c80:	ad400404 	addi	r21,r21,16
10202c84:	003f1d06 	br	102028fc <_malloc_r+0x358>
10202c88:	01001504 	movi	r4,84
10202c8c:	20801c36 	bltu	r4,r2,10202d00 <_malloc_r+0x75c>
10202c90:	3804d33a 	srli	r2,r7,12
10202c94:	11001b84 	addi	r4,r2,110
10202c98:	210b883a 	add	r5,r4,r4
10202c9c:	003f8006 	br	10202aa0 <_malloc_r+0x4fc>
10202ca0:	3083ffcc 	andi	r2,r6,4095
10202ca4:	103f241e 	bne	r2,zero,10202938 <_malloc_r+0x394>
10202ca8:	99000217 	ldw	r4,8(r19)
10202cac:	ad85883a 	add	r2,r21,r22
10202cb0:	10800054 	ori	r2,r2,1
10202cb4:	20800115 	stw	r2,4(r4)
10202cb8:	003f4a06 	br	102029e4 <_malloc_r+0x440>
10202cbc:	01403f04 	movi	r5,252
10202cc0:	01c01f84 	movi	r7,126
10202cc4:	003e7b06 	br	102026b4 <_malloc_r+0x110>
10202cc8:	00c00044 	movi	r3,1
10202ccc:	002b883a 	mov	r21,zero
10202cd0:	003f3006 	br	10202994 <_malloc_r+0x3f0>
10202cd4:	008408b4 	movhi	r2,4130
10202cd8:	10bd0704 	addi	r2,r2,-3044
10202cdc:	15000015 	stw	r20,0(r2)
10202ce0:	003f1b06 	br	10202950 <_malloc_r+0x3ac>
10202ce4:	9009883a 	mov	r4,r18
10202ce8:	81400204 	addi	r5,r16,8
10202cec:	0208d940 	call	10208d94 <_free_r>
10202cf0:	008408b4 	movhi	r2,4130
10202cf4:	10846304 	addi	r2,r2,4492
10202cf8:	10c00017 	ldw	r3,0(r2)
10202cfc:	003f3906 	br	102029e4 <_malloc_r+0x440>
10202d00:	01005504 	movi	r4,340
10202d04:	20800436 	bltu	r4,r2,10202d18 <_malloc_r+0x774>
10202d08:	3804d3fa 	srli	r2,r7,15
10202d0c:	11001dc4 	addi	r4,r2,119
10202d10:	210b883a 	add	r5,r4,r4
10202d14:	003f6206 	br	10202aa0 <_malloc_r+0x4fc>
10202d18:	01015504 	movi	r4,1364
10202d1c:	20800436 	bltu	r4,r2,10202d30 <_malloc_r+0x78c>
10202d20:	3804d4ba 	srli	r2,r7,18
10202d24:	11001f04 	addi	r4,r2,124
10202d28:	210b883a 	add	r5,r4,r4
10202d2c:	003f5c06 	br	10202aa0 <_malloc_r+0x4fc>
10202d30:	01403f04 	movi	r5,252
10202d34:	01001f84 	movi	r4,126
10202d38:	003f5906 	br	10202aa0 <_malloc_r+0x4fc>
10202d3c:	98800117 	ldw	r2,4(r19)
10202d40:	003fa906 	br	10202be8 <_malloc_r+0x644>
10202d44:	6007883a 	mov	r3,r12
10202d48:	003ea206 	br	102027d4 <_malloc_r+0x230>

10202d4c <memcmp>:
10202d4c:	01c000c4 	movi	r7,3
10202d50:	3980192e 	bgeu	r7,r6,10202db8 <memcmp+0x6c>
10202d54:	2144b03a 	or	r2,r4,r5
10202d58:	11c4703a 	and	r2,r2,r7
10202d5c:	10000f26 	beq	r2,zero,10202d9c <memcmp+0x50>
10202d60:	20800003 	ldbu	r2,0(r4)
10202d64:	28c00003 	ldbu	r3,0(r5)
10202d68:	10c0151e 	bne	r2,r3,10202dc0 <memcmp+0x74>
10202d6c:	31bfff84 	addi	r6,r6,-2
10202d70:	01ffffc4 	movi	r7,-1
10202d74:	00000406 	br	10202d88 <memcmp+0x3c>
10202d78:	20800003 	ldbu	r2,0(r4)
10202d7c:	28c00003 	ldbu	r3,0(r5)
10202d80:	31bfffc4 	addi	r6,r6,-1
10202d84:	10c00e1e 	bne	r2,r3,10202dc0 <memcmp+0x74>
10202d88:	21000044 	addi	r4,r4,1
10202d8c:	29400044 	addi	r5,r5,1
10202d90:	31fff91e 	bne	r6,r7,10202d78 <memcmp+0x2c>
10202d94:	0005883a 	mov	r2,zero
10202d98:	f800283a 	ret
10202d9c:	20c00017 	ldw	r3,0(r4)
10202da0:	28800017 	ldw	r2,0(r5)
10202da4:	1880041e 	bne	r3,r2,10202db8 <memcmp+0x6c>
10202da8:	31bfff04 	addi	r6,r6,-4
10202dac:	21000104 	addi	r4,r4,4
10202db0:	29400104 	addi	r5,r5,4
10202db4:	39bff936 	bltu	r7,r6,10202d9c <memcmp+0x50>
10202db8:	303fe91e 	bne	r6,zero,10202d60 <memcmp+0x14>
10202dbc:	003ff506 	br	10202d94 <memcmp+0x48>
10202dc0:	10c5c83a 	sub	r2,r2,r3
10202dc4:	f800283a 	ret

10202dc8 <memcpy>:
10202dc8:	deffff04 	addi	sp,sp,-4
10202dcc:	dc000015 	stw	r16,0(sp)
10202dd0:	00c003c4 	movi	r3,15
10202dd4:	2005883a 	mov	r2,r4
10202dd8:	1980432e 	bgeu	r3,r6,10202ee8 <memcpy+0x120>
10202ddc:	2146b03a 	or	r3,r4,r5
10202de0:	18c000cc 	andi	r3,r3,3
10202de4:	1800421e 	bne	r3,zero,10202ef0 <memcpy+0x128>
10202de8:	343ffc04 	addi	r16,r6,-16
10202dec:	8020d13a 	srli	r16,r16,4
10202df0:	28c00104 	addi	r3,r5,4
10202df4:	23400104 	addi	r13,r4,4
10202df8:	801e913a 	slli	r15,r16,4
10202dfc:	2b000204 	addi	r12,r5,8
10202e00:	22c00204 	addi	r11,r4,8
10202e04:	7bc00504 	addi	r15,r15,20
10202e08:	2a800304 	addi	r10,r5,12
10202e0c:	22400304 	addi	r9,r4,12
10202e10:	2bdf883a 	add	r15,r5,r15
10202e14:	2811883a 	mov	r8,r5
10202e18:	200f883a 	mov	r7,r4
10202e1c:	41000017 	ldw	r4,0(r8)
10202e20:	39c00404 	addi	r7,r7,16
10202e24:	18c00404 	addi	r3,r3,16
10202e28:	393ffc15 	stw	r4,-16(r7)
10202e2c:	1bbffc17 	ldw	r14,-16(r3)
10202e30:	6b400404 	addi	r13,r13,16
10202e34:	5ac00404 	addi	r11,r11,16
10202e38:	6bbffc15 	stw	r14,-16(r13)
10202e3c:	63800017 	ldw	r14,0(r12)
10202e40:	4a400404 	addi	r9,r9,16
10202e44:	42000404 	addi	r8,r8,16
10202e48:	5bbffc15 	stw	r14,-16(r11)
10202e4c:	53800017 	ldw	r14,0(r10)
10202e50:	63000404 	addi	r12,r12,16
10202e54:	52800404 	addi	r10,r10,16
10202e58:	4bbffc15 	stw	r14,-16(r9)
10202e5c:	1bffef1e 	bne	r3,r15,10202e1c <memcpy+0x54>
10202e60:	81c00044 	addi	r7,r16,1
10202e64:	380e913a 	slli	r7,r7,4
10202e68:	310003cc 	andi	r4,r6,15
10202e6c:	02c000c4 	movi	r11,3
10202e70:	11c7883a 	add	r3,r2,r7
10202e74:	29cb883a 	add	r5,r5,r7
10202e78:	59001f2e 	bgeu	r11,r4,10202ef8 <memcpy+0x130>
10202e7c:	1813883a 	mov	r9,r3
10202e80:	2811883a 	mov	r8,r5
10202e84:	200f883a 	mov	r7,r4
10202e88:	42800017 	ldw	r10,0(r8)
10202e8c:	4a400104 	addi	r9,r9,4
10202e90:	39ffff04 	addi	r7,r7,-4
10202e94:	4abfff15 	stw	r10,-4(r9)
10202e98:	42000104 	addi	r8,r8,4
10202e9c:	59fffa36 	bltu	r11,r7,10202e88 <memcpy+0xc0>
10202ea0:	213fff04 	addi	r4,r4,-4
10202ea4:	2008d0ba 	srli	r4,r4,2
10202ea8:	318000cc 	andi	r6,r6,3
10202eac:	21000044 	addi	r4,r4,1
10202eb0:	2109883a 	add	r4,r4,r4
10202eb4:	2109883a 	add	r4,r4,r4
10202eb8:	1907883a 	add	r3,r3,r4
10202ebc:	290b883a 	add	r5,r5,r4
10202ec0:	30000626 	beq	r6,zero,10202edc <memcpy+0x114>
10202ec4:	198d883a 	add	r6,r3,r6
10202ec8:	29c00003 	ldbu	r7,0(r5)
10202ecc:	18c00044 	addi	r3,r3,1
10202ed0:	29400044 	addi	r5,r5,1
10202ed4:	19ffffc5 	stb	r7,-1(r3)
10202ed8:	19bffb1e 	bne	r3,r6,10202ec8 <memcpy+0x100>
10202edc:	dc000017 	ldw	r16,0(sp)
10202ee0:	dec00104 	addi	sp,sp,4
10202ee4:	f800283a 	ret
10202ee8:	2007883a 	mov	r3,r4
10202eec:	003ff406 	br	10202ec0 <memcpy+0xf8>
10202ef0:	2007883a 	mov	r3,r4
10202ef4:	003ff306 	br	10202ec4 <memcpy+0xfc>
10202ef8:	200d883a 	mov	r6,r4
10202efc:	003ff006 	br	10202ec0 <memcpy+0xf8>

10202f00 <_printf_r>:
10202f00:	defffd04 	addi	sp,sp,-12
10202f04:	dfc00015 	stw	ra,0(sp)
10202f08:	d9800115 	stw	r6,4(sp)
10202f0c:	d9c00215 	stw	r7,8(sp)
10202f10:	280d883a 	mov	r6,r5
10202f14:	21400217 	ldw	r5,8(r4)
10202f18:	d9c00104 	addi	r7,sp,4
10202f1c:	0204ae00 	call	10204ae0 <___vfprintf_internal_r>
10202f20:	dfc00017 	ldw	ra,0(sp)
10202f24:	dec00304 	addi	sp,sp,12
10202f28:	f800283a 	ret

10202f2c <printf>:
10202f2c:	defffc04 	addi	sp,sp,-16
10202f30:	dfc00015 	stw	ra,0(sp)
10202f34:	d9400115 	stw	r5,4(sp)
10202f38:	d9800215 	stw	r6,8(sp)
10202f3c:	d9c00315 	stw	r7,12(sp)
10202f40:	008408b4 	movhi	r2,4130
10202f44:	10bd0604 	addi	r2,r2,-3048
10202f48:	10800017 	ldw	r2,0(r2)
10202f4c:	200b883a 	mov	r5,r4
10202f50:	d9800104 	addi	r6,sp,4
10202f54:	11000217 	ldw	r4,8(r2)
10202f58:	0206a300 	call	10206a30 <__vfprintf_internal>
10202f5c:	dfc00017 	ldw	ra,0(sp)
10202f60:	dec00404 	addi	sp,sp,16
10202f64:	f800283a 	ret

10202f68 <_putchar_r>:
10202f68:	21800217 	ldw	r6,8(r4)
10202f6c:	020af1c1 	jmpi	1020af1c <_putc_r>

10202f70 <putchar>:
10202f70:	008408b4 	movhi	r2,4130
10202f74:	10bd0604 	addi	r2,r2,-3048
10202f78:	200b883a 	mov	r5,r4
10202f7c:	11000017 	ldw	r4,0(r2)
10202f80:	21800217 	ldw	r6,8(r4)
10202f84:	020af1c1 	jmpi	1020af1c <_putc_r>

10202f88 <_puts_r>:
10202f88:	defff604 	addi	sp,sp,-40
10202f8c:	dc000715 	stw	r16,28(sp)
10202f90:	2021883a 	mov	r16,r4
10202f94:	2809883a 	mov	r4,r5
10202f98:	dc400815 	stw	r17,32(sp)
10202f9c:	dfc00915 	stw	ra,36(sp)
10202fa0:	2823883a 	mov	r17,r5
10202fa4:	02033500 	call	10203350 <strlen>
10202fa8:	81400217 	ldw	r5,8(r16)
10202fac:	11000044 	addi	r4,r2,1
10202fb0:	d8800115 	stw	r2,4(sp)
10202fb4:	008408b4 	movhi	r2,4130
10202fb8:	2980030b 	ldhu	r6,12(r5)
10202fbc:	10b40504 	addi	r2,r2,-12268
10202fc0:	d8800215 	stw	r2,8(sp)
10202fc4:	00800044 	movi	r2,1
10202fc8:	d8800315 	stw	r2,12(sp)
10202fcc:	00800084 	movi	r2,2
10202fd0:	d8800515 	stw	r2,20(sp)
10202fd4:	dc400015 	stw	r17,0(sp)
10202fd8:	d9000615 	stw	r4,24(sp)
10202fdc:	dec00415 	stw	sp,16(sp)
10202fe0:	3088000c 	andi	r2,r6,8192
10202fe4:	1000061e 	bne	r2,zero,10203000 <_puts_r+0x78>
10202fe8:	29001917 	ldw	r4,100(r5)
10202fec:	00b7ffc4 	movi	r2,-8193
10202ff0:	31880014 	ori	r6,r6,8192
10202ff4:	2084703a 	and	r2,r4,r2
10202ff8:	2980030d 	sth	r6,12(r5)
10202ffc:	28801915 	stw	r2,100(r5)
10203000:	8009883a 	mov	r4,r16
10203004:	d9800404 	addi	r6,sp,16
10203008:	02090840 	call	10209084 <__sfvwrite_r>
1020300c:	1000061e 	bne	r2,zero,10203028 <_puts_r+0xa0>
10203010:	00800284 	movi	r2,10
10203014:	dfc00917 	ldw	ra,36(sp)
10203018:	dc400817 	ldw	r17,32(sp)
1020301c:	dc000717 	ldw	r16,28(sp)
10203020:	dec00a04 	addi	sp,sp,40
10203024:	f800283a 	ret
10203028:	00bfffc4 	movi	r2,-1
1020302c:	003ff906 	br	10203014 <_puts_r+0x8c>

10203030 <puts>:
10203030:	008408b4 	movhi	r2,4130
10203034:	10bd0604 	addi	r2,r2,-3048
10203038:	200b883a 	mov	r5,r4
1020303c:	11000017 	ldw	r4,0(r2)
10203040:	0202f881 	jmpi	10202f88 <_puts_r>

10203044 <__srget_r>:
10203044:	defffd04 	addi	sp,sp,-12
10203048:	dc400115 	stw	r17,4(sp)
1020304c:	dc000015 	stw	r16,0(sp)
10203050:	dfc00215 	stw	ra,8(sp)
10203054:	2023883a 	mov	r17,r4
10203058:	2821883a 	mov	r16,r5
1020305c:	20000226 	beq	r4,zero,10203068 <__srget_r+0x24>
10203060:	20800e17 	ldw	r2,56(r4)
10203064:	10001026 	beq	r2,zero,102030a8 <__srget_r+0x64>
10203068:	8809883a 	mov	r4,r17
1020306c:	800b883a 	mov	r5,r16
10203070:	020b6680 	call	1020b668 <__srefill_r>
10203074:	10000e1e 	bne	r2,zero,102030b0 <__srget_r+0x6c>
10203078:	80c00017 	ldw	r3,0(r16)
1020307c:	80800117 	ldw	r2,4(r16)
10203080:	19000044 	addi	r4,r3,1
10203084:	10bfffc4 	addi	r2,r2,-1
10203088:	80800115 	stw	r2,4(r16)
1020308c:	81000015 	stw	r4,0(r16)
10203090:	18800003 	ldbu	r2,0(r3)
10203094:	dfc00217 	ldw	ra,8(sp)
10203098:	dc400117 	ldw	r17,4(sp)
1020309c:	dc000017 	ldw	r16,0(sp)
102030a0:	dec00304 	addi	sp,sp,12
102030a4:	f800283a 	ret
102030a8:	0208c200 	call	10208c20 <__sinit>
102030ac:	003fee06 	br	10203068 <__srget_r+0x24>
102030b0:	00bfffc4 	movi	r2,-1
102030b4:	003ff706 	br	10203094 <__srget_r+0x50>

102030b8 <__srget>:
102030b8:	008408b4 	movhi	r2,4130
102030bc:	10bd0604 	addi	r2,r2,-3048
102030c0:	200b883a 	mov	r5,r4
102030c4:	11000017 	ldw	r4,0(r2)
102030c8:	02030441 	jmpi	10203044 <__srget_r>

102030cc <_sbrk_r>:
102030cc:	defffd04 	addi	sp,sp,-12
102030d0:	dc000015 	stw	r16,0(sp)
102030d4:	040408b4 	movhi	r16,4130
102030d8:	dc400115 	stw	r17,4(sp)
102030dc:	84045804 	addi	r16,r16,4448
102030e0:	2023883a 	mov	r17,r4
102030e4:	2809883a 	mov	r4,r5
102030e8:	dfc00215 	stw	ra,8(sp)
102030ec:	80000015 	stw	zero,0(r16)
102030f0:	0218b680 	call	10218b68 <sbrk>
102030f4:	00ffffc4 	movi	r3,-1
102030f8:	10c00526 	beq	r2,r3,10203110 <_sbrk_r+0x44>
102030fc:	dfc00217 	ldw	ra,8(sp)
10203100:	dc400117 	ldw	r17,4(sp)
10203104:	dc000017 	ldw	r16,0(sp)
10203108:	dec00304 	addi	sp,sp,12
1020310c:	f800283a 	ret
10203110:	80c00017 	ldw	r3,0(r16)
10203114:	183ff926 	beq	r3,zero,102030fc <_sbrk_r+0x30>
10203118:	88c00015 	stw	r3,0(r17)
1020311c:	003ff706 	br	102030fc <_sbrk_r+0x30>

10203120 <sscanf>:
10203120:	deffe204 	addi	sp,sp,-120
10203124:	dfc01b15 	stw	ra,108(sp)
10203128:	dc001a15 	stw	r16,104(sp)
1020312c:	d9801c15 	stw	r6,112(sp)
10203130:	d9c01d15 	stw	r7,116(sp)
10203134:	00c08104 	movi	r3,516
10203138:	2821883a 	mov	r16,r5
1020313c:	d8c0030d 	sth	r3,12(sp)
10203140:	d9000015 	stw	r4,0(sp)
10203144:	d9000415 	stw	r4,16(sp)
10203148:	02033500 	call	10203350 <strlen>
1020314c:	00c408b4 	movhi	r3,4130
10203150:	18fd0604 	addi	r3,r3,-3048
10203154:	d8800115 	stw	r2,4(sp)
10203158:	d8800515 	stw	r2,20(sp)
1020315c:	19000017 	ldw	r4,0(r3)
10203160:	00840834 	movhi	r2,4128
10203164:	108c9a04 	addi	r2,r2,12904
10203168:	d8800815 	stw	r2,32(sp)
1020316c:	d80b883a 	mov	r5,sp
10203170:	800d883a 	mov	r6,r16
10203174:	d9c01c04 	addi	r7,sp,112
10203178:	00bfffc4 	movi	r2,-1
1020317c:	d8000c15 	stw	zero,48(sp)
10203180:	d8001115 	stw	zero,68(sp)
10203184:	d880038d 	sth	r2,14(sp)
10203188:	02033e80 	call	102033e8 <__ssvfscanf_r>
1020318c:	dfc01b17 	ldw	ra,108(sp)
10203190:	dc001a17 	ldw	r16,104(sp)
10203194:	dec01e04 	addi	sp,sp,120
10203198:	f800283a 	ret

1020319c <_sscanf_r>:
1020319c:	deffe204 	addi	sp,sp,-120
102031a0:	dc001b15 	stw	r16,108(sp)
102031a4:	2021883a 	mov	r16,r4
102031a8:	dfc01c15 	stw	ra,112(sp)
102031ac:	d9c01d15 	stw	r7,116(sp)
102031b0:	00808104 	movi	r2,516
102031b4:	2809883a 	mov	r4,r5
102031b8:	d9400015 	stw	r5,0(sp)
102031bc:	d9400415 	stw	r5,16(sp)
102031c0:	d9801a15 	stw	r6,104(sp)
102031c4:	d880030d 	sth	r2,12(sp)
102031c8:	02033500 	call	10203350 <strlen>
102031cc:	d8800115 	stw	r2,4(sp)
102031d0:	d8800515 	stw	r2,20(sp)
102031d4:	d9801a17 	ldw	r6,104(sp)
102031d8:	00840834 	movhi	r2,4128
102031dc:	108c9a04 	addi	r2,r2,12904
102031e0:	d8800815 	stw	r2,32(sp)
102031e4:	8009883a 	mov	r4,r16
102031e8:	d80b883a 	mov	r5,sp
102031ec:	d9c01d04 	addi	r7,sp,116
102031f0:	00bfffc4 	movi	r2,-1
102031f4:	d8000c15 	stw	zero,48(sp)
102031f8:	d8001115 	stw	zero,68(sp)
102031fc:	d880038d 	sth	r2,14(sp)
10203200:	02033e80 	call	102033e8 <__ssvfscanf_r>
10203204:	dfc01c17 	ldw	ra,112(sp)
10203208:	dc001b17 	ldw	r16,108(sp)
1020320c:	dec01e04 	addi	sp,sp,120
10203210:	f800283a 	ret

10203214 <__sread>:
10203214:	defffe04 	addi	sp,sp,-8
10203218:	dc000015 	stw	r16,0(sp)
1020321c:	2821883a 	mov	r16,r5
10203220:	2940038f 	ldh	r5,14(r5)
10203224:	dfc00115 	stw	ra,4(sp)
10203228:	020b0880 	call	1020b088 <_read_r>
1020322c:	10000716 	blt	r2,zero,1020324c <__sread+0x38>
10203230:	80c01417 	ldw	r3,80(r16)
10203234:	1887883a 	add	r3,r3,r2
10203238:	80c01415 	stw	r3,80(r16)
1020323c:	dfc00117 	ldw	ra,4(sp)
10203240:	dc000017 	ldw	r16,0(sp)
10203244:	dec00204 	addi	sp,sp,8
10203248:	f800283a 	ret
1020324c:	80c0030b 	ldhu	r3,12(r16)
10203250:	18fbffcc 	andi	r3,r3,61439
10203254:	80c0030d 	sth	r3,12(r16)
10203258:	dfc00117 	ldw	ra,4(sp)
1020325c:	dc000017 	ldw	r16,0(sp)
10203260:	dec00204 	addi	sp,sp,8
10203264:	f800283a 	ret

10203268 <__seofread>:
10203268:	0005883a 	mov	r2,zero
1020326c:	f800283a 	ret

10203270 <__swrite>:
10203270:	2880030b 	ldhu	r2,12(r5)
10203274:	defffb04 	addi	sp,sp,-20
10203278:	dcc00315 	stw	r19,12(sp)
1020327c:	dc800215 	stw	r18,8(sp)
10203280:	dc400115 	stw	r17,4(sp)
10203284:	dc000015 	stw	r16,0(sp)
10203288:	dfc00415 	stw	ra,16(sp)
1020328c:	10c0400c 	andi	r3,r2,256
10203290:	2821883a 	mov	r16,r5
10203294:	2027883a 	mov	r19,r4
10203298:	3025883a 	mov	r18,r6
1020329c:	3823883a 	mov	r17,r7
102032a0:	18000526 	beq	r3,zero,102032b8 <__swrite+0x48>
102032a4:	2940038f 	ldh	r5,14(r5)
102032a8:	000d883a 	mov	r6,zero
102032ac:	01c00084 	movi	r7,2
102032b0:	02097dc0 	call	102097dc <_lseek_r>
102032b4:	8080030b 	ldhu	r2,12(r16)
102032b8:	8140038f 	ldh	r5,14(r16)
102032bc:	10bbffcc 	andi	r2,r2,61439
102032c0:	9809883a 	mov	r4,r19
102032c4:	900d883a 	mov	r6,r18
102032c8:	880f883a 	mov	r7,r17
102032cc:	8080030d 	sth	r2,12(r16)
102032d0:	dfc00417 	ldw	ra,16(sp)
102032d4:	dcc00317 	ldw	r19,12(sp)
102032d8:	dc800217 	ldw	r18,8(sp)
102032dc:	dc400117 	ldw	r17,4(sp)
102032e0:	dc000017 	ldw	r16,0(sp)
102032e4:	dec00504 	addi	sp,sp,20
102032e8:	0206b101 	jmpi	10206b10 <_write_r>

102032ec <__sseek>:
102032ec:	defffe04 	addi	sp,sp,-8
102032f0:	dc000015 	stw	r16,0(sp)
102032f4:	2821883a 	mov	r16,r5
102032f8:	2940038f 	ldh	r5,14(r5)
102032fc:	dfc00115 	stw	ra,4(sp)
10203300:	02097dc0 	call	102097dc <_lseek_r>
10203304:	00ffffc4 	movi	r3,-1
10203308:	10c00826 	beq	r2,r3,1020332c <__sseek+0x40>
1020330c:	80c0030b 	ldhu	r3,12(r16)
10203310:	80801415 	stw	r2,80(r16)
10203314:	18c40014 	ori	r3,r3,4096
10203318:	80c0030d 	sth	r3,12(r16)
1020331c:	dfc00117 	ldw	ra,4(sp)
10203320:	dc000017 	ldw	r16,0(sp)
10203324:	dec00204 	addi	sp,sp,8
10203328:	f800283a 	ret
1020332c:	80c0030b 	ldhu	r3,12(r16)
10203330:	18fbffcc 	andi	r3,r3,61439
10203334:	80c0030d 	sth	r3,12(r16)
10203338:	dfc00117 	ldw	ra,4(sp)
1020333c:	dc000017 	ldw	r16,0(sp)
10203340:	dec00204 	addi	sp,sp,8
10203344:	f800283a 	ret

10203348 <__sclose>:
10203348:	2940038f 	ldh	r5,14(r5)
1020334c:	0206cc01 	jmpi	10206cc0 <_close_r>

10203350 <strlen>:
10203350:	208000cc 	andi	r2,r4,3
10203354:	10002026 	beq	r2,zero,102033d8 <strlen+0x88>
10203358:	20800007 	ldb	r2,0(r4)
1020335c:	10002026 	beq	r2,zero,102033e0 <strlen+0x90>
10203360:	2005883a 	mov	r2,r4
10203364:	00000206 	br	10203370 <strlen+0x20>
10203368:	10c00007 	ldb	r3,0(r2)
1020336c:	18001826 	beq	r3,zero,102033d0 <strlen+0x80>
10203370:	10800044 	addi	r2,r2,1
10203374:	10c000cc 	andi	r3,r2,3
10203378:	183ffb1e 	bne	r3,zero,10203368 <strlen+0x18>
1020337c:	10c00017 	ldw	r3,0(r2)
10203380:	01ffbff4 	movhi	r7,65279
10203384:	39ffbfc4 	addi	r7,r7,-257
10203388:	00ca303a 	nor	r5,zero,r3
1020338c:	01a02074 	movhi	r6,32897
10203390:	19c7883a 	add	r3,r3,r7
10203394:	31a02004 	addi	r6,r6,-32640
10203398:	1946703a 	and	r3,r3,r5
1020339c:	1986703a 	and	r3,r3,r6
102033a0:	1800091e 	bne	r3,zero,102033c8 <strlen+0x78>
102033a4:	10800104 	addi	r2,r2,4
102033a8:	10c00017 	ldw	r3,0(r2)
102033ac:	19cb883a 	add	r5,r3,r7
102033b0:	00c6303a 	nor	r3,zero,r3
102033b4:	28c6703a 	and	r3,r5,r3
102033b8:	1986703a 	and	r3,r3,r6
102033bc:	183ff926 	beq	r3,zero,102033a4 <strlen+0x54>
102033c0:	00000106 	br	102033c8 <strlen+0x78>
102033c4:	10800044 	addi	r2,r2,1
102033c8:	10c00007 	ldb	r3,0(r2)
102033cc:	183ffd1e 	bne	r3,zero,102033c4 <strlen+0x74>
102033d0:	1105c83a 	sub	r2,r2,r4
102033d4:	f800283a 	ret
102033d8:	2005883a 	mov	r2,r4
102033dc:	003fe706 	br	1020337c <strlen+0x2c>
102033e0:	0005883a 	mov	r2,zero
102033e4:	f800283a 	ret

102033e8 <__ssvfscanf_r>:
102033e8:	2880030b 	ldhu	r2,12(r5)
102033ec:	deff4a04 	addi	sp,sp,-728
102033f0:	df00b415 	stw	fp,720(sp)
102033f4:	dd80b215 	stw	r22,712(sp)
102033f8:	dfc0b515 	stw	ra,724(sp)
102033fc:	ddc0b315 	stw	r23,716(sp)
10203400:	dd40b115 	stw	r21,708(sp)
10203404:	dd00b015 	stw	r20,704(sp)
10203408:	dcc0af15 	stw	r19,700(sp)
1020340c:	dc80ae15 	stw	r18,696(sp)
10203410:	dc40ad15 	stw	r17,692(sp)
10203414:	dc00ac15 	stw	r16,688(sp)
10203418:	10c8000c 	andi	r3,r2,8192
1020341c:	d9c09c15 	stw	r7,624(sp)
10203420:	2839883a 	mov	fp,r5
10203424:	202d883a 	mov	r22,r4
10203428:	1800061e 	bne	r3,zero,10203444 <__ssvfscanf_r+0x5c>
1020342c:	29001917 	ldw	r4,100(r5)
10203430:	00f7ffc4 	movi	r3,-8193
10203434:	10880014 	ori	r2,r2,8192
10203438:	20c6703a 	and	r3,r4,r3
1020343c:	2880030d 	sth	r2,12(r5)
10203440:	28c01915 	stw	r3,100(r5)
10203444:	30800003 	ldbu	r2,0(r6)
10203448:	0029883a 	mov	r20,zero
1020344c:	05c408b4 	movhi	r23,4130
10203450:	d800a115 	stw	zero,644(sp)
10203454:	d8009e15 	stw	zero,632(sp)
10203458:	d8009f15 	stw	zero,636(sp)
1020345c:	d8809b15 	stw	r2,620(sp)
10203460:	bdfd0904 	addi	r23,r23,-3036
10203464:	a025883a 	mov	r18,r20
10203468:	34400044 	addi	r17,r6,1
1020346c:	10001e26 	beq	r2,zero,102034e8 <__ssvfscanf_r+0x100>
10203470:	b9000017 	ldw	r4,0(r23)
10203474:	2087883a 	add	r3,r4,r2
10203478:	18c00043 	ldbu	r3,1(r3)
1020347c:	18c0020c 	andi	r3,r3,8
10203480:	18001b26 	beq	r3,zero,102034f0 <__ssvfscanf_r+0x108>
10203484:	e0800117 	ldw	r2,4(fp)
10203488:	00800e0e 	bge	zero,r2,102034c4 <__ssvfscanf_r+0xdc>
1020348c:	e0c00017 	ldw	r3,0(fp)
10203490:	b9000017 	ldw	r4,0(r23)
10203494:	18800003 	ldbu	r2,0(r3)
10203498:	2085883a 	add	r2,r4,r2
1020349c:	10800043 	ldbu	r2,1(r2)
102034a0:	1080020c 	andi	r2,r2,8
102034a4:	10000b26 	beq	r2,zero,102034d4 <__ssvfscanf_r+0xec>
102034a8:	e0800117 	ldw	r2,4(fp)
102034ac:	18c00044 	addi	r3,r3,1
102034b0:	e0c00015 	stw	r3,0(fp)
102034b4:	10bfffc4 	addi	r2,r2,-1
102034b8:	e0800115 	stw	r2,4(fp)
102034bc:	94800044 	addi	r18,r18,1
102034c0:	00bff216 	blt	zero,r2,1020348c <__ssvfscanf_r+0xa4>
102034c4:	b009883a 	mov	r4,r22
102034c8:	e00b883a 	mov	r5,fp
102034cc:	020de600 	call	1020de60 <__ssrefill_r>
102034d0:	103fee26 	beq	r2,zero,1020348c <__ssvfscanf_r+0xa4>
102034d4:	880d883a 	mov	r6,r17
102034d8:	30800003 	ldbu	r2,0(r6)
102034dc:	34400044 	addi	r17,r6,1
102034e0:	d8809b15 	stw	r2,620(sp)
102034e4:	103fe21e 	bne	r2,zero,10203470 <__ssvfscanf_r+0x88>
102034e8:	d8809f17 	ldw	r2,636(sp)
102034ec:	00009b06 	br	1020375c <__ssvfscanf_r+0x374>
102034f0:	00c00944 	movi	r3,37
102034f4:	10c0a61e 	bne	r2,r3,10203790 <__ssvfscanf_r+0x3a8>
102034f8:	31800043 	ldbu	r6,1(r6)
102034fc:	0021883a 	mov	r16,zero
10203500:	002b883a 	mov	r21,zero
10203504:	01c01e04 	movi	r7,120
10203508:	02801b04 	movi	r10,108
1020350c:	89400044 	addi	r5,r17,1
10203510:	39821336 	bltu	r7,r6,10203d60 <__ssvfscanf_r+0x978>
10203514:	300490ba 	slli	r2,r6,2
10203518:	00c40834 	movhi	r3,4128
1020351c:	18cd4b04 	addi	r3,r3,13612
10203520:	10c5883a 	add	r2,r2,r3
10203524:	10800017 	ldw	r2,0(r2)
10203528:	1000683a 	jmp	r2
1020352c:	10203758 	cmpnei	zero,r2,-32547
10203530:	10203d60 	cmpeqi	zero,r2,-32523
10203534:	10203d60 	cmpeqi	zero,r2,-32523
10203538:	10203d60 	cmpeqi	zero,r2,-32523
1020353c:	10203d60 	cmpeqi	zero,r2,-32523
10203540:	10203d60 	cmpeqi	zero,r2,-32523
10203544:	10203d60 	cmpeqi	zero,r2,-32523
10203548:	10203d60 	cmpeqi	zero,r2,-32523
1020354c:	10203d60 	cmpeqi	zero,r2,-32523
10203550:	10203d60 	cmpeqi	zero,r2,-32523
10203554:	10203d60 	cmpeqi	zero,r2,-32523
10203558:	10203d60 	cmpeqi	zero,r2,-32523
1020355c:	10203d60 	cmpeqi	zero,r2,-32523
10203560:	10203d60 	cmpeqi	zero,r2,-32523
10203564:	10203d60 	cmpeqi	zero,r2,-32523
10203568:	10203d60 	cmpeqi	zero,r2,-32523
1020356c:	10203d60 	cmpeqi	zero,r2,-32523
10203570:	10203d60 	cmpeqi	zero,r2,-32523
10203574:	10203d60 	cmpeqi	zero,r2,-32523
10203578:	10203d60 	cmpeqi	zero,r2,-32523
1020357c:	10203d60 	cmpeqi	zero,r2,-32523
10203580:	10203d60 	cmpeqi	zero,r2,-32523
10203584:	10203d60 	cmpeqi	zero,r2,-32523
10203588:	10203d60 	cmpeqi	zero,r2,-32523
1020358c:	10203d60 	cmpeqi	zero,r2,-32523
10203590:	10203d60 	cmpeqi	zero,r2,-32523
10203594:	10203d60 	cmpeqi	zero,r2,-32523
10203598:	10203d60 	cmpeqi	zero,r2,-32523
1020359c:	10203d60 	cmpeqi	zero,r2,-32523
102035a0:	10203d60 	cmpeqi	zero,r2,-32523
102035a4:	10203d60 	cmpeqi	zero,r2,-32523
102035a8:	10203d60 	cmpeqi	zero,r2,-32523
102035ac:	10203d60 	cmpeqi	zero,r2,-32523
102035b0:	10203d60 	cmpeqi	zero,r2,-32523
102035b4:	10203d60 	cmpeqi	zero,r2,-32523
102035b8:	10203d60 	cmpeqi	zero,r2,-32523
102035bc:	10203d60 	cmpeqi	zero,r2,-32523
102035c0:	1020378c 	andi	zero,r2,32990
102035c4:	10203d60 	cmpeqi	zero,r2,-32523
102035c8:	10203d60 	cmpeqi	zero,r2,-32523
102035cc:	10203d60 	cmpeqi	zero,r2,-32523
102035d0:	10203d60 	cmpeqi	zero,r2,-32523
102035d4:	10203dac 	andhi	zero,r2,33014
102035d8:	10203d60 	cmpeqi	zero,r2,-32523
102035dc:	10203d60 	cmpeqi	zero,r2,-32523
102035e0:	10203d60 	cmpeqi	zero,r2,-32523
102035e4:	10203d60 	cmpeqi	zero,r2,-32523
102035e8:	10203d60 	cmpeqi	zero,r2,-32523
102035ec:	10203d40 	call	110203d4 <__ram_exceptions_end+0xc18194>
102035f0:	10203d40 	call	110203d4 <__ram_exceptions_end+0xc18194>
102035f4:	10203d40 	call	110203d4 <__ram_exceptions_end+0xc18194>
102035f8:	10203d40 	call	110203d4 <__ram_exceptions_end+0xc18194>
102035fc:	10203d40 	call	110203d4 <__ram_exceptions_end+0xc18194>
10203600:	10203d40 	call	110203d4 <__ram_exceptions_end+0xc18194>
10203604:	10203d40 	call	110203d4 <__ram_exceptions_end+0xc18194>
10203608:	10203d40 	call	110203d4 <__ram_exceptions_end+0xc18194>
1020360c:	10203d40 	call	110203d4 <__ram_exceptions_end+0xc18194>
10203610:	10203d40 	call	110203d4 <__ram_exceptions_end+0xc18194>
10203614:	10203d60 	cmpeqi	zero,r2,-32523
10203618:	10203d60 	cmpeqi	zero,r2,-32523
1020361c:	10203d60 	cmpeqi	zero,r2,-32523
10203620:	10203d60 	cmpeqi	zero,r2,-32523
10203624:	10203d60 	cmpeqi	zero,r2,-32523
10203628:	10203d60 	cmpeqi	zero,r2,-32523
1020362c:	10203d60 	cmpeqi	zero,r2,-32523
10203630:	10203d60 	cmpeqi	zero,r2,-32523
10203634:	10203d60 	cmpeqi	zero,r2,-32523
10203638:	10203d60 	cmpeqi	zero,r2,-32523
1020363c:	10203e04 	addi	zero,r2,-32520
10203640:	10203df8 	rdprs	zero,r2,-32521
10203644:	10203d60 	cmpeqi	zero,r2,-32523
10203648:	10203df8 	rdprs	zero,r2,-32521
1020364c:	10203d60 	cmpeqi	zero,r2,-32523
10203650:	10203d60 	cmpeqi	zero,r2,-32523
10203654:	10203d60 	cmpeqi	zero,r2,-32523
10203658:	10203d60 	cmpeqi	zero,r2,-32523
1020365c:	10203de4 	muli	zero,r2,-32521
10203660:	10203d60 	cmpeqi	zero,r2,-32523
10203664:	10203d60 	cmpeqi	zero,r2,-32523
10203668:	10203dc0 	call	110203dc <__ram_exceptions_end+0xc1819c>
1020366c:	10203d60 	cmpeqi	zero,r2,-32523
10203670:	10203d60 	cmpeqi	zero,r2,-32523
10203674:	10203d60 	cmpeqi	zero,r2,-32523
10203678:	10203d60 	cmpeqi	zero,r2,-32523
1020367c:	10203d60 	cmpeqi	zero,r2,-32523
10203680:	10203d60 	cmpeqi	zero,r2,-32523
10203684:	10203d60 	cmpeqi	zero,r2,-32523
10203688:	10203d60 	cmpeqi	zero,r2,-32523
1020368c:	10203f1c 	xori	zero,r2,33020
10203690:	10203d60 	cmpeqi	zero,r2,-32523
10203694:	10203d60 	cmpeqi	zero,r2,-32523
10203698:	10203f04 	addi	zero,r2,-32516
1020369c:	10203d60 	cmpeqi	zero,r2,-32523
102036a0:	10203d60 	cmpeqi	zero,r2,-32523
102036a4:	10203d60 	cmpeqi	zero,r2,-32523
102036a8:	10203d60 	cmpeqi	zero,r2,-32523
102036ac:	10203d60 	cmpeqi	zero,r2,-32523
102036b0:	10203d60 	cmpeqi	zero,r2,-32523
102036b4:	10203d60 	cmpeqi	zero,r2,-32523
102036b8:	10203ef4 	orhi	zero,r2,33019
102036bc:	10203ed4 	ori	zero,r2,33019
102036c0:	10203df8 	rdprs	zero,r2,-32521
102036c4:	10203df8 	rdprs	zero,r2,-32521
102036c8:	10203df8 	rdprs	zero,r2,-32521
102036cc:	10203ec0 	call	110203ec <__ram_exceptions_end+0xc181ac>
102036d0:	102037c8 	cmpgei	zero,r2,-32545
102036d4:	10203d60 	cmpeqi	zero,r2,-32523
102036d8:	10203d60 	cmpeqi	zero,r2,-32523
102036dc:	10203eac 	andhi	zero,r2,33018
102036e0:	10203d60 	cmpeqi	zero,r2,-32523
102036e4:	10203e80 	call	110203e8 <__ram_exceptions_end+0xc181a8>
102036e8:	10203e78 	rdprs	zero,r2,-32519
102036ec:	10203e54 	ori	zero,r2,33017
102036f0:	10203d60 	cmpeqi	zero,r2,-32523
102036f4:	10203d60 	cmpeqi	zero,r2,-32523
102036f8:	10203e48 	cmpgei	zero,r2,-32519
102036fc:	10203d60 	cmpeqi	zero,r2,-32523
10203700:	10203e28 	cmpgeui	zero,r2,33016
10203704:	10203d60 	cmpeqi	zero,r2,-32523
10203708:	10203d60 	cmpeqi	zero,r2,-32523
1020370c:	10203f1c 	xori	zero,r2,33020
10203710:	013fff84 	movi	r4,-2
10203714:	1104cb1e 	bne	r2,r4,10204a44 <__ssvfscanf_r+0x165c>
10203718:	a021883a 	mov	r16,r20
1020371c:	e0800117 	ldw	r2,4(fp)
10203720:	00839416 	blt	zero,r2,10204574 <__ssvfscanf_r+0x118c>
10203724:	b009883a 	mov	r4,r22
10203728:	e00b883a 	mov	r5,fp
1020372c:	020de600 	call	1020de60 <__ssrefill_r>
10203730:	10039026 	beq	r2,zero,10204574 <__ssvfscanf_r+0x118c>
10203734:	8007883a 	mov	r3,r16
10203738:	8821883a 	mov	r16,r17
1020373c:	dc40a017 	ldw	r17,640(sp)
10203740:	18039626 	beq	r3,zero,1020459c <__ssvfscanf_r+0x11b4>
10203744:	dac09f17 	ldw	r11,636(sp)
10203748:	58000326 	beq	r11,zero,10203758 <__ssvfscanf_r+0x370>
1020374c:	e080030b 	ldhu	r2,12(fp)
10203750:	1080100c 	andi	r2,r2,64
10203754:	1003ee26 	beq	r2,zero,10204710 <__ssvfscanf_r+0x1328>
10203758:	00bfffc4 	movi	r2,-1
1020375c:	dfc0b517 	ldw	ra,724(sp)
10203760:	df00b417 	ldw	fp,720(sp)
10203764:	ddc0b317 	ldw	r23,716(sp)
10203768:	dd80b217 	ldw	r22,712(sp)
1020376c:	dd40b117 	ldw	r21,708(sp)
10203770:	dd00b017 	ldw	r20,704(sp)
10203774:	dcc0af17 	ldw	r19,700(sp)
10203778:	dc80ae17 	ldw	r18,696(sp)
1020377c:	dc40ad17 	ldw	r17,692(sp)
10203780:	dc00ac17 	ldw	r16,688(sp)
10203784:	dec0b604 	addi	sp,sp,728
10203788:	f800283a 	ret
1020378c:	2823883a 	mov	r17,r5
10203790:	e0800117 	ldw	r2,4(fp)
10203794:	0084340e 	bge	zero,r2,10204868 <__ssvfscanf_r+0x1480>
10203798:	e0800017 	ldw	r2,0(fp)
1020379c:	88ffffc3 	ldbu	r3,-1(r17)
102037a0:	11000003 	ldbu	r4,0(r2)
102037a4:	20ff501e 	bne	r4,r3,102034e8 <__ssvfscanf_r+0x100>
102037a8:	e0c00117 	ldw	r3,4(fp)
102037ac:	10800044 	addi	r2,r2,1
102037b0:	e0800015 	stw	r2,0(fp)
102037b4:	18bfffc4 	addi	r2,r3,-1
102037b8:	e0800115 	stw	r2,4(fp)
102037bc:	94800044 	addi	r18,r18,1
102037c0:	880d883a 	mov	r6,r17
102037c4:	003f4406 	br	102034d8 <__ssvfscanf_r+0xf0>
102037c8:	00840874 	movhi	r2,4129
102037cc:	10b49404 	addi	r2,r2,-11696
102037d0:	2823883a 	mov	r17,r5
102037d4:	d880a115 	stw	r2,644(sp)
102037d8:	d8009e15 	stw	zero,632(sp)
102037dc:	04c000c4 	movi	r19,3
102037e0:	e0800117 	ldw	r2,4(fp)
102037e4:	00816c0e 	bge	zero,r2,10203d98 <__ssvfscanf_r+0x9b0>
102037e8:	8080100c 	andi	r2,r16,64
102037ec:	10007f26 	beq	r2,zero,102039ec <__ssvfscanf_r+0x604>
102037f0:	00800084 	movi	r2,2
102037f4:	9882df26 	beq	r19,r2,10204374 <__ssvfscanf_r+0xf8c>
102037f8:	14c1d50e 	bge	r2,r19,10203f50 <__ssvfscanf_r+0xb68>
102037fc:	008000c4 	movi	r2,3
10203800:	98821926 	beq	r19,r2,10204068 <__ssvfscanf_r+0xc80>
10203804:	00800104 	movi	r2,4
10203808:	9881fc1e 	bne	r19,r2,10203ffc <__ssvfscanf_r+0xc14>
1020380c:	b009883a 	mov	r4,r22
10203810:	02097a80 	call	102097a8 <_localeconv_r>
10203814:	10800017 	ldw	r2,0(r2)
10203818:	a93fffc4 	addi	r4,r21,-1
1020381c:	d880a315 	stw	r2,652(sp)
10203820:	00805704 	movi	r2,348
10203824:	1102f82e 	bgeu	r2,r4,10204408 <__ssvfscanf_r+0x1020>
10203828:	ad7fa8c4 	addi	r21,r21,-349
1020382c:	dd40a215 	stw	r21,648(sp)
10203830:	05405744 	movi	r21,349
10203834:	84c1e014 	ori	r19,r16,1920
10203838:	0021883a 	mov	r16,zero
1020383c:	8005883a 	mov	r2,r16
10203840:	000d883a 	mov	r6,zero
10203844:	0019883a 	mov	r12,zero
10203848:	a821883a 	mov	r16,r21
1020384c:	dc409d15 	stw	r17,628(sp)
10203850:	b007883a 	mov	r3,r22
10203854:	d800a515 	stw	zero,660(sp)
10203858:	d800a415 	stw	zero,656(sp)
1020385c:	d800a015 	stw	zero,640(sp)
10203860:	dd000104 	addi	r20,sp,4
10203864:	02c01384 	movi	r11,78
10203868:	3023883a 	mov	r17,r6
1020386c:	602d883a 	mov	r22,r12
10203870:	102b883a 	mov	r21,r2
10203874:	e1000017 	ldw	r4,0(fp)
10203878:	21400003 	ldbu	r5,0(r4)
1020387c:	28bff544 	addi	r2,r5,-43
10203880:	10803fcc 	andi	r2,r2,255
10203884:	58812436 	bltu	r11,r2,10203d18 <__ssvfscanf_r+0x930>
10203888:	100490ba 	slli	r2,r2,2
1020388c:	01840834 	movhi	r6,4128
10203890:	318e2804 	addi	r6,r6,14496
10203894:	1185883a 	add	r2,r2,r6
10203898:	10800017 	ldw	r2,0(r2)
1020389c:	1000683a 	jmp	r2
102038a0:	10203d04 	addi	zero,r2,-32524
102038a4:	10203d18 	cmpnei	zero,r2,-32524
102038a8:	10203d04 	addi	zero,r2,-32524
102038ac:	10203d18 	cmpnei	zero,r2,-32524
102038b0:	10203d18 	cmpnei	zero,r2,-32524
102038b4:	10203a90 	cmplti	zero,r2,-32534
102038b8:	10203a2c 	andhi	zero,r2,33000
102038bc:	10203a2c 	andhi	zero,r2,33000
102038c0:	10203a2c 	andhi	zero,r2,33000
102038c4:	10203a2c 	andhi	zero,r2,33000
102038c8:	10203a2c 	andhi	zero,r2,33000
102038cc:	10203a2c 	andhi	zero,r2,33000
102038d0:	10203a2c 	andhi	zero,r2,33000
102038d4:	10203a2c 	andhi	zero,r2,33000
102038d8:	10203a2c 	andhi	zero,r2,33000
102038dc:	10203d18 	cmpnei	zero,r2,-32524
102038e0:	10203d18 	cmpnei	zero,r2,-32524
102038e4:	10203d18 	cmpnei	zero,r2,-32524
102038e8:	10203d18 	cmpnei	zero,r2,-32524
102038ec:	10203d18 	cmpnei	zero,r2,-32524
102038f0:	10203d18 	cmpnei	zero,r2,-32524
102038f4:	10203d18 	cmpnei	zero,r2,-32524
102038f8:	10203cf4 	orhi	zero,r2,33011
102038fc:	10203d18 	cmpnei	zero,r2,-32524
10203900:	10203d18 	cmpnei	zero,r2,-32524
10203904:	10203d18 	cmpnei	zero,r2,-32524
10203908:	10203cb0 	cmpltui	zero,r2,33010
1020390c:	10203c94 	ori	zero,r2,33010
10203910:	10203d18 	cmpnei	zero,r2,-32524
10203914:	10203d18 	cmpnei	zero,r2,-32524
10203918:	10203b2c 	andhi	zero,r2,33004
1020391c:	10203d18 	cmpnei	zero,r2,-32524
10203920:	10203d18 	cmpnei	zero,r2,-32524
10203924:	10203d18 	cmpnei	zero,r2,-32524
10203928:	10203d18 	cmpnei	zero,r2,-32524
1020392c:	10203af4 	orhi	zero,r2,33003
10203930:	10203d18 	cmpnei	zero,r2,-32524
10203934:	10203d18 	cmpnei	zero,r2,-32524
10203938:	10203d18 	cmpnei	zero,r2,-32524
1020393c:	10203d18 	cmpnei	zero,r2,-32524
10203940:	10203d18 	cmpnei	zero,r2,-32524
10203944:	10203ad8 	cmpnei	zero,r2,-32533
10203948:	10203d18 	cmpnei	zero,r2,-32524
1020394c:	10203d18 	cmpnei	zero,r2,-32524
10203950:	10203d18 	cmpnei	zero,r2,-32524
10203954:	10203d18 	cmpnei	zero,r2,-32524
10203958:	10203abc 	xorhi	zero,r2,33002
1020395c:	10203d18 	cmpnei	zero,r2,-32524
10203960:	10203d18 	cmpnei	zero,r2,-32524
10203964:	10203d18 	cmpnei	zero,r2,-32524
10203968:	10203d18 	cmpnei	zero,r2,-32524
1020396c:	10203d18 	cmpnei	zero,r2,-32524
10203970:	10203d18 	cmpnei	zero,r2,-32524
10203974:	10203d18 	cmpnei	zero,r2,-32524
10203978:	10203cf4 	orhi	zero,r2,33011
1020397c:	10203d18 	cmpnei	zero,r2,-32524
10203980:	10203d18 	cmpnei	zero,r2,-32524
10203984:	10203d18 	cmpnei	zero,r2,-32524
10203988:	10203cb0 	cmpltui	zero,r2,33010
1020398c:	10203c94 	ori	zero,r2,33010
10203990:	10203d18 	cmpnei	zero,r2,-32524
10203994:	10203d18 	cmpnei	zero,r2,-32524
10203998:	10203b2c 	andhi	zero,r2,33004
1020399c:	10203d18 	cmpnei	zero,r2,-32524
102039a0:	10203d18 	cmpnei	zero,r2,-32524
102039a4:	10203d18 	cmpnei	zero,r2,-32524
102039a8:	10203d18 	cmpnei	zero,r2,-32524
102039ac:	10203af4 	orhi	zero,r2,33003
102039b0:	10203d18 	cmpnei	zero,r2,-32524
102039b4:	10203d18 	cmpnei	zero,r2,-32524
102039b8:	10203d18 	cmpnei	zero,r2,-32524
102039bc:	10203d18 	cmpnei	zero,r2,-32524
102039c0:	10203d18 	cmpnei	zero,r2,-32524
102039c4:	10203ad8 	cmpnei	zero,r2,-32533
102039c8:	10203d18 	cmpnei	zero,r2,-32524
102039cc:	10203d18 	cmpnei	zero,r2,-32524
102039d0:	10203d18 	cmpnei	zero,r2,-32524
102039d4:	10203d18 	cmpnei	zero,r2,-32524
102039d8:	10203abc 	xorhi	zero,r2,33002
102039dc:	b009883a 	mov	r4,r22
102039e0:	e00b883a 	mov	r5,fp
102039e4:	020de600 	call	1020de60 <__ssrefill_r>
102039e8:	103f561e 	bne	r2,zero,10203744 <__ssvfscanf_r+0x35c>
102039ec:	b9400017 	ldw	r5,0(r23)
102039f0:	e1000017 	ldw	r4,0(fp)
102039f4:	00000206 	br	10203a00 <__ssvfscanf_r+0x618>
102039f8:	21000044 	addi	r4,r4,1
102039fc:	e1000015 	stw	r4,0(fp)
10203a00:	20800003 	ldbu	r2,0(r4)
10203a04:	2885883a 	add	r2,r5,r2
10203a08:	10800043 	ldbu	r2,1(r2)
10203a0c:	1080020c 	andi	r2,r2,8
10203a10:	103f7726 	beq	r2,zero,102037f0 <__ssvfscanf_r+0x408>
10203a14:	e0800117 	ldw	r2,4(fp)
10203a18:	94800044 	addi	r18,r18,1
10203a1c:	10bfffc4 	addi	r2,r2,-1
10203a20:	e0800115 	stw	r2,4(fp)
10203a24:	00bff416 	blt	zero,r2,102039f8 <__ssvfscanf_r+0x610>
10203a28:	003fec06 	br	102039dc <__ssvfscanf_r+0x5f4>
10203a2c:	88803fcc 	andi	r2,r17,255
10203a30:	1080201c 	xori	r2,r2,128
10203a34:	10bfe004 	addi	r2,r2,-128
10203a38:	b085883a 	add	r2,r22,r2
10203a3c:	10000d1e 	bne	r2,zero,10203a74 <__ssvfscanf_r+0x68c>
10203a40:	00bf9fc4 	movi	r2,-385
10203a44:	98a6703a 	and	r19,r19,r2
10203a48:	a1400005 	stb	r5,0(r20)
10203a4c:	a5000044 	addi	r20,r20,1
10203a50:	e0800117 	ldw	r2,4(fp)
10203a54:	843fffc4 	addi	r16,r16,-1
10203a58:	94800044 	addi	r18,r18,1
10203a5c:	10bfffc4 	addi	r2,r2,-1
10203a60:	e0800115 	stw	r2,4(fp)
10203a64:	0081300e 	bge	zero,r2,10203f28 <__ssvfscanf_r+0xb40>
10203a68:	21000044 	addi	r4,r4,1
10203a6c:	e1000015 	stw	r4,0(fp)
10203a70:	803f801e 	bne	r16,zero,10203874 <__ssvfscanf_r+0x48c>
10203a74:	880d883a 	mov	r6,r17
10203a78:	b019883a 	mov	r12,r22
10203a7c:	a821883a 	mov	r16,r21
10203a80:	dc409d17 	ldw	r17,628(sp)
10203a84:	182d883a 	mov	r22,r3
10203a88:	a8003526 	beq	r21,zero,10203b60 <__ssvfscanf_r+0x778>
10203a8c:	00025b06 	br	102043fc <__ssvfscanf_r+0x1014>
10203a90:	9880400c 	andi	r2,r19,256
10203a94:	103fe526 	beq	r2,zero,10203a2c <__ssvfscanf_r+0x644>
10203a98:	d980a217 	ldw	r6,648(sp)
10203a9c:	00bfdfc4 	movi	r2,-129
10203aa0:	98a6703a 	and	r19,r19,r2
10203aa4:	ad400044 	addi	r21,r21,1
10203aa8:	303fe926 	beq	r6,zero,10203a50 <__ssvfscanf_r+0x668>
10203aac:	31bfffc4 	addi	r6,r6,-1
10203ab0:	d980a215 	stw	r6,648(sp)
10203ab4:	84000044 	addi	r16,r16,1
10203ab8:	003fe506 	br	10203a50 <__ssvfscanf_r+0x668>
10203abc:	88803fcc 	andi	r2,r17,255
10203ac0:	1080201c 	xori	r2,r2,128
10203ac4:	10bfe004 	addi	r2,r2,-128
10203ac8:	018001c4 	movi	r6,7
10203acc:	11bfe91e 	bne	r2,r6,10203a74 <__ssvfscanf_r+0x68c>
10203ad0:	04400204 	movi	r17,8
10203ad4:	003fdc06 	br	10203a48 <__ssvfscanf_r+0x660>
10203ad8:	89c03fcc 	andi	r7,r17,255
10203adc:	39c0201c 	xori	r7,r7,128
10203ae0:	39ffe004 	addi	r7,r7,-128
10203ae4:	00800184 	movi	r2,6
10203ae8:	38bfe21e 	bne	r7,r2,10203a74 <__ssvfscanf_r+0x68c>
10203aec:	044001c4 	movi	r17,7
10203af0:	003fd506 	br	10203a48 <__ssvfscanf_r+0x660>
10203af4:	b0013d1e 	bne	r22,zero,10203fec <__ssvfscanf_r+0xc04>
10203af8:	a800031e 	bne	r21,zero,10203b08 <__ssvfscanf_r+0x720>
10203afc:	99c1c00c 	andi	r7,r19,1792
10203b00:	0081c004 	movi	r2,1792
10203b04:	38836726 	beq	r7,r2,102048a4 <__ssvfscanf_r+0x14bc>
10203b08:	88803fcc 	andi	r2,r17,255
10203b0c:	1080201c 	xori	r2,r2,128
10203b10:	10bfe004 	addi	r2,r2,-128
10203b14:	01c00044 	movi	r7,1
10203b18:	11c00226 	beq	r2,r7,10203b24 <__ssvfscanf_r+0x73c>
10203b1c:	01c00104 	movi	r7,4
10203b20:	11ffd41e 	bne	r2,r7,10203a74 <__ssvfscanf_r+0x68c>
10203b24:	8c400044 	addi	r17,r17,1
10203b28:	003fc706 	br	10203a48 <__ssvfscanf_r+0x660>
10203b2c:	88803fcc 	andi	r2,r17,255
10203b30:	1080201c 	xori	r2,r2,128
10203b34:	10bfe004 	addi	r2,r2,-128
10203b38:	1001271e 	bne	r2,zero,10203fd8 <__ssvfscanf_r+0xbf0>
10203b3c:	a8022a1e 	bne	r21,zero,102043e8 <__ssvfscanf_r+0x1000>
10203b40:	99c1c00c 	andi	r7,r19,1792
10203b44:	0081c004 	movi	r2,1792
10203b48:	38835226 	beq	r7,r2,10204894 <__ssvfscanf_r+0x14ac>
10203b4c:	880d883a 	mov	r6,r17
10203b50:	dc409d17 	ldw	r17,628(sp)
10203b54:	b019883a 	mov	r12,r22
10203b58:	a821883a 	mov	r16,r21
10203b5c:	182d883a 	mov	r22,r3
10203b60:	633fffc4 	addi	r12,r12,-1
10203b64:	00800044 	movi	r2,1
10203b68:	1303c52e 	bgeu	r2,r12,10204a80 <__ssvfscanf_r+0x1698>
10203b6c:	30803fcc 	andi	r2,r6,255
10203b70:	1080201c 	xori	r2,r2,128
10203b74:	10bfe004 	addi	r2,r2,-128
10203b78:	10ffffc4 	addi	r3,r2,-1
10203b7c:	01000184 	movi	r4,6
10203b80:	20c01236 	bltu	r4,r3,10203bcc <__ssvfscanf_r+0x7e4>
10203b84:	00c00084 	movi	r3,2
10203b88:	1883c80e 	bge	r3,r2,10204aac <__ssvfscanf_r+0x16c4>
10203b8c:	00c000c4 	movi	r3,3
10203b90:	302b883a 	mov	r21,r6
10203b94:	10c00d26 	beq	r2,r3,10203bcc <__ssvfscanf_r+0x7e4>
10203b98:	9525c83a 	sub	r18,r18,r20
10203b9c:	a53fffc4 	addi	r20,r20,-1
10203ba0:	a1400007 	ldb	r5,0(r20)
10203ba4:	e00d883a 	mov	r6,fp
10203ba8:	b009883a 	mov	r4,r22
10203bac:	020dd680 	call	1020dd68 <_sungetc_r>
10203bb0:	a8bfffc4 	addi	r2,r21,-1
10203bb4:	10c03fcc 	andi	r3,r2,255
10203bb8:	018000c4 	movi	r6,3
10203bbc:	a493883a 	add	r9,r20,r18
10203bc0:	102b883a 	mov	r21,r2
10203bc4:	30fff536 	bltu	r6,r3,10203b9c <__ssvfscanf_r+0x7b4>
10203bc8:	4825883a 	mov	r18,r9
10203bcc:	9880400c 	andi	r2,r19,256
10203bd0:	10001626 	beq	r2,zero,10203c2c <__ssvfscanf_r+0x844>
10203bd4:	9881000c 	andi	r2,r19,1024
10203bd8:	10039e1e 	bne	r2,zero,10204a54 <__ssvfscanf_r+0x166c>
10203bdc:	a17fffc7 	ldb	r5,-1(r20)
10203be0:	00801944 	movi	r2,101
10203be4:	a0ffffc4 	addi	r3,r20,-1
10203be8:	957fffc4 	addi	r21,r18,-1
10203bec:	28800826 	beq	r5,r2,10203c10 <__ssvfscanf_r+0x828>
10203bf0:	00801144 	movi	r2,69
10203bf4:	28800626 	beq	r5,r2,10203c10 <__ssvfscanf_r+0x828>
10203bf8:	b009883a 	mov	r4,r22
10203bfc:	e00d883a 	mov	r6,fp
10203c00:	020dd680 	call	1020dd68 <_sungetc_r>
10203c04:	a17fff87 	ldb	r5,-2(r20)
10203c08:	a0ffff84 	addi	r3,r20,-2
10203c0c:	957fff84 	addi	r21,r18,-2
10203c10:	b009883a 	mov	r4,r22
10203c14:	e00d883a 	mov	r6,fp
10203c18:	d8c0ab15 	stw	r3,684(sp)
10203c1c:	020dd680 	call	1020dd68 <_sungetc_r>
10203c20:	d8c0ab17 	ldw	r3,684(sp)
10203c24:	a825883a 	mov	r18,r21
10203c28:	1829883a 	mov	r20,r3
10203c2c:	9880040c 	andi	r2,r19,16
10203c30:	103e281e 	bne	r2,zero,102034d4 <__ssvfscanf_r+0xec>
10203c34:	a0000005 	stb	zero,0(r20)
10203c38:	98c1800c 	andi	r3,r19,1536
10203c3c:	00810004 	movi	r2,1024
10203c40:	18831c26 	beq	r3,r2,102048b4 <__ssvfscanf_r+0x14cc>
10203c44:	d8c0a417 	ldw	r3,656(sp)
10203c48:	1802cf1e 	bne	r3,zero,10204788 <__ssvfscanf_r+0x13a0>
10203c4c:	b009883a 	mov	r4,r22
10203c50:	d9400104 	addi	r5,sp,4
10203c54:	000d883a 	mov	r6,zero
10203c58:	020bb440 	call	1020bb44 <_strtod_r>
10203c5c:	1029883a 	mov	r20,r2
10203c60:	9880004c 	andi	r2,r19,1
10203c64:	10029926 	beq	r2,zero,102046cc <__ssvfscanf_r+0x12e4>
10203c68:	dac09c17 	ldw	r11,624(sp)
10203c6c:	58800017 	ldw	r2,0(r11)
10203c70:	5ac00104 	addi	r11,r11,4
10203c74:	dac09c15 	stw	r11,624(sp)
10203c78:	15000015 	stw	r20,0(r2)
10203c7c:	10c00115 	stw	r3,4(r2)
10203c80:	dac09f17 	ldw	r11,636(sp)
10203c84:	880d883a 	mov	r6,r17
10203c88:	5ac00044 	addi	r11,r11,1
10203c8c:	dac09f15 	stw	r11,636(sp)
10203c90:	003e1106 	br	102034d8 <__ssvfscanf_r+0xf0>
10203c94:	89c03fcc 	andi	r7,r17,255
10203c98:	39c0201c 	xori	r7,r7,128
10203c9c:	39ffe004 	addi	r7,r7,-128
10203ca0:	00800084 	movi	r2,2
10203ca4:	38bf731e 	bne	r7,r2,10203a74 <__ssvfscanf_r+0x68c>
10203ca8:	044000c4 	movi	r17,3
10203cac:	003f6606 	br	10203a48 <__ssvfscanf_r+0x660>
10203cb0:	9881400c 	andi	r2,r19,1280
10203cb4:	01810004 	movi	r6,1024
10203cb8:	11800326 	beq	r2,r6,10203cc8 <__ssvfscanf_r+0x8e0>
10203cbc:	9984703a 	and	r2,r19,r6
10203cc0:	103f6c26 	beq	r2,zero,10203a74 <__ssvfscanf_r+0x68c>
10203cc4:	a83fa126 	beq	r21,zero,10203b4c <__ssvfscanf_r+0x764>
10203cc8:	9880800c 	andi	r2,r19,512
10203ccc:	1000041e 	bne	r2,zero,10203ce0 <__ssvfscanf_r+0x8f8>
10203cd0:	d880a017 	ldw	r2,640(sp)
10203cd4:	dd00a515 	stw	r20,660(sp)
10203cd8:	a8abc83a 	sub	r21,r21,r2
10203cdc:	dd40a415 	stw	r21,656(sp)
10203ce0:	01be1fc4 	movi	r6,-1921
10203ce4:	99a6703a 	and	r19,r19,r6
10203ce8:	9cc06014 	ori	r19,r19,384
10203cec:	002b883a 	mov	r21,zero
10203cf0:	003f5506 	br	10203a48 <__ssvfscanf_r+0x660>
10203cf4:	00800044 	movi	r2,1
10203cf8:	b0bf5e1e 	bne	r22,r2,10203a74 <__ssvfscanf_r+0x68c>
10203cfc:	05800084 	movi	r22,2
10203d00:	003f5106 	br	10203a48 <__ssvfscanf_r+0x660>
10203d04:	9880200c 	andi	r2,r19,128
10203d08:	103f5a26 	beq	r2,zero,10203a74 <__ssvfscanf_r+0x68c>
10203d0c:	00bfdfc4 	movi	r2,-129
10203d10:	98a6703a 	and	r19,r19,r2
10203d14:	003f4c06 	br	10203a48 <__ssvfscanf_r+0x660>
10203d18:	d980a317 	ldw	r6,652(sp)
10203d1c:	29c03fcc 	andi	r7,r5,255
10203d20:	30800003 	ldbu	r2,0(r6)
10203d24:	38bf531e 	bne	r7,r2,10203a74 <__ssvfscanf_r+0x68c>
10203d28:	9880800c 	andi	r2,r19,512
10203d2c:	103f5126 	beq	r2,zero,10203a74 <__ssvfscanf_r+0x68c>
10203d30:	00bf5fc4 	movi	r2,-641
10203d34:	98a6703a 	and	r19,r19,r2
10203d38:	dd40a015 	stw	r21,640(sp)
10203d3c:	003f4206 	br	10203a48 <__ssvfscanf_r+0x660>
10203d40:	88800043 	ldbu	r2,1(r17)
10203d44:	ad4002a4 	muli	r21,r21,10
10203d48:	2823883a 	mov	r17,r5
10203d4c:	89400044 	addi	r5,r17,1
10203d50:	a9ab883a 	add	r21,r21,r6
10203d54:	11803fcc 	andi	r6,r2,255
10203d58:	ad7ff404 	addi	r21,r21,-48
10203d5c:	39bded2e 	bgeu	r7,r6,10203514 <__ssvfscanf_r+0x12c>
10203d60:	2189883a 	add	r4,r4,r6
10203d64:	20800043 	ldbu	r2,1(r4)
10203d68:	01000044 	movi	r4,1
10203d6c:	2823883a 	mov	r17,r5
10203d70:	108000cc 	andi	r2,r2,3
10203d74:	1102d426 	beq	r2,r4,102048c8 <__ssvfscanf_r+0x14e0>
10203d78:	00c40874 	movhi	r3,4129
10203d7c:	e0800117 	ldw	r2,4(fp)
10203d80:	18f49404 	addi	r3,r3,-11696
10203d84:	02c00284 	movi	r11,10
10203d88:	d8c0a115 	stw	r3,644(sp)
10203d8c:	dac09e15 	stw	r11,632(sp)
10203d90:	04c000c4 	movi	r19,3
10203d94:	00be9416 	blt	zero,r2,102037e8 <__ssvfscanf_r+0x400>
10203d98:	b009883a 	mov	r4,r22
10203d9c:	e00b883a 	mov	r5,fp
10203da0:	020de600 	call	1020de60 <__ssrefill_r>
10203da4:	103e9026 	beq	r2,zero,102037e8 <__ssvfscanf_r+0x400>
10203da8:	003e6606 	br	10203744 <__ssvfscanf_r+0x35c>
10203dac:	88800043 	ldbu	r2,1(r17)
10203db0:	84000414 	ori	r16,r16,16
10203db4:	2823883a 	mov	r17,r5
10203db8:	11803fcc 	andi	r6,r2,255
10203dbc:	003dd306 	br	1020350c <__ssvfscanf_r+0x124>
10203dc0:	2823883a 	mov	r17,r5
10203dc4:	84000054 	ori	r16,r16,1
10203dc8:	00840874 	movhi	r2,4129
10203dcc:	10b5ea04 	addi	r2,r2,-10328
10203dd0:	02c00204 	movi	r11,8
10203dd4:	d880a115 	stw	r2,644(sp)
10203dd8:	dac09e15 	stw	r11,632(sp)
10203ddc:	04c000c4 	movi	r19,3
10203de0:	003e7f06 	br	102037e0 <__ssvfscanf_r+0x3f8>
10203de4:	88800043 	ldbu	r2,1(r17)
10203de8:	84000094 	ori	r16,r16,2
10203dec:	2823883a 	mov	r17,r5
10203df0:	11803fcc 	andi	r6,r2,255
10203df4:	003dc506 	br	1020350c <__ssvfscanf_r+0x124>
10203df8:	2823883a 	mov	r17,r5
10203dfc:	04c00104 	movi	r19,4
10203e00:	003e7706 	br	102037e0 <__ssvfscanf_r+0x3f8>
10203e04:	2823883a 	mov	r17,r5
10203e08:	84000054 	ori	r16,r16,1
10203e0c:	00840874 	movhi	r2,4129
10203e10:	10b49404 	addi	r2,r2,-11696
10203e14:	02c00284 	movi	r11,10
10203e18:	d880a115 	stw	r2,644(sp)
10203e1c:	dac09e15 	stw	r11,632(sp)
10203e20:	04c000c4 	movi	r19,3
10203e24:	003e6e06 	br	102037e0 <__ssvfscanf_r+0x3f8>
10203e28:	00840874 	movhi	r2,4129
10203e2c:	10b5ea04 	addi	r2,r2,-10328
10203e30:	02c00284 	movi	r11,10
10203e34:	2823883a 	mov	r17,r5
10203e38:	d880a115 	stw	r2,644(sp)
10203e3c:	dac09e15 	stw	r11,632(sp)
10203e40:	04c000c4 	movi	r19,3
10203e44:	003e6606 	br	102037e0 <__ssvfscanf_r+0x3f8>
10203e48:	2823883a 	mov	r17,r5
10203e4c:	04c00084 	movi	r19,2
10203e50:	003e6306 	br	102037e0 <__ssvfscanf_r+0x3f8>
10203e54:	2823883a 	mov	r17,r5
10203e58:	84008814 	ori	r16,r16,544
10203e5c:	00840874 	movhi	r2,4129
10203e60:	10b5ea04 	addi	r2,r2,-10328
10203e64:	02c00404 	movi	r11,16
10203e68:	d880a115 	stw	r2,644(sp)
10203e6c:	dac09e15 	stw	r11,632(sp)
10203e70:	04c000c4 	movi	r19,3
10203e74:	003e5a06 	br	102037e0 <__ssvfscanf_r+0x3f8>
10203e78:	2823883a 	mov	r17,r5
10203e7c:	003fd206 	br	10203dc8 <__ssvfscanf_r+0x9e0>
10203e80:	8080040c 	andi	r2,r16,16
10203e84:	2823883a 	mov	r17,r5
10203e88:	103d921e 	bne	r2,zero,102034d4 <__ssvfscanf_r+0xec>
10203e8c:	8080010c 	andi	r2,r16,4
10203e90:	10029426 	beq	r2,zero,102048e4 <__ssvfscanf_r+0x14fc>
10203e94:	dac09c17 	ldw	r11,624(sp)
10203e98:	58800017 	ldw	r2,0(r11)
10203e9c:	5ac00104 	addi	r11,r11,4
10203ea0:	dac09c15 	stw	r11,624(sp)
10203ea4:	1480000d 	sth	r18,0(r2)
10203ea8:	003d8a06 	br	102034d4 <__ssvfscanf_r+0xec>
10203eac:	89800043 	ldbu	r6,1(r17)
10203eb0:	32828726 	beq	r6,r10,102048d0 <__ssvfscanf_r+0x14e8>
10203eb4:	84000054 	ori	r16,r16,1
10203eb8:	2823883a 	mov	r17,r5
10203ebc:	003d9306 	br	1020350c <__ssvfscanf_r+0x124>
10203ec0:	88800043 	ldbu	r2,1(r17)
10203ec4:	84000114 	ori	r16,r16,4
10203ec8:	2823883a 	mov	r17,r5
10203ecc:	11803fcc 	andi	r6,r2,255
10203ed0:	003d8e06 	br	1020350c <__ssvfscanf_r+0x124>
10203ed4:	01040874 	movhi	r4,4129
10203ed8:	21349404 	addi	r4,r4,-11696
10203edc:	02c00284 	movi	r11,10
10203ee0:	2823883a 	mov	r17,r5
10203ee4:	d900a115 	stw	r4,644(sp)
10203ee8:	dac09e15 	stw	r11,632(sp)
10203eec:	04c000c4 	movi	r19,3
10203ef0:	003e3b06 	br	102037e0 <__ssvfscanf_r+0x3f8>
10203ef4:	2823883a 	mov	r17,r5
10203ef8:	84001014 	ori	r16,r16,64
10203efc:	0027883a 	mov	r19,zero
10203f00:	003e3706 	br	102037e0 <__ssvfscanf_r+0x3f8>
10203f04:	d9005884 	addi	r4,sp,354
10203f08:	020b8b00 	call	1020b8b0 <__sccl>
10203f0c:	1023883a 	mov	r17,r2
10203f10:	84001014 	ori	r16,r16,64
10203f14:	04c00044 	movi	r19,1
10203f18:	003e3106 	br	102037e0 <__ssvfscanf_r+0x3f8>
10203f1c:	2823883a 	mov	r17,r5
10203f20:	84008014 	ori	r16,r16,512
10203f24:	003fcd06 	br	10203e5c <__ssvfscanf_r+0xa74>
10203f28:	1809883a 	mov	r4,r3
10203f2c:	e00b883a 	mov	r5,fp
10203f30:	d8c0ab15 	stw	r3,684(sp)
10203f34:	dac0a615 	stw	r11,664(sp)
10203f38:	020de600 	call	1020de60 <__ssrefill_r>
10203f3c:	d8c0ab17 	ldw	r3,684(sp)
10203f40:	dac0a617 	ldw	r11,664(sp)
10203f44:	103ecb1e 	bne	r2,zero,10203a74 <__ssvfscanf_r+0x68c>
10203f48:	803e4a1e 	bne	r16,zero,10203874 <__ssvfscanf_r+0x48c>
10203f4c:	003ec906 	br	10203a74 <__ssvfscanf_r+0x68c>
10203f50:	00800044 	movi	r2,1
10203f54:	9880291e 	bne	r19,r2,10203ffc <__ssvfscanf_r+0xc14>
10203f58:	a800011e 	bne	r21,zero,10203f60 <__ssvfscanf_r+0xb78>
10203f5c:	057fffc4 	movi	r21,-1
10203f60:	8400040c 	andi	r16,r16,16
10203f64:	80012c26 	beq	r16,zero,10204418 <__ssvfscanf_r+0x1030>
10203f68:	e1000017 	ldw	r4,0(fp)
10203f6c:	0021883a 	mov	r16,zero
10203f70:	dd005884 	addi	r20,sp,354
10203f74:	20800003 	ldbu	r2,0(r4)
10203f78:	a085883a 	add	r2,r20,r2
10203f7c:	10800007 	ldb	r2,0(r2)
10203f80:	10001126 	beq	r2,zero,10203fc8 <__ssvfscanf_r+0xbe0>
10203f84:	e0800117 	ldw	r2,4(fp)
10203f88:	21000044 	addi	r4,r4,1
10203f8c:	84000044 	addi	r16,r16,1
10203f90:	10bfffc4 	addi	r2,r2,-1
10203f94:	e0800115 	stw	r2,4(fp)
10203f98:	e1000015 	stw	r4,0(fp)
10203f9c:	ac000b26 	beq	r21,r16,10203fcc <__ssvfscanf_r+0xbe4>
10203fa0:	00bff416 	blt	zero,r2,10203f74 <__ssvfscanf_r+0xb8c>
10203fa4:	b009883a 	mov	r4,r22
10203fa8:	e00b883a 	mov	r5,fp
10203fac:	020de600 	call	1020de60 <__ssrefill_r>
10203fb0:	1000061e 	bne	r2,zero,10203fcc <__ssvfscanf_r+0xbe4>
10203fb4:	e1000017 	ldw	r4,0(fp)
10203fb8:	20800003 	ldbu	r2,0(r4)
10203fbc:	a085883a 	add	r2,r20,r2
10203fc0:	10800007 	ldb	r2,0(r2)
10203fc4:	103fef1e 	bne	r2,zero,10203f84 <__ssvfscanf_r+0xb9c>
10203fc8:	803d4726 	beq	r16,zero,102034e8 <__ssvfscanf_r+0x100>
10203fcc:	9425883a 	add	r18,r18,r16
10203fd0:	880d883a 	mov	r6,r17
10203fd4:	003d4006 	br	102034d8 <__ssvfscanf_r+0xf0>
10203fd8:	01c000c4 	movi	r7,3
10203fdc:	11fed126 	beq	r2,r7,10203b24 <__ssvfscanf_r+0x73c>
10203fe0:	01c00144 	movi	r7,5
10203fe4:	11fecf26 	beq	r2,r7,10203b24 <__ssvfscanf_r+0x73c>
10203fe8:	003ea206 	br	10203a74 <__ssvfscanf_r+0x68c>
10203fec:	00800084 	movi	r2,2
10203ff0:	b0bec51e 	bne	r22,r2,10203b08 <__ssvfscanf_r+0x720>
10203ff4:	058000c4 	movi	r22,3
10203ff8:	003e9306 	br	10203a48 <__ssvfscanf_r+0x660>
10203ffc:	a800011e 	bne	r21,zero,10204004 <__ssvfscanf_r+0xc1c>
10204000:	05400044 	movi	r21,1
10204004:	8080004c 	andi	r2,r16,1
10204008:	10017d1e 	bne	r2,zero,10204600 <__ssvfscanf_r+0x1218>
1020400c:	8400040c 	andi	r16,r16,16
10204010:	80020226 	beq	r16,zero,1020481c <__ssvfscanf_r+0x1434>
10204014:	0021883a 	mov	r16,zero
10204018:	00000906 	br	10204040 <__ssvfscanf_r+0xc58>
1020401c:	e0c00017 	ldw	r3,0(fp)
10204020:	b009883a 	mov	r4,r22
10204024:	e00b883a 	mov	r5,fp
10204028:	1887883a 	add	r3,r3,r2
1020402c:	e0c00015 	stw	r3,0(fp)
10204030:	80a1883a 	add	r16,r16,r2
10204034:	a8abc83a 	sub	r21,r21,r2
10204038:	020de600 	call	1020de60 <__ssrefill_r>
1020403c:	1001f41e 	bne	r2,zero,10204810 <__ssvfscanf_r+0x1428>
10204040:	e0800117 	ldw	r2,4(fp)
10204044:	157ff516 	blt	r2,r21,1020401c <__ssvfscanf_r+0xc34>
10204048:	e1000017 	ldw	r4,0(fp)
1020404c:	1545c83a 	sub	r2,r2,r21
10204050:	ac21883a 	add	r16,r21,r16
10204054:	2547883a 	add	r3,r4,r21
10204058:	e0800115 	stw	r2,4(fp)
1020405c:	e0c00015 	stw	r3,0(fp)
10204060:	9425883a 	add	r18,r18,r16
10204064:	003fda06 	br	10203fd0 <__ssvfscanf_r+0xbe8>
10204068:	a8bfffc4 	addi	r2,r21,-1
1020406c:	01005704 	movi	r4,348
10204070:	2080e72e 	bgeu	r4,r2,10204410 <__ssvfscanf_r+0x1028>
10204074:	a9ffa8c4 	addi	r7,r21,-349
10204078:	05405744 	movi	r21,349
1020407c:	85036014 	ori	r20,r16,3456
10204080:	0021883a 	mov	r16,zero
10204084:	8813883a 	mov	r9,r17
10204088:	8023883a 	mov	r17,r16
1020408c:	dc009e17 	ldw	r16,632(sp)
10204090:	dcc00104 	addi	r19,sp,4
10204094:	02001344 	movi	r8,77
10204098:	02808004 	movi	r10,512
1020409c:	01bf7fc4 	movi	r6,-513
102040a0:	00ffdfc4 	movi	r3,-129
102040a4:	e1000017 	ldw	r4,0(fp)
102040a8:	21400003 	ldbu	r5,0(r4)
102040ac:	28bff544 	addi	r2,r5,-43
102040b0:	10803fcc 	andi	r2,r2,255
102040b4:	40806336 	bltu	r8,r2,10204244 <__ssvfscanf_r+0xe5c>
102040b8:	100490ba 	slli	r2,r2,2
102040bc:	02c40834 	movhi	r11,4128
102040c0:	5ad03404 	addi	r11,r11,16592
102040c4:	12c5883a 	add	r2,r2,r11
102040c8:	10800017 	ldw	r2,0(r2)
102040cc:	1000683a 	jmp	r2
102040d0:	1020429c 	xori	zero,r2,33034
102040d4:	10204244 	addi	zero,r2,-32503
102040d8:	1020429c 	xori	zero,r2,33034
102040dc:	10204244 	addi	zero,r2,-32503
102040e0:	10204244 	addi	zero,r2,-32503
102040e4:	102042cc 	andi	zero,r2,33035
102040e8:	102042ac 	andhi	zero,r2,33034
102040ec:	102042ac 	andhi	zero,r2,33034
102040f0:	102042ac 	andhi	zero,r2,33034
102040f4:	102042ac 	andhi	zero,r2,33034
102040f8:	102042ac 	andhi	zero,r2,33034
102040fc:	102042ac 	andhi	zero,r2,33034
10204100:	102042ac 	andhi	zero,r2,33034
10204104:	10204354 	ori	zero,r2,33037
10204108:	10204354 	ori	zero,r2,33037
1020410c:	10204244 	addi	zero,r2,-32503
10204110:	10204244 	addi	zero,r2,-32503
10204114:	10204244 	addi	zero,r2,-32503
10204118:	10204244 	addi	zero,r2,-32503
1020411c:	10204244 	addi	zero,r2,-32503
10204120:	10204244 	addi	zero,r2,-32503
10204124:	10204244 	addi	zero,r2,-32503
10204128:	10204288 	cmpgei	zero,r2,-32502
1020412c:	10204288 	cmpgei	zero,r2,-32502
10204130:	10204288 	cmpgei	zero,r2,-32502
10204134:	10204288 	cmpgei	zero,r2,-32502
10204138:	10204288 	cmpgei	zero,r2,-32502
1020413c:	10204288 	cmpgei	zero,r2,-32502
10204140:	10204244 	addi	zero,r2,-32503
10204144:	10204244 	addi	zero,r2,-32503
10204148:	10204244 	addi	zero,r2,-32503
1020414c:	10204244 	addi	zero,r2,-32503
10204150:	10204244 	addi	zero,r2,-32503
10204154:	10204244 	addi	zero,r2,-32503
10204158:	10204244 	addi	zero,r2,-32503
1020415c:	10204244 	addi	zero,r2,-32503
10204160:	10204244 	addi	zero,r2,-32503
10204164:	10204244 	addi	zero,r2,-32503
10204168:	10204244 	addi	zero,r2,-32503
1020416c:	10204244 	addi	zero,r2,-32503
10204170:	10204244 	addi	zero,r2,-32503
10204174:	10204244 	addi	zero,r2,-32503
10204178:	10204244 	addi	zero,r2,-32503
1020417c:	10204244 	addi	zero,r2,-32503
10204180:	10204244 	addi	zero,r2,-32503
10204184:	10204208 	cmpgei	zero,r2,-32504
10204188:	10204244 	addi	zero,r2,-32503
1020418c:	10204244 	addi	zero,r2,-32503
10204190:	10204244 	addi	zero,r2,-32503
10204194:	10204244 	addi	zero,r2,-32503
10204198:	10204244 	addi	zero,r2,-32503
1020419c:	10204244 	addi	zero,r2,-32503
102041a0:	10204244 	addi	zero,r2,-32503
102041a4:	10204244 	addi	zero,r2,-32503
102041a8:	10204288 	cmpgei	zero,r2,-32502
102041ac:	10204288 	cmpgei	zero,r2,-32502
102041b0:	10204288 	cmpgei	zero,r2,-32502
102041b4:	10204288 	cmpgei	zero,r2,-32502
102041b8:	10204288 	cmpgei	zero,r2,-32502
102041bc:	10204288 	cmpgei	zero,r2,-32502
102041c0:	10204244 	addi	zero,r2,-32503
102041c4:	10204244 	addi	zero,r2,-32503
102041c8:	10204244 	addi	zero,r2,-32503
102041cc:	10204244 	addi	zero,r2,-32503
102041d0:	10204244 	addi	zero,r2,-32503
102041d4:	10204244 	addi	zero,r2,-32503
102041d8:	10204244 	addi	zero,r2,-32503
102041dc:	10204244 	addi	zero,r2,-32503
102041e0:	10204244 	addi	zero,r2,-32503
102041e4:	10204244 	addi	zero,r2,-32503
102041e8:	10204244 	addi	zero,r2,-32503
102041ec:	10204244 	addi	zero,r2,-32503
102041f0:	10204244 	addi	zero,r2,-32503
102041f4:	10204244 	addi	zero,r2,-32503
102041f8:	10204244 	addi	zero,r2,-32503
102041fc:	10204244 	addi	zero,r2,-32503
10204200:	10204244 	addi	zero,r2,-32503
10204204:	10204208 	cmpgei	zero,r2,-32504
10204208:	a081800c 	andi	r2,r20,1536
1020420c:	12800d1e 	bne	r2,r10,10204244 <__ssvfscanf_r+0xe5c>
10204210:	a1a8703a 	and	r20,r20,r6
10204214:	a5014014 	ori	r20,r20,1280
10204218:	04000404 	movi	r16,16
1020421c:	e0800117 	ldw	r2,4(fp)
10204220:	99400005 	stb	r5,0(r19)
10204224:	9cc00044 	addi	r19,r19,1
10204228:	10bfffc4 	addi	r2,r2,-1
1020422c:	e0800115 	stw	r2,4(fp)
10204230:	0080370e 	bge	zero,r2,10204310 <__ssvfscanf_r+0xf28>
10204234:	21000044 	addi	r4,r4,1
10204238:	e1000015 	stw	r4,0(fp)
1020423c:	ad7fffc4 	addi	r21,r21,-1
10204240:	a83f981e 	bne	r21,zero,102040a4 <__ssvfscanf_r+0xcbc>
10204244:	dc009e15 	stw	r16,632(sp)
10204248:	a080400c 	andi	r2,r20,256
1020424c:	8821883a 	mov	r16,r17
10204250:	4823883a 	mov	r17,r9
10204254:	10000426 	beq	r2,zero,10204268 <__ssvfscanf_r+0xe80>
10204258:	d8800104 	addi	r2,sp,4
1020425c:	14c18736 	bltu	r2,r19,1020487c <__ssvfscanf_r+0x1494>
10204260:	d8c00104 	addi	r3,sp,4
10204264:	1cfca026 	beq	r3,r19,102034e8 <__ssvfscanf_r+0x100>
10204268:	a080040c 	andi	r2,r20,16
1020426c:	1000d226 	beq	r2,zero,102045b8 <__ssvfscanf_r+0x11d0>
10204270:	d8800104 	addi	r2,sp,4
10204274:	98a7c83a 	sub	r19,r19,r2
10204278:	9c27883a 	add	r19,r19,r16
1020427c:	94e5883a 	add	r18,r18,r19
10204280:	880d883a 	mov	r6,r17
10204284:	003c9406 	br	102034d8 <__ssvfscanf_r+0xf0>
10204288:	00800284 	movi	r2,10
1020428c:	143fed0e 	bge	r2,r16,10204244 <__ssvfscanf_r+0xe5c>
10204290:	00bd1fc4 	movi	r2,-2945
10204294:	a0a8703a 	and	r20,r20,r2
10204298:	003fe006 	br	1020421c <__ssvfscanf_r+0xe34>
1020429c:	a080200c 	andi	r2,r20,128
102042a0:	103fe826 	beq	r2,zero,10204244 <__ssvfscanf_r+0xe5c>
102042a4:	a0e8703a 	and	r20,r20,r3
102042a8:	003fdc06 	br	1020421c <__ssvfscanf_r+0xe34>
102042ac:	02c408b4 	movhi	r11,4130
102042b0:	8421883a 	add	r16,r16,r16
102042b4:	5af40784 	addi	r11,r11,-12258
102042b8:	5c05883a 	add	r2,r11,r16
102042bc:	1400000f 	ldh	r16,0(r2)
102042c0:	00bd1fc4 	movi	r2,-2945
102042c4:	a0a8703a 	and	r20,r20,r2
102042c8:	003fd406 	br	1020421c <__ssvfscanf_r+0xe34>
102042cc:	a082000c 	andi	r2,r20,2048
102042d0:	103fd226 	beq	r2,zero,1020421c <__ssvfscanf_r+0xe34>
102042d4:	8000021e 	bne	r16,zero,102042e0 <__ssvfscanf_r+0xef8>
102042d8:	a5008014 	ori	r20,r20,512
102042dc:	04000204 	movi	r16,8
102042e0:	a081000c 	andi	r2,r20,1024
102042e4:	10010c1e 	bne	r2,zero,10204718 <__ssvfscanf_r+0x1330>
102042e8:	00bf1fc4 	movi	r2,-897
102042ec:	a0a8703a 	and	r20,r20,r2
102042f0:	38000226 	beq	r7,zero,102042fc <__ssvfscanf_r+0xf14>
102042f4:	39ffffc4 	addi	r7,r7,-1
102042f8:	ad400044 	addi	r21,r21,1
102042fc:	e0800117 	ldw	r2,4(fp)
10204300:	8c400044 	addi	r17,r17,1
10204304:	10bfffc4 	addi	r2,r2,-1
10204308:	e0800115 	stw	r2,4(fp)
1020430c:	00bfc916 	blt	zero,r2,10204234 <__ssvfscanf_r+0xe4c>
10204310:	b009883a 	mov	r4,r22
10204314:	e00b883a 	mov	r5,fp
10204318:	d8c0ab15 	stw	r3,684(sp)
1020431c:	d980a815 	stw	r6,672(sp)
10204320:	d9c0a915 	stw	r7,676(sp)
10204324:	da00a615 	stw	r8,664(sp)
10204328:	da40aa15 	stw	r9,680(sp)
1020432c:	da80a715 	stw	r10,668(sp)
10204330:	020de600 	call	1020de60 <__ssrefill_r>
10204334:	d8c0ab17 	ldw	r3,684(sp)
10204338:	d980a817 	ldw	r6,672(sp)
1020433c:	d9c0a917 	ldw	r7,676(sp)
10204340:	da00a617 	ldw	r8,664(sp)
10204344:	da40aa17 	ldw	r9,680(sp)
10204348:	da80a717 	ldw	r10,668(sp)
1020434c:	103fbb26 	beq	r2,zero,1020423c <__ssvfscanf_r+0xe54>
10204350:	003fbc06 	br	10204244 <__ssvfscanf_r+0xe5c>
10204354:	02c408b4 	movhi	r11,4130
10204358:	8421883a 	add	r16,r16,r16
1020435c:	5af40784 	addi	r11,r11,-12258
10204360:	5c05883a 	add	r2,r11,r16
10204364:	1400000f 	ldh	r16,0(r2)
10204368:	00800204 	movi	r2,8
1020436c:	143fc816 	blt	r2,r16,10204290 <__ssvfscanf_r+0xea8>
10204370:	003fb406 	br	10204244 <__ssvfscanf_r+0xe5c>
10204374:	a800011e 	bne	r21,zero,1020437c <__ssvfscanf_r+0xf94>
10204378:	057fffc4 	movi	r21,-1
1020437c:	8080004c 	andi	r2,r16,1
10204380:	10006f1e 	bne	r2,zero,10204540 <__ssvfscanf_r+0x1158>
10204384:	8400040c 	andi	r16,r16,16
10204388:	80004526 	beq	r16,zero,102044a0 <__ssvfscanf_r+0x10b8>
1020438c:	b9400017 	ldw	r5,0(r23)
10204390:	e1000017 	ldw	r4,0(fp)
10204394:	0021883a 	mov	r16,zero
10204398:	20800003 	ldbu	r2,0(r4)
1020439c:	2885883a 	add	r2,r5,r2
102043a0:	10800043 	ldbu	r2,1(r2)
102043a4:	1080020c 	andi	r2,r2,8
102043a8:	103f081e 	bne	r2,zero,10203fcc <__ssvfscanf_r+0xbe4>
102043ac:	e0800117 	ldw	r2,4(fp)
102043b0:	21000044 	addi	r4,r4,1
102043b4:	84000044 	addi	r16,r16,1
102043b8:	10bfffc4 	addi	r2,r2,-1
102043bc:	e0800115 	stw	r2,4(fp)
102043c0:	e1000015 	stw	r4,0(fp)
102043c4:	ac3f0126 	beq	r21,r16,10203fcc <__ssvfscanf_r+0xbe4>
102043c8:	00bff316 	blt	zero,r2,10204398 <__ssvfscanf_r+0xfb0>
102043cc:	b009883a 	mov	r4,r22
102043d0:	e00b883a 	mov	r5,fp
102043d4:	020de600 	call	1020de60 <__ssrefill_r>
102043d8:	103efc1e 	bne	r2,zero,10203fcc <__ssvfscanf_r+0xbe4>
102043dc:	b9400017 	ldw	r5,0(r23)
102043e0:	e1000017 	ldw	r4,0(fp)
102043e4:	003fec06 	br	10204398 <__ssvfscanf_r+0xfb0>
102043e8:	880d883a 	mov	r6,r17
102043ec:	dc409d17 	ldw	r17,628(sp)
102043f0:	b019883a 	mov	r12,r22
102043f4:	a821883a 	mov	r16,r21
102043f8:	182d883a 	mov	r22,r3
102043fc:	00bfbfc4 	movi	r2,-257
10204400:	98a6703a 	and	r19,r19,r2
10204404:	003dd606 	br	10203b60 <__ssvfscanf_r+0x778>
10204408:	d800a215 	stw	zero,648(sp)
1020440c:	003d0906 	br	10203834 <__ssvfscanf_r+0x44c>
10204410:	000f883a 	mov	r7,zero
10204414:	003f1906 	br	1020407c <__ssvfscanf_r+0xc94>
10204418:	dac09c17 	ldw	r11,624(sp)
1020441c:	a8ffffc4 	addi	r3,r21,-1
10204420:	dd005884 	addi	r20,sp,354
10204424:	5c000017 	ldw	r16,0(r11)
10204428:	59800104 	addi	r6,r11,4
1020442c:	d9809c15 	stw	r6,624(sp)
10204430:	800b883a 	mov	r5,r16
10204434:	80eb883a 	add	r21,r16,r3
10204438:	00000106 	br	10204440 <__ssvfscanf_r+0x1058>
1020443c:	980b883a 	mov	r5,r19
10204440:	e0c00017 	ldw	r3,0(fp)
10204444:	280d883a 	mov	r6,r5
10204448:	18800003 	ldbu	r2,0(r3)
1020444c:	a085883a 	add	r2,r20,r2
10204450:	10800007 	ldb	r2,0(r2)
10204454:	1000ec26 	beq	r2,zero,10204808 <__ssvfscanf_r+0x1420>
10204458:	e0800117 	ldw	r2,4(fp)
1020445c:	19c00044 	addi	r7,r3,1
10204460:	e1c00015 	stw	r7,0(fp)
10204464:	10bfffc4 	addi	r2,r2,-1
10204468:	e0800115 	stw	r2,4(fp)
1020446c:	18800003 	ldbu	r2,0(r3)
10204470:	34c00044 	addi	r19,r6,1
10204474:	28800005 	stb	r2,0(r5)
10204478:	3540da26 	beq	r6,r21,102047e4 <__ssvfscanf_r+0x13fc>
1020447c:	e0800117 	ldw	r2,4(fp)
10204480:	00bfee16 	blt	zero,r2,1020443c <__ssvfscanf_r+0x1054>
10204484:	b009883a 	mov	r4,r22
10204488:	e00b883a 	mov	r5,fp
1020448c:	020de600 	call	1020de60 <__ssrefill_r>
10204490:	103fea26 	beq	r2,zero,1020443c <__ssvfscanf_r+0x1054>
10204494:	9809883a 	mov	r4,r19
10204498:	84c0d31e 	bne	r16,r19,102047e8 <__ssvfscanf_r+0x1400>
1020449c:	003ca906 	br	10203744 <__ssvfscanf_r+0x35c>
102044a0:	dac09c17 	ldw	r11,624(sp)
102044a4:	a8ffffc4 	addi	r3,r21,-1
102044a8:	5cc00017 	ldw	r19,0(r11)
102044ac:	59800104 	addi	r6,r11,4
102044b0:	d9809c15 	stw	r6,624(sp)
102044b4:	98e9883a 	add	r20,r19,r3
102044b8:	980b883a 	mov	r5,r19
102044bc:	00000106 	br	102044c4 <__ssvfscanf_r+0x10dc>
102044c0:	a80b883a 	mov	r5,r21
102044c4:	e0c00017 	ldw	r3,0(fp)
102044c8:	b9800017 	ldw	r6,0(r23)
102044cc:	18800003 	ldbu	r2,0(r3)
102044d0:	3085883a 	add	r2,r6,r2
102044d4:	10800043 	ldbu	r2,1(r2)
102044d8:	1080020c 	andi	r2,r2,8
102044dc:	1000e01e 	bne	r2,zero,10204860 <__ssvfscanf_r+0x1478>
102044e0:	e0800117 	ldw	r2,4(fp)
102044e4:	19800044 	addi	r6,r3,1
102044e8:	e1800015 	stw	r6,0(fp)
102044ec:	10bfffc4 	addi	r2,r2,-1
102044f0:	e0800115 	stw	r2,4(fp)
102044f4:	18800003 	ldbu	r2,0(r3)
102044f8:	2d400044 	addi	r21,r5,1
102044fc:	a821883a 	mov	r16,r21
10204500:	28800005 	stb	r2,0(r5)
10204504:	2d000626 	beq	r5,r20,10204520 <__ssvfscanf_r+0x1138>
10204508:	e0800117 	ldw	r2,4(fp)
1020450c:	00bfec16 	blt	zero,r2,102044c0 <__ssvfscanf_r+0x10d8>
10204510:	b009883a 	mov	r4,r22
10204514:	e00b883a 	mov	r5,fp
10204518:	020de600 	call	1020de60 <__ssrefill_r>
1020451c:	103fe826 	beq	r2,zero,102044c0 <__ssvfscanf_r+0x10d8>
10204520:	dac09f17 	ldw	r11,636(sp)
10204524:	84e7c83a 	sub	r19,r16,r19
10204528:	80000005 	stb	zero,0(r16)
1020452c:	5ac00044 	addi	r11,r11,1
10204530:	94e5883a 	add	r18,r18,r19
10204534:	dac09f15 	stw	r11,636(sp)
10204538:	880d883a 	mov	r6,r17
1020453c:	003be606 	br	102034d8 <__ssvfscanf_r+0xf0>
10204540:	d8c09904 	addi	r3,sp,612
10204544:	8400040c 	andi	r16,r16,16
10204548:	1809883a 	mov	r4,r3
1020454c:	000b883a 	mov	r5,zero
10204550:	01800204 	movi	r6,8
10204554:	d8c09d15 	stw	r3,628(sp)
10204558:	0209e580 	call	10209e58 <memset>
1020455c:	80007126 	beq	r16,zero,10204724 <__ssvfscanf_r+0x133c>
10204560:	dcc09b04 	addi	r19,sp,620
10204564:	0007883a 	mov	r3,zero
10204568:	dc40a015 	stw	r17,640(sp)
1020456c:	8023883a 	mov	r17,r16
10204570:	1821883a 	mov	r16,r3
10204574:	e0800017 	ldw	r2,0(fp)
10204578:	b8c00017 	ldw	r3,0(r23)
1020457c:	10800003 	ldbu	r2,0(r2)
10204580:	1885883a 	add	r2,r3,r2
10204584:	10800043 	ldbu	r2,1(r2)
10204588:	1080020c 	andi	r2,r2,8
1020458c:	1000011e 	bne	r2,zero,10204594 <__ssvfscanf_r+0x11ac>
10204590:	a800ff1e 	bne	r21,zero,10204990 <__ssvfscanf_r+0x15a8>
10204594:	8821883a 	mov	r16,r17
10204598:	dc40a017 	ldw	r17,640(sp)
1020459c:	803bcd1e 	bne	r16,zero,102034d4 <__ssvfscanf_r+0xec>
102045a0:	dac09f17 	ldw	r11,636(sp)
102045a4:	98000015 	stw	zero,0(r19)
102045a8:	880d883a 	mov	r6,r17
102045ac:	5ac00044 	addi	r11,r11,1
102045b0:	dac09f15 	stw	r11,636(sp)
102045b4:	003bc806 	br	102034d8 <__ssvfscanf_r+0xf0>
102045b8:	d9c09e17 	ldw	r7,632(sp)
102045bc:	dac0a117 	ldw	r11,644(sp)
102045c0:	b009883a 	mov	r4,r22
102045c4:	d9400104 	addi	r5,sp,4
102045c8:	000d883a 	mov	r6,zero
102045cc:	98000005 	stb	zero,0(r19)
102045d0:	583ee83a 	callr	r11
102045d4:	a0c0080c 	andi	r3,r20,32
102045d8:	18006326 	beq	r3,zero,10204768 <__ssvfscanf_r+0x1380>
102045dc:	dac09c17 	ldw	r11,624(sp)
102045e0:	58c00017 	ldw	r3,0(r11)
102045e4:	5ac00104 	addi	r11,r11,4
102045e8:	dac09c15 	stw	r11,624(sp)
102045ec:	18800015 	stw	r2,0(r3)
102045f0:	dac09f17 	ldw	r11,636(sp)
102045f4:	5ac00044 	addi	r11,r11,1
102045f8:	dac09f15 	stw	r11,636(sp)
102045fc:	003f1c06 	br	10204270 <__ssvfscanf_r+0xe88>
10204600:	d8c09904 	addi	r3,sp,612
10204604:	8400040c 	andi	r16,r16,16
10204608:	1809883a 	mov	r4,r3
1020460c:	000b883a 	mov	r5,zero
10204610:	01800204 	movi	r6,8
10204614:	dc00a015 	stw	r16,640(sp)
10204618:	d8c09d15 	stw	r3,628(sp)
1020461c:	0209e580 	call	10209e58 <memset>
10204620:	dc00a017 	ldw	r16,640(sp)
10204624:	80004b26 	beq	r16,zero,10204754 <__ssvfscanf_r+0x136c>
10204628:	0027883a 	mov	r19,zero
1020462c:	dc00a017 	ldw	r16,640(sp)
10204630:	0029883a 	mov	r20,zero
10204634:	dc40a215 	stw	r17,648(sp)
10204638:	02097840 	call	10209784 <__locale_mb_cur_max>
1020463c:	153c4126 	beq	r2,r20,10203744 <__ssvfscanf_r+0x35c>
10204640:	e0800017 	ldw	r2,0(fp)
10204644:	e1000117 	ldw	r4,4(fp)
10204648:	dac09d17 	ldw	r11,628(sp)
1020464c:	12400003 	ldbu	r9,0(r2)
10204650:	213fffc4 	addi	r4,r4,-1
10204654:	10800044 	addi	r2,r2,1
10204658:	d8c00104 	addi	r3,sp,4
1020465c:	e1000115 	stw	r4,4(fp)
10204660:	e0800015 	stw	r2,0(fp)
10204664:	a4400044 	addi	r17,r20,1
10204668:	dac00015 	stw	r11,0(sp)
1020466c:	1d29883a 	add	r20,r3,r20
10204670:	180d883a 	mov	r6,r3
10204674:	b009883a 	mov	r4,r22
10204678:	980b883a 	mov	r5,r19
1020467c:	880f883a 	mov	r7,r17
10204680:	a2400005 	stb	r9,0(r20)
10204684:	02099f00 	call	102099f0 <_mbrtowc_r>
10204688:	00ffffc4 	movi	r3,-1
1020468c:	10fc2d26 	beq	r2,r3,10203744 <__ssvfscanf_r+0x35c>
10204690:	10004e1e 	bne	r2,zero,102047cc <__ssvfscanf_r+0x13e4>
10204694:	8000011e 	bne	r16,zero,1020469c <__ssvfscanf_r+0x12b4>
10204698:	98000015 	stw	zero,0(r19)
1020469c:	9465883a 	add	r18,r18,r17
102046a0:	ad7fffc4 	addi	r21,r21,-1
102046a4:	80004d1e 	bne	r16,zero,102047dc <__ssvfscanf_r+0x13f4>
102046a8:	9cc00104 	addi	r19,r19,4
102046ac:	0029883a 	mov	r20,zero
102046b0:	e0800117 	ldw	r2,4(fp)
102046b4:	0080200e 	bge	zero,r2,10204738 <__ssvfscanf_r+0x1350>
102046b8:	a83fdf1e 	bne	r21,zero,10204638 <__ssvfscanf_r+0x1250>
102046bc:	dc40a217 	ldw	r17,648(sp)
102046c0:	dac0a017 	ldw	r11,640(sp)
102046c4:	583d6e26 	beq	r11,zero,10203c80 <__ssvfscanf_r+0x898>
102046c8:	003b8206 	br	102034d4 <__ssvfscanf_r+0xec>
102046cc:	9a80008c 	andi	r10,r19,2
102046d0:	503d651e 	bne	r10,zero,10203c68 <__ssvfscanf_r+0x880>
102046d4:	dac09c17 	ldw	r11,624(sp)
102046d8:	180b883a 	mov	r5,r3
102046dc:	a009883a 	mov	r4,r20
102046e0:	5cc00017 	ldw	r19,0(r11)
102046e4:	5c000104 	addi	r16,r11,4
102046e8:	d8c0ab15 	stw	r3,684(sp)
102046ec:	020b83c0 	call	1020b83c <__fpclassifyd>
102046f0:	d8c0ab17 	ldw	r3,684(sp)
102046f4:	1000a126 	beq	r2,zero,1020497c <__ssvfscanf_r+0x1594>
102046f8:	a009883a 	mov	r4,r20
102046fc:	180b883a 	mov	r5,r3
10204700:	02180940 	call	10218094 <__truncdfsf2>
10204704:	98800015 	stw	r2,0(r19)
10204708:	dc009c15 	stw	r16,624(sp)
1020470c:	003d5c06 	br	10203c80 <__ssvfscanf_r+0x898>
10204710:	5805883a 	mov	r2,r11
10204714:	003c1106 	br	1020375c <__ssvfscanf_r+0x374>
10204718:	00be9fc4 	movi	r2,-1409
1020471c:	a0a8703a 	and	r20,r20,r2
10204720:	003ebe06 	br	1020421c <__ssvfscanf_r+0xe34>
10204724:	dac09c17 	ldw	r11,624(sp)
10204728:	5cc00017 	ldw	r19,0(r11)
1020472c:	5ac00104 	addi	r11,r11,4
10204730:	dac09c15 	stw	r11,624(sp)
10204734:	003f8b06 	br	10204564 <__ssvfscanf_r+0x117c>
10204738:	b009883a 	mov	r4,r22
1020473c:	e00b883a 	mov	r5,fp
10204740:	020de600 	call	1020de60 <__ssrefill_r>
10204744:	103fdc26 	beq	r2,zero,102046b8 <__ssvfscanf_r+0x12d0>
10204748:	dc40a217 	ldw	r17,648(sp)
1020474c:	a03fdc26 	beq	r20,zero,102046c0 <__ssvfscanf_r+0x12d8>
10204750:	003bfc06 	br	10203744 <__ssvfscanf_r+0x35c>
10204754:	dac09c17 	ldw	r11,624(sp)
10204758:	5cc00017 	ldw	r19,0(r11)
1020475c:	5ac00104 	addi	r11,r11,4
10204760:	dac09c15 	stw	r11,624(sp)
10204764:	003fb106 	br	1020462c <__ssvfscanf_r+0x1244>
10204768:	a0c0010c 	andi	r3,r20,4
1020476c:	18006f26 	beq	r3,zero,1020492c <__ssvfscanf_r+0x1544>
10204770:	dac09c17 	ldw	r11,624(sp)
10204774:	58c00017 	ldw	r3,0(r11)
10204778:	5ac00104 	addi	r11,r11,4
1020477c:	dac09c15 	stw	r11,624(sp)
10204780:	1880000d 	sth	r2,0(r3)
10204784:	003f9a06 	br	102045f0 <__ssvfscanf_r+0x1208>
10204788:	dac0a517 	ldw	r11,660(sp)
1020478c:	000d883a 	mov	r6,zero
10204790:	b009883a 	mov	r4,r22
10204794:	59400044 	addi	r5,r11,1
10204798:	01c00284 	movi	r7,10
1020479c:	020d2500 	call	1020d250 <_strtol_r>
102047a0:	d8c0a417 	ldw	r3,656(sp)
102047a4:	dd00a517 	ldw	r20,660(sp)
102047a8:	10cdc83a 	sub	r6,r2,r3
102047ac:	d88055c4 	addi	r2,sp,343
102047b0:	a0800136 	bltu	r20,r2,102047b8 <__ssvfscanf_r+0x13d0>
102047b4:	dd005584 	addi	r20,sp,342
102047b8:	014408b4 	movhi	r5,4130
102047bc:	29740604 	addi	r5,r5,-12264
102047c0:	a009883a 	mov	r4,r20
102047c4:	020b9d00 	call	1020b9d0 <sprintf>
102047c8:	003d2006 	br	10203c4c <__ssvfscanf_r+0x864>
102047cc:	013fff84 	movi	r4,-2
102047d0:	113fb21e 	bne	r2,r4,1020469c <__ssvfscanf_r+0x12b4>
102047d4:	8829883a 	mov	r20,r17
102047d8:	003fb506 	br	102046b0 <__ssvfscanf_r+0x12c8>
102047dc:	0029883a 	mov	r20,zero
102047e0:	003fb306 	br	102046b0 <__ssvfscanf_r+0x12c8>
102047e4:	9809883a 	mov	r4,r19
102047e8:	2421c83a 	sub	r16,r4,r16
102047ec:	803b3e26 	beq	r16,zero,102034e8 <__ssvfscanf_r+0x100>
102047f0:	dac09f17 	ldw	r11,636(sp)
102047f4:	20000005 	stb	zero,0(r4)
102047f8:	9425883a 	add	r18,r18,r16
102047fc:	5ac00044 	addi	r11,r11,1
10204800:	dac09f15 	stw	r11,636(sp)
10204804:	003df206 	br	10203fd0 <__ssvfscanf_r+0xbe8>
10204808:	2809883a 	mov	r4,r5
1020480c:	003ff606 	br	102047e8 <__ssvfscanf_r+0x1400>
10204810:	803bcc26 	beq	r16,zero,10203744 <__ssvfscanf_r+0x35c>
10204814:	9425883a 	add	r18,r18,r16
10204818:	003ded06 	br	10203fd0 <__ssvfscanf_r+0xbe8>
1020481c:	dac09c17 	ldw	r11,624(sp)
10204820:	df000015 	stw	fp,0(sp)
10204824:	b009883a 	mov	r4,r22
10204828:	59400017 	ldw	r5,0(r11)
1020482c:	01800044 	movi	r6,1
10204830:	a80f883a 	mov	r7,r21
10204834:	020ded00 	call	1020ded0 <_sfread_r>
10204838:	dac09c17 	ldw	r11,624(sp)
1020483c:	58c00104 	addi	r3,r11,4
10204840:	103bc026 	beq	r2,zero,10203744 <__ssvfscanf_r+0x35c>
10204844:	dac09f17 	ldw	r11,636(sp)
10204848:	14a5883a 	add	r18,r2,r18
1020484c:	d8c09c15 	stw	r3,624(sp)
10204850:	5ac00044 	addi	r11,r11,1
10204854:	dac09f15 	stw	r11,636(sp)
10204858:	880d883a 	mov	r6,r17
1020485c:	003b1e06 	br	102034d8 <__ssvfscanf_r+0xf0>
10204860:	2821883a 	mov	r16,r5
10204864:	003f2e06 	br	10204520 <__ssvfscanf_r+0x1138>
10204868:	b009883a 	mov	r4,r22
1020486c:	e00b883a 	mov	r5,fp
10204870:	020de600 	call	1020de60 <__ssrefill_r>
10204874:	103bc826 	beq	r2,zero,10203798 <__ssvfscanf_r+0x3b0>
10204878:	003bb206 	br	10203744 <__ssvfscanf_r+0x35c>
1020487c:	997fffc7 	ldb	r5,-1(r19)
10204880:	b009883a 	mov	r4,r22
10204884:	e00d883a 	mov	r6,fp
10204888:	9cffffc4 	addi	r19,r19,-1
1020488c:	020dd680 	call	1020dd68 <_sungetc_r>
10204890:	003e7306 	br	10204260 <__ssvfscanf_r+0xe78>
10204894:	01be1fc4 	movi	r6,-1921
10204898:	99a6703a 	and	r19,r19,r6
1020489c:	04400044 	movi	r17,1
102048a0:	003c6906 	br	10203a48 <__ssvfscanf_r+0x660>
102048a4:	00be1fc4 	movi	r2,-1921
102048a8:	98a6703a 	and	r19,r19,r2
102048ac:	05800044 	movi	r22,1
102048b0:	003c6506 	br	10203a48 <__ssvfscanf_r+0x660>
102048b4:	dac0a017 	ldw	r11,640(sp)
102048b8:	82e1c83a 	sub	r16,r16,r11
102048bc:	040dc83a 	sub	r6,zero,r16
102048c0:	803fba1e 	bne	r16,zero,102047ac <__ssvfscanf_r+0x13c4>
102048c4:	003ce106 	br	10203c4c <__ssvfscanf_r+0x864>
102048c8:	8120b03a 	or	r16,r16,r4
102048cc:	003d4f06 	br	10203e0c <__ssvfscanf_r+0xa24>
102048d0:	88800083 	ldbu	r2,2(r17)
102048d4:	84000094 	ori	r16,r16,2
102048d8:	8c400084 	addi	r17,r17,2
102048dc:	11803fcc 	andi	r6,r2,255
102048e0:	003b0a06 	br	1020350c <__ssvfscanf_r+0x124>
102048e4:	8080004c 	andi	r2,r16,1
102048e8:	10000a1e 	bne	r2,zero,10204914 <__ssvfscanf_r+0x152c>
102048ec:	8400008c 	andi	r16,r16,2
102048f0:	80000826 	beq	r16,zero,10204914 <__ssvfscanf_r+0x152c>
102048f4:	dac09c17 	ldw	r11,624(sp)
102048f8:	9007d7fa 	srai	r3,r18,31
102048fc:	58800017 	ldw	r2,0(r11)
10204900:	5ac00104 	addi	r11,r11,4
10204904:	dac09c15 	stw	r11,624(sp)
10204908:	14800015 	stw	r18,0(r2)
1020490c:	10c00115 	stw	r3,4(r2)
10204910:	003af006 	br	102034d4 <__ssvfscanf_r+0xec>
10204914:	dac09c17 	ldw	r11,624(sp)
10204918:	58800017 	ldw	r2,0(r11)
1020491c:	5ac00104 	addi	r11,r11,4
10204920:	dac09c15 	stw	r11,624(sp)
10204924:	14800015 	stw	r18,0(r2)
10204928:	003aea06 	br	102034d4 <__ssvfscanf_r+0xec>
1020492c:	a0c0004c 	andi	r3,r20,1
10204930:	183f2a1e 	bne	r3,zero,102045dc <__ssvfscanf_r+0x11f4>
10204934:	a500008c 	andi	r20,r20,2
10204938:	a03f2826 	beq	r20,zero,102045dc <__ssvfscanf_r+0x11f4>
1020493c:	dac0a117 	ldw	r11,644(sp)
10204940:	00840874 	movhi	r2,4129
10204944:	10b5ea04 	addi	r2,r2,-10328
10204948:	b009883a 	mov	r4,r22
1020494c:	d9400104 	addi	r5,sp,4
10204950:	000d883a 	mov	r6,zero
10204954:	d9c09e17 	ldw	r7,632(sp)
10204958:	58805f26 	beq	r11,r2,10204ad8 <__ssvfscanf_r+0x16f0>
1020495c:	020d4b40 	call	1020d4b4 <_strtoll_r>
10204960:	dac09c17 	ldw	r11,624(sp)
10204964:	59000017 	ldw	r4,0(r11)
10204968:	5ac00104 	addi	r11,r11,4
1020496c:	dac09c15 	stw	r11,624(sp)
10204970:	20800015 	stw	r2,0(r4)
10204974:	20c00115 	stw	r3,4(r4)
10204978:	003f1d06 	br	102045f0 <__ssvfscanf_r+0x1208>
1020497c:	0009883a 	mov	r4,zero
10204980:	020b9700 	call	1020b970 <nanf>
10204984:	98800015 	stw	r2,0(r19)
10204988:	dc009c15 	stw	r16,624(sp)
1020498c:	003cbc06 	br	10203c80 <__ssvfscanf_r+0x898>
10204990:	02097840 	call	10209784 <__locale_mb_cur_max>
10204994:	143b6b26 	beq	r2,r16,10203744 <__ssvfscanf_r+0x35c>
10204998:	e0800017 	ldw	r2,0(fp)
1020499c:	e1000117 	ldw	r4,4(fp)
102049a0:	dac09d17 	ldw	r11,628(sp)
102049a4:	12000003 	ldbu	r8,0(r2)
102049a8:	213fffc4 	addi	r4,r4,-1
102049ac:	10800044 	addi	r2,r2,1
102049b0:	d8c00104 	addi	r3,sp,4
102049b4:	e1000115 	stw	r4,4(fp)
102049b8:	e0800015 	stw	r2,0(fp)
102049bc:	85000044 	addi	r20,r16,1
102049c0:	dac00015 	stw	r11,0(sp)
102049c4:	1c21883a 	add	r16,r3,r16
102049c8:	180d883a 	mov	r6,r3
102049cc:	b009883a 	mov	r4,r22
102049d0:	980b883a 	mov	r5,r19
102049d4:	a00f883a 	mov	r7,r20
102049d8:	82000005 	stb	r8,0(r16)
102049dc:	02099f00 	call	102099f0 <_mbrtowc_r>
102049e0:	00ffffc4 	movi	r3,-1
102049e4:	10fb5726 	beq	r2,r3,10203744 <__ssvfscanf_r+0x35c>
102049e8:	103b491e 	bne	r2,zero,10203710 <__ssvfscanf_r+0x328>
102049ec:	98000015 	stw	zero,0(r19)
102049f0:	0009883a 	mov	r4,zero
102049f4:	02096cc0 	call	102096cc <iswspace>
102049f8:	10000c26 	beq	r2,zero,10204a2c <__ssvfscanf_r+0x1644>
102049fc:	8821883a 	mov	r16,r17
10204a00:	dc40a017 	ldw	r17,640(sp)
10204a04:	a03ee526 	beq	r20,zero,1020459c <__ssvfscanf_r+0x11b4>
10204a08:	a53fffc4 	addi	r20,r20,-1
10204a0c:	d9400104 	addi	r5,sp,4
10204a10:	2d05883a 	add	r2,r5,r20
10204a14:	11400003 	ldbu	r5,0(r2)
10204a18:	b009883a 	mov	r4,r22
10204a1c:	e00d883a 	mov	r6,fp
10204a20:	020dd680 	call	1020dd68 <_sungetc_r>
10204a24:	a03ff81e 	bne	r20,zero,10204a08 <__ssvfscanf_r+0x1620>
10204a28:	003edc06 	br	1020459c <__ssvfscanf_r+0x11b4>
10204a2c:	9525883a 	add	r18,r18,r20
10204a30:	ad7fffc4 	addi	r21,r21,-1
10204a34:	8800051e 	bne	r17,zero,10204a4c <__ssvfscanf_r+0x1664>
10204a38:	9cc00104 	addi	r19,r19,4
10204a3c:	0021883a 	mov	r16,zero
10204a40:	003b3606 	br	1020371c <__ssvfscanf_r+0x334>
10204a44:	99000017 	ldw	r4,0(r19)
10204a48:	003fea06 	br	102049f4 <__ssvfscanf_r+0x160c>
10204a4c:	0021883a 	mov	r16,zero
10204a50:	003b3206 	br	1020371c <__ssvfscanf_r+0x334>
10204a54:	d8800104 	addi	r2,sp,4
10204a58:	a02b883a 	mov	r21,r20
10204a5c:	153aa22e 	bgeu	r2,r20,102034e8 <__ssvfscanf_r+0x100>
10204a60:	ad7fffc4 	addi	r21,r21,-1
10204a64:	a9400007 	ldb	r5,0(r21)
10204a68:	b009883a 	mov	r4,r22
10204a6c:	e00d883a 	mov	r6,fp
10204a70:	020dd680 	call	1020dd68 <_sungetc_r>
10204a74:	d8c00104 	addi	r3,sp,4
10204a78:	a8fff91e 	bne	r21,r3,10204a60 <__ssvfscanf_r+0x1678>
10204a7c:	003a9a06 	br	102034e8 <__ssvfscanf_r+0x100>
10204a80:	d8c00104 	addi	r3,sp,4
10204a84:	a02b883a 	mov	r21,r20
10204a88:	1d3a972e 	bgeu	r3,r20,102034e8 <__ssvfscanf_r+0x100>
10204a8c:	ad7fffc4 	addi	r21,r21,-1
10204a90:	a9400007 	ldb	r5,0(r21)
10204a94:	b009883a 	mov	r4,r22
10204a98:	e00d883a 	mov	r6,fp
10204a9c:	020dd680 	call	1020dd68 <_sungetc_r>
10204aa0:	d9000104 	addi	r4,sp,4
10204aa4:	a93ff91e 	bne	r21,r4,10204a8c <__ssvfscanf_r+0x16a4>
10204aa8:	003a8f06 	br	102034e8 <__ssvfscanf_r+0x100>
10204aac:	d9400104 	addi	r5,sp,4
10204ab0:	a021883a 	mov	r16,r20
10204ab4:	2d3a8c2e 	bgeu	r5,r20,102034e8 <__ssvfscanf_r+0x100>
10204ab8:	843fffc4 	addi	r16,r16,-1
10204abc:	81400007 	ldb	r5,0(r16)
10204ac0:	b009883a 	mov	r4,r22
10204ac4:	e00d883a 	mov	r6,fp
10204ac8:	020dd680 	call	1020dd68 <_sungetc_r>
10204acc:	dac00104 	addi	r11,sp,4
10204ad0:	82fff91e 	bne	r16,r11,10204ab8 <__ssvfscanf_r+0x16d0>
10204ad4:	003a8406 	br	102034e8 <__ssvfscanf_r+0x100>
10204ad8:	020da340 	call	1020da34 <_strtoull_r>
10204adc:	003fa006 	br	10204960 <__ssvfscanf_r+0x1578>

10204ae0 <___vfprintf_internal_r>:
10204ae0:	deffb604 	addi	sp,sp,-296
10204ae4:	dfc04915 	stw	ra,292(sp)
10204ae8:	ddc04715 	stw	r23,284(sp)
10204aec:	dd804615 	stw	r22,280(sp)
10204af0:	282f883a 	mov	r23,r5
10204af4:	202d883a 	mov	r22,r4
10204af8:	d9802a15 	stw	r6,168(sp)
10204afc:	d9c02d15 	stw	r7,180(sp)
10204b00:	df004815 	stw	fp,288(sp)
10204b04:	dd404515 	stw	r21,276(sp)
10204b08:	dd004415 	stw	r20,272(sp)
10204b0c:	dcc04315 	stw	r19,268(sp)
10204b10:	dc804215 	stw	r18,264(sp)
10204b14:	dc404115 	stw	r17,260(sp)
10204b18:	dc004015 	stw	r16,256(sp)
10204b1c:	02097a80 	call	102097a8 <_localeconv_r>
10204b20:	10800017 	ldw	r2,0(r2)
10204b24:	1009883a 	mov	r4,r2
10204b28:	d8803515 	stw	r2,212(sp)
10204b2c:	02033500 	call	10203350 <strlen>
10204b30:	d8803815 	stw	r2,224(sp)
10204b34:	b0000226 	beq	r22,zero,10204b40 <___vfprintf_internal_r+0x60>
10204b38:	b0800e17 	ldw	r2,56(r22)
10204b3c:	1000e126 	beq	r2,zero,10204ec4 <___vfprintf_internal_r+0x3e4>
10204b40:	b880030b 	ldhu	r2,12(r23)
10204b44:	10c8000c 	andi	r3,r2,8192
10204b48:	1800061e 	bne	r3,zero,10204b64 <___vfprintf_internal_r+0x84>
10204b4c:	b9001917 	ldw	r4,100(r23)
10204b50:	00f7ffc4 	movi	r3,-8193
10204b54:	10880014 	ori	r2,r2,8192
10204b58:	20c6703a 	and	r3,r4,r3
10204b5c:	b880030d 	sth	r2,12(r23)
10204b60:	b8c01915 	stw	r3,100(r23)
10204b64:	10c0020c 	andi	r3,r2,8
10204b68:	1800a726 	beq	r3,zero,10204e08 <___vfprintf_internal_r+0x328>
10204b6c:	b8c00417 	ldw	r3,16(r23)
10204b70:	1800a526 	beq	r3,zero,10204e08 <___vfprintf_internal_r+0x328>
10204b74:	1080068c 	andi	r2,r2,26
10204b78:	00c00284 	movi	r3,10
10204b7c:	10c0aa26 	beq	r2,r3,10204e28 <___vfprintf_internal_r+0x348>
10204b80:	dac01e04 	addi	r11,sp,120
10204b84:	db001dc4 	addi	r12,sp,119
10204b88:	d8800404 	addi	r2,sp,16
10204b8c:	050408b4 	movhi	r20,4130
10204b90:	dac02815 	stw	r11,160(sp)
10204b94:	5b17c83a 	sub	r11,r11,r12
10204b98:	a5342084 	addi	r20,r20,-12158
10204b9c:	db002915 	stw	r12,164(sp)
10204ba0:	d8801e15 	stw	r2,120(sp)
10204ba4:	d8002015 	stw	zero,128(sp)
10204ba8:	d8001f15 	stw	zero,124(sp)
10204bac:	d8003315 	stw	zero,204(sp)
10204bb0:	d8003715 	stw	zero,220(sp)
10204bb4:	d8003915 	stw	zero,228(sp)
10204bb8:	1011883a 	mov	r8,r2
10204bbc:	d8003b15 	stw	zero,236(sp)
10204bc0:	d8003a15 	stw	zero,232(sp)
10204bc4:	d8002f15 	stw	zero,188(sp)
10204bc8:	dac03c15 	stw	r11,240(sp)
10204bcc:	db002a17 	ldw	r12,168(sp)
10204bd0:	60800007 	ldb	r2,0(r12)
10204bd4:	1000be26 	beq	r2,zero,10204ed0 <___vfprintf_internal_r+0x3f0>
10204bd8:	00c00944 	movi	r3,37
10204bdc:	10c0bc26 	beq	r2,r3,10204ed0 <___vfprintf_internal_r+0x3f0>
10204be0:	6021883a 	mov	r16,r12
10204be4:	00000106 	br	10204bec <___vfprintf_internal_r+0x10c>
10204be8:	10c08426 	beq	r2,r3,10204dfc <___vfprintf_internal_r+0x31c>
10204bec:	84000044 	addi	r16,r16,1
10204bf0:	80800007 	ldb	r2,0(r16)
10204bf4:	103ffc1e 	bne	r2,zero,10204be8 <___vfprintf_internal_r+0x108>
10204bf8:	dac02a17 	ldw	r11,168(sp)
10204bfc:	82e3c83a 	sub	r17,r16,r11
10204c00:	88000f26 	beq	r17,zero,10204c40 <___vfprintf_internal_r+0x160>
10204c04:	d8c02017 	ldw	r3,128(sp)
10204c08:	d8801f17 	ldw	r2,124(sp)
10204c0c:	dac02a17 	ldw	r11,168(sp)
10204c10:	1c47883a 	add	r3,r3,r17
10204c14:	10800044 	addi	r2,r2,1
10204c18:	d8c02015 	stw	r3,128(sp)
10204c1c:	42c00015 	stw	r11,0(r8)
10204c20:	44400115 	stw	r17,4(r8)
10204c24:	d8801f15 	stw	r2,124(sp)
10204c28:	00c001c4 	movi	r3,7
10204c2c:	18809316 	blt	r3,r2,10204e7c <___vfprintf_internal_r+0x39c>
10204c30:	42000204 	addi	r8,r8,8
10204c34:	db002f17 	ldw	r12,188(sp)
10204c38:	6459883a 	add	r12,r12,r17
10204c3c:	db002f15 	stw	r12,188(sp)
10204c40:	80800007 	ldb	r2,0(r16)
10204c44:	10009426 	beq	r2,zero,10204e98 <___vfprintf_internal_r+0x3b8>
10204c48:	80800044 	addi	r2,r16,1
10204c4c:	84000047 	ldb	r16,1(r16)
10204c50:	d8002785 	stb	zero,158(sp)
10204c54:	000d883a 	mov	r6,zero
10204c58:	027fffc4 	movi	r9,-1
10204c5c:	d8002e15 	stw	zero,184(sp)
10204c60:	0023883a 	mov	r17,zero
10204c64:	01001604 	movi	r4,88
10204c68:	01400244 	movi	r5,9
10204c6c:	02800a84 	movi	r10,42
10204c70:	01c01b04 	movi	r7,108
10204c74:	10c00044 	addi	r3,r2,1
10204c78:	80bff804 	addi	r2,r16,-32
10204c7c:	2082cd36 	bltu	r4,r2,102057b4 <___vfprintf_internal_r+0xcd4>
10204c80:	100490ba 	slli	r2,r2,2
10204c84:	02c40834 	movhi	r11,4128
10204c88:	5ad32604 	addi	r11,r11,19608
10204c8c:	12c5883a 	add	r2,r2,r11
10204c90:	10800017 	ldw	r2,0(r2)
10204c94:	1000683a 	jmp	r2
10204c98:	102055cc 	andi	zero,r2,33111
10204c9c:	102057b4 	orhi	zero,r2,33118
10204ca0:	102057b4 	orhi	zero,r2,33118
10204ca4:	1020571c 	xori	zero,r2,33116
10204ca8:	102057b4 	orhi	zero,r2,33118
10204cac:	102057b4 	orhi	zero,r2,33118
10204cb0:	102057b4 	orhi	zero,r2,33118
10204cb4:	102057b4 	orhi	zero,r2,33118
10204cb8:	102057b4 	orhi	zero,r2,33118
10204cbc:	102057b4 	orhi	zero,r2,33118
10204cc0:	102055ec 	andhi	zero,r2,33111
10204cc4:	10205618 	cmpnei	zero,r2,-32424
10204cc8:	102057b4 	orhi	zero,r2,33118
10204ccc:	10204ed8 	cmpnei	zero,r2,-32453
10204cd0:	10204ee8 	cmpgeui	zero,r2,33083
10204cd4:	102057b4 	orhi	zero,r2,33118
10204cd8:	10204f28 	cmpgeui	zero,r2,33084
10204cdc:	10204f38 	rdprs	zero,r2,-32452
10204ce0:	10204f38 	rdprs	zero,r2,-32452
10204ce4:	10204f38 	rdprs	zero,r2,-32452
10204ce8:	10204f38 	rdprs	zero,r2,-32452
10204cec:	10204f38 	rdprs	zero,r2,-32452
10204cf0:	10204f38 	rdprs	zero,r2,-32452
10204cf4:	10204f38 	rdprs	zero,r2,-32452
10204cf8:	10204f38 	rdprs	zero,r2,-32452
10204cfc:	10204f38 	rdprs	zero,r2,-32452
10204d00:	102057b4 	orhi	zero,r2,33118
10204d04:	102057b4 	orhi	zero,r2,33118
10204d08:	102057b4 	orhi	zero,r2,33118
10204d0c:	102057b4 	orhi	zero,r2,33118
10204d10:	102057b4 	orhi	zero,r2,33118
10204d14:	102057b4 	orhi	zero,r2,33118
10204d18:	102057b4 	orhi	zero,r2,33118
10204d1c:	102057b4 	orhi	zero,r2,33118
10204d20:	102057b4 	orhi	zero,r2,33118
10204d24:	102057b4 	orhi	zero,r2,33118
10204d28:	10204f6c 	andhi	zero,r2,33085
10204d2c:	102053dc 	xori	zero,r2,33103
10204d30:	102057b4 	orhi	zero,r2,33118
10204d34:	102053dc 	xori	zero,r2,33103
10204d38:	102057b4 	orhi	zero,r2,33118
10204d3c:	102057b4 	orhi	zero,r2,33118
10204d40:	102057b4 	orhi	zero,r2,33118
10204d44:	102057b4 	orhi	zero,r2,33118
10204d48:	102054c8 	cmpgei	zero,r2,-32429
10204d4c:	102057b4 	orhi	zero,r2,33118
10204d50:	102057b4 	orhi	zero,r2,33118
10204d54:	10205370 	cmpltui	zero,r2,33101
10204d58:	102057b4 	orhi	zero,r2,33118
10204d5c:	102057b4 	orhi	zero,r2,33118
10204d60:	102057b4 	orhi	zero,r2,33118
10204d64:	102057b4 	orhi	zero,r2,33118
10204d68:	102057b4 	orhi	zero,r2,33118
10204d6c:	102053ac 	andhi	zero,r2,33102
10204d70:	102057b4 	orhi	zero,r2,33118
10204d74:	102057b4 	orhi	zero,r2,33118
10204d78:	10205570 	cmpltui	zero,r2,33109
10204d7c:	102057b4 	orhi	zero,r2,33118
10204d80:	102057b4 	orhi	zero,r2,33118
10204d84:	102057b4 	orhi	zero,r2,33118
10204d88:	102057b4 	orhi	zero,r2,33118
10204d8c:	102057b4 	orhi	zero,r2,33118
10204d90:	102057b4 	orhi	zero,r2,33118
10204d94:	102057b4 	orhi	zero,r2,33118
10204d98:	102057b4 	orhi	zero,r2,33118
10204d9c:	102057b4 	orhi	zero,r2,33118
10204da0:	102057b4 	orhi	zero,r2,33118
10204da4:	10205628 	cmpgeui	zero,r2,33112
10204da8:	102054d8 	cmpnei	zero,r2,-32429
10204dac:	102053dc 	xori	zero,r2,33103
10204db0:	102053dc 	xori	zero,r2,33103
10204db4:	102053dc 	xori	zero,r2,33103
10204db8:	10205518 	cmpnei	zero,r2,-32428
10204dbc:	102054d8 	cmpnei	zero,r2,-32429
10204dc0:	102057b4 	orhi	zero,r2,33118
10204dc4:	102057b4 	orhi	zero,r2,33118
10204dc8:	10205528 	cmpgeui	zero,r2,33108
10204dcc:	102057b4 	orhi	zero,r2,33118
10204dd0:	1020553c 	xorhi	zero,r2,33108
10204dd4:	10205778 	rdprs	zero,r2,-32419
10204dd8:	10205480 	call	11020548 <__ram_exceptions_end+0xc18308>
10204ddc:	1020572c 	andhi	zero,r2,33116
10204de0:	102057b4 	orhi	zero,r2,33118
10204de4:	10205668 	cmpgeui	zero,r2,33113
10204de8:	102057b4 	orhi	zero,r2,33118
10204dec:	1020573c 	xorhi	zero,r2,33116
10204df0:	102057b4 	orhi	zero,r2,33118
10204df4:	102057b4 	orhi	zero,r2,33118
10204df8:	102056dc 	xori	zero,r2,33115
10204dfc:	db002a17 	ldw	r12,168(sp)
10204e00:	8323c83a 	sub	r17,r16,r12
10204e04:	003f7e06 	br	10204c00 <___vfprintf_internal_r+0x120>
10204e08:	b009883a 	mov	r4,r22
10204e0c:	b80b883a 	mov	r5,r23
10204e10:	0206b6c0 	call	10206b6c <__swsetup_r>
10204e14:	10000c1e 	bne	r2,zero,10204e48 <___vfprintf_internal_r+0x368>
10204e18:	b880030b 	ldhu	r2,12(r23)
10204e1c:	00c00284 	movi	r3,10
10204e20:	1080068c 	andi	r2,r2,26
10204e24:	10ff561e 	bne	r2,r3,10204b80 <___vfprintf_internal_r+0xa0>
10204e28:	b880038f 	ldh	r2,14(r23)
10204e2c:	103f5416 	blt	r2,zero,10204b80 <___vfprintf_internal_r+0xa0>
10204e30:	d9802a17 	ldw	r6,168(sp)
10204e34:	d9c02d17 	ldw	r7,180(sp)
10204e38:	b009883a 	mov	r4,r22
10204e3c:	b80b883a 	mov	r5,r23
10204e40:	0206a540 	call	10206a54 <__sbprintf>
10204e44:	00000106 	br	10204e4c <___vfprintf_internal_r+0x36c>
10204e48:	00bfffc4 	movi	r2,-1
10204e4c:	dfc04917 	ldw	ra,292(sp)
10204e50:	df004817 	ldw	fp,288(sp)
10204e54:	ddc04717 	ldw	r23,284(sp)
10204e58:	dd804617 	ldw	r22,280(sp)
10204e5c:	dd404517 	ldw	r21,276(sp)
10204e60:	dd004417 	ldw	r20,272(sp)
10204e64:	dcc04317 	ldw	r19,268(sp)
10204e68:	dc804217 	ldw	r18,264(sp)
10204e6c:	dc404117 	ldw	r17,260(sp)
10204e70:	dc004017 	ldw	r16,256(sp)
10204e74:	dec04a04 	addi	sp,sp,296
10204e78:	f800283a 	ret
10204e7c:	b009883a 	mov	r4,r22
10204e80:	b80b883a 	mov	r5,r23
10204e84:	d9801e04 	addi	r6,sp,120
10204e88:	02113340 	call	10211334 <__sprint_r>
10204e8c:	1000081e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
10204e90:	da000404 	addi	r8,sp,16
10204e94:	003f6706 	br	10204c34 <___vfprintf_internal_r+0x154>
10204e98:	d8802017 	ldw	r2,128(sp)
10204e9c:	10000426 	beq	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
10204ea0:	b009883a 	mov	r4,r22
10204ea4:	b80b883a 	mov	r5,r23
10204ea8:	d9801e04 	addi	r6,sp,120
10204eac:	02113340 	call	10211334 <__sprint_r>
10204eb0:	b880030b 	ldhu	r2,12(r23)
10204eb4:	1080100c 	andi	r2,r2,64
10204eb8:	103fe31e 	bne	r2,zero,10204e48 <___vfprintf_internal_r+0x368>
10204ebc:	d8802f17 	ldw	r2,188(sp)
10204ec0:	003fe206 	br	10204e4c <___vfprintf_internal_r+0x36c>
10204ec4:	b009883a 	mov	r4,r22
10204ec8:	0208c200 	call	10208c20 <__sinit>
10204ecc:	003f1c06 	br	10204b40 <___vfprintf_internal_r+0x60>
10204ed0:	dc002a17 	ldw	r16,168(sp)
10204ed4:	003f5a06 	br	10204c40 <___vfprintf_internal_r+0x160>
10204ed8:	1805883a 	mov	r2,r3
10204edc:	8c400114 	ori	r17,r17,4
10204ee0:	1c000007 	ldb	r16,0(r3)
10204ee4:	003f6306 	br	10204c74 <___vfprintf_internal_r+0x194>
10204ee8:	1c000007 	ldb	r16,0(r3)
10204eec:	18800044 	addi	r2,r3,1
10204ef0:	8286ad26 	beq	r16,r10,102069a8 <___vfprintf_internal_r+0x1ec8>
10204ef4:	82fff404 	addi	r11,r16,-48
10204ef8:	1007883a 	mov	r3,r2
10204efc:	0013883a 	mov	r9,zero
10204f00:	2aff5d36 	bltu	r5,r11,10204c78 <___vfprintf_internal_r+0x198>
10204f04:	1c000007 	ldb	r16,0(r3)
10204f08:	4a4002a4 	muli	r9,r9,10
10204f0c:	18c00044 	addi	r3,r3,1
10204f10:	5a53883a 	add	r9,r11,r9
10204f14:	82fff404 	addi	r11,r16,-48
10204f18:	2afffa2e 	bgeu	r5,r11,10204f04 <___vfprintf_internal_r+0x424>
10204f1c:	483f560e 	bge	r9,zero,10204c78 <___vfprintf_internal_r+0x198>
10204f20:	027fffc4 	movi	r9,-1
10204f24:	003f5406 	br	10204c78 <___vfprintf_internal_r+0x198>
10204f28:	8c402014 	ori	r17,r17,128
10204f2c:	1805883a 	mov	r2,r3
10204f30:	1c000007 	ldb	r16,0(r3)
10204f34:	003f4f06 	br	10204c74 <___vfprintf_internal_r+0x194>
10204f38:	1805883a 	mov	r2,r3
10204f3c:	d8002e15 	stw	zero,184(sp)
10204f40:	82fff404 	addi	r11,r16,-48
10204f44:	0019883a 	mov	r12,zero
10204f48:	14000007 	ldb	r16,0(r2)
10204f4c:	630002a4 	muli	r12,r12,10
10204f50:	18c00044 	addi	r3,r3,1
10204f54:	1805883a 	mov	r2,r3
10204f58:	62d9883a 	add	r12,r12,r11
10204f5c:	82fff404 	addi	r11,r16,-48
10204f60:	2afff92e 	bgeu	r5,r11,10204f48 <___vfprintf_internal_r+0x468>
10204f64:	db002e15 	stw	r12,184(sp)
10204f68:	003f4306 	br	10204c78 <___vfprintf_internal_r+0x198>
10204f6c:	8c400414 	ori	r17,r17,16
10204f70:	d8c02a15 	stw	r3,168(sp)
10204f74:	d9802785 	stb	r6,158(sp)
10204f78:	8880080c 	andi	r2,r17,32
10204f7c:	d8c02d17 	ldw	r3,180(sp)
10204f80:	10015a26 	beq	r2,zero,102054ec <___vfprintf_internal_r+0xa0c>
10204f84:	db002d17 	ldw	r12,180(sp)
10204f88:	18800117 	ldw	r2,4(r3)
10204f8c:	1cc00017 	ldw	r19,0(r3)
10204f90:	63000204 	addi	r12,r12,8
10204f94:	db002d15 	stw	r12,180(sp)
10204f98:	1039883a 	mov	fp,r2
10204f9c:	10044516 	blt	r2,zero,102060b4 <___vfprintf_internal_r+0x15d4>
10204fa0:	dd402783 	ldbu	r21,158(sp)
10204fa4:	da403215 	stw	r9,200(sp)
10204fa8:	00800044 	movi	r2,1
10204fac:	9f06b03a 	or	r3,r19,fp
10204fb0:	48000216 	blt	r9,zero,10204fbc <___vfprintf_internal_r+0x4dc>
10204fb4:	013fdfc4 	movi	r4,-129
10204fb8:	8922703a 	and	r17,r17,r4
10204fbc:	1802071e 	bne	r3,zero,102057dc <___vfprintf_internal_r+0xcfc>
10204fc0:	4802fa26 	beq	r9,zero,10205bac <___vfprintf_internal_r+0x10cc>
10204fc4:	10803fcc 	andi	r2,r2,255
10204fc8:	00c00044 	movi	r3,1
10204fcc:	10c22926 	beq	r2,r3,10205874 <___vfprintf_internal_r+0xd94>
10204fd0:	00c00084 	movi	r3,2
10204fd4:	10c31726 	beq	r2,r3,10205c34 <___vfprintf_internal_r+0x1154>
10204fd8:	d8c01e04 	addi	r3,sp,120
10204fdc:	9808d0fa 	srli	r4,r19,3
10204fe0:	e00a977a 	slli	r5,fp,29
10204fe4:	e038d0fa 	srli	fp,fp,3
10204fe8:	9cc001cc 	andi	r19,r19,7
10204fec:	98800c04 	addi	r2,r19,48
10204ff0:	18ffffc4 	addi	r3,r3,-1
10204ff4:	2926b03a 	or	r19,r5,r4
10204ff8:	18800005 	stb	r2,0(r3)
10204ffc:	9f08b03a 	or	r4,r19,fp
10205000:	203ff61e 	bne	r4,zero,10204fdc <___vfprintf_internal_r+0x4fc>
10205004:	8900004c 	andi	r4,r17,1
10205008:	d8c03115 	stw	r3,196(sp)
1020500c:	2003931e 	bne	r4,zero,10205e5c <___vfprintf_internal_r+0x137c>
10205010:	dac02817 	ldw	r11,160(sp)
10205014:	58e5c83a 	sub	r18,r11,r3
10205018:	9005883a 	mov	r2,r18
1020501c:	9240010e 	bge	r18,r9,10205024 <___vfprintf_internal_r+0x544>
10205020:	4805883a 	mov	r2,r9
10205024:	d8802b15 	stw	r2,172(sp)
10205028:	d8003415 	stw	zero,208(sp)
1020502c:	a8803fcc 	andi	r2,r21,255
10205030:	1080201c 	xori	r2,r2,128
10205034:	10bfe004 	addi	r2,r2,-128
10205038:	10000326 	beq	r2,zero,10205048 <___vfprintf_internal_r+0x568>
1020503c:	db002b17 	ldw	r12,172(sp)
10205040:	63000044 	addi	r12,r12,1
10205044:	db002b15 	stw	r12,172(sp)
10205048:	88c0008c 	andi	r3,r17,2
1020504c:	d8c02c15 	stw	r3,176(sp)
10205050:	18000326 	beq	r3,zero,10205060 <___vfprintf_internal_r+0x580>
10205054:	dac02b17 	ldw	r11,172(sp)
10205058:	5ac00084 	addi	r11,r11,2
1020505c:	dac02b15 	stw	r11,172(sp)
10205060:	8b00210c 	andi	r12,r17,132
10205064:	db003015 	stw	r12,192(sp)
10205068:	6001da1e 	bne	r12,zero,102057d4 <___vfprintf_internal_r+0xcf4>
1020506c:	dac02e17 	ldw	r11,184(sp)
10205070:	db002b17 	ldw	r12,172(sp)
10205074:	5b39c83a 	sub	fp,r11,r12
10205078:	0701d60e 	bge	zero,fp,102057d4 <___vfprintf_internal_r+0xcf4>
1020507c:	02400404 	movi	r9,16
10205080:	d8c02017 	ldw	r3,128(sp)
10205084:	d8801f17 	ldw	r2,124(sp)
10205088:	4f053c0e 	bge	r9,fp,1020657c <___vfprintf_internal_r+0x1a9c>
1020508c:	014408b4 	movhi	r5,4130
10205090:	29742484 	addi	r5,r5,-12142
10205094:	d9403615 	stw	r5,216(sp)
10205098:	482b883a 	mov	r21,r9
1020509c:	04c001c4 	movi	r19,7
102050a0:	00000306 	br	102050b0 <___vfprintf_internal_r+0x5d0>
102050a4:	e73ffc04 	addi	fp,fp,-16
102050a8:	42000204 	addi	r8,r8,8
102050ac:	af00130e 	bge	r21,fp,102050fc <___vfprintf_internal_r+0x61c>
102050b0:	02c408b4 	movhi	r11,4130
102050b4:	18c00404 	addi	r3,r3,16
102050b8:	10800044 	addi	r2,r2,1
102050bc:	5af42484 	addi	r11,r11,-12142
102050c0:	42c00015 	stw	r11,0(r8)
102050c4:	45400115 	stw	r21,4(r8)
102050c8:	d8c02015 	stw	r3,128(sp)
102050cc:	d8801f15 	stw	r2,124(sp)
102050d0:	98bff40e 	bge	r19,r2,102050a4 <___vfprintf_internal_r+0x5c4>
102050d4:	b009883a 	mov	r4,r22
102050d8:	b80b883a 	mov	r5,r23
102050dc:	d9801e04 	addi	r6,sp,120
102050e0:	02113340 	call	10211334 <__sprint_r>
102050e4:	103f721e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
102050e8:	e73ffc04 	addi	fp,fp,-16
102050ec:	d8c02017 	ldw	r3,128(sp)
102050f0:	d8801f17 	ldw	r2,124(sp)
102050f4:	da000404 	addi	r8,sp,16
102050f8:	af3fed16 	blt	r21,fp,102050b0 <___vfprintf_internal_r+0x5d0>
102050fc:	db003617 	ldw	r12,216(sp)
10205100:	e0c7883a 	add	r3,fp,r3
10205104:	10800044 	addi	r2,r2,1
10205108:	43000015 	stw	r12,0(r8)
1020510c:	47000115 	stw	fp,4(r8)
10205110:	d8c02015 	stw	r3,128(sp)
10205114:	d8801f15 	stw	r2,124(sp)
10205118:	010001c4 	movi	r4,7
1020511c:	20830e16 	blt	r4,r2,10205d58 <___vfprintf_internal_r+0x1278>
10205120:	d8802787 	ldb	r2,158(sp)
10205124:	42000204 	addi	r8,r8,8
10205128:	10000c26 	beq	r2,zero,1020515c <___vfprintf_internal_r+0x67c>
1020512c:	d8801f17 	ldw	r2,124(sp)
10205130:	d9002784 	addi	r4,sp,158
10205134:	18c00044 	addi	r3,r3,1
10205138:	10800044 	addi	r2,r2,1
1020513c:	41000015 	stw	r4,0(r8)
10205140:	01000044 	movi	r4,1
10205144:	41000115 	stw	r4,4(r8)
10205148:	d8c02015 	stw	r3,128(sp)
1020514c:	d8801f15 	stw	r2,124(sp)
10205150:	010001c4 	movi	r4,7
10205154:	2082a716 	blt	r4,r2,10205bf4 <___vfprintf_internal_r+0x1114>
10205158:	42000204 	addi	r8,r8,8
1020515c:	dac02c17 	ldw	r11,176(sp)
10205160:	58000c26 	beq	r11,zero,10205194 <___vfprintf_internal_r+0x6b4>
10205164:	d8801f17 	ldw	r2,124(sp)
10205168:	d9002704 	addi	r4,sp,156
1020516c:	18c00084 	addi	r3,r3,2
10205170:	10800044 	addi	r2,r2,1
10205174:	41000015 	stw	r4,0(r8)
10205178:	01000084 	movi	r4,2
1020517c:	41000115 	stw	r4,4(r8)
10205180:	d8c02015 	stw	r3,128(sp)
10205184:	d8801f15 	stw	r2,124(sp)
10205188:	010001c4 	movi	r4,7
1020518c:	2082a116 	blt	r4,r2,10205c14 <___vfprintf_internal_r+0x1134>
10205190:	42000204 	addi	r8,r8,8
10205194:	db003017 	ldw	r12,192(sp)
10205198:	00802004 	movi	r2,128
1020519c:	60820326 	beq	r12,r2,102059ac <___vfprintf_internal_r+0xecc>
102051a0:	db003217 	ldw	r12,200(sp)
102051a4:	64abc83a 	sub	r21,r12,r18
102051a8:	0540260e 	bge	zero,r21,10205244 <___vfprintf_internal_r+0x764>
102051ac:	07000404 	movi	fp,16
102051b0:	d8801f17 	ldw	r2,124(sp)
102051b4:	e544570e 	bge	fp,r21,10206314 <___vfprintf_internal_r+0x1834>
102051b8:	014408b4 	movhi	r5,4130
102051bc:	29742084 	addi	r5,r5,-12158
102051c0:	d9402c15 	stw	r5,176(sp)
102051c4:	04c001c4 	movi	r19,7
102051c8:	00000306 	br	102051d8 <___vfprintf_internal_r+0x6f8>
102051cc:	ad7ffc04 	addi	r21,r21,-16
102051d0:	42000204 	addi	r8,r8,8
102051d4:	e540110e 	bge	fp,r21,1020521c <___vfprintf_internal_r+0x73c>
102051d8:	18c00404 	addi	r3,r3,16
102051dc:	10800044 	addi	r2,r2,1
102051e0:	45000015 	stw	r20,0(r8)
102051e4:	47000115 	stw	fp,4(r8)
102051e8:	d8c02015 	stw	r3,128(sp)
102051ec:	d8801f15 	stw	r2,124(sp)
102051f0:	98bff60e 	bge	r19,r2,102051cc <___vfprintf_internal_r+0x6ec>
102051f4:	b009883a 	mov	r4,r22
102051f8:	b80b883a 	mov	r5,r23
102051fc:	d9801e04 	addi	r6,sp,120
10205200:	02113340 	call	10211334 <__sprint_r>
10205204:	103f2a1e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
10205208:	ad7ffc04 	addi	r21,r21,-16
1020520c:	d8c02017 	ldw	r3,128(sp)
10205210:	d8801f17 	ldw	r2,124(sp)
10205214:	da000404 	addi	r8,sp,16
10205218:	e57fef16 	blt	fp,r21,102051d8 <___vfprintf_internal_r+0x6f8>
1020521c:	dac02c17 	ldw	r11,176(sp)
10205220:	1d47883a 	add	r3,r3,r21
10205224:	10800044 	addi	r2,r2,1
10205228:	42c00015 	stw	r11,0(r8)
1020522c:	45400115 	stw	r21,4(r8)
10205230:	d8c02015 	stw	r3,128(sp)
10205234:	d8801f15 	stw	r2,124(sp)
10205238:	010001c4 	movi	r4,7
1020523c:	20826516 	blt	r4,r2,10205bd4 <___vfprintf_internal_r+0x10f4>
10205240:	42000204 	addi	r8,r8,8
10205244:	8880400c 	andi	r2,r17,256
10205248:	1001901e 	bne	r2,zero,1020588c <___vfprintf_internal_r+0xdac>
1020524c:	d8801f17 	ldw	r2,124(sp)
10205250:	db003117 	ldw	r12,196(sp)
10205254:	1c87883a 	add	r3,r3,r18
10205258:	10800044 	addi	r2,r2,1
1020525c:	43000015 	stw	r12,0(r8)
10205260:	44800115 	stw	r18,4(r8)
10205264:	d8c02015 	stw	r3,128(sp)
10205268:	d8801f15 	stw	r2,124(sp)
1020526c:	010001c4 	movi	r4,7
10205270:	20824016 	blt	r4,r2,10205b74 <___vfprintf_internal_r+0x1094>
10205274:	42000204 	addi	r8,r8,8
10205278:	8c40010c 	andi	r17,r17,4
1020527c:	88003126 	beq	r17,zero,10205344 <___vfprintf_internal_r+0x864>
10205280:	db002e17 	ldw	r12,184(sp)
10205284:	dac02b17 	ldw	r11,172(sp)
10205288:	62e1c83a 	sub	r16,r12,r11
1020528c:	04002d0e 	bge	zero,r16,10205344 <___vfprintf_internal_r+0x864>
10205290:	04400404 	movi	r17,16
10205294:	d8801f17 	ldw	r2,124(sp)
10205298:	8c05150e 	bge	r17,r16,102066f0 <___vfprintf_internal_r+0x1c10>
1020529c:	010408b4 	movhi	r4,4130
102052a0:	21342484 	addi	r4,r4,-12142
102052a4:	d9003615 	stw	r4,216(sp)
102052a8:	048001c4 	movi	r18,7
102052ac:	00000306 	br	102052bc <___vfprintf_internal_r+0x7dc>
102052b0:	843ffc04 	addi	r16,r16,-16
102052b4:	42000204 	addi	r8,r8,8
102052b8:	8c00130e 	bge	r17,r16,10205308 <___vfprintf_internal_r+0x828>
102052bc:	014408b4 	movhi	r5,4130
102052c0:	18c00404 	addi	r3,r3,16
102052c4:	10800044 	addi	r2,r2,1
102052c8:	29742484 	addi	r5,r5,-12142
102052cc:	41400015 	stw	r5,0(r8)
102052d0:	44400115 	stw	r17,4(r8)
102052d4:	d8c02015 	stw	r3,128(sp)
102052d8:	d8801f15 	stw	r2,124(sp)
102052dc:	90bff40e 	bge	r18,r2,102052b0 <___vfprintf_internal_r+0x7d0>
102052e0:	b009883a 	mov	r4,r22
102052e4:	b80b883a 	mov	r5,r23
102052e8:	d9801e04 	addi	r6,sp,120
102052ec:	02113340 	call	10211334 <__sprint_r>
102052f0:	103eef1e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
102052f4:	843ffc04 	addi	r16,r16,-16
102052f8:	d8c02017 	ldw	r3,128(sp)
102052fc:	d8801f17 	ldw	r2,124(sp)
10205300:	da000404 	addi	r8,sp,16
10205304:	8c3fed16 	blt	r17,r16,102052bc <___vfprintf_internal_r+0x7dc>
10205308:	dac03617 	ldw	r11,216(sp)
1020530c:	1c07883a 	add	r3,r3,r16
10205310:	10800044 	addi	r2,r2,1
10205314:	42c00015 	stw	r11,0(r8)
10205318:	44000115 	stw	r16,4(r8)
1020531c:	d8c02015 	stw	r3,128(sp)
10205320:	d8801f15 	stw	r2,124(sp)
10205324:	010001c4 	movi	r4,7
10205328:	2080060e 	bge	r4,r2,10205344 <___vfprintf_internal_r+0x864>
1020532c:	b009883a 	mov	r4,r22
10205330:	b80b883a 	mov	r5,r23
10205334:	d9801e04 	addi	r6,sp,120
10205338:	02113340 	call	10211334 <__sprint_r>
1020533c:	103edc1e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
10205340:	d8c02017 	ldw	r3,128(sp)
10205344:	d8802b17 	ldw	r2,172(sp)
10205348:	db002e17 	ldw	r12,184(sp)
1020534c:	1300010e 	bge	r2,r12,10205354 <___vfprintf_internal_r+0x874>
10205350:	6005883a 	mov	r2,r12
10205354:	dac02f17 	ldw	r11,188(sp)
10205358:	5897883a 	add	r11,r11,r2
1020535c:	dac02f15 	stw	r11,188(sp)
10205360:	18020c1e 	bne	r3,zero,10205b94 <___vfprintf_internal_r+0x10b4>
10205364:	d8001f15 	stw	zero,124(sp)
10205368:	da000404 	addi	r8,sp,16
1020536c:	003e1706 	br	10204bcc <___vfprintf_internal_r+0xec>
10205370:	8c400414 	ori	r17,r17,16
10205374:	d8c02a15 	stw	r3,168(sp)
10205378:	8880080c 	andi	r2,r17,32
1020537c:	10010126 	beq	r2,zero,10205784 <___vfprintf_internal_r+0xca4>
10205380:	db002d17 	ldw	r12,180(sp)
10205384:	0005883a 	mov	r2,zero
10205388:	64c00017 	ldw	r19,0(r12)
1020538c:	67000117 	ldw	fp,4(r12)
10205390:	63000204 	addi	r12,r12,8
10205394:	db002d15 	stw	r12,180(sp)
10205398:	9f06b03a 	or	r3,r19,fp
1020539c:	d8002785 	stb	zero,158(sp)
102053a0:	da403215 	stw	r9,200(sp)
102053a4:	002b883a 	mov	r21,zero
102053a8:	003f0106 	br	10204fb0 <___vfprintf_internal_r+0x4d0>
102053ac:	8c400414 	ori	r17,r17,16
102053b0:	d8c02a15 	stw	r3,168(sp)
102053b4:	8880080c 	andi	r2,r17,32
102053b8:	1000e326 	beq	r2,zero,10205748 <___vfprintf_internal_r+0xc68>
102053bc:	dac02d17 	ldw	r11,180(sp)
102053c0:	00800044 	movi	r2,1
102053c4:	5cc00017 	ldw	r19,0(r11)
102053c8:	5f000117 	ldw	fp,4(r11)
102053cc:	5ac00204 	addi	r11,r11,8
102053d0:	dac02d15 	stw	r11,180(sp)
102053d4:	9f06b03a 	or	r3,r19,fp
102053d8:	003ff006 	br	1020539c <___vfprintf_internal_r+0x8bc>
102053dc:	db002d17 	ldw	r12,180(sp)
102053e0:	dac02d17 	ldw	r11,180(sp)
102053e4:	d8c02a15 	stw	r3,168(sp)
102053e8:	63000017 	ldw	r12,0(r12)
102053ec:	5ac00117 	ldw	r11,4(r11)
102053f0:	d9802785 	stb	r6,158(sp)
102053f4:	6009883a 	mov	r4,r12
102053f8:	580b883a 	mov	r5,r11
102053fc:	db003715 	stw	r12,220(sp)
10205400:	da003f15 	stw	r8,252(sp)
10205404:	da403e15 	stw	r9,248(sp)
10205408:	dac03915 	stw	r11,228(sp)
1020540c:	020b83c0 	call	1020b83c <__fpclassifyd>
10205410:	db002d17 	ldw	r12,180(sp)
10205414:	04800044 	movi	r18,1
10205418:	da003f17 	ldw	r8,252(sp)
1020541c:	64c00204 	addi	r19,r12,8
10205420:	da403e17 	ldw	r9,248(sp)
10205424:	d9003717 	ldw	r4,220(sp)
10205428:	d9403917 	ldw	r5,228(sp)
1020542c:	14832b1e 	bne	r2,r18,102060dc <___vfprintf_internal_r+0x15fc>
10205430:	000d883a 	mov	r6,zero
10205434:	000f883a 	mov	r7,zero
10205438:	0216dc40 	call	10216dc4 <__ledf2>
1020543c:	da003f17 	ldw	r8,252(sp)
10205440:	1004b716 	blt	r2,zero,10206720 <___vfprintf_internal_r+0x1c40>
10205444:	dd402783 	ldbu	r21,158(sp)
10205448:	008011c4 	movi	r2,71
1020544c:	14040e0e 	bge	r2,r16,10206488 <___vfprintf_internal_r+0x19a8>
10205450:	00c408b4 	movhi	r3,4130
10205454:	18f41104 	addi	r3,r3,-12220
10205458:	d8c03115 	stw	r3,196(sp)
1020545c:	02c000c4 	movi	r11,3
10205460:	00bfdfc4 	movi	r2,-129
10205464:	dac02b15 	stw	r11,172(sp)
10205468:	88a2703a 	and	r17,r17,r2
1020546c:	dcc02d15 	stw	r19,180(sp)
10205470:	5825883a 	mov	r18,r11
10205474:	d8003215 	stw	zero,200(sp)
10205478:	d8003415 	stw	zero,208(sp)
1020547c:	003eeb06 	br	1020502c <___vfprintf_internal_r+0x54c>
10205480:	db002d17 	ldw	r12,180(sp)
10205484:	00800c04 	movi	r2,48
10205488:	d8802705 	stb	r2,156(sp)
1020548c:	64c00017 	ldw	r19,0(r12)
10205490:	00801e04 	movi	r2,120
10205494:	d8802745 	stb	r2,157(sp)
10205498:	008408b4 	movhi	r2,4130
1020549c:	10b41904 	addi	r2,r2,-12188
102054a0:	63000104 	addi	r12,r12,4
102054a4:	d8c02a15 	stw	r3,168(sp)
102054a8:	d8803b15 	stw	r2,236(sp)
102054ac:	0039883a 	mov	fp,zero
102054b0:	8c400094 	ori	r17,r17,2
102054b4:	db002d15 	stw	r12,180(sp)
102054b8:	00800084 	movi	r2,2
102054bc:	04001e04 	movi	r16,120
102054c0:	9807883a 	mov	r3,r19
102054c4:	003fb506 	br	1020539c <___vfprintf_internal_r+0x8bc>
102054c8:	8c400214 	ori	r17,r17,8
102054cc:	1805883a 	mov	r2,r3
102054d0:	1c000007 	ldb	r16,0(r3)
102054d4:	003de706 	br	10204c74 <___vfprintf_internal_r+0x194>
102054d8:	d8c02a15 	stw	r3,168(sp)
102054dc:	d9802785 	stb	r6,158(sp)
102054e0:	8880080c 	andi	r2,r17,32
102054e4:	d8c02d17 	ldw	r3,180(sp)
102054e8:	103ea61e 	bne	r2,zero,10204f84 <___vfprintf_internal_r+0x4a4>
102054ec:	8880040c 	andi	r2,r17,16
102054f0:	1002221e 	bne	r2,zero,10205d7c <___vfprintf_internal_r+0x129c>
102054f4:	8880100c 	andi	r2,r17,64
102054f8:	10022026 	beq	r2,zero,10205d7c <___vfprintf_internal_r+0x129c>
102054fc:	1cc0000f 	ldh	r19,0(r3)
10205500:	db002d17 	ldw	r12,180(sp)
10205504:	9839d7fa 	srai	fp,r19,31
10205508:	63000104 	addi	r12,r12,4
1020550c:	db002d15 	stw	r12,180(sp)
10205510:	e005883a 	mov	r2,fp
10205514:	003ea106 	br	10204f9c <___vfprintf_internal_r+0x4bc>
10205518:	8c401014 	ori	r17,r17,64
1020551c:	1805883a 	mov	r2,r3
10205520:	1c000007 	ldb	r16,0(r3)
10205524:	003dd306 	br	10204c74 <___vfprintf_internal_r+0x194>
10205528:	1c000007 	ldb	r16,0(r3)
1020552c:	81c3e926 	beq	r16,r7,102064d4 <___vfprintf_internal_r+0x19f4>
10205530:	8c400414 	ori	r17,r17,16
10205534:	1805883a 	mov	r2,r3
10205538:	003dce06 	br	10204c74 <___vfprintf_internal_r+0x194>
1020553c:	d8c02a15 	stw	r3,168(sp)
10205540:	d9802785 	stb	r6,158(sp)
10205544:	8880080c 	andi	r2,r17,32
10205548:	10034726 	beq	r2,zero,10206268 <___vfprintf_internal_r+0x1788>
1020554c:	db002d17 	ldw	r12,180(sp)
10205550:	dac02f17 	ldw	r11,188(sp)
10205554:	60800017 	ldw	r2,0(r12)
10205558:	5807d7fa 	srai	r3,r11,31
1020555c:	63000104 	addi	r12,r12,4
10205560:	db002d15 	stw	r12,180(sp)
10205564:	12c00015 	stw	r11,0(r2)
10205568:	10c00115 	stw	r3,4(r2)
1020556c:	003d9706 	br	10204bcc <___vfprintf_internal_r+0xec>
10205570:	030408b4 	movhi	r12,4130
10205574:	63341404 	addi	r12,r12,-12208
10205578:	d8c02a15 	stw	r3,168(sp)
1020557c:	d9802785 	stb	r6,158(sp)
10205580:	db003b15 	stw	r12,236(sp)
10205584:	88c0080c 	andi	r3,r17,32
10205588:	d8802d17 	ldw	r2,180(sp)
1020558c:	18005b26 	beq	r3,zero,102056fc <___vfprintf_internal_r+0xc1c>
10205590:	dac02d17 	ldw	r11,180(sp)
10205594:	14c00017 	ldw	r19,0(r2)
10205598:	17000117 	ldw	fp,4(r2)
1020559c:	5ac00204 	addi	r11,r11,8
102055a0:	dac02d15 	stw	r11,180(sp)
102055a4:	8880004c 	andi	r2,r17,1
102055a8:	10022926 	beq	r2,zero,10205e50 <___vfprintf_internal_r+0x1370>
102055ac:	9f06b03a 	or	r3,r19,fp
102055b0:	18032b26 	beq	r3,zero,10206260 <___vfprintf_internal_r+0x1780>
102055b4:	00800c04 	movi	r2,48
102055b8:	d8802705 	stb	r2,156(sp)
102055bc:	dc002745 	stb	r16,157(sp)
102055c0:	8c400094 	ori	r17,r17,2
102055c4:	00800084 	movi	r2,2
102055c8:	003f7406 	br	1020539c <___vfprintf_internal_r+0x8bc>
102055cc:	30803fcc 	andi	r2,r6,255
102055d0:	1080201c 	xori	r2,r2,128
102055d4:	10bfe004 	addi	r2,r2,-128
102055d8:	1003351e 	bne	r2,zero,102062b0 <___vfprintf_internal_r+0x17d0>
102055dc:	1805883a 	mov	r2,r3
102055e0:	01800804 	movi	r6,32
102055e4:	1c000007 	ldb	r16,0(r3)
102055e8:	003da206 	br	10204c74 <___vfprintf_internal_r+0x194>
102055ec:	dac02d17 	ldw	r11,180(sp)
102055f0:	db002d17 	ldw	r12,180(sp)
102055f4:	5ac00017 	ldw	r11,0(r11)
102055f8:	dac02e15 	stw	r11,184(sp)
102055fc:	62c00104 	addi	r11,r12,4
10205600:	db002e17 	ldw	r12,184(sp)
10205604:	6003ad16 	blt	r12,zero,102064bc <___vfprintf_internal_r+0x19dc>
10205608:	dac02d15 	stw	r11,180(sp)
1020560c:	1805883a 	mov	r2,r3
10205610:	1c000007 	ldb	r16,0(r3)
10205614:	003d9706 	br	10204c74 <___vfprintf_internal_r+0x194>
10205618:	1805883a 	mov	r2,r3
1020561c:	01800ac4 	movi	r6,43
10205620:	1c000007 	ldb	r16,0(r3)
10205624:	003d9306 	br	10204c74 <___vfprintf_internal_r+0x194>
10205628:	db002d17 	ldw	r12,180(sp)
1020562c:	d8c02a15 	stw	r3,168(sp)
10205630:	00c00044 	movi	r3,1
10205634:	60800017 	ldw	r2,0(r12)
10205638:	63000104 	addi	r12,r12,4
1020563c:	d8c02b15 	stw	r3,172(sp)
10205640:	d8002785 	stb	zero,158(sp)
10205644:	d8801405 	stb	r2,80(sp)
10205648:	db002d15 	stw	r12,180(sp)
1020564c:	dac01404 	addi	r11,sp,80
10205650:	1825883a 	mov	r18,r3
10205654:	d8003215 	stw	zero,200(sp)
10205658:	d8003415 	stw	zero,208(sp)
1020565c:	dac03115 	stw	r11,196(sp)
10205660:	0005883a 	mov	r2,zero
10205664:	003e7806 	br	10205048 <___vfprintf_internal_r+0x568>
10205668:	dac02d17 	ldw	r11,180(sp)
1020566c:	db002d17 	ldw	r12,180(sp)
10205670:	d8c02a15 	stw	r3,168(sp)
10205674:	5ac00017 	ldw	r11,0(r11)
10205678:	d8002785 	stb	zero,158(sp)
1020567c:	64c00104 	addi	r19,r12,4
10205680:	dac03115 	stw	r11,196(sp)
10205684:	5803fe26 	beq	r11,zero,10206680 <___vfprintf_internal_r+0x1ba0>
10205688:	d9003117 	ldw	r4,196(sp)
1020568c:	4803b416 	blt	r9,zero,10206560 <___vfprintf_internal_r+0x1a80>
10205690:	480d883a 	mov	r6,r9
10205694:	000b883a 	mov	r5,zero
10205698:	da003f15 	stw	r8,252(sp)
1020569c:	da403e15 	stw	r9,248(sp)
102056a0:	0209c140 	call	10209c14 <memchr>
102056a4:	da003f17 	ldw	r8,252(sp)
102056a8:	da403e17 	ldw	r9,248(sp)
102056ac:	10043026 	beq	r2,zero,10206770 <___vfprintf_internal_r+0x1c90>
102056b0:	d8c03117 	ldw	r3,196(sp)
102056b4:	10e5c83a 	sub	r18,r2,r3
102056b8:	4c836b16 	blt	r9,r18,10206468 <___vfprintf_internal_r+0x1988>
102056bc:	9005883a 	mov	r2,r18
102056c0:	9003ac16 	blt	r18,zero,10206574 <___vfprintf_internal_r+0x1a94>
102056c4:	dd402783 	ldbu	r21,158(sp)
102056c8:	d8802b15 	stw	r2,172(sp)
102056cc:	dcc02d15 	stw	r19,180(sp)
102056d0:	d8003215 	stw	zero,200(sp)
102056d4:	d8003415 	stw	zero,208(sp)
102056d8:	003e5406 	br	1020502c <___vfprintf_internal_r+0x54c>
102056dc:	008408b4 	movhi	r2,4130
102056e0:	10b41904 	addi	r2,r2,-12188
102056e4:	d8c02a15 	stw	r3,168(sp)
102056e8:	d8803b15 	stw	r2,236(sp)
102056ec:	d9802785 	stb	r6,158(sp)
102056f0:	88c0080c 	andi	r3,r17,32
102056f4:	d8802d17 	ldw	r2,180(sp)
102056f8:	183fa51e 	bne	r3,zero,10205590 <___vfprintf_internal_r+0xab0>
102056fc:	88c0040c 	andi	r3,r17,16
10205700:	1802ee26 	beq	r3,zero,102062bc <___vfprintf_internal_r+0x17dc>
10205704:	db002d17 	ldw	r12,180(sp)
10205708:	14c00017 	ldw	r19,0(r2)
1020570c:	0039883a 	mov	fp,zero
10205710:	63000104 	addi	r12,r12,4
10205714:	db002d15 	stw	r12,180(sp)
10205718:	003fa206 	br	102055a4 <___vfprintf_internal_r+0xac4>
1020571c:	8c400054 	ori	r17,r17,1
10205720:	1805883a 	mov	r2,r3
10205724:	1c000007 	ldb	r16,0(r3)
10205728:	003d5206 	br	10204c74 <___vfprintf_internal_r+0x194>
1020572c:	8c400814 	ori	r17,r17,32
10205730:	1805883a 	mov	r2,r3
10205734:	1c000007 	ldb	r16,0(r3)
10205738:	003d4e06 	br	10204c74 <___vfprintf_internal_r+0x194>
1020573c:	d8c02a15 	stw	r3,168(sp)
10205740:	8880080c 	andi	r2,r17,32
10205744:	103f1d1e 	bne	r2,zero,102053bc <___vfprintf_internal_r+0x8dc>
10205748:	8880040c 	andi	r2,r17,16
1020574c:	1001b81e 	bne	r2,zero,10205e30 <___vfprintf_internal_r+0x1350>
10205750:	8880100c 	andi	r2,r17,64
10205754:	1001b626 	beq	r2,zero,10205e30 <___vfprintf_internal_r+0x1350>
10205758:	dac02d17 	ldw	r11,180(sp)
1020575c:	0039883a 	mov	fp,zero
10205760:	00800044 	movi	r2,1
10205764:	5cc0000b 	ldhu	r19,0(r11)
10205768:	5ac00104 	addi	r11,r11,4
1020576c:	dac02d15 	stw	r11,180(sp)
10205770:	9807883a 	mov	r3,r19
10205774:	003f0906 	br	1020539c <___vfprintf_internal_r+0x8bc>
10205778:	d8c02a15 	stw	r3,168(sp)
1020577c:	8880080c 	andi	r2,r17,32
10205780:	103eff1e 	bne	r2,zero,10205380 <___vfprintf_internal_r+0x8a0>
10205784:	8880040c 	andi	r2,r17,16
10205788:	1001a11e 	bne	r2,zero,10205e10 <___vfprintf_internal_r+0x1330>
1020578c:	8880100c 	andi	r2,r17,64
10205790:	10019f26 	beq	r2,zero,10205e10 <___vfprintf_internal_r+0x1330>
10205794:	db002d17 	ldw	r12,180(sp)
10205798:	0039883a 	mov	fp,zero
1020579c:	0005883a 	mov	r2,zero
102057a0:	64c0000b 	ldhu	r19,0(r12)
102057a4:	63000104 	addi	r12,r12,4
102057a8:	db002d15 	stw	r12,180(sp)
102057ac:	9807883a 	mov	r3,r19
102057b0:	003efa06 	br	1020539c <___vfprintf_internal_r+0x8bc>
102057b4:	d8c02a15 	stw	r3,168(sp)
102057b8:	d9802785 	stb	r6,158(sp)
102057bc:	803db626 	beq	r16,zero,10204e98 <___vfprintf_internal_r+0x3b8>
102057c0:	00c00044 	movi	r3,1
102057c4:	d8c02b15 	stw	r3,172(sp)
102057c8:	dc001405 	stb	r16,80(sp)
102057cc:	d8002785 	stb	zero,158(sp)
102057d0:	003f9e06 	br	1020564c <___vfprintf_internal_r+0xb6c>
102057d4:	d8c02017 	ldw	r3,128(sp)
102057d8:	003e5306 	br	10205128 <___vfprintf_internal_r+0x648>
102057dc:	10803fcc 	andi	r2,r2,255
102057e0:	00c00044 	movi	r3,1
102057e4:	10fdfa1e 	bne	r2,r3,10204fd0 <___vfprintf_internal_r+0x4f0>
102057e8:	e000021e 	bne	fp,zero,102057f4 <___vfprintf_internal_r+0xd14>
102057ec:	00800244 	movi	r2,9
102057f0:	14c0202e 	bgeu	r2,r19,10205874 <___vfprintf_internal_r+0xd94>
102057f4:	dc002b15 	stw	r16,172(sp)
102057f8:	dc402c15 	stw	r17,176(sp)
102057fc:	9821883a 	mov	r16,r19
10205800:	e023883a 	mov	r17,fp
10205804:	dc801e04 	addi	r18,sp,120
10205808:	4827883a 	mov	r19,r9
1020580c:	4039883a 	mov	fp,r8
10205810:	8009883a 	mov	r4,r16
10205814:	880b883a 	mov	r5,r17
10205818:	01800284 	movi	r6,10
1020581c:	000f883a 	mov	r7,zero
10205820:	02153840 	call	10215384 <__umoddi3>
10205824:	10800c04 	addi	r2,r2,48
10205828:	94bfffc4 	addi	r18,r18,-1
1020582c:	8009883a 	mov	r4,r16
10205830:	880b883a 	mov	r5,r17
10205834:	01800284 	movi	r6,10
10205838:	000f883a 	mov	r7,zero
1020583c:	90800005 	stb	r2,0(r18)
10205840:	0214dc40 	call	10214dc4 <__udivdi3>
10205844:	1021883a 	mov	r16,r2
10205848:	10c4b03a 	or	r2,r2,r3
1020584c:	1823883a 	mov	r17,r3
10205850:	103fef1e 	bne	r2,zero,10205810 <___vfprintf_internal_r+0xd30>
10205854:	dac02817 	ldw	r11,160(sp)
10205858:	dc803115 	stw	r18,196(sp)
1020585c:	dc002b17 	ldw	r16,172(sp)
10205860:	dc402c17 	ldw	r17,176(sp)
10205864:	9813883a 	mov	r9,r19
10205868:	e011883a 	mov	r8,fp
1020586c:	5ca5c83a 	sub	r18,r11,r18
10205870:	003de906 	br	10205018 <___vfprintf_internal_r+0x538>
10205874:	9cc00c04 	addi	r19,r19,48
10205878:	d8c01dc4 	addi	r3,sp,119
1020587c:	dcc01dc5 	stb	r19,119(sp)
10205880:	dc803c17 	ldw	r18,240(sp)
10205884:	d8c03115 	stw	r3,196(sp)
10205888:	003de306 	br	10205018 <___vfprintf_internal_r+0x538>
1020588c:	00801944 	movi	r2,101
10205890:	1400710e 	bge	r2,r16,10205a58 <___vfprintf_internal_r+0xf78>
10205894:	d9003717 	ldw	r4,220(sp)
10205898:	d9403917 	ldw	r5,228(sp)
1020589c:	000d883a 	mov	r6,zero
102058a0:	000f883a 	mov	r7,zero
102058a4:	d8c03d15 	stw	r3,244(sp)
102058a8:	da003f15 	stw	r8,252(sp)
102058ac:	0216c600 	call	10216c60 <__eqdf2>
102058b0:	d8c03d17 	ldw	r3,244(sp)
102058b4:	da003f17 	ldw	r8,252(sp)
102058b8:	1000ef1e 	bne	r2,zero,10205c78 <___vfprintf_internal_r+0x1198>
102058bc:	d8801f17 	ldw	r2,124(sp)
102058c0:	010408b4 	movhi	r4,4130
102058c4:	21342004 	addi	r4,r4,-12160
102058c8:	18c00044 	addi	r3,r3,1
102058cc:	10800044 	addi	r2,r2,1
102058d0:	41000015 	stw	r4,0(r8)
102058d4:	01000044 	movi	r4,1
102058d8:	41000115 	stw	r4,4(r8)
102058dc:	d8c02015 	stw	r3,128(sp)
102058e0:	d8801f15 	stw	r2,124(sp)
102058e4:	010001c4 	movi	r4,7
102058e8:	20828e16 	blt	r4,r2,10206324 <___vfprintf_internal_r+0x1844>
102058ec:	42000204 	addi	r8,r8,8
102058f0:	d8802617 	ldw	r2,152(sp)
102058f4:	dac03317 	ldw	r11,204(sp)
102058f8:	12c00216 	blt	r2,r11,10205904 <___vfprintf_internal_r+0xe24>
102058fc:	8880004c 	andi	r2,r17,1
10205900:	103e5d26 	beq	r2,zero,10205278 <___vfprintf_internal_r+0x798>
10205904:	db003817 	ldw	r12,224(sp)
10205908:	d8801f17 	ldw	r2,124(sp)
1020590c:	dac03517 	ldw	r11,212(sp)
10205910:	1b07883a 	add	r3,r3,r12
10205914:	10800044 	addi	r2,r2,1
10205918:	42c00015 	stw	r11,0(r8)
1020591c:	43000115 	stw	r12,4(r8)
10205920:	d8c02015 	stw	r3,128(sp)
10205924:	d8801f15 	stw	r2,124(sp)
10205928:	010001c4 	movi	r4,7
1020592c:	2082ed16 	blt	r4,r2,102064e4 <___vfprintf_internal_r+0x1a04>
10205930:	42000204 	addi	r8,r8,8
10205934:	db003317 	ldw	r12,204(sp)
10205938:	643fffc4 	addi	r16,r12,-1
1020593c:	043e4e0e 	bge	zero,r16,10205278 <___vfprintf_internal_r+0x798>
10205940:	04800404 	movi	r18,16
10205944:	d8801f17 	ldw	r2,124(sp)
10205948:	94007e0e 	bge	r18,r16,10205b44 <___vfprintf_internal_r+0x1064>
1020594c:	014408b4 	movhi	r5,4130
10205950:	29742084 	addi	r5,r5,-12158
10205954:	d9402c15 	stw	r5,176(sp)
10205958:	054001c4 	movi	r21,7
1020595c:	00000306 	br	1020596c <___vfprintf_internal_r+0xe8c>
10205960:	42000204 	addi	r8,r8,8
10205964:	843ffc04 	addi	r16,r16,-16
10205968:	9400790e 	bge	r18,r16,10205b50 <___vfprintf_internal_r+0x1070>
1020596c:	18c00404 	addi	r3,r3,16
10205970:	10800044 	addi	r2,r2,1
10205974:	45000015 	stw	r20,0(r8)
10205978:	44800115 	stw	r18,4(r8)
1020597c:	d8c02015 	stw	r3,128(sp)
10205980:	d8801f15 	stw	r2,124(sp)
10205984:	a8bff60e 	bge	r21,r2,10205960 <___vfprintf_internal_r+0xe80>
10205988:	b009883a 	mov	r4,r22
1020598c:	b80b883a 	mov	r5,r23
10205990:	d9801e04 	addi	r6,sp,120
10205994:	02113340 	call	10211334 <__sprint_r>
10205998:	103d451e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
1020599c:	d8c02017 	ldw	r3,128(sp)
102059a0:	d8801f17 	ldw	r2,124(sp)
102059a4:	da000404 	addi	r8,sp,16
102059a8:	003fee06 	br	10205964 <___vfprintf_internal_r+0xe84>
102059ac:	dac02e17 	ldw	r11,184(sp)
102059b0:	db002b17 	ldw	r12,172(sp)
102059b4:	5b2bc83a 	sub	r21,r11,r12
102059b8:	057df90e 	bge	zero,r21,102051a0 <___vfprintf_internal_r+0x6c0>
102059bc:	07000404 	movi	fp,16
102059c0:	d8801f17 	ldw	r2,124(sp)
102059c4:	e543640e 	bge	fp,r21,10206758 <___vfprintf_internal_r+0x1c78>
102059c8:	014408b4 	movhi	r5,4130
102059cc:	29742084 	addi	r5,r5,-12158
102059d0:	d9402c15 	stw	r5,176(sp)
102059d4:	04c001c4 	movi	r19,7
102059d8:	00000306 	br	102059e8 <___vfprintf_internal_r+0xf08>
102059dc:	ad7ffc04 	addi	r21,r21,-16
102059e0:	42000204 	addi	r8,r8,8
102059e4:	e540110e 	bge	fp,r21,10205a2c <___vfprintf_internal_r+0xf4c>
102059e8:	18c00404 	addi	r3,r3,16
102059ec:	10800044 	addi	r2,r2,1
102059f0:	45000015 	stw	r20,0(r8)
102059f4:	47000115 	stw	fp,4(r8)
102059f8:	d8c02015 	stw	r3,128(sp)
102059fc:	d8801f15 	stw	r2,124(sp)
10205a00:	98bff60e 	bge	r19,r2,102059dc <___vfprintf_internal_r+0xefc>
10205a04:	b009883a 	mov	r4,r22
10205a08:	b80b883a 	mov	r5,r23
10205a0c:	d9801e04 	addi	r6,sp,120
10205a10:	02113340 	call	10211334 <__sprint_r>
10205a14:	103d261e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
10205a18:	ad7ffc04 	addi	r21,r21,-16
10205a1c:	d8c02017 	ldw	r3,128(sp)
10205a20:	d8801f17 	ldw	r2,124(sp)
10205a24:	da000404 	addi	r8,sp,16
10205a28:	e57fef16 	blt	fp,r21,102059e8 <___vfprintf_internal_r+0xf08>
10205a2c:	dac02c17 	ldw	r11,176(sp)
10205a30:	1d47883a 	add	r3,r3,r21
10205a34:	10800044 	addi	r2,r2,1
10205a38:	42c00015 	stw	r11,0(r8)
10205a3c:	45400115 	stw	r21,4(r8)
10205a40:	d8c02015 	stw	r3,128(sp)
10205a44:	d8801f15 	stw	r2,124(sp)
10205a48:	010001c4 	movi	r4,7
10205a4c:	20819116 	blt	r4,r2,10206094 <___vfprintf_internal_r+0x15b4>
10205a50:	42000204 	addi	r8,r8,8
10205a54:	003dd206 	br	102051a0 <___vfprintf_internal_r+0x6c0>
10205a58:	db003317 	ldw	r12,204(sp)
10205a5c:	00800044 	movi	r2,1
10205a60:	18c00044 	addi	r3,r3,1
10205a64:	1301530e 	bge	r2,r12,10205fb4 <___vfprintf_internal_r+0x14d4>
10205a68:	dc001f17 	ldw	r16,124(sp)
10205a6c:	dac03117 	ldw	r11,196(sp)
10205a70:	00800044 	movi	r2,1
10205a74:	84000044 	addi	r16,r16,1
10205a78:	40800115 	stw	r2,4(r8)
10205a7c:	42c00015 	stw	r11,0(r8)
10205a80:	d8c02015 	stw	r3,128(sp)
10205a84:	dc001f15 	stw	r16,124(sp)
10205a88:	008001c4 	movi	r2,7
10205a8c:	14016b16 	blt	r2,r16,1020603c <___vfprintf_internal_r+0x155c>
10205a90:	42000204 	addi	r8,r8,8
10205a94:	db003817 	ldw	r12,224(sp)
10205a98:	dac03517 	ldw	r11,212(sp)
10205a9c:	84000044 	addi	r16,r16,1
10205aa0:	1b07883a 	add	r3,r3,r12
10205aa4:	42c00015 	stw	r11,0(r8)
10205aa8:	43000115 	stw	r12,4(r8)
10205aac:	d8c02015 	stw	r3,128(sp)
10205ab0:	dc001f15 	stw	r16,124(sp)
10205ab4:	008001c4 	movi	r2,7
10205ab8:	14016916 	blt	r2,r16,10206060 <___vfprintf_internal_r+0x1580>
10205abc:	44800204 	addi	r18,r8,8
10205ac0:	d9003717 	ldw	r4,220(sp)
10205ac4:	d9403917 	ldw	r5,228(sp)
10205ac8:	000d883a 	mov	r6,zero
10205acc:	000f883a 	mov	r7,zero
10205ad0:	d8c03d15 	stw	r3,244(sp)
10205ad4:	0216c600 	call	10216c60 <__eqdf2>
10205ad8:	d8c03d17 	ldw	r3,244(sp)
10205adc:	db003317 	ldw	r12,204(sp)
10205ae0:	1000ad26 	beq	r2,zero,10205d98 <___vfprintf_internal_r+0x12b8>
10205ae4:	dac03117 	ldw	r11,196(sp)
10205ae8:	60bfffc4 	addi	r2,r12,-1
10205aec:	1887883a 	add	r3,r3,r2
10205af0:	59000044 	addi	r4,r11,1
10205af4:	84000044 	addi	r16,r16,1
10205af8:	90800115 	stw	r2,4(r18)
10205afc:	91000015 	stw	r4,0(r18)
10205b00:	d8c02015 	stw	r3,128(sp)
10205b04:	dc001f15 	stw	r16,124(sp)
10205b08:	008001c4 	movi	r2,7
10205b0c:	14014216 	blt	r2,r16,10206018 <___vfprintf_internal_r+0x1538>
10205b10:	94800204 	addi	r18,r18,8
10205b14:	dac03a17 	ldw	r11,232(sp)
10205b18:	dd4022c4 	addi	r21,sp,139
10205b1c:	84000044 	addi	r16,r16,1
10205b20:	1ac7883a 	add	r3,r3,r11
10205b24:	95400015 	stw	r21,0(r18)
10205b28:	92c00115 	stw	r11,4(r18)
10205b2c:	d8c02015 	stw	r3,128(sp)
10205b30:	dc001f15 	stw	r16,124(sp)
10205b34:	008001c4 	movi	r2,7
10205b38:	14000e16 	blt	r2,r16,10205b74 <___vfprintf_internal_r+0x1094>
10205b3c:	92000204 	addi	r8,r18,8
10205b40:	003dcd06 	br	10205278 <___vfprintf_internal_r+0x798>
10205b44:	010408b4 	movhi	r4,4130
10205b48:	21342084 	addi	r4,r4,-12158
10205b4c:	d9002c15 	stw	r4,176(sp)
10205b50:	dac02c17 	ldw	r11,176(sp)
10205b54:	1c07883a 	add	r3,r3,r16
10205b58:	44000115 	stw	r16,4(r8)
10205b5c:	42c00015 	stw	r11,0(r8)
10205b60:	10800044 	addi	r2,r2,1
10205b64:	d8c02015 	stw	r3,128(sp)
10205b68:	d8801f15 	stw	r2,124(sp)
10205b6c:	010001c4 	movi	r4,7
10205b70:	20bdc00e 	bge	r4,r2,10205274 <___vfprintf_internal_r+0x794>
10205b74:	b009883a 	mov	r4,r22
10205b78:	b80b883a 	mov	r5,r23
10205b7c:	d9801e04 	addi	r6,sp,120
10205b80:	02113340 	call	10211334 <__sprint_r>
10205b84:	103cca1e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
10205b88:	d8c02017 	ldw	r3,128(sp)
10205b8c:	da000404 	addi	r8,sp,16
10205b90:	003db906 	br	10205278 <___vfprintf_internal_r+0x798>
10205b94:	b009883a 	mov	r4,r22
10205b98:	b80b883a 	mov	r5,r23
10205b9c:	d9801e04 	addi	r6,sp,120
10205ba0:	02113340 	call	10211334 <__sprint_r>
10205ba4:	103def26 	beq	r2,zero,10205364 <___vfprintf_internal_r+0x884>
10205ba8:	003cc106 	br	10204eb0 <___vfprintf_internal_r+0x3d0>
10205bac:	10803fcc 	andi	r2,r2,255
10205bb0:	1000651e 	bne	r2,zero,10205d48 <___vfprintf_internal_r+0x1268>
10205bb4:	8880004c 	andi	r2,r17,1
10205bb8:	10013226 	beq	r2,zero,10206084 <___vfprintf_internal_r+0x15a4>
10205bbc:	00800c04 	movi	r2,48
10205bc0:	d8c01dc4 	addi	r3,sp,119
10205bc4:	d8801dc5 	stb	r2,119(sp)
10205bc8:	dc803c17 	ldw	r18,240(sp)
10205bcc:	d8c03115 	stw	r3,196(sp)
10205bd0:	003d1106 	br	10205018 <___vfprintf_internal_r+0x538>
10205bd4:	b009883a 	mov	r4,r22
10205bd8:	b80b883a 	mov	r5,r23
10205bdc:	d9801e04 	addi	r6,sp,120
10205be0:	02113340 	call	10211334 <__sprint_r>
10205be4:	103cb21e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
10205be8:	d8c02017 	ldw	r3,128(sp)
10205bec:	da000404 	addi	r8,sp,16
10205bf0:	003d9406 	br	10205244 <___vfprintf_internal_r+0x764>
10205bf4:	b009883a 	mov	r4,r22
10205bf8:	b80b883a 	mov	r5,r23
10205bfc:	d9801e04 	addi	r6,sp,120
10205c00:	02113340 	call	10211334 <__sprint_r>
10205c04:	103caa1e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
10205c08:	d8c02017 	ldw	r3,128(sp)
10205c0c:	da000404 	addi	r8,sp,16
10205c10:	003d5206 	br	1020515c <___vfprintf_internal_r+0x67c>
10205c14:	b009883a 	mov	r4,r22
10205c18:	b80b883a 	mov	r5,r23
10205c1c:	d9801e04 	addi	r6,sp,120
10205c20:	02113340 	call	10211334 <__sprint_r>
10205c24:	103ca21e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
10205c28:	d8c02017 	ldw	r3,128(sp)
10205c2c:	da000404 	addi	r8,sp,16
10205c30:	003d5806 	br	10205194 <___vfprintf_internal_r+0x6b4>
10205c34:	d9403b17 	ldw	r5,236(sp)
10205c38:	d8c01e04 	addi	r3,sp,120
10205c3c:	988003cc 	andi	r2,r19,15
10205c40:	e008973a 	slli	r4,fp,28
10205c44:	2885883a 	add	r2,r5,r2
10205c48:	9826d13a 	srli	r19,r19,4
10205c4c:	10800003 	ldbu	r2,0(r2)
10205c50:	e038d13a 	srli	fp,fp,4
10205c54:	18ffffc4 	addi	r3,r3,-1
10205c58:	24e6b03a 	or	r19,r4,r19
10205c5c:	18800005 	stb	r2,0(r3)
10205c60:	9f04b03a 	or	r2,r19,fp
10205c64:	103ff51e 	bne	r2,zero,10205c3c <___vfprintf_internal_r+0x115c>
10205c68:	db002817 	ldw	r12,160(sp)
10205c6c:	d8c03115 	stw	r3,196(sp)
10205c70:	60e5c83a 	sub	r18,r12,r3
10205c74:	003ce806 	br	10205018 <___vfprintf_internal_r+0x538>
10205c78:	dc002617 	ldw	r16,152(sp)
10205c7c:	0401b10e 	bge	zero,r16,10206344 <___vfprintf_internal_r+0x1864>
10205c80:	db003117 	ldw	r12,196(sp)
10205c84:	dac03317 	ldw	r11,204(sp)
10205c88:	62e1883a 	add	r16,r12,r11
10205c8c:	db003417 	ldw	r12,208(sp)
10205c90:	5825883a 	mov	r18,r11
10205c94:	62c0010e 	bge	r12,r11,10205c9c <___vfprintf_internal_r+0x11bc>
10205c98:	6025883a 	mov	r18,r12
10205c9c:	04800b0e 	bge	zero,r18,10205ccc <___vfprintf_internal_r+0x11ec>
10205ca0:	d8801f17 	ldw	r2,124(sp)
10205ca4:	dac03117 	ldw	r11,196(sp)
10205ca8:	1c87883a 	add	r3,r3,r18
10205cac:	10800044 	addi	r2,r2,1
10205cb0:	42c00015 	stw	r11,0(r8)
10205cb4:	44800115 	stw	r18,4(r8)
10205cb8:	d8c02015 	stw	r3,128(sp)
10205cbc:	d8801f15 	stw	r2,124(sp)
10205cc0:	010001c4 	movi	r4,7
10205cc4:	20824f16 	blt	r4,r2,10206604 <___vfprintf_internal_r+0x1b24>
10205cc8:	42000204 	addi	r8,r8,8
10205ccc:	90024b16 	blt	r18,zero,102065fc <___vfprintf_internal_r+0x1b1c>
10205cd0:	db003417 	ldw	r12,208(sp)
10205cd4:	64a5c83a 	sub	r18,r12,r18
10205cd8:	0480730e 	bge	zero,r18,10205ea8 <___vfprintf_internal_r+0x13c8>
10205cdc:	05400404 	movi	r21,16
10205ce0:	d8801f17 	ldw	r2,124(sp)
10205ce4:	ac817d0e 	bge	r21,r18,102062dc <___vfprintf_internal_r+0x17fc>
10205ce8:	014408b4 	movhi	r5,4130
10205cec:	29742084 	addi	r5,r5,-12158
10205cf0:	d9402c15 	stw	r5,176(sp)
10205cf4:	070001c4 	movi	fp,7
10205cf8:	00000306 	br	10205d08 <___vfprintf_internal_r+0x1228>
10205cfc:	42000204 	addi	r8,r8,8
10205d00:	94bffc04 	addi	r18,r18,-16
10205d04:	ac81780e 	bge	r21,r18,102062e8 <___vfprintf_internal_r+0x1808>
10205d08:	18c00404 	addi	r3,r3,16
10205d0c:	10800044 	addi	r2,r2,1
10205d10:	45000015 	stw	r20,0(r8)
10205d14:	45400115 	stw	r21,4(r8)
10205d18:	d8c02015 	stw	r3,128(sp)
10205d1c:	d8801f15 	stw	r2,124(sp)
10205d20:	e0bff60e 	bge	fp,r2,10205cfc <___vfprintf_internal_r+0x121c>
10205d24:	b009883a 	mov	r4,r22
10205d28:	b80b883a 	mov	r5,r23
10205d2c:	d9801e04 	addi	r6,sp,120
10205d30:	02113340 	call	10211334 <__sprint_r>
10205d34:	103c5e1e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
10205d38:	d8c02017 	ldw	r3,128(sp)
10205d3c:	d8801f17 	ldw	r2,124(sp)
10205d40:	da000404 	addi	r8,sp,16
10205d44:	003fee06 	br	10205d00 <___vfprintf_internal_r+0x1220>
10205d48:	dac01e04 	addi	r11,sp,120
10205d4c:	0025883a 	mov	r18,zero
10205d50:	dac03115 	stw	r11,196(sp)
10205d54:	003cb006 	br	10205018 <___vfprintf_internal_r+0x538>
10205d58:	b009883a 	mov	r4,r22
10205d5c:	b80b883a 	mov	r5,r23
10205d60:	d9801e04 	addi	r6,sp,120
10205d64:	02113340 	call	10211334 <__sprint_r>
10205d68:	103c511e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
10205d6c:	d8c02017 	ldw	r3,128(sp)
10205d70:	d8802787 	ldb	r2,158(sp)
10205d74:	da000404 	addi	r8,sp,16
10205d78:	003ceb06 	br	10205128 <___vfprintf_internal_r+0x648>
10205d7c:	1cc00017 	ldw	r19,0(r3)
10205d80:	dac02d17 	ldw	r11,180(sp)
10205d84:	9839d7fa 	srai	fp,r19,31
10205d88:	5ac00104 	addi	r11,r11,4
10205d8c:	dac02d15 	stw	r11,180(sp)
10205d90:	e005883a 	mov	r2,fp
10205d94:	003c8106 	br	10204f9c <___vfprintf_internal_r+0x4bc>
10205d98:	657fffc4 	addi	r21,r12,-1
10205d9c:	057f5d0e 	bge	zero,r21,10205b14 <___vfprintf_internal_r+0x1034>
10205da0:	07000404 	movi	fp,16
10205da4:	e540900e 	bge	fp,r21,10205fe8 <___vfprintf_internal_r+0x1508>
10205da8:	010408b4 	movhi	r4,4130
10205dac:	21342084 	addi	r4,r4,-12158
10205db0:	d9002c15 	stw	r4,176(sp)
10205db4:	01c001c4 	movi	r7,7
10205db8:	00000306 	br	10205dc8 <___vfprintf_internal_r+0x12e8>
10205dbc:	94800204 	addi	r18,r18,8
10205dc0:	ad7ffc04 	addi	r21,r21,-16
10205dc4:	e5408b0e 	bge	fp,r21,10205ff4 <___vfprintf_internal_r+0x1514>
10205dc8:	18c00404 	addi	r3,r3,16
10205dcc:	84000044 	addi	r16,r16,1
10205dd0:	95000015 	stw	r20,0(r18)
10205dd4:	97000115 	stw	fp,4(r18)
10205dd8:	d8c02015 	stw	r3,128(sp)
10205ddc:	dc001f15 	stw	r16,124(sp)
10205de0:	3c3ff60e 	bge	r7,r16,10205dbc <___vfprintf_internal_r+0x12dc>
10205de4:	b009883a 	mov	r4,r22
10205de8:	b80b883a 	mov	r5,r23
10205dec:	d9801e04 	addi	r6,sp,120
10205df0:	d9c03d15 	stw	r7,244(sp)
10205df4:	02113340 	call	10211334 <__sprint_r>
10205df8:	d9c03d17 	ldw	r7,244(sp)
10205dfc:	103c2c1e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
10205e00:	d8c02017 	ldw	r3,128(sp)
10205e04:	dc001f17 	ldw	r16,124(sp)
10205e08:	dc800404 	addi	r18,sp,16
10205e0c:	003fec06 	br	10205dc0 <___vfprintf_internal_r+0x12e0>
10205e10:	dac02d17 	ldw	r11,180(sp)
10205e14:	0039883a 	mov	fp,zero
10205e18:	0005883a 	mov	r2,zero
10205e1c:	5cc00017 	ldw	r19,0(r11)
10205e20:	5ac00104 	addi	r11,r11,4
10205e24:	dac02d15 	stw	r11,180(sp)
10205e28:	9807883a 	mov	r3,r19
10205e2c:	003d5b06 	br	1020539c <___vfprintf_internal_r+0x8bc>
10205e30:	db002d17 	ldw	r12,180(sp)
10205e34:	0039883a 	mov	fp,zero
10205e38:	00800044 	movi	r2,1
10205e3c:	64c00017 	ldw	r19,0(r12)
10205e40:	63000104 	addi	r12,r12,4
10205e44:	db002d15 	stw	r12,180(sp)
10205e48:	9807883a 	mov	r3,r19
10205e4c:	003d5306 	br	1020539c <___vfprintf_internal_r+0x8bc>
10205e50:	00800084 	movi	r2,2
10205e54:	9f06b03a 	or	r3,r19,fp
10205e58:	003d5006 	br	1020539c <___vfprintf_internal_r+0x8bc>
10205e5c:	10803fcc 	andi	r2,r2,255
10205e60:	1080201c 	xori	r2,r2,128
10205e64:	10bfe004 	addi	r2,r2,-128
10205e68:	01000c04 	movi	r4,48
10205e6c:	1101a526 	beq	r2,r4,10206504 <___vfprintf_internal_r+0x1a24>
10205e70:	dac03117 	ldw	r11,196(sp)
10205e74:	db002817 	ldw	r12,160(sp)
10205e78:	193fffc5 	stb	r4,-1(r3)
10205e7c:	5affffc4 	addi	r11,r11,-1
10205e80:	dac03115 	stw	r11,196(sp)
10205e84:	62e5c83a 	sub	r18,r12,r11
10205e88:	003c6306 	br	10205018 <___vfprintf_internal_r+0x538>
10205e8c:	b009883a 	mov	r4,r22
10205e90:	b80b883a 	mov	r5,r23
10205e94:	d9801e04 	addi	r6,sp,120
10205e98:	02113340 	call	10211334 <__sprint_r>
10205e9c:	103c041e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
10205ea0:	d8c02017 	ldw	r3,128(sp)
10205ea4:	da000404 	addi	r8,sp,16
10205ea8:	db003117 	ldw	r12,196(sp)
10205eac:	dac03417 	ldw	r11,208(sp)
10205eb0:	d8802617 	ldw	r2,152(sp)
10205eb4:	62e5883a 	add	r18,r12,r11
10205eb8:	db003317 	ldw	r12,204(sp)
10205ebc:	13000216 	blt	r2,r12,10205ec8 <___vfprintf_internal_r+0x13e8>
10205ec0:	8900004c 	andi	r4,r17,1
10205ec4:	20000c26 	beq	r4,zero,10205ef8 <___vfprintf_internal_r+0x1418>
10205ec8:	dac03817 	ldw	r11,224(sp)
10205ecc:	d9001f17 	ldw	r4,124(sp)
10205ed0:	db003517 	ldw	r12,212(sp)
10205ed4:	1ac7883a 	add	r3,r3,r11
10205ed8:	21000044 	addi	r4,r4,1
10205edc:	43000015 	stw	r12,0(r8)
10205ee0:	42c00115 	stw	r11,4(r8)
10205ee4:	d8c02015 	stw	r3,128(sp)
10205ee8:	d9001f15 	stw	r4,124(sp)
10205eec:	014001c4 	movi	r5,7
10205ef0:	2901cc16 	blt	r5,r4,10206624 <___vfprintf_internal_r+0x1b44>
10205ef4:	42000204 	addi	r8,r8,8
10205ef8:	dac03317 	ldw	r11,204(sp)
10205efc:	8489c83a 	sub	r4,r16,r18
10205f00:	5885c83a 	sub	r2,r11,r2
10205f04:	1021883a 	mov	r16,r2
10205f08:	2080010e 	bge	r4,r2,10205f10 <___vfprintf_internal_r+0x1430>
10205f0c:	2021883a 	mov	r16,r4
10205f10:	04000a0e 	bge	zero,r16,10205f3c <___vfprintf_internal_r+0x145c>
10205f14:	d9001f17 	ldw	r4,124(sp)
10205f18:	1c07883a 	add	r3,r3,r16
10205f1c:	44800015 	stw	r18,0(r8)
10205f20:	21000044 	addi	r4,r4,1
10205f24:	44000115 	stw	r16,4(r8)
10205f28:	d8c02015 	stw	r3,128(sp)
10205f2c:	d9001f15 	stw	r4,124(sp)
10205f30:	014001c4 	movi	r5,7
10205f34:	2901e316 	blt	r5,r4,102066c4 <___vfprintf_internal_r+0x1be4>
10205f38:	42000204 	addi	r8,r8,8
10205f3c:	8001df16 	blt	r16,zero,102066bc <___vfprintf_internal_r+0x1bdc>
10205f40:	1421c83a 	sub	r16,r2,r16
10205f44:	043ccc0e 	bge	zero,r16,10205278 <___vfprintf_internal_r+0x798>
10205f48:	04800404 	movi	r18,16
10205f4c:	d8801f17 	ldw	r2,124(sp)
10205f50:	943efc0e 	bge	r18,r16,10205b44 <___vfprintf_internal_r+0x1064>
10205f54:	014408b4 	movhi	r5,4130
10205f58:	29742084 	addi	r5,r5,-12158
10205f5c:	d9402c15 	stw	r5,176(sp)
10205f60:	054001c4 	movi	r21,7
10205f64:	00000306 	br	10205f74 <___vfprintf_internal_r+0x1494>
10205f68:	42000204 	addi	r8,r8,8
10205f6c:	843ffc04 	addi	r16,r16,-16
10205f70:	943ef70e 	bge	r18,r16,10205b50 <___vfprintf_internal_r+0x1070>
10205f74:	18c00404 	addi	r3,r3,16
10205f78:	10800044 	addi	r2,r2,1
10205f7c:	45000015 	stw	r20,0(r8)
10205f80:	44800115 	stw	r18,4(r8)
10205f84:	d8c02015 	stw	r3,128(sp)
10205f88:	d8801f15 	stw	r2,124(sp)
10205f8c:	a8bff60e 	bge	r21,r2,10205f68 <___vfprintf_internal_r+0x1488>
10205f90:	b009883a 	mov	r4,r22
10205f94:	b80b883a 	mov	r5,r23
10205f98:	d9801e04 	addi	r6,sp,120
10205f9c:	02113340 	call	10211334 <__sprint_r>
10205fa0:	103bc31e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
10205fa4:	d8c02017 	ldw	r3,128(sp)
10205fa8:	d8801f17 	ldw	r2,124(sp)
10205fac:	da000404 	addi	r8,sp,16
10205fb0:	003fee06 	br	10205f6c <___vfprintf_internal_r+0x148c>
10205fb4:	8888703a 	and	r4,r17,r2
10205fb8:	203eab1e 	bne	r4,zero,10205a68 <___vfprintf_internal_r+0xf88>
10205fbc:	dc001f17 	ldw	r16,124(sp)
10205fc0:	db003117 	ldw	r12,196(sp)
10205fc4:	40800115 	stw	r2,4(r8)
10205fc8:	84000044 	addi	r16,r16,1
10205fcc:	43000015 	stw	r12,0(r8)
10205fd0:	d8c02015 	stw	r3,128(sp)
10205fd4:	dc001f15 	stw	r16,124(sp)
10205fd8:	008001c4 	movi	r2,7
10205fdc:	14000e16 	blt	r2,r16,10206018 <___vfprintf_internal_r+0x1538>
10205fe0:	44800204 	addi	r18,r8,8
10205fe4:	003ecb06 	br	10205b14 <___vfprintf_internal_r+0x1034>
10205fe8:	008408b4 	movhi	r2,4130
10205fec:	10b42084 	addi	r2,r2,-12158
10205ff0:	d8802c15 	stw	r2,176(sp)
10205ff4:	dac02c17 	ldw	r11,176(sp)
10205ff8:	1d47883a 	add	r3,r3,r21
10205ffc:	84000044 	addi	r16,r16,1
10206000:	92c00015 	stw	r11,0(r18)
10206004:	95400115 	stw	r21,4(r18)
10206008:	d8c02015 	stw	r3,128(sp)
1020600c:	dc001f15 	stw	r16,124(sp)
10206010:	008001c4 	movi	r2,7
10206014:	143ebe0e 	bge	r2,r16,10205b10 <___vfprintf_internal_r+0x1030>
10206018:	b009883a 	mov	r4,r22
1020601c:	b80b883a 	mov	r5,r23
10206020:	d9801e04 	addi	r6,sp,120
10206024:	02113340 	call	10211334 <__sprint_r>
10206028:	103ba11e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
1020602c:	d8c02017 	ldw	r3,128(sp)
10206030:	dc001f17 	ldw	r16,124(sp)
10206034:	dc800404 	addi	r18,sp,16
10206038:	003eb606 	br	10205b14 <___vfprintf_internal_r+0x1034>
1020603c:	b009883a 	mov	r4,r22
10206040:	b80b883a 	mov	r5,r23
10206044:	d9801e04 	addi	r6,sp,120
10206048:	02113340 	call	10211334 <__sprint_r>
1020604c:	103b981e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
10206050:	d8c02017 	ldw	r3,128(sp)
10206054:	dc001f17 	ldw	r16,124(sp)
10206058:	da000404 	addi	r8,sp,16
1020605c:	003e8d06 	br	10205a94 <___vfprintf_internal_r+0xfb4>
10206060:	b009883a 	mov	r4,r22
10206064:	b80b883a 	mov	r5,r23
10206068:	d9801e04 	addi	r6,sp,120
1020606c:	02113340 	call	10211334 <__sprint_r>
10206070:	103b8f1e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
10206074:	d8c02017 	ldw	r3,128(sp)
10206078:	dc001f17 	ldw	r16,124(sp)
1020607c:	dc800404 	addi	r18,sp,16
10206080:	003e8f06 	br	10205ac0 <___vfprintf_internal_r+0xfe0>
10206084:	db001e04 	addi	r12,sp,120
10206088:	0025883a 	mov	r18,zero
1020608c:	db003115 	stw	r12,196(sp)
10206090:	003be106 	br	10205018 <___vfprintf_internal_r+0x538>
10206094:	b009883a 	mov	r4,r22
10206098:	b80b883a 	mov	r5,r23
1020609c:	d9801e04 	addi	r6,sp,120
102060a0:	02113340 	call	10211334 <__sprint_r>
102060a4:	103b821e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
102060a8:	d8c02017 	ldw	r3,128(sp)
102060ac:	da000404 	addi	r8,sp,16
102060b0:	003c3b06 	br	102051a0 <___vfprintf_internal_r+0x6c0>
102060b4:	04e7c83a 	sub	r19,zero,r19
102060b8:	9804c03a 	cmpne	r2,r19,zero
102060bc:	0739c83a 	sub	fp,zero,fp
102060c0:	e0b9c83a 	sub	fp,fp,r2
102060c4:	05400b44 	movi	r21,45
102060c8:	dd402785 	stb	r21,158(sp)
102060cc:	da403215 	stw	r9,200(sp)
102060d0:	00800044 	movi	r2,1
102060d4:	9f06b03a 	or	r3,r19,fp
102060d8:	003bb506 	br	10204fb0 <___vfprintf_internal_r+0x4d0>
102060dc:	da003f15 	stw	r8,252(sp)
102060e0:	da403e15 	stw	r9,248(sp)
102060e4:	020b83c0 	call	1020b83c <__fpclassifyd>
102060e8:	da003f17 	ldw	r8,252(sp)
102060ec:	da403e17 	ldw	r9,248(sp)
102060f0:	1000ce26 	beq	r2,zero,1020642c <___vfprintf_internal_r+0x194c>
102060f4:	057ff7c4 	movi	r21,-33
102060f8:	00bfffc4 	movi	r2,-1
102060fc:	856a703a 	and	r21,r16,r21
10206100:	4881e826 	beq	r9,r2,102068a4 <___vfprintf_internal_r+0x1dc4>
10206104:	008011c4 	movi	r2,71
10206108:	a881e326 	beq	r21,r2,10206898 <___vfprintf_internal_r+0x1db8>
1020610c:	db003917 	ldw	r12,228(sp)
10206110:	8ac04014 	ori	r11,r17,256
10206114:	dac02d15 	stw	r11,180(sp)
10206118:	6001ed16 	blt	r12,zero,102068d0 <___vfprintf_internal_r+0x1df0>
1020611c:	dc803917 	ldw	r18,228(sp)
10206120:	d8002b05 	stb	zero,172(sp)
10206124:	00801984 	movi	r2,102
10206128:	80811826 	beq	r16,r2,1020658c <___vfprintf_internal_r+0x1aac>
1020612c:	00801184 	movi	r2,70
10206130:	80811626 	beq	r16,r2,1020658c <___vfprintf_internal_r+0x1aac>
10206134:	00801144 	movi	r2,69
10206138:	a881e926 	beq	r21,r2,102068e0 <___vfprintf_internal_r+0x1e00>
1020613c:	4839883a 	mov	fp,r9
10206140:	d8802604 	addi	r2,sp,152
10206144:	d8800115 	stw	r2,4(sp)
10206148:	d9403717 	ldw	r5,220(sp)
1020614c:	d8802504 	addi	r2,sp,148
10206150:	d8800215 	stw	r2,8(sp)
10206154:	d8802104 	addi	r2,sp,132
10206158:	df000015 	stw	fp,0(sp)
1020615c:	d8800315 	stw	r2,12(sp)
10206160:	b009883a 	mov	r4,r22
10206164:	900d883a 	mov	r6,r18
10206168:	01c00084 	movi	r7,2
1020616c:	da003f15 	stw	r8,252(sp)
10206170:	da403e15 	stw	r9,248(sp)
10206174:	0206f140 	call	10206f14 <_dtoa_r>
10206178:	d8803115 	stw	r2,196(sp)
1020617c:	008019c4 	movi	r2,103
10206180:	da003f17 	ldw	r8,252(sp)
10206184:	da403e17 	ldw	r9,248(sp)
10206188:	80800226 	beq	r16,r2,10206194 <___vfprintf_internal_r+0x16b4>
1020618c:	008011c4 	movi	r2,71
10206190:	8081101e 	bne	r16,r2,102065d4 <___vfprintf_internal_r+0x1af4>
10206194:	8880004c 	andi	r2,r17,1
10206198:	1001dd26 	beq	r2,zero,10206910 <___vfprintf_internal_r+0x1e30>
1020619c:	db003117 	ldw	r12,196(sp)
102061a0:	6715883a 	add	r10,r12,fp
102061a4:	d9003717 	ldw	r4,220(sp)
102061a8:	900b883a 	mov	r5,r18
102061ac:	000d883a 	mov	r6,zero
102061b0:	000f883a 	mov	r7,zero
102061b4:	da003f15 	stw	r8,252(sp)
102061b8:	da403e15 	stw	r9,248(sp)
102061bc:	da803d15 	stw	r10,244(sp)
102061c0:	0216c600 	call	10216c60 <__eqdf2>
102061c4:	da003f17 	ldw	r8,252(sp)
102061c8:	da403e17 	ldw	r9,248(sp)
102061cc:	da803d17 	ldw	r10,244(sp)
102061d0:	10016526 	beq	r2,zero,10206768 <___vfprintf_internal_r+0x1c88>
102061d4:	d8802117 	ldw	r2,132(sp)
102061d8:	1280062e 	bgeu	r2,r10,102061f4 <___vfprintf_internal_r+0x1714>
102061dc:	01000c04 	movi	r4,48
102061e0:	10c00044 	addi	r3,r2,1
102061e4:	d8c02115 	stw	r3,132(sp)
102061e8:	11000005 	stb	r4,0(r2)
102061ec:	d8802117 	ldw	r2,132(sp)
102061f0:	12bffb36 	bltu	r2,r10,102061e0 <___vfprintf_internal_r+0x1700>
102061f4:	db003117 	ldw	r12,196(sp)
102061f8:	1305c83a 	sub	r2,r2,r12
102061fc:	d8803315 	stw	r2,204(sp)
10206200:	008011c4 	movi	r2,71
10206204:	a8814d26 	beq	r21,r2,1020673c <___vfprintf_internal_r+0x1c5c>
10206208:	00801944 	movi	r2,101
1020620c:	1402060e 	bge	r2,r16,10206a28 <___vfprintf_internal_r+0x1f48>
10206210:	00801984 	movi	r2,102
10206214:	8081b426 	beq	r16,r2,102068e8 <___vfprintf_internal_r+0x1e08>
10206218:	db002617 	ldw	r12,152(sp)
1020621c:	db003415 	stw	r12,208(sp)
10206220:	db003417 	ldw	r12,208(sp)
10206224:	dac03317 	ldw	r11,204(sp)
10206228:	62c1a016 	blt	r12,r11,102068ac <___vfprintf_internal_r+0x1dcc>
1020622c:	8c40004c 	andi	r17,r17,1
10206230:	8801bf1e 	bne	r17,zero,10206930 <___vfprintf_internal_r+0x1e50>
10206234:	6005883a 	mov	r2,r12
10206238:	6001b316 	blt	r12,zero,10206908 <___vfprintf_internal_r+0x1e28>
1020623c:	dc803417 	ldw	r18,208(sp)
10206240:	df002b07 	ldb	fp,172(sp)
10206244:	e0012e1e 	bne	fp,zero,10206700 <___vfprintf_internal_r+0x1c20>
10206248:	dc402d17 	ldw	r17,180(sp)
1020624c:	dd402783 	ldbu	r21,158(sp)
10206250:	d8802b15 	stw	r2,172(sp)
10206254:	dcc02d15 	stw	r19,180(sp)
10206258:	d8003215 	stw	zero,200(sp)
1020625c:	003b7306 	br	1020502c <___vfprintf_internal_r+0x54c>
10206260:	00800084 	movi	r2,2
10206264:	003c4d06 	br	1020539c <___vfprintf_internal_r+0x8bc>
10206268:	8880040c 	andi	r2,r17,16
1020626c:	1000091e 	bne	r2,zero,10206294 <___vfprintf_internal_r+0x17b4>
10206270:	8c40100c 	andi	r17,r17,64
10206274:	88000726 	beq	r17,zero,10206294 <___vfprintf_internal_r+0x17b4>
10206278:	db002d17 	ldw	r12,180(sp)
1020627c:	dac02f17 	ldw	r11,188(sp)
10206280:	60800017 	ldw	r2,0(r12)
10206284:	63000104 	addi	r12,r12,4
10206288:	db002d15 	stw	r12,180(sp)
1020628c:	12c0000d 	sth	r11,0(r2)
10206290:	003a4e06 	br	10204bcc <___vfprintf_internal_r+0xec>
10206294:	db002d17 	ldw	r12,180(sp)
10206298:	dac02f17 	ldw	r11,188(sp)
1020629c:	60800017 	ldw	r2,0(r12)
102062a0:	63000104 	addi	r12,r12,4
102062a4:	db002d15 	stw	r12,180(sp)
102062a8:	12c00015 	stw	r11,0(r2)
102062ac:	003a4706 	br	10204bcc <___vfprintf_internal_r+0xec>
102062b0:	1c000007 	ldb	r16,0(r3)
102062b4:	1805883a 	mov	r2,r3
102062b8:	003a6e06 	br	10204c74 <___vfprintf_internal_r+0x194>
102062bc:	88c0100c 	andi	r3,r17,64
102062c0:	18006b26 	beq	r3,zero,10206470 <___vfprintf_internal_r+0x1990>
102062c4:	dac02d17 	ldw	r11,180(sp)
102062c8:	14c0000b 	ldhu	r19,0(r2)
102062cc:	0039883a 	mov	fp,zero
102062d0:	5ac00104 	addi	r11,r11,4
102062d4:	dac02d15 	stw	r11,180(sp)
102062d8:	003cb206 	br	102055a4 <___vfprintf_internal_r+0xac4>
102062dc:	010408b4 	movhi	r4,4130
102062e0:	21342084 	addi	r4,r4,-12158
102062e4:	d9002c15 	stw	r4,176(sp)
102062e8:	dac02c17 	ldw	r11,176(sp)
102062ec:	1c87883a 	add	r3,r3,r18
102062f0:	10800044 	addi	r2,r2,1
102062f4:	42c00015 	stw	r11,0(r8)
102062f8:	44800115 	stw	r18,4(r8)
102062fc:	d8c02015 	stw	r3,128(sp)
10206300:	d8801f15 	stw	r2,124(sp)
10206304:	010001c4 	movi	r4,7
10206308:	20bee016 	blt	r4,r2,10205e8c <___vfprintf_internal_r+0x13ac>
1020630c:	42000204 	addi	r8,r8,8
10206310:	003ee506 	br	10205ea8 <___vfprintf_internal_r+0x13c8>
10206314:	010408b4 	movhi	r4,4130
10206318:	21342084 	addi	r4,r4,-12158
1020631c:	d9002c15 	stw	r4,176(sp)
10206320:	003bbe06 	br	1020521c <___vfprintf_internal_r+0x73c>
10206324:	b009883a 	mov	r4,r22
10206328:	b80b883a 	mov	r5,r23
1020632c:	d9801e04 	addi	r6,sp,120
10206330:	02113340 	call	10211334 <__sprint_r>
10206334:	103ade1e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
10206338:	d8c02017 	ldw	r3,128(sp)
1020633c:	da000404 	addi	r8,sp,16
10206340:	003d6b06 	br	102058f0 <___vfprintf_internal_r+0xe10>
10206344:	d8801f17 	ldw	r2,124(sp)
10206348:	030408b4 	movhi	r12,4130
1020634c:	01000044 	movi	r4,1
10206350:	18c00044 	addi	r3,r3,1
10206354:	10800044 	addi	r2,r2,1
10206358:	63342004 	addi	r12,r12,-12160
1020635c:	41000115 	stw	r4,4(r8)
10206360:	43000015 	stw	r12,0(r8)
10206364:	d8c02015 	stw	r3,128(sp)
10206368:	d8801f15 	stw	r2,124(sp)
1020636c:	010001c4 	movi	r4,7
10206370:	20804916 	blt	r4,r2,10206498 <___vfprintf_internal_r+0x19b8>
10206374:	42000204 	addi	r8,r8,8
10206378:	8000041e 	bne	r16,zero,1020638c <___vfprintf_internal_r+0x18ac>
1020637c:	dac03317 	ldw	r11,204(sp)
10206380:	5800021e 	bne	r11,zero,1020638c <___vfprintf_internal_r+0x18ac>
10206384:	8880004c 	andi	r2,r17,1
10206388:	103bbb26 	beq	r2,zero,10205278 <___vfprintf_internal_r+0x798>
1020638c:	db003817 	ldw	r12,224(sp)
10206390:	d8801f17 	ldw	r2,124(sp)
10206394:	dac03517 	ldw	r11,212(sp)
10206398:	1b07883a 	add	r3,r3,r12
1020639c:	10800044 	addi	r2,r2,1
102063a0:	42c00015 	stw	r11,0(r8)
102063a4:	43000115 	stw	r12,4(r8)
102063a8:	d8c02015 	stw	r3,128(sp)
102063ac:	d8801f15 	stw	r2,124(sp)
102063b0:	010001c4 	movi	r4,7
102063b4:	20812e16 	blt	r4,r2,10206870 <___vfprintf_internal_r+0x1d90>
102063b8:	42000204 	addi	r8,r8,8
102063bc:	0421c83a 	sub	r16,zero,r16
102063c0:	04005c0e 	bge	zero,r16,10206534 <___vfprintf_internal_r+0x1a54>
102063c4:	04800404 	movi	r18,16
102063c8:	94009f0e 	bge	r18,r16,10206648 <___vfprintf_internal_r+0x1b68>
102063cc:	010408b4 	movhi	r4,4130
102063d0:	21342084 	addi	r4,r4,-12158
102063d4:	d9002c15 	stw	r4,176(sp)
102063d8:	054001c4 	movi	r21,7
102063dc:	00000306 	br	102063ec <___vfprintf_internal_r+0x190c>
102063e0:	42000204 	addi	r8,r8,8
102063e4:	843ffc04 	addi	r16,r16,-16
102063e8:	94009a0e 	bge	r18,r16,10206654 <___vfprintf_internal_r+0x1b74>
102063ec:	18c00404 	addi	r3,r3,16
102063f0:	10800044 	addi	r2,r2,1
102063f4:	45000015 	stw	r20,0(r8)
102063f8:	44800115 	stw	r18,4(r8)
102063fc:	d8c02015 	stw	r3,128(sp)
10206400:	d8801f15 	stw	r2,124(sp)
10206404:	a8bff60e 	bge	r21,r2,102063e0 <___vfprintf_internal_r+0x1900>
10206408:	b009883a 	mov	r4,r22
1020640c:	b80b883a 	mov	r5,r23
10206410:	d9801e04 	addi	r6,sp,120
10206414:	02113340 	call	10211334 <__sprint_r>
10206418:	103aa51e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
1020641c:	d8c02017 	ldw	r3,128(sp)
10206420:	d8801f17 	ldw	r2,124(sp)
10206424:	da000404 	addi	r8,sp,16
10206428:	003fee06 	br	102063e4 <___vfprintf_internal_r+0x1904>
1020642c:	008011c4 	movi	r2,71
10206430:	1400be16 	blt	r2,r16,1020672c <___vfprintf_internal_r+0x1c4c>
10206434:	030408b4 	movhi	r12,4130
10206438:	63341204 	addi	r12,r12,-12216
1020643c:	db003115 	stw	r12,196(sp)
10206440:	00c000c4 	movi	r3,3
10206444:	00bfdfc4 	movi	r2,-129
10206448:	d8c02b15 	stw	r3,172(sp)
1020644c:	88a2703a 	and	r17,r17,r2
10206450:	dd402783 	ldbu	r21,158(sp)
10206454:	dcc02d15 	stw	r19,180(sp)
10206458:	1825883a 	mov	r18,r3
1020645c:	d8003215 	stw	zero,200(sp)
10206460:	d8003415 	stw	zero,208(sp)
10206464:	003af106 	br	1020502c <___vfprintf_internal_r+0x54c>
10206468:	4825883a 	mov	r18,r9
1020646c:	003c9306 	br	102056bc <___vfprintf_internal_r+0xbdc>
10206470:	db002d17 	ldw	r12,180(sp)
10206474:	14c00017 	ldw	r19,0(r2)
10206478:	0039883a 	mov	fp,zero
1020647c:	63000104 	addi	r12,r12,4
10206480:	db002d15 	stw	r12,180(sp)
10206484:	003c4706 	br	102055a4 <___vfprintf_internal_r+0xac4>
10206488:	008408b4 	movhi	r2,4130
1020648c:	10b41004 	addi	r2,r2,-12224
10206490:	d8803115 	stw	r2,196(sp)
10206494:	003bf106 	br	1020545c <___vfprintf_internal_r+0x97c>
10206498:	b009883a 	mov	r4,r22
1020649c:	b80b883a 	mov	r5,r23
102064a0:	d9801e04 	addi	r6,sp,120
102064a4:	02113340 	call	10211334 <__sprint_r>
102064a8:	103a811e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
102064ac:	dc002617 	ldw	r16,152(sp)
102064b0:	d8c02017 	ldw	r3,128(sp)
102064b4:	da000404 	addi	r8,sp,16
102064b8:	003faf06 	br	10206378 <___vfprintf_internal_r+0x1898>
102064bc:	db002e17 	ldw	r12,184(sp)
102064c0:	1805883a 	mov	r2,r3
102064c4:	dac02d15 	stw	r11,180(sp)
102064c8:	0319c83a 	sub	r12,zero,r12
102064cc:	db002e15 	stw	r12,184(sp)
102064d0:	003a8206 	br	10204edc <___vfprintf_internal_r+0x3fc>
102064d4:	18800044 	addi	r2,r3,1
102064d8:	8c400814 	ori	r17,r17,32
102064dc:	1c000047 	ldb	r16,1(r3)
102064e0:	0039e406 	br	10204c74 <___vfprintf_internal_r+0x194>
102064e4:	b009883a 	mov	r4,r22
102064e8:	b80b883a 	mov	r5,r23
102064ec:	d9801e04 	addi	r6,sp,120
102064f0:	02113340 	call	10211334 <__sprint_r>
102064f4:	103a6e1e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
102064f8:	d8c02017 	ldw	r3,128(sp)
102064fc:	da000404 	addi	r8,sp,16
10206500:	003d0c06 	br	10205934 <___vfprintf_internal_r+0xe54>
10206504:	db002817 	ldw	r12,160(sp)
10206508:	d8c03117 	ldw	r3,196(sp)
1020650c:	60e5c83a 	sub	r18,r12,r3
10206510:	003ac106 	br	10205018 <___vfprintf_internal_r+0x538>
10206514:	b009883a 	mov	r4,r22
10206518:	b80b883a 	mov	r5,r23
1020651c:	d9801e04 	addi	r6,sp,120
10206520:	02113340 	call	10211334 <__sprint_r>
10206524:	103a621e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
10206528:	d8c02017 	ldw	r3,128(sp)
1020652c:	d8801f17 	ldw	r2,124(sp)
10206530:	da000404 	addi	r8,sp,16
10206534:	db003317 	ldw	r12,204(sp)
10206538:	dac03117 	ldw	r11,196(sp)
1020653c:	10800044 	addi	r2,r2,1
10206540:	1b07883a 	add	r3,r3,r12
10206544:	42c00015 	stw	r11,0(r8)
10206548:	43000115 	stw	r12,4(r8)
1020654c:	d8c02015 	stw	r3,128(sp)
10206550:	d8801f15 	stw	r2,124(sp)
10206554:	010001c4 	movi	r4,7
10206558:	20bb460e 	bge	r4,r2,10205274 <___vfprintf_internal_r+0x794>
1020655c:	003d8506 	br	10205b74 <___vfprintf_internal_r+0x1094>
10206560:	da003f15 	stw	r8,252(sp)
10206564:	02033500 	call	10203350 <strlen>
10206568:	1025883a 	mov	r18,r2
1020656c:	da003f17 	ldw	r8,252(sp)
10206570:	903c540e 	bge	r18,zero,102056c4 <___vfprintf_internal_r+0xbe4>
10206574:	0005883a 	mov	r2,zero
10206578:	003c5206 	br	102056c4 <___vfprintf_internal_r+0xbe4>
1020657c:	010408b4 	movhi	r4,4130
10206580:	21342484 	addi	r4,r4,-12142
10206584:	d9003615 	stw	r4,216(sp)
10206588:	003adc06 	br	102050fc <___vfprintf_internal_r+0x61c>
1020658c:	d8802604 	addi	r2,sp,152
10206590:	d8800115 	stw	r2,4(sp)
10206594:	d9403717 	ldw	r5,220(sp)
10206598:	d8802504 	addi	r2,sp,148
1020659c:	d8800215 	stw	r2,8(sp)
102065a0:	d8802104 	addi	r2,sp,132
102065a4:	da400015 	stw	r9,0(sp)
102065a8:	d8800315 	stw	r2,12(sp)
102065ac:	b009883a 	mov	r4,r22
102065b0:	900d883a 	mov	r6,r18
102065b4:	01c000c4 	movi	r7,3
102065b8:	da003f15 	stw	r8,252(sp)
102065bc:	da403e15 	stw	r9,248(sp)
102065c0:	0206f140 	call	10206f14 <_dtoa_r>
102065c4:	da403e17 	ldw	r9,248(sp)
102065c8:	da003f17 	ldw	r8,252(sp)
102065cc:	d8803115 	stw	r2,196(sp)
102065d0:	4839883a 	mov	fp,r9
102065d4:	dac03117 	ldw	r11,196(sp)
102065d8:	00801184 	movi	r2,70
102065dc:	5f15883a 	add	r10,r11,fp
102065e0:	a8bef01e 	bne	r21,r2,102061a4 <___vfprintf_internal_r+0x16c4>
102065e4:	59000007 	ldb	r4,0(r11)
102065e8:	00800c04 	movi	r2,48
102065ec:	2080d526 	beq	r4,r2,10206944 <___vfprintf_internal_r+0x1e64>
102065f0:	d8c02617 	ldw	r3,152(sp)
102065f4:	50d5883a 	add	r10,r10,r3
102065f8:	003eea06 	br	102061a4 <___vfprintf_internal_r+0x16c4>
102065fc:	0025883a 	mov	r18,zero
10206600:	003db306 	br	10205cd0 <___vfprintf_internal_r+0x11f0>
10206604:	b009883a 	mov	r4,r22
10206608:	b80b883a 	mov	r5,r23
1020660c:	d9801e04 	addi	r6,sp,120
10206610:	02113340 	call	10211334 <__sprint_r>
10206614:	103a261e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
10206618:	d8c02017 	ldw	r3,128(sp)
1020661c:	da000404 	addi	r8,sp,16
10206620:	003daa06 	br	10205ccc <___vfprintf_internal_r+0x11ec>
10206624:	b009883a 	mov	r4,r22
10206628:	b80b883a 	mov	r5,r23
1020662c:	d9801e04 	addi	r6,sp,120
10206630:	02113340 	call	10211334 <__sprint_r>
10206634:	103a1e1e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
10206638:	d8802617 	ldw	r2,152(sp)
1020663c:	d8c02017 	ldw	r3,128(sp)
10206640:	da000404 	addi	r8,sp,16
10206644:	003e2c06 	br	10205ef8 <___vfprintf_internal_r+0x1418>
10206648:	030408b4 	movhi	r12,4130
1020664c:	63342084 	addi	r12,r12,-12158
10206650:	db002c15 	stw	r12,176(sp)
10206654:	dac02c17 	ldw	r11,176(sp)
10206658:	1c07883a 	add	r3,r3,r16
1020665c:	10800044 	addi	r2,r2,1
10206660:	42c00015 	stw	r11,0(r8)
10206664:	44000115 	stw	r16,4(r8)
10206668:	d8c02015 	stw	r3,128(sp)
1020666c:	d8801f15 	stw	r2,124(sp)
10206670:	010001c4 	movi	r4,7
10206674:	20bfa716 	blt	r4,r2,10206514 <___vfprintf_internal_r+0x1a34>
10206678:	42000204 	addi	r8,r8,8
1020667c:	003fad06 	br	10206534 <___vfprintf_internal_r+0x1a54>
10206680:	00800184 	movi	r2,6
10206684:	1240012e 	bgeu	r2,r9,1020668c <___vfprintf_internal_r+0x1bac>
10206688:	1013883a 	mov	r9,r2
1020668c:	4825883a 	mov	r18,r9
10206690:	4805883a 	mov	r2,r9
10206694:	4800c216 	blt	r9,zero,102069a0 <___vfprintf_internal_r+0x1ec0>
10206698:	d8802b15 	stw	r2,172(sp)
1020669c:	008408b4 	movhi	r2,4130
102066a0:	10b41e04 	addi	r2,r2,-12168
102066a4:	d8803115 	stw	r2,196(sp)
102066a8:	dcc02d15 	stw	r19,180(sp)
102066ac:	d8003215 	stw	zero,200(sp)
102066b0:	d8003415 	stw	zero,208(sp)
102066b4:	0005883a 	mov	r2,zero
102066b8:	003a6306 	br	10205048 <___vfprintf_internal_r+0x568>
102066bc:	0021883a 	mov	r16,zero
102066c0:	003e1f06 	br	10205f40 <___vfprintf_internal_r+0x1460>
102066c4:	b009883a 	mov	r4,r22
102066c8:	b80b883a 	mov	r5,r23
102066cc:	d9801e04 	addi	r6,sp,120
102066d0:	02113340 	call	10211334 <__sprint_r>
102066d4:	1039f61e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
102066d8:	d8802617 	ldw	r2,152(sp)
102066dc:	db003317 	ldw	r12,204(sp)
102066e0:	d8c02017 	ldw	r3,128(sp)
102066e4:	da000404 	addi	r8,sp,16
102066e8:	6085c83a 	sub	r2,r12,r2
102066ec:	003e1306 	br	10205f3c <___vfprintf_internal_r+0x145c>
102066f0:	030408b4 	movhi	r12,4130
102066f4:	63342484 	addi	r12,r12,-12142
102066f8:	db003615 	stw	r12,216(sp)
102066fc:	003b0206 	br	10205308 <___vfprintf_internal_r+0x828>
10206700:	00c00b44 	movi	r3,45
10206704:	d8802b15 	stw	r2,172(sp)
10206708:	dc402d17 	ldw	r17,180(sp)
1020670c:	d8c02785 	stb	r3,158(sp)
10206710:	dcc02d15 	stw	r19,180(sp)
10206714:	d8003215 	stw	zero,200(sp)
10206718:	00800b44 	movi	r2,45
1020671c:	003a4706 	br	1020503c <___vfprintf_internal_r+0x55c>
10206720:	05400b44 	movi	r21,45
10206724:	dd402785 	stb	r21,158(sp)
10206728:	003b4706 	br	10205448 <___vfprintf_internal_r+0x968>
1020672c:	008408b4 	movhi	r2,4130
10206730:	10b41304 	addi	r2,r2,-12212
10206734:	d8803115 	stw	r2,196(sp)
10206738:	003f4106 	br	10206440 <___vfprintf_internal_r+0x1960>
1020673c:	d8c02617 	ldw	r3,152(sp)
10206740:	00bfff44 	movi	r2,-3
10206744:	18801116 	blt	r3,r2,1020678c <___vfprintf_internal_r+0x1cac>
10206748:	48c01016 	blt	r9,r3,1020678c <___vfprintf_internal_r+0x1cac>
1020674c:	d8c03415 	stw	r3,208(sp)
10206750:	040019c4 	movi	r16,103
10206754:	003eb206 	br	10206220 <___vfprintf_internal_r+0x1740>
10206758:	010408b4 	movhi	r4,4130
1020675c:	21342084 	addi	r4,r4,-12158
10206760:	d9002c15 	stw	r4,176(sp)
10206764:	003cb106 	br	10205a2c <___vfprintf_internal_r+0xf4c>
10206768:	5005883a 	mov	r2,r10
1020676c:	003ea106 	br	102061f4 <___vfprintf_internal_r+0x1714>
10206770:	da402b15 	stw	r9,172(sp)
10206774:	dd402783 	ldbu	r21,158(sp)
10206778:	4825883a 	mov	r18,r9
1020677c:	dcc02d15 	stw	r19,180(sp)
10206780:	d8003215 	stw	zero,200(sp)
10206784:	d8003415 	stw	zero,208(sp)
10206788:	003a2806 	br	1020502c <___vfprintf_internal_r+0x54c>
1020678c:	843fff84 	addi	r16,r16,-2
10206790:	1f3fffc4 	addi	fp,r3,-1
10206794:	df002615 	stw	fp,152(sp)
10206798:	dc0022c5 	stb	r16,139(sp)
1020679c:	e0009816 	blt	fp,zero,10206a00 <___vfprintf_internal_r+0x1f20>
102067a0:	00800ac4 	movi	r2,43
102067a4:	d8802305 	stb	r2,140(sp)
102067a8:	00800244 	movi	r2,9
102067ac:	1700750e 	bge	r2,fp,10206984 <___vfprintf_internal_r+0x1ea4>
102067b0:	dd4022c4 	addi	r21,sp,139
102067b4:	dc002c15 	stw	r16,176(sp)
102067b8:	4025883a 	mov	r18,r8
102067bc:	a821883a 	mov	r16,r21
102067c0:	e009883a 	mov	r4,fp
102067c4:	01400284 	movi	r5,10
102067c8:	02024180 	call	10202418 <__modsi3>
102067cc:	10800c04 	addi	r2,r2,48
102067d0:	843fffc4 	addi	r16,r16,-1
102067d4:	e009883a 	mov	r4,fp
102067d8:	01400284 	movi	r5,10
102067dc:	80800005 	stb	r2,0(r16)
102067e0:	02023c40 	call	102023c4 <__divsi3>
102067e4:	1039883a 	mov	fp,r2
102067e8:	00800244 	movi	r2,9
102067ec:	173ff416 	blt	r2,fp,102067c0 <___vfprintf_internal_r+0x1ce0>
102067f0:	9011883a 	mov	r8,r18
102067f4:	e0800c04 	addi	r2,fp,48
102067f8:	8025883a 	mov	r18,r16
102067fc:	913fffc4 	addi	r4,r18,-1
10206800:	90bfffc5 	stb	r2,-1(r18)
10206804:	dc002c17 	ldw	r16,176(sp)
10206808:	2540852e 	bgeu	r4,r21,10206a20 <___vfprintf_internal_r+0x1f40>
1020680c:	d9402384 	addi	r5,sp,142
10206810:	2c8bc83a 	sub	r5,r5,r18
10206814:	d8c02344 	addi	r3,sp,141
10206818:	a94b883a 	add	r5,r21,r5
1020681c:	00000106 	br	10206824 <___vfprintf_internal_r+0x1d44>
10206820:	20800003 	ldbu	r2,0(r4)
10206824:	18800005 	stb	r2,0(r3)
10206828:	18c00044 	addi	r3,r3,1
1020682c:	21000044 	addi	r4,r4,1
10206830:	197ffb1e 	bne	r3,r5,10206820 <___vfprintf_internal_r+0x1d40>
10206834:	d8802304 	addi	r2,sp,140
10206838:	1485c83a 	sub	r2,r2,r18
1020683c:	d8c02344 	addi	r3,sp,141
10206840:	1885883a 	add	r2,r3,r2
10206844:	dac03317 	ldw	r11,204(sp)
10206848:	156bc83a 	sub	r21,r2,r21
1020684c:	dd403a15 	stw	r21,232(sp)
10206850:	00800044 	movi	r2,1
10206854:	5d65883a 	add	r18,r11,r21
10206858:	12c0660e 	bge	r2,r11,102069f4 <___vfprintf_internal_r+0x1f14>
1020685c:	94800044 	addi	r18,r18,1
10206860:	9005883a 	mov	r2,r18
10206864:	90006116 	blt	r18,zero,102069ec <___vfprintf_internal_r+0x1f0c>
10206868:	d8003415 	stw	zero,208(sp)
1020686c:	003e7406 	br	10206240 <___vfprintf_internal_r+0x1760>
10206870:	b009883a 	mov	r4,r22
10206874:	b80b883a 	mov	r5,r23
10206878:	d9801e04 	addi	r6,sp,120
1020687c:	02113340 	call	10211334 <__sprint_r>
10206880:	10398b1e 	bne	r2,zero,10204eb0 <___vfprintf_internal_r+0x3d0>
10206884:	dc002617 	ldw	r16,152(sp)
10206888:	d8c02017 	ldw	r3,128(sp)
1020688c:	d8801f17 	ldw	r2,124(sp)
10206890:	da000404 	addi	r8,sp,16
10206894:	003ec906 	br	102063bc <___vfprintf_internal_r+0x18dc>
10206898:	483e1c1e 	bne	r9,zero,1020610c <___vfprintf_internal_r+0x162c>
1020689c:	9013883a 	mov	r9,r18
102068a0:	003e1a06 	br	1020610c <___vfprintf_internal_r+0x162c>
102068a4:	02400184 	movi	r9,6
102068a8:	003e1806 	br	1020610c <___vfprintf_internal_r+0x162c>
102068ac:	d8c03417 	ldw	r3,208(sp)
102068b0:	00c04b0e 	bge	zero,r3,102069e0 <___vfprintf_internal_r+0x1f00>
102068b4:	04800044 	movi	r18,1
102068b8:	dac03317 	ldw	r11,204(sp)
102068bc:	92e5883a 	add	r18,r18,r11
102068c0:	9005883a 	mov	r2,r18
102068c4:	903e5e0e 	bge	r18,zero,10206240 <___vfprintf_internal_r+0x1760>
102068c8:	0005883a 	mov	r2,zero
102068cc:	003e5c06 	br	10206240 <___vfprintf_internal_r+0x1760>
102068d0:	00c00b44 	movi	r3,45
102068d4:	64a0003c 	xorhi	r18,r12,32768
102068d8:	d8c02b05 	stb	r3,172(sp)
102068dc:	003e1106 	br	10206124 <___vfprintf_internal_r+0x1644>
102068e0:	4f000044 	addi	fp,r9,1
102068e4:	003e1606 	br	10206140 <___vfprintf_internal_r+0x1660>
102068e8:	d8c02617 	ldw	r3,152(sp)
102068ec:	d8c03415 	stw	r3,208(sp)
102068f0:	00c0350e 	bge	zero,r3,102069c8 <___vfprintf_internal_r+0x1ee8>
102068f4:	4800081e 	bne	r9,zero,10206918 <___vfprintf_internal_r+0x1e38>
102068f8:	8c40004c 	andi	r17,r17,1
102068fc:	8800061e 	bne	r17,zero,10206918 <___vfprintf_internal_r+0x1e38>
10206900:	1805883a 	mov	r2,r3
10206904:	183e4d0e 	bge	r3,zero,1020623c <___vfprintf_internal_r+0x175c>
10206908:	0005883a 	mov	r2,zero
1020690c:	003e4b06 	br	1020623c <___vfprintf_internal_r+0x175c>
10206910:	d8802117 	ldw	r2,132(sp)
10206914:	003e3706 	br	102061f4 <___vfprintf_internal_r+0x1714>
10206918:	dac03417 	ldw	r11,208(sp)
1020691c:	4a400044 	addi	r9,r9,1
10206920:	5a65883a 	add	r18,r11,r9
10206924:	9005883a 	mov	r2,r18
10206928:	903e450e 	bge	r18,zero,10206240 <___vfprintf_internal_r+0x1760>
1020692c:	003fe606 	br	102068c8 <___vfprintf_internal_r+0x1de8>
10206930:	db003417 	ldw	r12,208(sp)
10206934:	64800044 	addi	r18,r12,1
10206938:	9005883a 	mov	r2,r18
1020693c:	903e400e 	bge	r18,zero,10206240 <___vfprintf_internal_r+0x1760>
10206940:	003fe106 	br	102068c8 <___vfprintf_internal_r+0x1de8>
10206944:	d9003717 	ldw	r4,220(sp)
10206948:	900b883a 	mov	r5,r18
1020694c:	000d883a 	mov	r6,zero
10206950:	000f883a 	mov	r7,zero
10206954:	da003f15 	stw	r8,252(sp)
10206958:	da403e15 	stw	r9,248(sp)
1020695c:	da803d15 	stw	r10,244(sp)
10206960:	0216c600 	call	10216c60 <__eqdf2>
10206964:	da003f17 	ldw	r8,252(sp)
10206968:	da403e17 	ldw	r9,248(sp)
1020696c:	da803d17 	ldw	r10,244(sp)
10206970:	103f1f26 	beq	r2,zero,102065f0 <___vfprintf_internal_r+0x1b10>
10206974:	00800044 	movi	r2,1
10206978:	1707c83a 	sub	r3,r2,fp
1020697c:	d8c02615 	stw	r3,152(sp)
10206980:	003f1c06 	br	102065f4 <___vfprintf_internal_r+0x1b14>
10206984:	00800c04 	movi	r2,48
10206988:	e0c00c04 	addi	r3,fp,48
1020698c:	d8802345 	stb	r2,141(sp)
10206990:	d8c02385 	stb	r3,142(sp)
10206994:	d88023c4 	addi	r2,sp,143
10206998:	dd4022c4 	addi	r21,sp,139
1020699c:	003fa906 	br	10206844 <___vfprintf_internal_r+0x1d64>
102069a0:	0005883a 	mov	r2,zero
102069a4:	003f3c06 	br	10206698 <___vfprintf_internal_r+0x1bb8>
102069a8:	dac02d17 	ldw	r11,180(sp)
102069ac:	5a400017 	ldw	r9,0(r11)
102069b0:	5ac00104 	addi	r11,r11,4
102069b4:	dac02d15 	stw	r11,180(sp)
102069b8:	483ec80e 	bge	r9,zero,102064dc <___vfprintf_internal_r+0x19fc>
102069bc:	027fffc4 	movi	r9,-1
102069c0:	1c000047 	ldb	r16,1(r3)
102069c4:	0038ab06 	br	10204c74 <___vfprintf_internal_r+0x194>
102069c8:	4800111e 	bne	r9,zero,10206a10 <___vfprintf_internal_r+0x1f30>
102069cc:	8c40004c 	andi	r17,r17,1
102069d0:	88000f1e 	bne	r17,zero,10206a10 <___vfprintf_internal_r+0x1f30>
102069d4:	00800044 	movi	r2,1
102069d8:	1025883a 	mov	r18,r2
102069dc:	003e1806 	br	10206240 <___vfprintf_internal_r+0x1760>
102069e0:	04800084 	movi	r18,2
102069e4:	90e5c83a 	sub	r18,r18,r3
102069e8:	003fb306 	br	102068b8 <___vfprintf_internal_r+0x1dd8>
102069ec:	0005883a 	mov	r2,zero
102069f0:	003f9d06 	br	10206868 <___vfprintf_internal_r+0x1d88>
102069f4:	88a2703a 	and	r17,r17,r2
102069f8:	883f9926 	beq	r17,zero,10206860 <___vfprintf_internal_r+0x1d80>
102069fc:	003f9706 	br	1020685c <___vfprintf_internal_r+0x1d7c>
10206a00:	00800b44 	movi	r2,45
10206a04:	0739c83a 	sub	fp,zero,fp
10206a08:	d8802305 	stb	r2,140(sp)
10206a0c:	003f6606 	br	102067a8 <___vfprintf_internal_r+0x1cc8>
10206a10:	4c800084 	addi	r18,r9,2
10206a14:	9005883a 	mov	r2,r18
10206a18:	903e090e 	bge	r18,zero,10206240 <___vfprintf_internal_r+0x1760>
10206a1c:	003faa06 	br	102068c8 <___vfprintf_internal_r+0x1de8>
10206a20:	d8802344 	addi	r2,sp,141
10206a24:	003f8706 	br	10206844 <___vfprintf_internal_r+0x1d64>
10206a28:	d8c02617 	ldw	r3,152(sp)
10206a2c:	003f5806 	br	10206790 <___vfprintf_internal_r+0x1cb0>

10206a30 <__vfprintf_internal>:
10206a30:	2007883a 	mov	r3,r4
10206a34:	010408b4 	movhi	r4,4130
10206a38:	213d0604 	addi	r4,r4,-3048
10206a3c:	21000017 	ldw	r4,0(r4)
10206a40:	2805883a 	mov	r2,r5
10206a44:	300f883a 	mov	r7,r6
10206a48:	180b883a 	mov	r5,r3
10206a4c:	100d883a 	mov	r6,r2
10206a50:	0204ae01 	jmpi	10204ae0 <___vfprintf_internal_r>

10206a54 <__sbprintf>:
10206a54:	2880030b 	ldhu	r2,12(r5)
10206a58:	2ac01917 	ldw	r11,100(r5)
10206a5c:	2a80038b 	ldhu	r10,14(r5)
10206a60:	2a400717 	ldw	r9,28(r5)
10206a64:	2a000917 	ldw	r8,36(r5)
10206a68:	defee204 	addi	sp,sp,-1144
10206a6c:	00c10004 	movi	r3,1024
10206a70:	dc011a15 	stw	r16,1128(sp)
10206a74:	10bfff4c 	andi	r2,r2,65533
10206a78:	2821883a 	mov	r16,r5
10206a7c:	d8cb883a 	add	r5,sp,r3
10206a80:	dc811c15 	stw	r18,1136(sp)
10206a84:	dc411b15 	stw	r17,1132(sp)
10206a88:	dfc11d15 	stw	ra,1140(sp)
10206a8c:	2025883a 	mov	r18,r4
10206a90:	d881030d 	sth	r2,1036(sp)
10206a94:	dac11915 	stw	r11,1124(sp)
10206a98:	da81038d 	sth	r10,1038(sp)
10206a9c:	da410715 	stw	r9,1052(sp)
10206aa0:	da010915 	stw	r8,1060(sp)
10206aa4:	dec10015 	stw	sp,1024(sp)
10206aa8:	dec10415 	stw	sp,1040(sp)
10206aac:	d8c10215 	stw	r3,1032(sp)
10206ab0:	d8c10515 	stw	r3,1044(sp)
10206ab4:	d8010615 	stw	zero,1048(sp)
10206ab8:	0204ae00 	call	10204ae0 <___vfprintf_internal_r>
10206abc:	1023883a 	mov	r17,r2
10206ac0:	10000416 	blt	r2,zero,10206ad4 <__sbprintf+0x80>
10206ac4:	9009883a 	mov	r4,r18
10206ac8:	d9410004 	addi	r5,sp,1024
10206acc:	02088440 	call	10208844 <_fflush_r>
10206ad0:	10000d1e 	bne	r2,zero,10206b08 <__sbprintf+0xb4>
10206ad4:	d8c1030b 	ldhu	r3,1036(sp)
10206ad8:	18c0100c 	andi	r3,r3,64
10206adc:	18000326 	beq	r3,zero,10206aec <__sbprintf+0x98>
10206ae0:	8080030b 	ldhu	r2,12(r16)
10206ae4:	10801014 	ori	r2,r2,64
10206ae8:	8080030d 	sth	r2,12(r16)
10206aec:	8805883a 	mov	r2,r17
10206af0:	dfc11d17 	ldw	ra,1140(sp)
10206af4:	dc811c17 	ldw	r18,1136(sp)
10206af8:	dc411b17 	ldw	r17,1132(sp)
10206afc:	dc011a17 	ldw	r16,1128(sp)
10206b00:	dec11e04 	addi	sp,sp,1144
10206b04:	f800283a 	ret
10206b08:	047fffc4 	movi	r17,-1
10206b0c:	003ff106 	br	10206ad4 <__sbprintf+0x80>

10206b10 <_write_r>:
10206b10:	defffd04 	addi	sp,sp,-12
10206b14:	dc000015 	stw	r16,0(sp)
10206b18:	040408b4 	movhi	r16,4130
10206b1c:	dc400115 	stw	r17,4(sp)
10206b20:	84045804 	addi	r16,r16,4448
10206b24:	2023883a 	mov	r17,r4
10206b28:	2809883a 	mov	r4,r5
10206b2c:	300b883a 	mov	r5,r6
10206b30:	380d883a 	mov	r6,r7
10206b34:	dfc00215 	stw	ra,8(sp)
10206b38:	80000015 	stw	zero,0(r16)
10206b3c:	0218c680 	call	10218c68 <write>
10206b40:	00ffffc4 	movi	r3,-1
10206b44:	10c00526 	beq	r2,r3,10206b5c <_write_r+0x4c>
10206b48:	dfc00217 	ldw	ra,8(sp)
10206b4c:	dc400117 	ldw	r17,4(sp)
10206b50:	dc000017 	ldw	r16,0(sp)
10206b54:	dec00304 	addi	sp,sp,12
10206b58:	f800283a 	ret
10206b5c:	80c00017 	ldw	r3,0(r16)
10206b60:	183ff926 	beq	r3,zero,10206b48 <_write_r+0x38>
10206b64:	88c00015 	stw	r3,0(r17)
10206b68:	003ff706 	br	10206b48 <_write_r+0x38>

10206b6c <__swsetup_r>:
10206b6c:	008408b4 	movhi	r2,4130
10206b70:	defffd04 	addi	sp,sp,-12
10206b74:	10bd0604 	addi	r2,r2,-3048
10206b78:	dc400115 	stw	r17,4(sp)
10206b7c:	2023883a 	mov	r17,r4
10206b80:	11000017 	ldw	r4,0(r2)
10206b84:	dc000015 	stw	r16,0(sp)
10206b88:	dfc00215 	stw	ra,8(sp)
10206b8c:	2821883a 	mov	r16,r5
10206b90:	20000226 	beq	r4,zero,10206b9c <__swsetup_r+0x30>
10206b94:	20c00e17 	ldw	r3,56(r4)
10206b98:	18003126 	beq	r3,zero,10206c60 <__swsetup_r+0xf4>
10206b9c:	8080030b 	ldhu	r2,12(r16)
10206ba0:	10c0020c 	andi	r3,r2,8
10206ba4:	100d883a 	mov	r6,r2
10206ba8:	18000f26 	beq	r3,zero,10206be8 <__swsetup_r+0x7c>
10206bac:	80c00417 	ldw	r3,16(r16)
10206bb0:	18001526 	beq	r3,zero,10206c08 <__swsetup_r+0x9c>
10206bb4:	1100004c 	andi	r4,r2,1
10206bb8:	20001c1e 	bne	r4,zero,10206c2c <__swsetup_r+0xc0>
10206bbc:	1080008c 	andi	r2,r2,2
10206bc0:	1000291e 	bne	r2,zero,10206c68 <__swsetup_r+0xfc>
10206bc4:	80800517 	ldw	r2,20(r16)
10206bc8:	80800215 	stw	r2,8(r16)
10206bcc:	18001c26 	beq	r3,zero,10206c40 <__swsetup_r+0xd4>
10206bd0:	0005883a 	mov	r2,zero
10206bd4:	dfc00217 	ldw	ra,8(sp)
10206bd8:	dc400117 	ldw	r17,4(sp)
10206bdc:	dc000017 	ldw	r16,0(sp)
10206be0:	dec00304 	addi	sp,sp,12
10206be4:	f800283a 	ret
10206be8:	3080040c 	andi	r2,r6,16
10206bec:	10002e26 	beq	r2,zero,10206ca8 <__swsetup_r+0x13c>
10206bf0:	3080010c 	andi	r2,r6,4
10206bf4:	10001e1e 	bne	r2,zero,10206c70 <__swsetup_r+0x104>
10206bf8:	80c00417 	ldw	r3,16(r16)
10206bfc:	30800214 	ori	r2,r6,8
10206c00:	8080030d 	sth	r2,12(r16)
10206c04:	183feb1e 	bne	r3,zero,10206bb4 <__swsetup_r+0x48>
10206c08:	1140a00c 	andi	r5,r2,640
10206c0c:	01008004 	movi	r4,512
10206c10:	293fe826 	beq	r5,r4,10206bb4 <__swsetup_r+0x48>
10206c14:	8809883a 	mov	r4,r17
10206c18:	800b883a 	mov	r5,r16
10206c1c:	02098380 	call	10209838 <__smakebuf_r>
10206c20:	8080030b 	ldhu	r2,12(r16)
10206c24:	80c00417 	ldw	r3,16(r16)
10206c28:	003fe206 	br	10206bb4 <__swsetup_r+0x48>
10206c2c:	80800517 	ldw	r2,20(r16)
10206c30:	80000215 	stw	zero,8(r16)
10206c34:	0085c83a 	sub	r2,zero,r2
10206c38:	80800615 	stw	r2,24(r16)
10206c3c:	183fe41e 	bne	r3,zero,10206bd0 <__swsetup_r+0x64>
10206c40:	80c0030b 	ldhu	r3,12(r16)
10206c44:	0005883a 	mov	r2,zero
10206c48:	1900200c 	andi	r4,r3,128
10206c4c:	203fe126 	beq	r4,zero,10206bd4 <__swsetup_r+0x68>
10206c50:	18c01014 	ori	r3,r3,64
10206c54:	80c0030d 	sth	r3,12(r16)
10206c58:	00bfffc4 	movi	r2,-1
10206c5c:	003fdd06 	br	10206bd4 <__swsetup_r+0x68>
10206c60:	0208c200 	call	10208c20 <__sinit>
10206c64:	003fcd06 	br	10206b9c <__swsetup_r+0x30>
10206c68:	0005883a 	mov	r2,zero
10206c6c:	003fd606 	br	10206bc8 <__swsetup_r+0x5c>
10206c70:	81400c17 	ldw	r5,48(r16)
10206c74:	28000626 	beq	r5,zero,10206c90 <__swsetup_r+0x124>
10206c78:	80801004 	addi	r2,r16,64
10206c7c:	28800326 	beq	r5,r2,10206c8c <__swsetup_r+0x120>
10206c80:	8809883a 	mov	r4,r17
10206c84:	0208d940 	call	10208d94 <_free_r>
10206c88:	8180030b 	ldhu	r6,12(r16)
10206c8c:	80000c15 	stw	zero,48(r16)
10206c90:	80c00417 	ldw	r3,16(r16)
10206c94:	00bff6c4 	movi	r2,-37
10206c98:	118c703a 	and	r6,r2,r6
10206c9c:	80000115 	stw	zero,4(r16)
10206ca0:	80c00015 	stw	r3,0(r16)
10206ca4:	003fd506 	br	10206bfc <__swsetup_r+0x90>
10206ca8:	00800244 	movi	r2,9
10206cac:	88800015 	stw	r2,0(r17)
10206cb0:	30801014 	ori	r2,r6,64
10206cb4:	8080030d 	sth	r2,12(r16)
10206cb8:	00bfffc4 	movi	r2,-1
10206cbc:	003fc506 	br	10206bd4 <__swsetup_r+0x68>

10206cc0 <_close_r>:
10206cc0:	defffd04 	addi	sp,sp,-12
10206cc4:	dc000015 	stw	r16,0(sp)
10206cc8:	040408b4 	movhi	r16,4130
10206ccc:	dc400115 	stw	r17,4(sp)
10206cd0:	84045804 	addi	r16,r16,4448
10206cd4:	2023883a 	mov	r17,r4
10206cd8:	2809883a 	mov	r4,r5
10206cdc:	dfc00215 	stw	ra,8(sp)
10206ce0:	80000015 	stw	zero,0(r16)
10206ce4:	02182e00 	call	102182e0 <close>
10206ce8:	00ffffc4 	movi	r3,-1
10206cec:	10c00526 	beq	r2,r3,10206d04 <_close_r+0x44>
10206cf0:	dfc00217 	ldw	ra,8(sp)
10206cf4:	dc400117 	ldw	r17,4(sp)
10206cf8:	dc000017 	ldw	r16,0(sp)
10206cfc:	dec00304 	addi	sp,sp,12
10206d00:	f800283a 	ret
10206d04:	80c00017 	ldw	r3,0(r16)
10206d08:	183ff926 	beq	r3,zero,10206cf0 <_close_r+0x30>
10206d0c:	88c00015 	stw	r3,0(r17)
10206d10:	003ff706 	br	10206cf0 <_close_r+0x30>

10206d14 <quorem>:
10206d14:	defff704 	addi	sp,sp,-36
10206d18:	dc800215 	stw	r18,8(sp)
10206d1c:	20800417 	ldw	r2,16(r4)
10206d20:	2c800417 	ldw	r18,16(r5)
10206d24:	dfc00815 	stw	ra,32(sp)
10206d28:	ddc00715 	stw	r23,28(sp)
10206d2c:	dd800615 	stw	r22,24(sp)
10206d30:	dd400515 	stw	r21,20(sp)
10206d34:	dd000415 	stw	r20,16(sp)
10206d38:	dcc00315 	stw	r19,12(sp)
10206d3c:	dc400115 	stw	r17,4(sp)
10206d40:	dc000015 	stw	r16,0(sp)
10206d44:	14807116 	blt	r2,r18,10206f0c <quorem+0x1f8>
10206d48:	94bfffc4 	addi	r18,r18,-1
10206d4c:	94ad883a 	add	r22,r18,r18
10206d50:	b5ad883a 	add	r22,r22,r22
10206d54:	2c400504 	addi	r17,r5,20
10206d58:	8da9883a 	add	r20,r17,r22
10206d5c:	25400504 	addi	r21,r4,20
10206d60:	282f883a 	mov	r23,r5
10206d64:	adad883a 	add	r22,r21,r22
10206d68:	a1400017 	ldw	r5,0(r20)
10206d6c:	2021883a 	mov	r16,r4
10206d70:	b1000017 	ldw	r4,0(r22)
10206d74:	29400044 	addi	r5,r5,1
10206d78:	02024740 	call	10202474 <__udivsi3>
10206d7c:	1027883a 	mov	r19,r2
10206d80:	10002c26 	beq	r2,zero,10206e34 <quorem+0x120>
10206d84:	a813883a 	mov	r9,r21
10206d88:	8811883a 	mov	r8,r17
10206d8c:	0009883a 	mov	r4,zero
10206d90:	000d883a 	mov	r6,zero
10206d94:	41c00017 	ldw	r7,0(r8)
10206d98:	49400017 	ldw	r5,0(r9)
10206d9c:	42000104 	addi	r8,r8,4
10206da0:	38bfffcc 	andi	r2,r7,65535
10206da4:	14c5383a 	mul	r2,r2,r19
10206da8:	380ed43a 	srli	r7,r7,16
10206dac:	28ffffcc 	andi	r3,r5,65535
10206db0:	2085883a 	add	r2,r4,r2
10206db4:	1008d43a 	srli	r4,r2,16
10206db8:	3ccf383a 	mul	r7,r7,r19
10206dbc:	198d883a 	add	r6,r3,r6
10206dc0:	10ffffcc 	andi	r3,r2,65535
10206dc4:	30c7c83a 	sub	r3,r6,r3
10206dc8:	280ad43a 	srli	r5,r5,16
10206dcc:	21c9883a 	add	r4,r4,r7
10206dd0:	180dd43a 	srai	r6,r3,16
10206dd4:	20bfffcc 	andi	r2,r4,65535
10206dd8:	288bc83a 	sub	r5,r5,r2
10206ddc:	298b883a 	add	r5,r5,r6
10206de0:	280e943a 	slli	r7,r5,16
10206de4:	18ffffcc 	andi	r3,r3,65535
10206de8:	2008d43a 	srli	r4,r4,16
10206dec:	38ceb03a 	or	r7,r7,r3
10206df0:	49c00015 	stw	r7,0(r9)
10206df4:	280dd43a 	srai	r6,r5,16
10206df8:	4a400104 	addi	r9,r9,4
10206dfc:	a23fe52e 	bgeu	r20,r8,10206d94 <quorem+0x80>
10206e00:	b0800017 	ldw	r2,0(r22)
10206e04:	10000b1e 	bne	r2,zero,10206e34 <quorem+0x120>
10206e08:	b0bfff04 	addi	r2,r22,-4
10206e0c:	a880082e 	bgeu	r21,r2,10206e30 <quorem+0x11c>
10206e10:	b0ffff17 	ldw	r3,-4(r22)
10206e14:	18000326 	beq	r3,zero,10206e24 <quorem+0x110>
10206e18:	00000506 	br	10206e30 <quorem+0x11c>
10206e1c:	10c00017 	ldw	r3,0(r2)
10206e20:	1800031e 	bne	r3,zero,10206e30 <quorem+0x11c>
10206e24:	10bfff04 	addi	r2,r2,-4
10206e28:	94bfffc4 	addi	r18,r18,-1
10206e2c:	a8bffb36 	bltu	r21,r2,10206e1c <quorem+0x108>
10206e30:	84800415 	stw	r18,16(r16)
10206e34:	8009883a 	mov	r4,r16
10206e38:	b80b883a 	mov	r5,r23
10206e3c:	020a8500 	call	1020a850 <__mcmp>
10206e40:	10002616 	blt	r2,zero,10206edc <quorem+0x1c8>
10206e44:	9cc00044 	addi	r19,r19,1
10206e48:	a80d883a 	mov	r6,r21
10206e4c:	000b883a 	mov	r5,zero
10206e50:	31000017 	ldw	r4,0(r6)
10206e54:	88800017 	ldw	r2,0(r17)
10206e58:	31800104 	addi	r6,r6,4
10206e5c:	20ffffcc 	andi	r3,r4,65535
10206e60:	194b883a 	add	r5,r3,r5
10206e64:	10ffffcc 	andi	r3,r2,65535
10206e68:	28c7c83a 	sub	r3,r5,r3
10206e6c:	1004d43a 	srli	r2,r2,16
10206e70:	2008d43a 	srli	r4,r4,16
10206e74:	180bd43a 	srai	r5,r3,16
10206e78:	18ffffcc 	andi	r3,r3,65535
10206e7c:	2089c83a 	sub	r4,r4,r2
10206e80:	2149883a 	add	r4,r4,r5
10206e84:	2004943a 	slli	r2,r4,16
10206e88:	8c400104 	addi	r17,r17,4
10206e8c:	200bd43a 	srai	r5,r4,16
10206e90:	10c6b03a 	or	r3,r2,r3
10206e94:	30ffff15 	stw	r3,-4(r6)
10206e98:	a47fed2e 	bgeu	r20,r17,10206e50 <quorem+0x13c>
10206e9c:	9485883a 	add	r2,r18,r18
10206ea0:	1085883a 	add	r2,r2,r2
10206ea4:	a887883a 	add	r3,r21,r2
10206ea8:	18800017 	ldw	r2,0(r3)
10206eac:	10000b1e 	bne	r2,zero,10206edc <quorem+0x1c8>
10206eb0:	18bfff04 	addi	r2,r3,-4
10206eb4:	a880082e 	bgeu	r21,r2,10206ed8 <quorem+0x1c4>
10206eb8:	18ffff17 	ldw	r3,-4(r3)
10206ebc:	18000326 	beq	r3,zero,10206ecc <quorem+0x1b8>
10206ec0:	00000506 	br	10206ed8 <quorem+0x1c4>
10206ec4:	10c00017 	ldw	r3,0(r2)
10206ec8:	1800031e 	bne	r3,zero,10206ed8 <quorem+0x1c4>
10206ecc:	10bfff04 	addi	r2,r2,-4
10206ed0:	94bfffc4 	addi	r18,r18,-1
10206ed4:	a8bffb36 	bltu	r21,r2,10206ec4 <quorem+0x1b0>
10206ed8:	84800415 	stw	r18,16(r16)
10206edc:	9805883a 	mov	r2,r19
10206ee0:	dfc00817 	ldw	ra,32(sp)
10206ee4:	ddc00717 	ldw	r23,28(sp)
10206ee8:	dd800617 	ldw	r22,24(sp)
10206eec:	dd400517 	ldw	r21,20(sp)
10206ef0:	dd000417 	ldw	r20,16(sp)
10206ef4:	dcc00317 	ldw	r19,12(sp)
10206ef8:	dc800217 	ldw	r18,8(sp)
10206efc:	dc400117 	ldw	r17,4(sp)
10206f00:	dc000017 	ldw	r16,0(sp)
10206f04:	dec00904 	addi	sp,sp,36
10206f08:	f800283a 	ret
10206f0c:	0005883a 	mov	r2,zero
10206f10:	003ff306 	br	10206ee0 <quorem+0x1cc>

10206f14 <_dtoa_r>:
10206f14:	20801017 	ldw	r2,64(r4)
10206f18:	deffde04 	addi	sp,sp,-136
10206f1c:	dd401d15 	stw	r21,116(sp)
10206f20:	dcc01b15 	stw	r19,108(sp)
10206f24:	dc801a15 	stw	r18,104(sp)
10206f28:	dc401915 	stw	r17,100(sp)
10206f2c:	dc001815 	stw	r16,96(sp)
10206f30:	dfc02115 	stw	ra,132(sp)
10206f34:	df002015 	stw	fp,128(sp)
10206f38:	ddc01f15 	stw	r23,124(sp)
10206f3c:	dd801e15 	stw	r22,120(sp)
10206f40:	dd001c15 	stw	r20,112(sp)
10206f44:	d9c00315 	stw	r7,12(sp)
10206f48:	2021883a 	mov	r16,r4
10206f4c:	302b883a 	mov	r21,r6
10206f50:	2825883a 	mov	r18,r5
10206f54:	dc402417 	ldw	r17,144(sp)
10206f58:	3027883a 	mov	r19,r6
10206f5c:	10000826 	beq	r2,zero,10206f80 <_dtoa_r+0x6c>
10206f60:	21801117 	ldw	r6,68(r4)
10206f64:	00c00044 	movi	r3,1
10206f68:	100b883a 	mov	r5,r2
10206f6c:	1986983a 	sll	r3,r3,r6
10206f70:	11800115 	stw	r6,4(r2)
10206f74:	10c00215 	stw	r3,8(r2)
10206f78:	020a0240 	call	1020a024 <_Bfree>
10206f7c:	80001015 	stw	zero,64(r16)
10206f80:	a8002d16 	blt	r21,zero,10207038 <_dtoa_r+0x124>
10206f84:	88000015 	stw	zero,0(r17)
10206f88:	a8dffc2c 	andhi	r3,r21,32752
10206f8c:	009ffc34 	movhi	r2,32752
10206f90:	18801b26 	beq	r3,r2,10207000 <_dtoa_r+0xec>
10206f94:	9009883a 	mov	r4,r18
10206f98:	980b883a 	mov	r5,r19
10206f9c:	000d883a 	mov	r6,zero
10206fa0:	000f883a 	mov	r7,zero
10206fa4:	0216c600 	call	10216c60 <__eqdf2>
10206fa8:	10002a1e 	bne	r2,zero,10207054 <_dtoa_r+0x140>
10206fac:	d8c02317 	ldw	r3,140(sp)
10206fb0:	d9002517 	ldw	r4,148(sp)
10206fb4:	00800044 	movi	r2,1
10206fb8:	18800015 	stw	r2,0(r3)
10206fbc:	2001a226 	beq	r4,zero,10207648 <_dtoa_r+0x734>
10206fc0:	008408b4 	movhi	r2,4130
10206fc4:	10b42044 	addi	r2,r2,-12159
10206fc8:	20800015 	stw	r2,0(r4)
10206fcc:	10bfffc4 	addi	r2,r2,-1
10206fd0:	dfc02117 	ldw	ra,132(sp)
10206fd4:	df002017 	ldw	fp,128(sp)
10206fd8:	ddc01f17 	ldw	r23,124(sp)
10206fdc:	dd801e17 	ldw	r22,120(sp)
10206fe0:	dd401d17 	ldw	r21,116(sp)
10206fe4:	dd001c17 	ldw	r20,112(sp)
10206fe8:	dcc01b17 	ldw	r19,108(sp)
10206fec:	dc801a17 	ldw	r18,104(sp)
10206ff0:	dc401917 	ldw	r17,100(sp)
10206ff4:	dc001817 	ldw	r16,96(sp)
10206ff8:	dec02204 	addi	sp,sp,136
10206ffc:	f800283a 	ret
10207000:	d8c02317 	ldw	r3,140(sp)
10207004:	0089c3c4 	movi	r2,9999
10207008:	18800015 	stw	r2,0(r3)
1020700c:	90017c26 	beq	r18,zero,10207600 <_dtoa_r+0x6ec>
10207010:	008408b4 	movhi	r2,4130
10207014:	10b4cc04 	addi	r2,r2,-11472
10207018:	d9002517 	ldw	r4,148(sp)
1020701c:	203fec26 	beq	r4,zero,10206fd0 <_dtoa_r+0xbc>
10207020:	10c000c7 	ldb	r3,3(r2)
10207024:	18017d1e 	bne	r3,zero,1020761c <_dtoa_r+0x708>
10207028:	10c000c4 	addi	r3,r2,3
1020702c:	d9802517 	ldw	r6,148(sp)
10207030:	30c00015 	stw	r3,0(r6)
10207034:	003fe606 	br	10206fd0 <_dtoa_r+0xbc>
10207038:	04e00034 	movhi	r19,32768
1020703c:	9cffffc4 	addi	r19,r19,-1
10207040:	00800044 	movi	r2,1
10207044:	ace6703a 	and	r19,r21,r19
10207048:	88800015 	stw	r2,0(r17)
1020704c:	982b883a 	mov	r21,r19
10207050:	003fcd06 	br	10206f88 <_dtoa_r+0x74>
10207054:	d8800204 	addi	r2,sp,8
10207058:	a822d53a 	srli	r17,r21,20
1020705c:	d8800015 	stw	r2,0(sp)
10207060:	8009883a 	mov	r4,r16
10207064:	900b883a 	mov	r5,r18
10207068:	980d883a 	mov	r6,r19
1020706c:	d9c00104 	addi	r7,sp,4
10207070:	020abc40 	call	1020abc4 <__d2b>
10207074:	1039883a 	mov	fp,r2
10207078:	88016a1e 	bne	r17,zero,10207624 <_dtoa_r+0x710>
1020707c:	dd000217 	ldw	r20,8(sp)
10207080:	dc400117 	ldw	r17,4(sp)
10207084:	00befbc4 	movi	r2,-1041
10207088:	a463883a 	add	r17,r20,r17
1020708c:	8882ea16 	blt	r17,r2,10207c38 <_dtoa_r+0xd24>
10207090:	00bf0384 	movi	r2,-1010
10207094:	1445c83a 	sub	r2,r2,r17
10207098:	89010484 	addi	r4,r17,1042
1020709c:	a8aa983a 	sll	r21,r21,r2
102070a0:	9108d83a 	srl	r4,r18,r4
102070a4:	a908b03a 	or	r4,r21,r4
102070a8:	0217ff00 	call	10217ff0 <__floatunsidf>
102070ac:	017f8434 	movhi	r5,65040
102070b0:	01800044 	movi	r6,1
102070b4:	1009883a 	mov	r4,r2
102070b8:	194b883a 	add	r5,r3,r5
102070bc:	8c7fffc4 	addi	r17,r17,-1
102070c0:	d9800f15 	stw	r6,60(sp)
102070c4:	000d883a 	mov	r6,zero
102070c8:	01cffe34 	movhi	r7,16376
102070cc:	02175c80 	call	102175c8 <__subdf3>
102070d0:	0198dbf4 	movhi	r6,25455
102070d4:	01cff4f4 	movhi	r7,16339
102070d8:	1009883a 	mov	r4,r2
102070dc:	180b883a 	mov	r5,r3
102070e0:	3190d844 	addi	r6,r6,17249
102070e4:	39e1e9c4 	addi	r7,r7,-30809
102070e8:	0216ea40 	call	10216ea4 <__muldf3>
102070ec:	01a2d874 	movhi	r6,35681
102070f0:	01cff1f4 	movhi	r7,16327
102070f4:	180b883a 	mov	r5,r3
102070f8:	31b22cc4 	addi	r6,r6,-14157
102070fc:	39e28a04 	addi	r7,r7,-30168
10207100:	1009883a 	mov	r4,r2
10207104:	0215af80 	call	10215af8 <__adddf3>
10207108:	8809883a 	mov	r4,r17
1020710c:	102d883a 	mov	r22,r2
10207110:	182b883a 	mov	r21,r3
10207114:	0217f200 	call	10217f20 <__floatsidf>
10207118:	019427f4 	movhi	r6,20639
1020711c:	01cff4f4 	movhi	r7,16339
10207120:	1009883a 	mov	r4,r2
10207124:	180b883a 	mov	r5,r3
10207128:	319e7ec4 	addi	r6,r6,31227
1020712c:	39d104c4 	addi	r7,r7,17427
10207130:	0216ea40 	call	10216ea4 <__muldf3>
10207134:	b009883a 	mov	r4,r22
10207138:	a80b883a 	mov	r5,r21
1020713c:	100d883a 	mov	r6,r2
10207140:	180f883a 	mov	r7,r3
10207144:	0215af80 	call	10215af8 <__adddf3>
10207148:	1009883a 	mov	r4,r2
1020714c:	180b883a 	mov	r5,r3
10207150:	102d883a 	mov	r22,r2
10207154:	182b883a 	mov	r21,r3
10207158:	0217e980 	call	10217e98 <__fixdfsi>
1020715c:	b009883a 	mov	r4,r22
10207160:	a80b883a 	mov	r5,r21
10207164:	000d883a 	mov	r6,zero
10207168:	000f883a 	mov	r7,zero
1020716c:	d8800515 	stw	r2,20(sp)
10207170:	0216dc40 	call	10216dc4 <__ledf2>
10207174:	10023116 	blt	r2,zero,10207a3c <_dtoa_r+0xb28>
10207178:	d8c00517 	ldw	r3,20(sp)
1020717c:	00800584 	movi	r2,22
10207180:	10c21f36 	bltu	r2,r3,10207a00 <_dtoa_r+0xaec>
10207184:	180490fa 	slli	r2,r3,3
10207188:	00c408b4 	movhi	r3,4130
1020718c:	18f4e704 	addi	r3,r3,-11364
10207190:	1885883a 	add	r2,r3,r2
10207194:	11000017 	ldw	r4,0(r2)
10207198:	11400117 	ldw	r5,4(r2)
1020719c:	900d883a 	mov	r6,r18
102071a0:	980f883a 	mov	r7,r19
102071a4:	0216ce40 	call	10216ce4 <__gedf2>
102071a8:	0082a70e 	bge	zero,r2,10207c48 <_dtoa_r+0xd34>
102071ac:	d9000517 	ldw	r4,20(sp)
102071b0:	d8000d15 	stw	zero,52(sp)
102071b4:	213fffc4 	addi	r4,r4,-1
102071b8:	d9000515 	stw	r4,20(sp)
102071bc:	a463c83a 	sub	r17,r20,r17
102071c0:	8dbfffc4 	addi	r22,r17,-1
102071c4:	b0021916 	blt	r22,zero,10207a2c <_dtoa_r+0xb18>
102071c8:	d8000815 	stw	zero,32(sp)
102071cc:	d8800517 	ldw	r2,20(sp)
102071d0:	10020e16 	blt	r2,zero,10207a0c <_dtoa_r+0xaf8>
102071d4:	b0ad883a 	add	r22,r22,r2
102071d8:	d8800a15 	stw	r2,40(sp)
102071dc:	d8000915 	stw	zero,36(sp)
102071e0:	d8c00317 	ldw	r3,12(sp)
102071e4:	00800244 	movi	r2,9
102071e8:	10c11a36 	bltu	r2,r3,10207654 <_dtoa_r+0x740>
102071ec:	00800144 	movi	r2,5
102071f0:	10c4fc0e 	bge	r2,r3,102085e4 <_dtoa_r+0x16d0>
102071f4:	18ffff04 	addi	r3,r3,-4
102071f8:	d8c00315 	stw	r3,12(sp)
102071fc:	0029883a 	mov	r20,zero
10207200:	d9800317 	ldw	r6,12(sp)
10207204:	008000c4 	movi	r2,3
10207208:	3083bd26 	beq	r6,r2,10208100 <_dtoa_r+0x11ec>
1020720c:	1183670e 	bge	r2,r6,10207fac <_dtoa_r+0x1098>
10207210:	d8c00317 	ldw	r3,12(sp)
10207214:	00800104 	movi	r2,4
10207218:	1882e726 	beq	r3,r2,10207db8 <_dtoa_r+0xea4>
1020721c:	00800144 	movi	r2,5
10207220:	1884f21e 	bne	r3,r2,102085ec <_dtoa_r+0x16d8>
10207224:	00800044 	movi	r2,1
10207228:	d8800b15 	stw	r2,44(sp)
1020722c:	d8c02217 	ldw	r3,136(sp)
10207230:	d9000517 	ldw	r4,20(sp)
10207234:	1907883a 	add	r3,r3,r4
10207238:	19800044 	addi	r6,r3,1
1020723c:	d8c00c15 	stw	r3,48(sp)
10207240:	d9800615 	stw	r6,24(sp)
10207244:	0183c30e 	bge	zero,r6,10208154 <_dtoa_r+0x1240>
10207248:	d9800617 	ldw	r6,24(sp)
1020724c:	3023883a 	mov	r17,r6
10207250:	80001115 	stw	zero,68(r16)
10207254:	008005c4 	movi	r2,23
10207258:	1184f62e 	bgeu	r2,r6,10208634 <_dtoa_r+0x1720>
1020725c:	00c00044 	movi	r3,1
10207260:	00800104 	movi	r2,4
10207264:	1085883a 	add	r2,r2,r2
10207268:	11000504 	addi	r4,r2,20
1020726c:	180b883a 	mov	r5,r3
10207270:	18c00044 	addi	r3,r3,1
10207274:	313ffb2e 	bgeu	r6,r4,10207264 <_dtoa_r+0x350>
10207278:	81401115 	stw	r5,68(r16)
1020727c:	8009883a 	mov	r4,r16
10207280:	0209f7c0 	call	10209f7c <_Balloc>
10207284:	d8800715 	stw	r2,28(sp)
10207288:	80801015 	stw	r2,64(r16)
1020728c:	00800384 	movi	r2,14
10207290:	1440fd36 	bltu	r2,r17,10207688 <_dtoa_r+0x774>
10207294:	a000fc26 	beq	r20,zero,10207688 <_dtoa_r+0x774>
10207298:	d8800517 	ldw	r2,20(sp)
1020729c:	0083b90e 	bge	zero,r2,10208184 <_dtoa_r+0x1270>
102072a0:	d8c00517 	ldw	r3,20(sp)
102072a4:	108003cc 	andi	r2,r2,15
102072a8:	100490fa 	slli	r2,r2,3
102072ac:	182fd13a 	srai	r23,r3,4
102072b0:	00c408b4 	movhi	r3,4130
102072b4:	18f4e704 	addi	r3,r3,-11364
102072b8:	1885883a 	add	r2,r3,r2
102072bc:	b8c0040c 	andi	r3,r23,16
102072c0:	12c00017 	ldw	r11,0(r2)
102072c4:	12800117 	ldw	r10,4(r2)
102072c8:	18039726 	beq	r3,zero,10208128 <_dtoa_r+0x1214>
102072cc:	008408b4 	movhi	r2,4130
102072d0:	10b4dd04 	addi	r2,r2,-11404
102072d4:	11800817 	ldw	r6,32(r2)
102072d8:	11c00917 	ldw	r7,36(r2)
102072dc:	9009883a 	mov	r4,r18
102072e0:	980b883a 	mov	r5,r19
102072e4:	da801615 	stw	r10,88(sp)
102072e8:	dac01515 	stw	r11,84(sp)
102072ec:	02163940 	call	10216394 <__divdf3>
102072f0:	da801617 	ldw	r10,88(sp)
102072f4:	dac01517 	ldw	r11,84(sp)
102072f8:	bdc003cc 	andi	r23,r23,15
102072fc:	044000c4 	movi	r17,3
10207300:	d8800e15 	stw	r2,56(sp)
10207304:	182b883a 	mov	r21,r3
10207308:	b8001126 	beq	r23,zero,10207350 <_dtoa_r+0x43c>
1020730c:	050408b4 	movhi	r20,4130
10207310:	a534dd04 	addi	r20,r20,-11404
10207314:	5805883a 	mov	r2,r11
10207318:	5007883a 	mov	r3,r10
1020731c:	b980004c 	andi	r6,r23,1
10207320:	1009883a 	mov	r4,r2
10207324:	b82fd07a 	srai	r23,r23,1
10207328:	180b883a 	mov	r5,r3
1020732c:	30000426 	beq	r6,zero,10207340 <_dtoa_r+0x42c>
10207330:	a1800017 	ldw	r6,0(r20)
10207334:	a1c00117 	ldw	r7,4(r20)
10207338:	8c400044 	addi	r17,r17,1
1020733c:	0216ea40 	call	10216ea4 <__muldf3>
10207340:	a5000204 	addi	r20,r20,8
10207344:	b83ff51e 	bne	r23,zero,1020731c <_dtoa_r+0x408>
10207348:	1017883a 	mov	r11,r2
1020734c:	1815883a 	mov	r10,r3
10207350:	d9000e17 	ldw	r4,56(sp)
10207354:	a80b883a 	mov	r5,r21
10207358:	580d883a 	mov	r6,r11
1020735c:	500f883a 	mov	r7,r10
10207360:	02163940 	call	10216394 <__divdf3>
10207364:	1029883a 	mov	r20,r2
10207368:	182b883a 	mov	r21,r3
1020736c:	d9800d17 	ldw	r6,52(sp)
10207370:	30000626 	beq	r6,zero,1020738c <_dtoa_r+0x478>
10207374:	a009883a 	mov	r4,r20
10207378:	a80b883a 	mov	r5,r21
1020737c:	000d883a 	mov	r6,zero
10207380:	01cffc34 	movhi	r7,16368
10207384:	0216dc40 	call	10216dc4 <__ledf2>
10207388:	10043216 	blt	r2,zero,10208454 <_dtoa_r+0x1540>
1020738c:	8809883a 	mov	r4,r17
10207390:	0217f200 	call	10217f20 <__floatsidf>
10207394:	1009883a 	mov	r4,r2
10207398:	180b883a 	mov	r5,r3
1020739c:	a00d883a 	mov	r6,r20
102073a0:	a80f883a 	mov	r7,r21
102073a4:	0216ea40 	call	10216ea4 <__muldf3>
102073a8:	000d883a 	mov	r6,zero
102073ac:	1009883a 	mov	r4,r2
102073b0:	180b883a 	mov	r5,r3
102073b4:	01d00734 	movhi	r7,16412
102073b8:	0215af80 	call	10215af8 <__adddf3>
102073bc:	1023883a 	mov	r17,r2
102073c0:	d9800617 	ldw	r6,24(sp)
102073c4:	00bf3034 	movhi	r2,64704
102073c8:	1885883a 	add	r2,r3,r2
102073cc:	d8800e15 	stw	r2,56(sp)
102073d0:	30032e26 	beq	r6,zero,1020808c <_dtoa_r+0x1178>
102073d4:	d8c00517 	ldw	r3,20(sp)
102073d8:	da800617 	ldw	r10,24(sp)
102073dc:	d8c01215 	stw	r3,72(sp)
102073e0:	d9000b17 	ldw	r4,44(sp)
102073e4:	2003b026 	beq	r4,zero,102082a8 <_dtoa_r+0x1394>
102073e8:	50bfffc4 	addi	r2,r10,-1
102073ec:	100490fa 	slli	r2,r2,3
102073f0:	00c408b4 	movhi	r3,4130
102073f4:	18f4e704 	addi	r3,r3,-11364
102073f8:	1885883a 	add	r2,r3,r2
102073fc:	11800017 	ldw	r6,0(r2)
10207400:	11c00117 	ldw	r7,4(r2)
10207404:	d8800717 	ldw	r2,28(sp)
10207408:	0009883a 	mov	r4,zero
1020740c:	014ff834 	movhi	r5,16352
10207410:	da801615 	stw	r10,88(sp)
10207414:	15c00044 	addi	r23,r2,1
10207418:	02163940 	call	10216394 <__divdf3>
1020741c:	d9c00e17 	ldw	r7,56(sp)
10207420:	880d883a 	mov	r6,r17
10207424:	1009883a 	mov	r4,r2
10207428:	180b883a 	mov	r5,r3
1020742c:	02175c80 	call	102175c8 <__subdf3>
10207430:	a80b883a 	mov	r5,r21
10207434:	a009883a 	mov	r4,r20
10207438:	d8c01015 	stw	r3,64(sp)
1020743c:	d8800e15 	stw	r2,56(sp)
10207440:	0217e980 	call	10217e98 <__fixdfsi>
10207444:	1009883a 	mov	r4,r2
10207448:	d8801715 	stw	r2,92(sp)
1020744c:	0217f200 	call	10217f20 <__floatsidf>
10207450:	a009883a 	mov	r4,r20
10207454:	a80b883a 	mov	r5,r21
10207458:	100d883a 	mov	r6,r2
1020745c:	180f883a 	mov	r7,r3
10207460:	02175c80 	call	102175c8 <__subdf3>
10207464:	da001717 	ldw	r8,92(sp)
10207468:	1829883a 	mov	r20,r3
1020746c:	d8c00717 	ldw	r3,28(sp)
10207470:	d9000e17 	ldw	r4,56(sp)
10207474:	d9401017 	ldw	r5,64(sp)
10207478:	42000c04 	addi	r8,r8,48
1020747c:	1023883a 	mov	r17,r2
10207480:	1a000005 	stb	r8,0(r3)
10207484:	880d883a 	mov	r6,r17
10207488:	a00f883a 	mov	r7,r20
1020748c:	402b883a 	mov	r21,r8
10207490:	0216ce40 	call	10216ce4 <__gedf2>
10207494:	00844516 	blt	zero,r2,102085ac <_dtoa_r+0x1698>
10207498:	0009883a 	mov	r4,zero
1020749c:	014ffc34 	movhi	r5,16368
102074a0:	880d883a 	mov	r6,r17
102074a4:	a00f883a 	mov	r7,r20
102074a8:	02175c80 	call	102175c8 <__subdf3>
102074ac:	d9000e17 	ldw	r4,56(sp)
102074b0:	d9401017 	ldw	r5,64(sp)
102074b4:	100d883a 	mov	r6,r2
102074b8:	180f883a 	mov	r7,r3
102074bc:	0216ce40 	call	10216ce4 <__gedf2>
102074c0:	da801617 	ldw	r10,88(sp)
102074c4:	00843616 	blt	zero,r2,102085a0 <_dtoa_r+0x168c>
102074c8:	00800044 	movi	r2,1
102074cc:	12806e0e 	bge	r2,r10,10207688 <_dtoa_r+0x774>
102074d0:	d9000717 	ldw	r4,28(sp)
102074d4:	dd801315 	stw	r22,76(sp)
102074d8:	dc001115 	stw	r16,68(sp)
102074dc:	2295883a 	add	r10,r4,r10
102074e0:	dcc01415 	stw	r19,80(sp)
102074e4:	502d883a 	mov	r22,r10
102074e8:	dcc01017 	ldw	r19,64(sp)
102074ec:	b821883a 	mov	r16,r23
102074f0:	dc801015 	stw	r18,64(sp)
102074f4:	dc800e17 	ldw	r18,56(sp)
102074f8:	00000906 	br	10207520 <_dtoa_r+0x60c>
102074fc:	02175c80 	call	102175c8 <__subdf3>
10207500:	1009883a 	mov	r4,r2
10207504:	180b883a 	mov	r5,r3
10207508:	900d883a 	mov	r6,r18
1020750c:	980f883a 	mov	r7,r19
10207510:	0216dc40 	call	10216dc4 <__ledf2>
10207514:	10040e16 	blt	r2,zero,10208550 <_dtoa_r+0x163c>
10207518:	b821883a 	mov	r16,r23
1020751c:	bd841026 	beq	r23,r22,10208560 <_dtoa_r+0x164c>
10207520:	9009883a 	mov	r4,r18
10207524:	980b883a 	mov	r5,r19
10207528:	000d883a 	mov	r6,zero
1020752c:	01d00934 	movhi	r7,16420
10207530:	0216ea40 	call	10216ea4 <__muldf3>
10207534:	000d883a 	mov	r6,zero
10207538:	01d00934 	movhi	r7,16420
1020753c:	8809883a 	mov	r4,r17
10207540:	a00b883a 	mov	r5,r20
10207544:	1025883a 	mov	r18,r2
10207548:	1827883a 	mov	r19,r3
1020754c:	0216ea40 	call	10216ea4 <__muldf3>
10207550:	180b883a 	mov	r5,r3
10207554:	1009883a 	mov	r4,r2
10207558:	1823883a 	mov	r17,r3
1020755c:	1029883a 	mov	r20,r2
10207560:	0217e980 	call	10217e98 <__fixdfsi>
10207564:	1009883a 	mov	r4,r2
10207568:	102b883a 	mov	r21,r2
1020756c:	0217f200 	call	10217f20 <__floatsidf>
10207570:	a009883a 	mov	r4,r20
10207574:	880b883a 	mov	r5,r17
10207578:	100d883a 	mov	r6,r2
1020757c:	180f883a 	mov	r7,r3
10207580:	02175c80 	call	102175c8 <__subdf3>
10207584:	ad400c04 	addi	r21,r21,48
10207588:	1009883a 	mov	r4,r2
1020758c:	180b883a 	mov	r5,r3
10207590:	900d883a 	mov	r6,r18
10207594:	980f883a 	mov	r7,r19
10207598:	85400005 	stb	r21,0(r16)
1020759c:	1023883a 	mov	r17,r2
102075a0:	1829883a 	mov	r20,r3
102075a4:	0216dc40 	call	10216dc4 <__ledf2>
102075a8:	bdc00044 	addi	r23,r23,1
102075ac:	0009883a 	mov	r4,zero
102075b0:	014ffc34 	movhi	r5,16368
102075b4:	880d883a 	mov	r6,r17
102075b8:	a00f883a 	mov	r7,r20
102075bc:	103fcf0e 	bge	r2,zero,102074fc <_dtoa_r+0x5e8>
102075c0:	d9801217 	ldw	r6,72(sp)
102075c4:	dc001117 	ldw	r16,68(sp)
102075c8:	d9800515 	stw	r6,20(sp)
102075cc:	8009883a 	mov	r4,r16
102075d0:	e00b883a 	mov	r5,fp
102075d4:	020a0240 	call	1020a024 <_Bfree>
102075d8:	d8c00517 	ldw	r3,20(sp)
102075dc:	d9002317 	ldw	r4,140(sp)
102075e0:	d9802517 	ldw	r6,148(sp)
102075e4:	b8000005 	stb	zero,0(r23)
102075e8:	18800044 	addi	r2,r3,1
102075ec:	20800015 	stw	r2,0(r4)
102075f0:	30027226 	beq	r6,zero,10207fbc <_dtoa_r+0x10a8>
102075f4:	35c00015 	stw	r23,0(r6)
102075f8:	d8800717 	ldw	r2,28(sp)
102075fc:	003e7406 	br	10206fd0 <_dtoa_r+0xbc>
10207600:	00800434 	movhi	r2,16
10207604:	10bfffc4 	addi	r2,r2,-1
10207608:	a8aa703a 	and	r21,r21,r2
1020760c:	a83e801e 	bne	r21,zero,10207010 <_dtoa_r+0xfc>
10207610:	008408b4 	movhi	r2,4130
10207614:	10b4c904 	addi	r2,r2,-11484
10207618:	003e7f06 	br	10207018 <_dtoa_r+0x104>
1020761c:	10c00204 	addi	r3,r2,8
10207620:	003e8206 	br	1020702c <_dtoa_r+0x118>
10207624:	01400434 	movhi	r5,16
10207628:	297fffc4 	addi	r5,r5,-1
1020762c:	994a703a 	and	r5,r19,r5
10207630:	9009883a 	mov	r4,r18
10207634:	8c7f0044 	addi	r17,r17,-1023
10207638:	294ffc34 	orhi	r5,r5,16368
1020763c:	dd000217 	ldw	r20,8(sp)
10207640:	d8000f15 	stw	zero,60(sp)
10207644:	003e9f06 	br	102070c4 <_dtoa_r+0x1b0>
10207648:	008408b4 	movhi	r2,4130
1020764c:	10b42004 	addi	r2,r2,-12160
10207650:	003e5f06 	br	10206fd0 <_dtoa_r+0xbc>
10207654:	80001115 	stw	zero,68(r16)
10207658:	8009883a 	mov	r4,r16
1020765c:	000b883a 	mov	r5,zero
10207660:	0209f7c0 	call	10209f7c <_Balloc>
10207664:	01bfffc4 	movi	r6,-1
10207668:	d8800715 	stw	r2,28(sp)
1020766c:	80801015 	stw	r2,64(r16)
10207670:	00800044 	movi	r2,1
10207674:	d9800c15 	stw	r6,48(sp)
10207678:	d8800b15 	stw	r2,44(sp)
1020767c:	d9800615 	stw	r6,24(sp)
10207680:	d8002215 	stw	zero,136(sp)
10207684:	d8000315 	stw	zero,12(sp)
10207688:	d8800117 	ldw	r2,4(sp)
1020768c:	10008e16 	blt	r2,zero,102078c8 <_dtoa_r+0x9b4>
10207690:	d9000517 	ldw	r4,20(sp)
10207694:	00c00384 	movi	r3,14
10207698:	19008b16 	blt	r3,r4,102078c8 <_dtoa_r+0x9b4>
1020769c:	200490fa 	slli	r2,r4,3
102076a0:	00c408b4 	movhi	r3,4130
102076a4:	d9802217 	ldw	r6,136(sp)
102076a8:	18f4e704 	addi	r3,r3,-11364
102076ac:	1885883a 	add	r2,r3,r2
102076b0:	14400017 	ldw	r17,0(r2)
102076b4:	15000117 	ldw	r20,4(r2)
102076b8:	3001c716 	blt	r6,zero,10207dd8 <_dtoa_r+0xec4>
102076bc:	880d883a 	mov	r6,r17
102076c0:	a00f883a 	mov	r7,r20
102076c4:	9009883a 	mov	r4,r18
102076c8:	980b883a 	mov	r5,r19
102076cc:	02163940 	call	10216394 <__divdf3>
102076d0:	180b883a 	mov	r5,r3
102076d4:	1009883a 	mov	r4,r2
102076d8:	0217e980 	call	10217e98 <__fixdfsi>
102076dc:	1009883a 	mov	r4,r2
102076e0:	102d883a 	mov	r22,r2
102076e4:	0217f200 	call	10217f20 <__floatsidf>
102076e8:	1009883a 	mov	r4,r2
102076ec:	180b883a 	mov	r5,r3
102076f0:	880d883a 	mov	r6,r17
102076f4:	a00f883a 	mov	r7,r20
102076f8:	0216ea40 	call	10216ea4 <__muldf3>
102076fc:	9009883a 	mov	r4,r18
10207700:	980b883a 	mov	r5,r19
10207704:	100d883a 	mov	r6,r2
10207708:	180f883a 	mov	r7,r3
1020770c:	02175c80 	call	102175c8 <__subdf3>
10207710:	d9000717 	ldw	r4,28(sp)
10207714:	d9800617 	ldw	r6,24(sp)
10207718:	180b883a 	mov	r5,r3
1020771c:	b0c00c04 	addi	r3,r22,48
10207720:	20c00005 	stb	r3,0(r4)
10207724:	25c00044 	addi	r23,r4,1
10207728:	01000044 	movi	r4,1
1020772c:	1011883a 	mov	r8,r2
10207730:	2807883a 	mov	r3,r5
10207734:	31003d26 	beq	r6,r4,1020782c <_dtoa_r+0x918>
10207738:	000d883a 	mov	r6,zero
1020773c:	01d00934 	movhi	r7,16420
10207740:	1009883a 	mov	r4,r2
10207744:	0216ea40 	call	10216ea4 <__muldf3>
10207748:	1009883a 	mov	r4,r2
1020774c:	180b883a 	mov	r5,r3
10207750:	000d883a 	mov	r6,zero
10207754:	000f883a 	mov	r7,zero
10207758:	1027883a 	mov	r19,r2
1020775c:	182b883a 	mov	r21,r3
10207760:	0216c600 	call	10216c60 <__eqdf2>
10207764:	103f9926 	beq	r2,zero,102075cc <_dtoa_r+0x6b8>
10207768:	d8c00617 	ldw	r3,24(sp)
1020776c:	d9000717 	ldw	r4,28(sp)
10207770:	b825883a 	mov	r18,r23
10207774:	18bfffc4 	addi	r2,r3,-1
10207778:	20ad883a 	add	r22,r4,r2
1020777c:	dc000315 	stw	r16,12(sp)
10207780:	00000a06 	br	102077ac <_dtoa_r+0x898>
10207784:	0216ea40 	call	10216ea4 <__muldf3>
10207788:	1009883a 	mov	r4,r2
1020778c:	180b883a 	mov	r5,r3
10207790:	000d883a 	mov	r6,zero
10207794:	000f883a 	mov	r7,zero
10207798:	1027883a 	mov	r19,r2
1020779c:	182b883a 	mov	r21,r3
102077a0:	b825883a 	mov	r18,r23
102077a4:	0216c600 	call	10216c60 <__eqdf2>
102077a8:	10022626 	beq	r2,zero,10208044 <_dtoa_r+0x1130>
102077ac:	880d883a 	mov	r6,r17
102077b0:	a00f883a 	mov	r7,r20
102077b4:	9809883a 	mov	r4,r19
102077b8:	a80b883a 	mov	r5,r21
102077bc:	02163940 	call	10216394 <__divdf3>
102077c0:	180b883a 	mov	r5,r3
102077c4:	1009883a 	mov	r4,r2
102077c8:	0217e980 	call	10217e98 <__fixdfsi>
102077cc:	1009883a 	mov	r4,r2
102077d0:	1021883a 	mov	r16,r2
102077d4:	0217f200 	call	10217f20 <__floatsidf>
102077d8:	1009883a 	mov	r4,r2
102077dc:	180b883a 	mov	r5,r3
102077e0:	880d883a 	mov	r6,r17
102077e4:	a00f883a 	mov	r7,r20
102077e8:	0216ea40 	call	10216ea4 <__muldf3>
102077ec:	9809883a 	mov	r4,r19
102077f0:	a80b883a 	mov	r5,r21
102077f4:	100d883a 	mov	r6,r2
102077f8:	180f883a 	mov	r7,r3
102077fc:	02175c80 	call	102175c8 <__subdf3>
10207800:	82000c04 	addi	r8,r16,48
10207804:	92000005 	stb	r8,0(r18)
10207808:	1009883a 	mov	r4,r2
1020780c:	180b883a 	mov	r5,r3
10207810:	000d883a 	mov	r6,zero
10207814:	01d00934 	movhi	r7,16420
10207818:	1011883a 	mov	r8,r2
1020781c:	bdc00044 	addi	r23,r23,1
10207820:	95bfd81e 	bne	r18,r22,10207784 <_dtoa_r+0x870>
10207824:	802d883a 	mov	r22,r16
10207828:	dc000317 	ldw	r16,12(sp)
1020782c:	4009883a 	mov	r4,r8
10207830:	180b883a 	mov	r5,r3
10207834:	400d883a 	mov	r6,r8
10207838:	180f883a 	mov	r7,r3
1020783c:	0215af80 	call	10215af8 <__adddf3>
10207840:	8809883a 	mov	r4,r17
10207844:	a00b883a 	mov	r5,r20
10207848:	100d883a 	mov	r6,r2
1020784c:	180f883a 	mov	r7,r3
10207850:	1027883a 	mov	r19,r2
10207854:	1825883a 	mov	r18,r3
10207858:	0216dc40 	call	10216dc4 <__ledf2>
1020785c:	10000816 	blt	r2,zero,10207880 <_dtoa_r+0x96c>
10207860:	8809883a 	mov	r4,r17
10207864:	a00b883a 	mov	r5,r20
10207868:	980d883a 	mov	r6,r19
1020786c:	900f883a 	mov	r7,r18
10207870:	0216c600 	call	10216c60 <__eqdf2>
10207874:	103f551e 	bne	r2,zero,102075cc <_dtoa_r+0x6b8>
10207878:	b580004c 	andi	r22,r22,1
1020787c:	b03f5326 	beq	r22,zero,102075cc <_dtoa_r+0x6b8>
10207880:	bd7fffc3 	ldbu	r21,-1(r23)
10207884:	b8bfffc4 	addi	r2,r23,-1
10207888:	1007883a 	mov	r3,r2
1020788c:	01400e44 	movi	r5,57
10207890:	d9800717 	ldw	r6,28(sp)
10207894:	00000506 	br	102078ac <_dtoa_r+0x998>
10207898:	18ffffc4 	addi	r3,r3,-1
1020789c:	30825e26 	beq	r6,r2,10208218 <_dtoa_r+0x1304>
102078a0:	1d400003 	ldbu	r21,0(r3)
102078a4:	102f883a 	mov	r23,r2
102078a8:	10bfffc4 	addi	r2,r2,-1
102078ac:	a9003fcc 	andi	r4,r21,255
102078b0:	2100201c 	xori	r4,r4,128
102078b4:	213fe004 	addi	r4,r4,-128
102078b8:	217ff726 	beq	r4,r5,10207898 <_dtoa_r+0x984>
102078bc:	aa000044 	addi	r8,r21,1
102078c0:	12000005 	stb	r8,0(r2)
102078c4:	003f4106 	br	102075cc <_dtoa_r+0x6b8>
102078c8:	d8c00b17 	ldw	r3,44(sp)
102078cc:	18006726 	beq	r3,zero,10207a6c <_dtoa_r+0xb58>
102078d0:	d9000317 	ldw	r4,12(sp)
102078d4:	00c00044 	movi	r3,1
102078d8:	19016a0e 	bge	r3,r4,10207e84 <_dtoa_r+0xf70>
102078dc:	d8800617 	ldw	r2,24(sp)
102078e0:	d8c00917 	ldw	r3,36(sp)
102078e4:	157fffc4 	addi	r21,r2,-1
102078e8:	1d420716 	blt	r3,r21,10208108 <_dtoa_r+0x11f4>
102078ec:	1d6bc83a 	sub	r21,r3,r21
102078f0:	d8800617 	ldw	r2,24(sp)
102078f4:	1002c716 	blt	r2,zero,10208414 <_dtoa_r+0x1500>
102078f8:	dd000817 	ldw	r20,32(sp)
102078fc:	d8800617 	ldw	r2,24(sp)
10207900:	d9800817 	ldw	r6,32(sp)
10207904:	8009883a 	mov	r4,r16
10207908:	01400044 	movi	r5,1
1020790c:	308d883a 	add	r6,r6,r2
10207910:	d9800815 	stw	r6,32(sp)
10207914:	b0ad883a 	add	r22,r22,r2
10207918:	020a3880 	call	1020a388 <__i2b>
1020791c:	1023883a 	mov	r17,r2
10207920:	a0000826 	beq	r20,zero,10207944 <_dtoa_r+0xa30>
10207924:	0580070e 	bge	zero,r22,10207944 <_dtoa_r+0xa30>
10207928:	b005883a 	mov	r2,r22
1020792c:	a5812016 	blt	r20,r22,10207db0 <_dtoa_r+0xe9c>
10207930:	d8c00817 	ldw	r3,32(sp)
10207934:	a0a9c83a 	sub	r20,r20,r2
10207938:	b0adc83a 	sub	r22,r22,r2
1020793c:	1887c83a 	sub	r3,r3,r2
10207940:	d8c00815 	stw	r3,32(sp)
10207944:	d9000917 	ldw	r4,36(sp)
10207948:	0100140e 	bge	zero,r4,1020799c <_dtoa_r+0xa88>
1020794c:	d9800b17 	ldw	r6,44(sp)
10207950:	3001e526 	beq	r6,zero,102080e8 <_dtoa_r+0x11d4>
10207954:	05400e0e 	bge	zero,r21,10207990 <_dtoa_r+0xa7c>
10207958:	880b883a 	mov	r5,r17
1020795c:	8009883a 	mov	r4,r16
10207960:	a80d883a 	mov	r6,r21
10207964:	020a5c00 	call	1020a5c0 <__pow5mult>
10207968:	e00d883a 	mov	r6,fp
1020796c:	8009883a 	mov	r4,r16
10207970:	100b883a 	mov	r5,r2
10207974:	1023883a 	mov	r17,r2
10207978:	020a3c40 	call	1020a3c4 <__multiply>
1020797c:	102f883a 	mov	r23,r2
10207980:	e00b883a 	mov	r5,fp
10207984:	8009883a 	mov	r4,r16
10207988:	020a0240 	call	1020a024 <_Bfree>
1020798c:	b839883a 	mov	fp,r23
10207990:	d8800917 	ldw	r2,36(sp)
10207994:	154dc83a 	sub	r6,r2,r21
10207998:	3001281e 	bne	r6,zero,10207e3c <_dtoa_r+0xf28>
1020799c:	05c00044 	movi	r23,1
102079a0:	8009883a 	mov	r4,r16
102079a4:	b80b883a 	mov	r5,r23
102079a8:	020a3880 	call	1020a388 <__i2b>
102079ac:	d8c00a17 	ldw	r3,40(sp)
102079b0:	102b883a 	mov	r21,r2
102079b4:	00c0310e 	bge	zero,r3,10207a7c <_dtoa_r+0xb68>
102079b8:	8009883a 	mov	r4,r16
102079bc:	100b883a 	mov	r5,r2
102079c0:	180d883a 	mov	r6,r3
102079c4:	020a5c00 	call	1020a5c0 <__pow5mult>
102079c8:	d9000317 	ldw	r4,12(sp)
102079cc:	102b883a 	mov	r21,r2
102079d0:	b9011f0e 	bge	r23,r4,10207e50 <_dtoa_r+0xf3c>
102079d4:	0027883a 	mov	r19,zero
102079d8:	a8800417 	ldw	r2,16(r21)
102079dc:	10800104 	addi	r2,r2,4
102079e0:	1085883a 	add	r2,r2,r2
102079e4:	1085883a 	add	r2,r2,r2
102079e8:	a885883a 	add	r2,r21,r2
102079ec:	11000017 	ldw	r4,0(r2)
102079f0:	020a2700 	call	1020a270 <__hi0bits>
102079f4:	00c00804 	movi	r3,32
102079f8:	1885c83a 	sub	r2,r3,r2
102079fc:	00002506 	br	10207a94 <_dtoa_r+0xb80>
10207a00:	01800044 	movi	r6,1
10207a04:	d9800d15 	stw	r6,52(sp)
10207a08:	003dec06 	br	102071bc <_dtoa_r+0x2a8>
10207a0c:	d8c00817 	ldw	r3,32(sp)
10207a10:	d9000517 	ldw	r4,20(sp)
10207a14:	d8000a15 	stw	zero,40(sp)
10207a18:	1907c83a 	sub	r3,r3,r4
10207a1c:	010dc83a 	sub	r6,zero,r4
10207a20:	d8c00815 	stw	r3,32(sp)
10207a24:	d9800915 	stw	r6,36(sp)
10207a28:	003ded06 	br	102071e0 <_dtoa_r+0x2cc>
10207a2c:	05adc83a 	sub	r22,zero,r22
10207a30:	dd800815 	stw	r22,32(sp)
10207a34:	002d883a 	mov	r22,zero
10207a38:	003de406 	br	102071cc <_dtoa_r+0x2b8>
10207a3c:	d9000517 	ldw	r4,20(sp)
10207a40:	0217f200 	call	10217f20 <__floatsidf>
10207a44:	1009883a 	mov	r4,r2
10207a48:	180b883a 	mov	r5,r3
10207a4c:	b00d883a 	mov	r6,r22
10207a50:	a80f883a 	mov	r7,r21
10207a54:	0216c600 	call	10216c60 <__eqdf2>
10207a58:	103dc726 	beq	r2,zero,10207178 <_dtoa_r+0x264>
10207a5c:	d8800517 	ldw	r2,20(sp)
10207a60:	10bfffc4 	addi	r2,r2,-1
10207a64:	d8800515 	stw	r2,20(sp)
10207a68:	003dc306 	br	10207178 <_dtoa_r+0x264>
10207a6c:	dd400917 	ldw	r21,36(sp)
10207a70:	dd000817 	ldw	r20,32(sp)
10207a74:	0023883a 	mov	r17,zero
10207a78:	003fa906 	br	10207920 <_dtoa_r+0xa0c>
10207a7c:	d9800317 	ldw	r6,12(sp)
10207a80:	b981670e 	bge	r23,r6,10208020 <_dtoa_r+0x110c>
10207a84:	0027883a 	mov	r19,zero
10207a88:	d8c00a17 	ldw	r3,40(sp)
10207a8c:	183fd21e 	bne	r3,zero,102079d8 <_dtoa_r+0xac4>
10207a90:	00800044 	movi	r2,1
10207a94:	1585883a 	add	r2,r2,r22
10207a98:	108007cc 	andi	r2,r2,31
10207a9c:	10005f26 	beq	r2,zero,10207c1c <_dtoa_r+0xd08>
10207aa0:	00c00804 	movi	r3,32
10207aa4:	1887c83a 	sub	r3,r3,r2
10207aa8:	01000104 	movi	r4,4
10207aac:	20c2dd0e 	bge	r4,r3,10208624 <_dtoa_r+0x1710>
10207ab0:	d9000817 	ldw	r4,32(sp)
10207ab4:	00c00704 	movi	r3,28
10207ab8:	1885c83a 	sub	r2,r3,r2
10207abc:	2089883a 	add	r4,r4,r2
10207ac0:	d9000815 	stw	r4,32(sp)
10207ac4:	a0a9883a 	add	r20,r20,r2
10207ac8:	b0ad883a 	add	r22,r22,r2
10207acc:	d8800817 	ldw	r2,32(sp)
10207ad0:	0080050e 	bge	zero,r2,10207ae8 <_dtoa_r+0xbd4>
10207ad4:	e00b883a 	mov	r5,fp
10207ad8:	8009883a 	mov	r4,r16
10207adc:	100d883a 	mov	r6,r2
10207ae0:	020a7000 	call	1020a700 <__lshift>
10207ae4:	1039883a 	mov	fp,r2
10207ae8:	0580050e 	bge	zero,r22,10207b00 <_dtoa_r+0xbec>
10207aec:	a80b883a 	mov	r5,r21
10207af0:	8009883a 	mov	r4,r16
10207af4:	b00d883a 	mov	r6,r22
10207af8:	020a7000 	call	1020a700 <__lshift>
10207afc:	102b883a 	mov	r21,r2
10207b00:	d8c00d17 	ldw	r3,52(sp)
10207b04:	1801161e 	bne	r3,zero,10207f60 <_dtoa_r+0x104c>
10207b08:	d8c00617 	ldw	r3,24(sp)
10207b0c:	00c12d0e 	bge	zero,r3,10207fc4 <_dtoa_r+0x10b0>
10207b10:	d8c00b17 	ldw	r3,44(sp)
10207b14:	1800571e 	bne	r3,zero,10207c74 <_dtoa_r+0xd60>
10207b18:	dc800717 	ldw	r18,28(sp)
10207b1c:	dcc00617 	ldw	r19,24(sp)
10207b20:	9029883a 	mov	r20,r18
10207b24:	00000206 	br	10207b30 <_dtoa_r+0xc1c>
10207b28:	020a04c0 	call	1020a04c <__multadd>
10207b2c:	1039883a 	mov	fp,r2
10207b30:	e009883a 	mov	r4,fp
10207b34:	a80b883a 	mov	r5,r21
10207b38:	0206d140 	call	10206d14 <quorem>
10207b3c:	10800c04 	addi	r2,r2,48
10207b40:	90800005 	stb	r2,0(r18)
10207b44:	94800044 	addi	r18,r18,1
10207b48:	9507c83a 	sub	r3,r18,r20
10207b4c:	8009883a 	mov	r4,r16
10207b50:	e00b883a 	mov	r5,fp
10207b54:	01800284 	movi	r6,10
10207b58:	000f883a 	mov	r7,zero
10207b5c:	1cfff216 	blt	r3,r19,10207b28 <_dtoa_r+0xc14>
10207b60:	1011883a 	mov	r8,r2
10207b64:	d8800617 	ldw	r2,24(sp)
10207b68:	00822e0e 	bge	zero,r2,10208424 <_dtoa_r+0x1510>
10207b6c:	d9000717 	ldw	r4,28(sp)
10207b70:	0025883a 	mov	r18,zero
10207b74:	20af883a 	add	r23,r4,r2
10207b78:	e00b883a 	mov	r5,fp
10207b7c:	01800044 	movi	r6,1
10207b80:	8009883a 	mov	r4,r16
10207b84:	da001715 	stw	r8,92(sp)
10207b88:	020a7000 	call	1020a700 <__lshift>
10207b8c:	1009883a 	mov	r4,r2
10207b90:	a80b883a 	mov	r5,r21
10207b94:	1039883a 	mov	fp,r2
10207b98:	020a8500 	call	1020a850 <__mcmp>
10207b9c:	da001717 	ldw	r8,92(sp)
10207ba0:	00816e0e 	bge	zero,r2,1020815c <_dtoa_r+0x1248>
10207ba4:	b93fffc3 	ldbu	r4,-1(r23)
10207ba8:	b8bfffc4 	addi	r2,r23,-1
10207bac:	1007883a 	mov	r3,r2
10207bb0:	01800e44 	movi	r6,57
10207bb4:	d9c00717 	ldw	r7,28(sp)
10207bb8:	00000506 	br	10207bd0 <_dtoa_r+0xcbc>
10207bbc:	18ffffc4 	addi	r3,r3,-1
10207bc0:	38811926 	beq	r7,r2,10208028 <_dtoa_r+0x1114>
10207bc4:	19000003 	ldbu	r4,0(r3)
10207bc8:	102f883a 	mov	r23,r2
10207bcc:	10bfffc4 	addi	r2,r2,-1
10207bd0:	21403fcc 	andi	r5,r4,255
10207bd4:	2940201c 	xori	r5,r5,128
10207bd8:	297fe004 	addi	r5,r5,-128
10207bdc:	29bff726 	beq	r5,r6,10207bbc <_dtoa_r+0xca8>
10207be0:	21000044 	addi	r4,r4,1
10207be4:	11000005 	stb	r4,0(r2)
10207be8:	8009883a 	mov	r4,r16
10207bec:	a80b883a 	mov	r5,r21
10207bf0:	020a0240 	call	1020a024 <_Bfree>
10207bf4:	883e7526 	beq	r17,zero,102075cc <_dtoa_r+0x6b8>
10207bf8:	90000426 	beq	r18,zero,10207c0c <_dtoa_r+0xcf8>
10207bfc:	94400326 	beq	r18,r17,10207c0c <_dtoa_r+0xcf8>
10207c00:	8009883a 	mov	r4,r16
10207c04:	900b883a 	mov	r5,r18
10207c08:	020a0240 	call	1020a024 <_Bfree>
10207c0c:	8009883a 	mov	r4,r16
10207c10:	880b883a 	mov	r5,r17
10207c14:	020a0240 	call	1020a024 <_Bfree>
10207c18:	003e6c06 	br	102075cc <_dtoa_r+0x6b8>
10207c1c:	00800704 	movi	r2,28
10207c20:	d9800817 	ldw	r6,32(sp)
10207c24:	a0a9883a 	add	r20,r20,r2
10207c28:	b0ad883a 	add	r22,r22,r2
10207c2c:	308d883a 	add	r6,r6,r2
10207c30:	d9800815 	stw	r6,32(sp)
10207c34:	003fa506 	br	10207acc <_dtoa_r+0xbb8>
10207c38:	013efb84 	movi	r4,-1042
10207c3c:	246bc83a 	sub	r21,r4,r17
10207c40:	9548983a 	sll	r4,r18,r21
10207c44:	003d1806 	br	102070a8 <_dtoa_r+0x194>
10207c48:	d8000d15 	stw	zero,52(sp)
10207c4c:	003d5b06 	br	102071bc <_dtoa_r+0x2a8>
10207c50:	880b883a 	mov	r5,r17
10207c54:	8009883a 	mov	r4,r16
10207c58:	01800284 	movi	r6,10
10207c5c:	000f883a 	mov	r7,zero
10207c60:	020a04c0 	call	1020a04c <__multadd>
10207c64:	1023883a 	mov	r17,r2
10207c68:	d8800c17 	ldw	r2,48(sp)
10207c6c:	0082550e 	bge	zero,r2,102085c4 <_dtoa_r+0x16b0>
10207c70:	d8800615 	stw	r2,24(sp)
10207c74:	0500050e 	bge	zero,r20,10207c8c <_dtoa_r+0xd78>
10207c78:	880b883a 	mov	r5,r17
10207c7c:	8009883a 	mov	r4,r16
10207c80:	a00d883a 	mov	r6,r20
10207c84:	020a7000 	call	1020a700 <__lshift>
10207c88:	1023883a 	mov	r17,r2
10207c8c:	98016a1e 	bne	r19,zero,10208238 <_dtoa_r+0x1324>
10207c90:	8829883a 	mov	r20,r17
10207c94:	d9000617 	ldw	r4,24(sp)
10207c98:	dcc00717 	ldw	r19,28(sp)
10207c9c:	9480004c 	andi	r18,r18,1
10207ca0:	20bfffc4 	addi	r2,r4,-1
10207ca4:	9885883a 	add	r2,r19,r2
10207ca8:	d8800415 	stw	r2,16(sp)
10207cac:	dc800615 	stw	r18,24(sp)
10207cb0:	e009883a 	mov	r4,fp
10207cb4:	a80b883a 	mov	r5,r21
10207cb8:	0206d140 	call	10206d14 <quorem>
10207cbc:	e009883a 	mov	r4,fp
10207cc0:	880b883a 	mov	r5,r17
10207cc4:	102f883a 	mov	r23,r2
10207cc8:	020a8500 	call	1020a850 <__mcmp>
10207ccc:	8009883a 	mov	r4,r16
10207cd0:	a80b883a 	mov	r5,r21
10207cd4:	a00d883a 	mov	r6,r20
10207cd8:	102d883a 	mov	r22,r2
10207cdc:	020a8b00 	call	1020a8b0 <__mdiff>
10207ce0:	1007883a 	mov	r3,r2
10207ce4:	10800317 	ldw	r2,12(r2)
10207ce8:	bc800c04 	addi	r18,r23,48
10207cec:	1000971e 	bne	r2,zero,10207f4c <_dtoa_r+0x1038>
10207cf0:	180b883a 	mov	r5,r3
10207cf4:	e009883a 	mov	r4,fp
10207cf8:	d8c01515 	stw	r3,84(sp)
10207cfc:	020a8500 	call	1020a850 <__mcmp>
10207d00:	d8c01517 	ldw	r3,84(sp)
10207d04:	8009883a 	mov	r4,r16
10207d08:	d8801515 	stw	r2,84(sp)
10207d0c:	180b883a 	mov	r5,r3
10207d10:	020a0240 	call	1020a024 <_Bfree>
10207d14:	d8801517 	ldw	r2,84(sp)
10207d18:	1000041e 	bne	r2,zero,10207d2c <_dtoa_r+0xe18>
10207d1c:	d9800317 	ldw	r6,12(sp)
10207d20:	3000021e 	bne	r6,zero,10207d2c <_dtoa_r+0xe18>
10207d24:	d8c00617 	ldw	r3,24(sp)
10207d28:	18007626 	beq	r3,zero,10207f04 <_dtoa_r+0xff0>
10207d2c:	b0005b16 	blt	r22,zero,10207e9c <_dtoa_r+0xf88>
10207d30:	b000041e 	bne	r22,zero,10207d44 <_dtoa_r+0xe30>
10207d34:	d9000317 	ldw	r4,12(sp)
10207d38:	2000021e 	bne	r4,zero,10207d44 <_dtoa_r+0xe30>
10207d3c:	d8c00617 	ldw	r3,24(sp)
10207d40:	18005626 	beq	r3,zero,10207e9c <_dtoa_r+0xf88>
10207d44:	00814d16 	blt	zero,r2,1020827c <_dtoa_r+0x1368>
10207d48:	d8c00417 	ldw	r3,16(sp)
10207d4c:	9d800044 	addi	r22,r19,1
10207d50:	9c800005 	stb	r18,0(r19)
10207d54:	b02f883a 	mov	r23,r22
10207d58:	98c14c26 	beq	r19,r3,1020828c <_dtoa_r+0x1378>
10207d5c:	e00b883a 	mov	r5,fp
10207d60:	8009883a 	mov	r4,r16
10207d64:	01800284 	movi	r6,10
10207d68:	000f883a 	mov	r7,zero
10207d6c:	020a04c0 	call	1020a04c <__multadd>
10207d70:	1039883a 	mov	fp,r2
10207d74:	8d006d26 	beq	r17,r20,10207f2c <_dtoa_r+0x1018>
10207d78:	880b883a 	mov	r5,r17
10207d7c:	01800284 	movi	r6,10
10207d80:	000f883a 	mov	r7,zero
10207d84:	8009883a 	mov	r4,r16
10207d88:	020a04c0 	call	1020a04c <__multadd>
10207d8c:	a00b883a 	mov	r5,r20
10207d90:	8009883a 	mov	r4,r16
10207d94:	01800284 	movi	r6,10
10207d98:	000f883a 	mov	r7,zero
10207d9c:	1023883a 	mov	r17,r2
10207da0:	020a04c0 	call	1020a04c <__multadd>
10207da4:	1029883a 	mov	r20,r2
10207da8:	b027883a 	mov	r19,r22
10207dac:	003fc006 	br	10207cb0 <_dtoa_r+0xd9c>
10207db0:	a005883a 	mov	r2,r20
10207db4:	003ede06 	br	10207930 <_dtoa_r+0xa1c>
10207db8:	01000044 	movi	r4,1
10207dbc:	d9000b15 	stw	r4,44(sp)
10207dc0:	d9802217 	ldw	r6,136(sp)
10207dc4:	0180dc0e 	bge	zero,r6,10208138 <_dtoa_r+0x1224>
10207dc8:	3023883a 	mov	r17,r6
10207dcc:	d9800c15 	stw	r6,48(sp)
10207dd0:	d9800615 	stw	r6,24(sp)
10207dd4:	003d1e06 	br	10207250 <_dtoa_r+0x33c>
10207dd8:	d8800617 	ldw	r2,24(sp)
10207ddc:	00be3716 	blt	zero,r2,102076bc <_dtoa_r+0x7a8>
10207de0:	1000be1e 	bne	r2,zero,102080dc <_dtoa_r+0x11c8>
10207de4:	8809883a 	mov	r4,r17
10207de8:	a00b883a 	mov	r5,r20
10207dec:	000d883a 	mov	r6,zero
10207df0:	01d00534 	movhi	r7,16404
10207df4:	0216ea40 	call	10216ea4 <__muldf3>
10207df8:	1009883a 	mov	r4,r2
10207dfc:	180b883a 	mov	r5,r3
10207e00:	900d883a 	mov	r6,r18
10207e04:	980f883a 	mov	r7,r19
10207e08:	0216ce40 	call	10216ce4 <__gedf2>
10207e0c:	002b883a 	mov	r21,zero
10207e10:	0023883a 	mov	r17,zero
10207e14:	10007a16 	blt	r2,zero,10208000 <_dtoa_r+0x10ec>
10207e18:	d9002217 	ldw	r4,136(sp)
10207e1c:	ddc00717 	ldw	r23,28(sp)
10207e20:	0108303a 	nor	r4,zero,r4
10207e24:	d9000515 	stw	r4,20(sp)
10207e28:	8009883a 	mov	r4,r16
10207e2c:	a80b883a 	mov	r5,r21
10207e30:	020a0240 	call	1020a024 <_Bfree>
10207e34:	883f751e 	bne	r17,zero,10207c0c <_dtoa_r+0xcf8>
10207e38:	003de406 	br	102075cc <_dtoa_r+0x6b8>
10207e3c:	e00b883a 	mov	r5,fp
10207e40:	8009883a 	mov	r4,r16
10207e44:	020a5c00 	call	1020a5c0 <__pow5mult>
10207e48:	1039883a 	mov	fp,r2
10207e4c:	003ed306 	br	1020799c <_dtoa_r+0xa88>
10207e50:	903ee01e 	bne	r18,zero,102079d4 <_dtoa_r+0xac0>
10207e54:	00800434 	movhi	r2,16
10207e58:	10bfffc4 	addi	r2,r2,-1
10207e5c:	9884703a 	and	r2,r19,r2
10207e60:	103f081e 	bne	r2,zero,10207a84 <_dtoa_r+0xb70>
10207e64:	9cdffc2c 	andhi	r19,r19,32752
10207e68:	983f0626 	beq	r19,zero,10207a84 <_dtoa_r+0xb70>
10207e6c:	d8800817 	ldw	r2,32(sp)
10207e70:	b5800044 	addi	r22,r22,1
10207e74:	04c00044 	movi	r19,1
10207e78:	10800044 	addi	r2,r2,1
10207e7c:	d8800815 	stw	r2,32(sp)
10207e80:	003f0106 	br	10207a88 <_dtoa_r+0xb74>
10207e84:	d9800f17 	ldw	r6,60(sp)
10207e88:	30016826 	beq	r6,zero,1020842c <_dtoa_r+0x1518>
10207e8c:	10810cc4 	addi	r2,r2,1075
10207e90:	dd400917 	ldw	r21,36(sp)
10207e94:	dd000817 	ldw	r20,32(sp)
10207e98:	003e9906 	br	10207900 <_dtoa_r+0x9ec>
10207e9c:	9011883a 	mov	r8,r18
10207ea0:	4007883a 	mov	r3,r8
10207ea4:	e02d883a 	mov	r22,fp
10207ea8:	0080100e 	bge	zero,r2,10207eec <_dtoa_r+0xfd8>
10207eac:	01800044 	movi	r6,1
10207eb0:	8009883a 	mov	r4,r16
10207eb4:	e00b883a 	mov	r5,fp
10207eb8:	da001515 	stw	r8,84(sp)
10207ebc:	da001715 	stw	r8,92(sp)
10207ec0:	020a7000 	call	1020a700 <__lshift>
10207ec4:	1009883a 	mov	r4,r2
10207ec8:	a80b883a 	mov	r5,r21
10207ecc:	102d883a 	mov	r22,r2
10207ed0:	020a8500 	call	1020a850 <__mcmp>
10207ed4:	d8c01517 	ldw	r3,84(sp)
10207ed8:	da001717 	ldw	r8,92(sp)
10207edc:	0081a50e 	bge	zero,r2,10208574 <_dtoa_r+0x1660>
10207ee0:	00800e44 	movi	r2,57
10207ee4:	40817b26 	beq	r8,r2,102084d4 <_dtoa_r+0x15c0>
10207ee8:	40c00044 	addi	r3,r8,1
10207eec:	8825883a 	mov	r18,r17
10207ef0:	9dc00044 	addi	r23,r19,1
10207ef4:	98c00005 	stb	r3,0(r19)
10207ef8:	a023883a 	mov	r17,r20
10207efc:	b039883a 	mov	fp,r22
10207f00:	003f3906 	br	10207be8 <_dtoa_r+0xcd4>
10207f04:	00800e44 	movi	r2,57
10207f08:	9011883a 	mov	r8,r18
10207f0c:	90817226 	beq	r18,r2,102084d8 <_dtoa_r+0x15c4>
10207f10:	0580010e 	bge	zero,r22,10207f18 <_dtoa_r+0x1004>
10207f14:	ba000c44 	addi	r8,r23,49
10207f18:	8825883a 	mov	r18,r17
10207f1c:	9dc00044 	addi	r23,r19,1
10207f20:	9a000005 	stb	r8,0(r19)
10207f24:	a023883a 	mov	r17,r20
10207f28:	003f2f06 	br	10207be8 <_dtoa_r+0xcd4>
10207f2c:	880b883a 	mov	r5,r17
10207f30:	8009883a 	mov	r4,r16
10207f34:	01800284 	movi	r6,10
10207f38:	000f883a 	mov	r7,zero
10207f3c:	020a04c0 	call	1020a04c <__multadd>
10207f40:	1023883a 	mov	r17,r2
10207f44:	1029883a 	mov	r20,r2
10207f48:	003f9706 	br	10207da8 <_dtoa_r+0xe94>
10207f4c:	8009883a 	mov	r4,r16
10207f50:	180b883a 	mov	r5,r3
10207f54:	020a0240 	call	1020a024 <_Bfree>
10207f58:	00800044 	movi	r2,1
10207f5c:	003f7306 	br	10207d2c <_dtoa_r+0xe18>
10207f60:	e009883a 	mov	r4,fp
10207f64:	a80b883a 	mov	r5,r21
10207f68:	020a8500 	call	1020a850 <__mcmp>
10207f6c:	103ee60e 	bge	r2,zero,10207b08 <_dtoa_r+0xbf4>
10207f70:	8009883a 	mov	r4,r16
10207f74:	e00b883a 	mov	r5,fp
10207f78:	01800284 	movi	r6,10
10207f7c:	000f883a 	mov	r7,zero
10207f80:	020a04c0 	call	1020a04c <__multadd>
10207f84:	d9000517 	ldw	r4,20(sp)
10207f88:	d9800b17 	ldw	r6,44(sp)
10207f8c:	1039883a 	mov	fp,r2
10207f90:	213fffc4 	addi	r4,r4,-1
10207f94:	d9000515 	stw	r4,20(sp)
10207f98:	303f2d1e 	bne	r6,zero,10207c50 <_dtoa_r+0xd3c>
10207f9c:	d9000c17 	ldw	r4,48(sp)
10207fa0:	0101780e 	bge	zero,r4,10208584 <_dtoa_r+0x1670>
10207fa4:	d9000615 	stw	r4,24(sp)
10207fa8:	003edb06 	br	10207b18 <_dtoa_r+0xc04>
10207fac:	00800084 	movi	r2,2
10207fb0:	30818e1e 	bne	r6,r2,102085ec <_dtoa_r+0x16d8>
10207fb4:	d8000b15 	stw	zero,44(sp)
10207fb8:	003f8106 	br	10207dc0 <_dtoa_r+0xeac>
10207fbc:	d8800717 	ldw	r2,28(sp)
10207fc0:	003c0306 	br	10206fd0 <_dtoa_r+0xbc>
10207fc4:	d9000317 	ldw	r4,12(sp)
10207fc8:	00800084 	movi	r2,2
10207fcc:	113ed00e 	bge	r2,r4,10207b10 <_dtoa_r+0xbfc>
10207fd0:	d8c00617 	ldw	r3,24(sp)
10207fd4:	183f901e 	bne	r3,zero,10207e18 <_dtoa_r+0xf04>
10207fd8:	a80b883a 	mov	r5,r21
10207fdc:	8009883a 	mov	r4,r16
10207fe0:	01800144 	movi	r6,5
10207fe4:	000f883a 	mov	r7,zero
10207fe8:	020a04c0 	call	1020a04c <__multadd>
10207fec:	e009883a 	mov	r4,fp
10207ff0:	100b883a 	mov	r5,r2
10207ff4:	102b883a 	mov	r21,r2
10207ff8:	020a8500 	call	1020a850 <__mcmp>
10207ffc:	00bf860e 	bge	zero,r2,10207e18 <_dtoa_r+0xf04>
10208000:	d9800717 	ldw	r6,28(sp)
10208004:	00800c44 	movi	r2,49
10208008:	30800005 	stb	r2,0(r6)
1020800c:	d8800517 	ldw	r2,20(sp)
10208010:	35c00044 	addi	r23,r6,1
10208014:	10800044 	addi	r2,r2,1
10208018:	d8800515 	stw	r2,20(sp)
1020801c:	003f8206 	br	10207e28 <_dtoa_r+0xf14>
10208020:	903e981e 	bne	r18,zero,10207a84 <_dtoa_r+0xb70>
10208024:	003f8b06 	br	10207e54 <_dtoa_r+0xf40>
10208028:	d9800517 	ldw	r6,20(sp)
1020802c:	d8c00717 	ldw	r3,28(sp)
10208030:	00800c44 	movi	r2,49
10208034:	31800044 	addi	r6,r6,1
10208038:	d9800515 	stw	r6,20(sp)
1020803c:	18800005 	stb	r2,0(r3)
10208040:	003ee906 	br	10207be8 <_dtoa_r+0xcd4>
10208044:	dc000317 	ldw	r16,12(sp)
10208048:	003d6006 	br	102075cc <_dtoa_r+0x6b8>
1020804c:	8809883a 	mov	r4,r17
10208050:	0217f200 	call	10217f20 <__floatsidf>
10208054:	a009883a 	mov	r4,r20
10208058:	a80b883a 	mov	r5,r21
1020805c:	100d883a 	mov	r6,r2
10208060:	180f883a 	mov	r7,r3
10208064:	0216ea40 	call	10216ea4 <__muldf3>
10208068:	1009883a 	mov	r4,r2
1020806c:	180b883a 	mov	r5,r3
10208070:	000d883a 	mov	r6,zero
10208074:	01d00734 	movhi	r7,16412
10208078:	0215af80 	call	10215af8 <__adddf3>
1020807c:	1023883a 	mov	r17,r2
10208080:	00bf3034 	movhi	r2,64704
10208084:	1885883a 	add	r2,r3,r2
10208088:	d8800e15 	stw	r2,56(sp)
1020808c:	a009883a 	mov	r4,r20
10208090:	a80b883a 	mov	r5,r21
10208094:	000d883a 	mov	r6,zero
10208098:	01d00534 	movhi	r7,16404
1020809c:	02175c80 	call	102175c8 <__subdf3>
102080a0:	d9c00e17 	ldw	r7,56(sp)
102080a4:	1009883a 	mov	r4,r2
102080a8:	180b883a 	mov	r5,r3
102080ac:	880d883a 	mov	r6,r17
102080b0:	102b883a 	mov	r21,r2
102080b4:	1829883a 	mov	r20,r3
102080b8:	0216ce40 	call	10216ce4 <__gedf2>
102080bc:	00807716 	blt	zero,r2,1020829c <_dtoa_r+0x1388>
102080c0:	d8800e17 	ldw	r2,56(sp)
102080c4:	a809883a 	mov	r4,r21
102080c8:	a00b883a 	mov	r5,r20
102080cc:	11e0003c 	xorhi	r7,r2,32768
102080d0:	880d883a 	mov	r6,r17
102080d4:	0216dc40 	call	10216dc4 <__ledf2>
102080d8:	103d6b0e 	bge	r2,zero,10207688 <_dtoa_r+0x774>
102080dc:	002b883a 	mov	r21,zero
102080e0:	0023883a 	mov	r17,zero
102080e4:	003f4c06 	br	10207e18 <_dtoa_r+0xf04>
102080e8:	d9800917 	ldw	r6,36(sp)
102080ec:	e00b883a 	mov	r5,fp
102080f0:	8009883a 	mov	r4,r16
102080f4:	020a5c00 	call	1020a5c0 <__pow5mult>
102080f8:	1039883a 	mov	fp,r2
102080fc:	003e2706 	br	1020799c <_dtoa_r+0xa88>
10208100:	d8000b15 	stw	zero,44(sp)
10208104:	003c4906 	br	1020722c <_dtoa_r+0x318>
10208108:	d9000917 	ldw	r4,36(sp)
1020810c:	d9800a17 	ldw	r6,40(sp)
10208110:	dd400915 	stw	r21,36(sp)
10208114:	a905c83a 	sub	r2,r21,r4
10208118:	308d883a 	add	r6,r6,r2
1020811c:	d9800a15 	stw	r6,40(sp)
10208120:	002b883a 	mov	r21,zero
10208124:	003df206 	br	102078f0 <_dtoa_r+0x9dc>
10208128:	dc800e15 	stw	r18,56(sp)
1020812c:	982b883a 	mov	r21,r19
10208130:	04400084 	movi	r17,2
10208134:	003c7406 	br	10207308 <_dtoa_r+0x3f4>
10208138:	04400044 	movi	r17,1
1020813c:	dc400c15 	stw	r17,48(sp)
10208140:	dc400615 	stw	r17,24(sp)
10208144:	dc402215 	stw	r17,136(sp)
10208148:	80001115 	stw	zero,68(r16)
1020814c:	000b883a 	mov	r5,zero
10208150:	003c4a06 	br	1020727c <_dtoa_r+0x368>
10208154:	3023883a 	mov	r17,r6
10208158:	003ffb06 	br	10208148 <_dtoa_r+0x1234>
1020815c:	1000021e 	bne	r2,zero,10208168 <_dtoa_r+0x1254>
10208160:	4200004c 	andi	r8,r8,1
10208164:	403e8f1e 	bne	r8,zero,10207ba4 <_dtoa_r+0xc90>
10208168:	01000c04 	movi	r4,48
1020816c:	00000106 	br	10208174 <_dtoa_r+0x1260>
10208170:	102f883a 	mov	r23,r2
10208174:	b8bfffc4 	addi	r2,r23,-1
10208178:	10c00007 	ldb	r3,0(r2)
1020817c:	193ffc26 	beq	r3,r4,10208170 <_dtoa_r+0x125c>
10208180:	003e9906 	br	10207be8 <_dtoa_r+0xcd4>
10208184:	d9000517 	ldw	r4,20(sp)
10208188:	012fc83a 	sub	r23,zero,r4
1020818c:	b800ad26 	beq	r23,zero,10208444 <_dtoa_r+0x1530>
10208190:	b88003cc 	andi	r2,r23,15
10208194:	100490fa 	slli	r2,r2,3
10208198:	00c408b4 	movhi	r3,4130
1020819c:	18f4e704 	addi	r3,r3,-11364
102081a0:	1885883a 	add	r2,r3,r2
102081a4:	11800017 	ldw	r6,0(r2)
102081a8:	11c00117 	ldw	r7,4(r2)
102081ac:	b82fd13a 	srai	r23,r23,4
102081b0:	9009883a 	mov	r4,r18
102081b4:	980b883a 	mov	r5,r19
102081b8:	0216ea40 	call	10216ea4 <__muldf3>
102081bc:	1029883a 	mov	r20,r2
102081c0:	182b883a 	mov	r21,r3
102081c4:	b800f426 	beq	r23,zero,10208598 <_dtoa_r+0x1684>
102081c8:	020408b4 	movhi	r8,4130
102081cc:	4234dd04 	addi	r8,r8,-11404
102081d0:	8029883a 	mov	r20,r16
102081d4:	04400084 	movi	r17,2
102081d8:	4021883a 	mov	r16,r8
102081dc:	b980004c 	andi	r6,r23,1
102081e0:	1009883a 	mov	r4,r2
102081e4:	b82fd07a 	srai	r23,r23,1
102081e8:	180b883a 	mov	r5,r3
102081ec:	30000426 	beq	r6,zero,10208200 <_dtoa_r+0x12ec>
102081f0:	81800017 	ldw	r6,0(r16)
102081f4:	81c00117 	ldw	r7,4(r16)
102081f8:	8c400044 	addi	r17,r17,1
102081fc:	0216ea40 	call	10216ea4 <__muldf3>
10208200:	84000204 	addi	r16,r16,8
10208204:	b83ff51e 	bne	r23,zero,102081dc <_dtoa_r+0x12c8>
10208208:	a021883a 	mov	r16,r20
1020820c:	182b883a 	mov	r21,r3
10208210:	1029883a 	mov	r20,r2
10208214:	003c5506 	br	1020736c <_dtoa_r+0x458>
10208218:	d9800517 	ldw	r6,20(sp)
1020821c:	d9000717 	ldw	r4,28(sp)
10208220:	00c00c04 	movi	r3,48
10208224:	31800044 	addi	r6,r6,1
10208228:	d9800515 	stw	r6,20(sp)
1020822c:	20c00005 	stb	r3,0(r4)
10208230:	02000c44 	movi	r8,49
10208234:	003da206 	br	102078c0 <_dtoa_r+0x9ac>
10208238:	89400117 	ldw	r5,4(r17)
1020823c:	8009883a 	mov	r4,r16
10208240:	0209f7c0 	call	10209f7c <_Balloc>
10208244:	89800417 	ldw	r6,16(r17)
10208248:	11000304 	addi	r4,r2,12
1020824c:	89400304 	addi	r5,r17,12
10208250:	31800084 	addi	r6,r6,2
10208254:	318d883a 	add	r6,r6,r6
10208258:	318d883a 	add	r6,r6,r6
1020825c:	1027883a 	mov	r19,r2
10208260:	0202dc80 	call	10202dc8 <memcpy>
10208264:	8009883a 	mov	r4,r16
10208268:	980b883a 	mov	r5,r19
1020826c:	01800044 	movi	r6,1
10208270:	020a7000 	call	1020a700 <__lshift>
10208274:	1029883a 	mov	r20,r2
10208278:	003e8606 	br	10207c94 <_dtoa_r+0xd80>
1020827c:	00800e44 	movi	r2,57
10208280:	90809526 	beq	r18,r2,102084d8 <_dtoa_r+0x15c4>
10208284:	92000044 	addi	r8,r18,1
10208288:	003f2306 	br	10207f18 <_dtoa_r+0x1004>
1020828c:	9011883a 	mov	r8,r18
10208290:	8825883a 	mov	r18,r17
10208294:	a023883a 	mov	r17,r20
10208298:	003e3706 	br	10207b78 <_dtoa_r+0xc64>
1020829c:	002b883a 	mov	r21,zero
102082a0:	0023883a 	mov	r17,zero
102082a4:	003f5606 	br	10208000 <_dtoa_r+0x10ec>
102082a8:	51bfffc4 	addi	r6,r10,-1
102082ac:	300490fa 	slli	r2,r6,3
102082b0:	00c408b4 	movhi	r3,4130
102082b4:	18f4e704 	addi	r3,r3,-11364
102082b8:	1885883a 	add	r2,r3,r2
102082bc:	d9c00e17 	ldw	r7,56(sp)
102082c0:	11000017 	ldw	r4,0(r2)
102082c4:	11400117 	ldw	r5,4(r2)
102082c8:	d8800717 	ldw	r2,28(sp)
102082cc:	d9801015 	stw	r6,64(sp)
102082d0:	880d883a 	mov	r6,r17
102082d4:	da801615 	stw	r10,88(sp)
102082d8:	15c00044 	addi	r23,r2,1
102082dc:	0216ea40 	call	10216ea4 <__muldf3>
102082e0:	a80b883a 	mov	r5,r21
102082e4:	a009883a 	mov	r4,r20
102082e8:	d8c01115 	stw	r3,68(sp)
102082ec:	d8800e15 	stw	r2,56(sp)
102082f0:	0217e980 	call	10217e98 <__fixdfsi>
102082f4:	1009883a 	mov	r4,r2
102082f8:	1023883a 	mov	r17,r2
102082fc:	0217f200 	call	10217f20 <__floatsidf>
10208300:	a009883a 	mov	r4,r20
10208304:	a80b883a 	mov	r5,r21
10208308:	100d883a 	mov	r6,r2
1020830c:	180f883a 	mov	r7,r3
10208310:	02175c80 	call	102175c8 <__subdf3>
10208314:	1813883a 	mov	r9,r3
10208318:	d8c00717 	ldw	r3,28(sp)
1020831c:	8c400c04 	addi	r17,r17,48
10208320:	1011883a 	mov	r8,r2
10208324:	1c400005 	stb	r17,0(r3)
10208328:	da801617 	ldw	r10,88(sp)
1020832c:	00800044 	movi	r2,1
10208330:	50802326 	beq	r10,r2,102083c0 <_dtoa_r+0x14ac>
10208334:	d8800717 	ldw	r2,28(sp)
10208338:	b82b883a 	mov	r21,r23
1020833c:	dc001315 	stw	r16,76(sp)
10208340:	12a9883a 	add	r20,r2,r10
10208344:	4807883a 	mov	r3,r9
10208348:	4005883a 	mov	r2,r8
1020834c:	dc801415 	stw	r18,80(sp)
10208350:	000d883a 	mov	r6,zero
10208354:	01d00934 	movhi	r7,16420
10208358:	1009883a 	mov	r4,r2
1020835c:	180b883a 	mov	r5,r3
10208360:	0216ea40 	call	10216ea4 <__muldf3>
10208364:	180b883a 	mov	r5,r3
10208368:	1009883a 	mov	r4,r2
1020836c:	1821883a 	mov	r16,r3
10208370:	1025883a 	mov	r18,r2
10208374:	0217e980 	call	10217e98 <__fixdfsi>
10208378:	1009883a 	mov	r4,r2
1020837c:	1023883a 	mov	r17,r2
10208380:	0217f200 	call	10217f20 <__floatsidf>
10208384:	9009883a 	mov	r4,r18
10208388:	800b883a 	mov	r5,r16
1020838c:	100d883a 	mov	r6,r2
10208390:	180f883a 	mov	r7,r3
10208394:	8c400c04 	addi	r17,r17,48
10208398:	02175c80 	call	102175c8 <__subdf3>
1020839c:	ad400044 	addi	r21,r21,1
102083a0:	ac7fffc5 	stb	r17,-1(r21)
102083a4:	ad3fea1e 	bne	r21,r20,10208350 <_dtoa_r+0x143c>
102083a8:	1813883a 	mov	r9,r3
102083ac:	d8c01017 	ldw	r3,64(sp)
102083b0:	dc001317 	ldw	r16,76(sp)
102083b4:	dc801417 	ldw	r18,80(sp)
102083b8:	1011883a 	mov	r8,r2
102083bc:	b8ef883a 	add	r23,r23,r3
102083c0:	d9000e17 	ldw	r4,56(sp)
102083c4:	d9401117 	ldw	r5,68(sp)
102083c8:	000d883a 	mov	r6,zero
102083cc:	01cff834 	movhi	r7,16352
102083d0:	da001715 	stw	r8,92(sp)
102083d4:	da401515 	stw	r9,84(sp)
102083d8:	0215af80 	call	10215af8 <__adddf3>
102083dc:	da001717 	ldw	r8,92(sp)
102083e0:	da401517 	ldw	r9,84(sp)
102083e4:	1009883a 	mov	r4,r2
102083e8:	400d883a 	mov	r6,r8
102083ec:	480f883a 	mov	r7,r9
102083f0:	180b883a 	mov	r5,r3
102083f4:	0216dc40 	call	10216dc4 <__ledf2>
102083f8:	da001717 	ldw	r8,92(sp)
102083fc:	da401517 	ldw	r9,84(sp)
10208400:	10003b0e 	bge	r2,zero,102084f0 <_dtoa_r+0x15dc>
10208404:	d9001217 	ldw	r4,72(sp)
10208408:	bd7fffc3 	ldbu	r21,-1(r23)
1020840c:	d9000515 	stw	r4,20(sp)
10208410:	003d1c06 	br	10207884 <_dtoa_r+0x970>
10208414:	d8c00817 	ldw	r3,32(sp)
10208418:	18a9c83a 	sub	r20,r3,r2
1020841c:	0005883a 	mov	r2,zero
10208420:	003d3706 	br	10207900 <_dtoa_r+0x9ec>
10208424:	00800044 	movi	r2,1
10208428:	003dd006 	br	10207b6c <_dtoa_r+0xc58>
1020842c:	d8c00217 	ldw	r3,8(sp)
10208430:	00800d84 	movi	r2,54
10208434:	dd400917 	ldw	r21,36(sp)
10208438:	10c5c83a 	sub	r2,r2,r3
1020843c:	dd000817 	ldw	r20,32(sp)
10208440:	003d2f06 	br	10207900 <_dtoa_r+0x9ec>
10208444:	9029883a 	mov	r20,r18
10208448:	982b883a 	mov	r21,r19
1020844c:	04400084 	movi	r17,2
10208450:	003bc606 	br	1020736c <_dtoa_r+0x458>
10208454:	d8800617 	ldw	r2,24(sp)
10208458:	103efc26 	beq	r2,zero,1020804c <_dtoa_r+0x1138>
1020845c:	d8c00c17 	ldw	r3,48(sp)
10208460:	00fc890e 	bge	zero,r3,10207688 <_dtoa_r+0x774>
10208464:	a80b883a 	mov	r5,r21
10208468:	a009883a 	mov	r4,r20
1020846c:	000d883a 	mov	r6,zero
10208470:	01d00934 	movhi	r7,16420
10208474:	0216ea40 	call	10216ea4 <__muldf3>
10208478:	89000044 	addi	r4,r17,1
1020847c:	1029883a 	mov	r20,r2
10208480:	182b883a 	mov	r21,r3
10208484:	0217f200 	call	10217f20 <__floatsidf>
10208488:	a009883a 	mov	r4,r20
1020848c:	a80b883a 	mov	r5,r21
10208490:	100d883a 	mov	r6,r2
10208494:	180f883a 	mov	r7,r3
10208498:	0216ea40 	call	10216ea4 <__muldf3>
1020849c:	1009883a 	mov	r4,r2
102084a0:	180b883a 	mov	r5,r3
102084a4:	000d883a 	mov	r6,zero
102084a8:	01d00734 	movhi	r7,16412
102084ac:	0215af80 	call	10215af8 <__adddf3>
102084b0:	d9000517 	ldw	r4,20(sp)
102084b4:	1023883a 	mov	r17,r2
102084b8:	00bf3034 	movhi	r2,64704
102084bc:	213fffc4 	addi	r4,r4,-1
102084c0:	1885883a 	add	r2,r3,r2
102084c4:	d9001215 	stw	r4,72(sp)
102084c8:	d8800e15 	stw	r2,56(sp)
102084cc:	da800c17 	ldw	r10,48(sp)
102084d0:	003bc306 	br	102073e0 <_dtoa_r+0x4cc>
102084d4:	b039883a 	mov	fp,r22
102084d8:	01000e44 	movi	r4,57
102084dc:	8825883a 	mov	r18,r17
102084e0:	9dc00044 	addi	r23,r19,1
102084e4:	99000005 	stb	r4,0(r19)
102084e8:	a023883a 	mov	r17,r20
102084ec:	003dae06 	br	10207ba8 <_dtoa_r+0xc94>
102084f0:	d9800e17 	ldw	r6,56(sp)
102084f4:	d9c01117 	ldw	r7,68(sp)
102084f8:	0009883a 	mov	r4,zero
102084fc:	014ff834 	movhi	r5,16352
10208500:	da001715 	stw	r8,92(sp)
10208504:	da401515 	stw	r9,84(sp)
10208508:	02175c80 	call	102175c8 <__subdf3>
1020850c:	da001717 	ldw	r8,92(sp)
10208510:	da401517 	ldw	r9,84(sp)
10208514:	1009883a 	mov	r4,r2
10208518:	180b883a 	mov	r5,r3
1020851c:	400d883a 	mov	r6,r8
10208520:	480f883a 	mov	r7,r9
10208524:	0216ce40 	call	10216ce4 <__gedf2>
10208528:	00bc570e 	bge	zero,r2,10207688 <_dtoa_r+0x774>
1020852c:	01000c04 	movi	r4,48
10208530:	00000106 	br	10208538 <_dtoa_r+0x1624>
10208534:	102f883a 	mov	r23,r2
10208538:	b8bfffc4 	addi	r2,r23,-1
1020853c:	10c00007 	ldb	r3,0(r2)
10208540:	193ffc26 	beq	r3,r4,10208534 <_dtoa_r+0x1620>
10208544:	d9801217 	ldw	r6,72(sp)
10208548:	d9800515 	stw	r6,20(sp)
1020854c:	003c1f06 	br	102075cc <_dtoa_r+0x6b8>
10208550:	d8801217 	ldw	r2,72(sp)
10208554:	dc001117 	ldw	r16,68(sp)
10208558:	d8800515 	stw	r2,20(sp)
1020855c:	003cc906 	br	10207884 <_dtoa_r+0x970>
10208560:	dd801317 	ldw	r22,76(sp)
10208564:	dc001117 	ldw	r16,68(sp)
10208568:	dcc01417 	ldw	r19,80(sp)
1020856c:	dc801017 	ldw	r18,64(sp)
10208570:	003c4506 	br	10207688 <_dtoa_r+0x774>
10208574:	103e5d1e 	bne	r2,zero,10207eec <_dtoa_r+0xfd8>
10208578:	4080004c 	andi	r2,r8,1
1020857c:	103e5b26 	beq	r2,zero,10207eec <_dtoa_r+0xfd8>
10208580:	003e5706 	br	10207ee0 <_dtoa_r+0xfcc>
10208584:	d8c00317 	ldw	r3,12(sp)
10208588:	00800084 	movi	r2,2
1020858c:	10c00a16 	blt	r2,r3,102085b8 <_dtoa_r+0x16a4>
10208590:	d9000c17 	ldw	r4,48(sp)
10208594:	003e8306 	br	10207fa4 <_dtoa_r+0x1090>
10208598:	04400084 	movi	r17,2
1020859c:	003b7306 	br	1020736c <_dtoa_r+0x458>
102085a0:	d9801217 	ldw	r6,72(sp)
102085a4:	d9800515 	stw	r6,20(sp)
102085a8:	003cb606 	br	10207884 <_dtoa_r+0x970>
102085ac:	d9001217 	ldw	r4,72(sp)
102085b0:	d9000515 	stw	r4,20(sp)
102085b4:	003c0506 	br	102075cc <_dtoa_r+0x6b8>
102085b8:	d9800c17 	ldw	r6,48(sp)
102085bc:	d9800615 	stw	r6,24(sp)
102085c0:	003e8306 	br	10207fd0 <_dtoa_r+0x10bc>
102085c4:	d9800317 	ldw	r6,12(sp)
102085c8:	00800084 	movi	r2,2
102085cc:	11800216 	blt	r2,r6,102085d8 <_dtoa_r+0x16c4>
102085d0:	d8800c17 	ldw	r2,48(sp)
102085d4:	003da606 	br	10207c70 <_dtoa_r+0xd5c>
102085d8:	d8800c17 	ldw	r2,48(sp)
102085dc:	d8800615 	stw	r2,24(sp)
102085e0:	003e7b06 	br	10207fd0 <_dtoa_r+0x10bc>
102085e4:	05000044 	movi	r20,1
102085e8:	003b0506 	br	10207200 <_dtoa_r+0x2ec>
102085ec:	8009883a 	mov	r4,r16
102085f0:	80001115 	stw	zero,68(r16)
102085f4:	000b883a 	mov	r5,zero
102085f8:	0209f7c0 	call	10209f7c <_Balloc>
102085fc:	d8800715 	stw	r2,28(sp)
10208600:	d8c00717 	ldw	r3,28(sp)
10208604:	00bfffc4 	movi	r2,-1
10208608:	01000044 	movi	r4,1
1020860c:	d8800c15 	stw	r2,48(sp)
10208610:	80c01015 	stw	r3,64(r16)
10208614:	d9000b15 	stw	r4,44(sp)
10208618:	d8800615 	stw	r2,24(sp)
1020861c:	d8002215 	stw	zero,136(sp)
10208620:	003c1906 	br	10207688 <_dtoa_r+0x774>
10208624:	193d2926 	beq	r3,r4,10207acc <_dtoa_r+0xbb8>
10208628:	00c00f04 	movi	r3,60
1020862c:	1885c83a 	sub	r2,r3,r2
10208630:	003d7b06 	br	10207c20 <_dtoa_r+0xd0c>
10208634:	000b883a 	mov	r5,zero
10208638:	003b1006 	br	1020727c <_dtoa_r+0x368>

1020863c <__sflush_r>:
1020863c:	2880030b 	ldhu	r2,12(r5)
10208640:	defffb04 	addi	sp,sp,-20
10208644:	dcc00315 	stw	r19,12(sp)
10208648:	dc400115 	stw	r17,4(sp)
1020864c:	dfc00415 	stw	ra,16(sp)
10208650:	dc800215 	stw	r18,8(sp)
10208654:	dc000015 	stw	r16,0(sp)
10208658:	10c0020c 	andi	r3,r2,8
1020865c:	2823883a 	mov	r17,r5
10208660:	2027883a 	mov	r19,r4
10208664:	1800311e 	bne	r3,zero,1020872c <__sflush_r+0xf0>
10208668:	28c00117 	ldw	r3,4(r5)
1020866c:	10820014 	ori	r2,r2,2048
10208670:	2880030d 	sth	r2,12(r5)
10208674:	00c04b0e 	bge	zero,r3,102087a4 <__sflush_r+0x168>
10208678:	8a000a17 	ldw	r8,40(r17)
1020867c:	40002326 	beq	r8,zero,1020870c <__sflush_r+0xd0>
10208680:	9c000017 	ldw	r16,0(r19)
10208684:	10c4000c 	andi	r3,r2,4096
10208688:	98000015 	stw	zero,0(r19)
1020868c:	18004826 	beq	r3,zero,102087b0 <__sflush_r+0x174>
10208690:	89801417 	ldw	r6,80(r17)
10208694:	10c0010c 	andi	r3,r2,4
10208698:	18000626 	beq	r3,zero,102086b4 <__sflush_r+0x78>
1020869c:	88c00117 	ldw	r3,4(r17)
102086a0:	88800c17 	ldw	r2,48(r17)
102086a4:	30cdc83a 	sub	r6,r6,r3
102086a8:	10000226 	beq	r2,zero,102086b4 <__sflush_r+0x78>
102086ac:	88800f17 	ldw	r2,60(r17)
102086b0:	308dc83a 	sub	r6,r6,r2
102086b4:	89400717 	ldw	r5,28(r17)
102086b8:	9809883a 	mov	r4,r19
102086bc:	000f883a 	mov	r7,zero
102086c0:	403ee83a 	callr	r8
102086c4:	00ffffc4 	movi	r3,-1
102086c8:	10c04426 	beq	r2,r3,102087dc <__sflush_r+0x1a0>
102086cc:	88c0030b 	ldhu	r3,12(r17)
102086d0:	89000417 	ldw	r4,16(r17)
102086d4:	88000115 	stw	zero,4(r17)
102086d8:	197dffcc 	andi	r5,r3,63487
102086dc:	8940030d 	sth	r5,12(r17)
102086e0:	89000015 	stw	r4,0(r17)
102086e4:	18c4000c 	andi	r3,r3,4096
102086e8:	18002c1e 	bne	r3,zero,1020879c <__sflush_r+0x160>
102086ec:	89400c17 	ldw	r5,48(r17)
102086f0:	9c000015 	stw	r16,0(r19)
102086f4:	28000526 	beq	r5,zero,1020870c <__sflush_r+0xd0>
102086f8:	88801004 	addi	r2,r17,64
102086fc:	28800226 	beq	r5,r2,10208708 <__sflush_r+0xcc>
10208700:	9809883a 	mov	r4,r19
10208704:	0208d940 	call	10208d94 <_free_r>
10208708:	88000c15 	stw	zero,48(r17)
1020870c:	0005883a 	mov	r2,zero
10208710:	dfc00417 	ldw	ra,16(sp)
10208714:	dcc00317 	ldw	r19,12(sp)
10208718:	dc800217 	ldw	r18,8(sp)
1020871c:	dc400117 	ldw	r17,4(sp)
10208720:	dc000017 	ldw	r16,0(sp)
10208724:	dec00504 	addi	sp,sp,20
10208728:	f800283a 	ret
1020872c:	2c800417 	ldw	r18,16(r5)
10208730:	903ff626 	beq	r18,zero,1020870c <__sflush_r+0xd0>
10208734:	2c000017 	ldw	r16,0(r5)
10208738:	108000cc 	andi	r2,r2,3
1020873c:	2c800015 	stw	r18,0(r5)
10208740:	84a1c83a 	sub	r16,r16,r18
10208744:	1000131e 	bne	r2,zero,10208794 <__sflush_r+0x158>
10208748:	28800517 	ldw	r2,20(r5)
1020874c:	88800215 	stw	r2,8(r17)
10208750:	04000316 	blt	zero,r16,10208760 <__sflush_r+0x124>
10208754:	003fed06 	br	1020870c <__sflush_r+0xd0>
10208758:	90a5883a 	add	r18,r18,r2
1020875c:	043feb0e 	bge	zero,r16,1020870c <__sflush_r+0xd0>
10208760:	88800917 	ldw	r2,36(r17)
10208764:	89400717 	ldw	r5,28(r17)
10208768:	800f883a 	mov	r7,r16
1020876c:	900d883a 	mov	r6,r18
10208770:	9809883a 	mov	r4,r19
10208774:	103ee83a 	callr	r2
10208778:	80a1c83a 	sub	r16,r16,r2
1020877c:	00bff616 	blt	zero,r2,10208758 <__sflush_r+0x11c>
10208780:	88c0030b 	ldhu	r3,12(r17)
10208784:	00bfffc4 	movi	r2,-1
10208788:	18c01014 	ori	r3,r3,64
1020878c:	88c0030d 	sth	r3,12(r17)
10208790:	003fdf06 	br	10208710 <__sflush_r+0xd4>
10208794:	0005883a 	mov	r2,zero
10208798:	003fec06 	br	1020874c <__sflush_r+0x110>
1020879c:	88801415 	stw	r2,80(r17)
102087a0:	003fd206 	br	102086ec <__sflush_r+0xb0>
102087a4:	28c00f17 	ldw	r3,60(r5)
102087a8:	00ffb316 	blt	zero,r3,10208678 <__sflush_r+0x3c>
102087ac:	003fd706 	br	1020870c <__sflush_r+0xd0>
102087b0:	89400717 	ldw	r5,28(r17)
102087b4:	000d883a 	mov	r6,zero
102087b8:	9809883a 	mov	r4,r19
102087bc:	01c00044 	movi	r7,1
102087c0:	403ee83a 	callr	r8
102087c4:	100d883a 	mov	r6,r2
102087c8:	00bfffc4 	movi	r2,-1
102087cc:	30801426 	beq	r6,r2,10208820 <__sflush_r+0x1e4>
102087d0:	8880030b 	ldhu	r2,12(r17)
102087d4:	8a000a17 	ldw	r8,40(r17)
102087d8:	003fae06 	br	10208694 <__sflush_r+0x58>
102087dc:	98c00017 	ldw	r3,0(r19)
102087e0:	183fba26 	beq	r3,zero,102086cc <__sflush_r+0x90>
102087e4:	01000744 	movi	r4,29
102087e8:	19000626 	beq	r3,r4,10208804 <__sflush_r+0x1c8>
102087ec:	01000584 	movi	r4,22
102087f0:	19000426 	beq	r3,r4,10208804 <__sflush_r+0x1c8>
102087f4:	88c0030b 	ldhu	r3,12(r17)
102087f8:	18c01014 	ori	r3,r3,64
102087fc:	88c0030d 	sth	r3,12(r17)
10208800:	003fc306 	br	10208710 <__sflush_r+0xd4>
10208804:	8880030b 	ldhu	r2,12(r17)
10208808:	88c00417 	ldw	r3,16(r17)
1020880c:	88000115 	stw	zero,4(r17)
10208810:	10bdffcc 	andi	r2,r2,63487
10208814:	8880030d 	sth	r2,12(r17)
10208818:	88c00015 	stw	r3,0(r17)
1020881c:	003fb306 	br	102086ec <__sflush_r+0xb0>
10208820:	98800017 	ldw	r2,0(r19)
10208824:	103fea26 	beq	r2,zero,102087d0 <__sflush_r+0x194>
10208828:	00c00744 	movi	r3,29
1020882c:	10c00226 	beq	r2,r3,10208838 <__sflush_r+0x1fc>
10208830:	00c00584 	movi	r3,22
10208834:	10ffd21e 	bne	r2,r3,10208780 <__sflush_r+0x144>
10208838:	9c000015 	stw	r16,0(r19)
1020883c:	0005883a 	mov	r2,zero
10208840:	003fb306 	br	10208710 <__sflush_r+0xd4>

10208844 <_fflush_r>:
10208844:	defffd04 	addi	sp,sp,-12
10208848:	dc000115 	stw	r16,4(sp)
1020884c:	dfc00215 	stw	ra,8(sp)
10208850:	2021883a 	mov	r16,r4
10208854:	20000226 	beq	r4,zero,10208860 <_fflush_r+0x1c>
10208858:	20800e17 	ldw	r2,56(r4)
1020885c:	10000c26 	beq	r2,zero,10208890 <_fflush_r+0x4c>
10208860:	2880030f 	ldh	r2,12(r5)
10208864:	1000051e 	bne	r2,zero,1020887c <_fflush_r+0x38>
10208868:	0005883a 	mov	r2,zero
1020886c:	dfc00217 	ldw	ra,8(sp)
10208870:	dc000117 	ldw	r16,4(sp)
10208874:	dec00304 	addi	sp,sp,12
10208878:	f800283a 	ret
1020887c:	8009883a 	mov	r4,r16
10208880:	dfc00217 	ldw	ra,8(sp)
10208884:	dc000117 	ldw	r16,4(sp)
10208888:	dec00304 	addi	sp,sp,12
1020888c:	020863c1 	jmpi	1020863c <__sflush_r>
10208890:	d9400015 	stw	r5,0(sp)
10208894:	0208c200 	call	10208c20 <__sinit>
10208898:	d9400017 	ldw	r5,0(sp)
1020889c:	003ff006 	br	10208860 <_fflush_r+0x1c>

102088a0 <fflush>:
102088a0:	20000526 	beq	r4,zero,102088b8 <fflush+0x18>
102088a4:	008408b4 	movhi	r2,4130
102088a8:	10bd0604 	addi	r2,r2,-3048
102088ac:	200b883a 	mov	r5,r4
102088b0:	11000017 	ldw	r4,0(r2)
102088b4:	02088441 	jmpi	10208844 <_fflush_r>
102088b8:	008408b4 	movhi	r2,4130
102088bc:	10bd0504 	addi	r2,r2,-3052
102088c0:	11000017 	ldw	r4,0(r2)
102088c4:	01440874 	movhi	r5,4129
102088c8:	29621104 	addi	r5,r5,-30652
102088cc:	02096081 	jmpi	10209608 <_fwalk_reent>

102088d0 <__fp_lock>:
102088d0:	0005883a 	mov	r2,zero
102088d4:	f800283a 	ret

102088d8 <__fp_unlock>:
102088d8:	0005883a 	mov	r2,zero
102088dc:	f800283a 	ret

102088e0 <_cleanup_r>:
102088e0:	01440874 	movhi	r5,4129
102088e4:	294a4504 	addi	r5,r5,10516
102088e8:	02096081 	jmpi	10209608 <_fwalk_reent>

102088ec <__sinit.part.1>:
102088ec:	defff704 	addi	sp,sp,-36
102088f0:	00c40874 	movhi	r3,4129
102088f4:	dfc00815 	stw	ra,32(sp)
102088f8:	ddc00715 	stw	r23,28(sp)
102088fc:	dd800615 	stw	r22,24(sp)
10208900:	dd400515 	stw	r21,20(sp)
10208904:	dd000415 	stw	r20,16(sp)
10208908:	dcc00315 	stw	r19,12(sp)
1020890c:	dc800215 	stw	r18,8(sp)
10208910:	dc400115 	stw	r17,4(sp)
10208914:	dc000015 	stw	r16,0(sp)
10208918:	18e23804 	addi	r3,r3,-30496
1020891c:	24000117 	ldw	r16,4(r4)
10208920:	20c00f15 	stw	r3,60(r4)
10208924:	2080bb04 	addi	r2,r4,748
10208928:	00c000c4 	movi	r3,3
1020892c:	20c0b915 	stw	r3,740(r4)
10208930:	2080ba15 	stw	r2,744(r4)
10208934:	2000b815 	stw	zero,736(r4)
10208938:	05c00204 	movi	r23,8
1020893c:	00800104 	movi	r2,4
10208940:	2025883a 	mov	r18,r4
10208944:	b80d883a 	mov	r6,r23
10208948:	81001704 	addi	r4,r16,92
1020894c:	000b883a 	mov	r5,zero
10208950:	80000015 	stw	zero,0(r16)
10208954:	80000115 	stw	zero,4(r16)
10208958:	80000215 	stw	zero,8(r16)
1020895c:	8080030d 	sth	r2,12(r16)
10208960:	80001915 	stw	zero,100(r16)
10208964:	8000038d 	sth	zero,14(r16)
10208968:	80000415 	stw	zero,16(r16)
1020896c:	80000515 	stw	zero,20(r16)
10208970:	80000615 	stw	zero,24(r16)
10208974:	0209e580 	call	10209e58 <memset>
10208978:	05840834 	movhi	r22,4128
1020897c:	94400217 	ldw	r17,8(r18)
10208980:	05440834 	movhi	r21,4128
10208984:	05040834 	movhi	r20,4128
10208988:	04c40834 	movhi	r19,4128
1020898c:	b58c8504 	addi	r22,r22,12820
10208990:	ad4c9c04 	addi	r21,r21,12912
10208994:	a50cbb04 	addi	r20,r20,13036
10208998:	9cccd204 	addi	r19,r19,13128
1020899c:	85800815 	stw	r22,32(r16)
102089a0:	85400915 	stw	r21,36(r16)
102089a4:	85000a15 	stw	r20,40(r16)
102089a8:	84c00b15 	stw	r19,44(r16)
102089ac:	84000715 	stw	r16,28(r16)
102089b0:	00800284 	movi	r2,10
102089b4:	8880030d 	sth	r2,12(r17)
102089b8:	00800044 	movi	r2,1
102089bc:	89001704 	addi	r4,r17,92
102089c0:	b80d883a 	mov	r6,r23
102089c4:	000b883a 	mov	r5,zero
102089c8:	88000015 	stw	zero,0(r17)
102089cc:	88000115 	stw	zero,4(r17)
102089d0:	88000215 	stw	zero,8(r17)
102089d4:	88001915 	stw	zero,100(r17)
102089d8:	8880038d 	sth	r2,14(r17)
102089dc:	88000415 	stw	zero,16(r17)
102089e0:	88000515 	stw	zero,20(r17)
102089e4:	88000615 	stw	zero,24(r17)
102089e8:	0209e580 	call	10209e58 <memset>
102089ec:	94000317 	ldw	r16,12(r18)
102089f0:	00800484 	movi	r2,18
102089f4:	8c400715 	stw	r17,28(r17)
102089f8:	8d800815 	stw	r22,32(r17)
102089fc:	8d400915 	stw	r21,36(r17)
10208a00:	8d000a15 	stw	r20,40(r17)
10208a04:	8cc00b15 	stw	r19,44(r17)
10208a08:	8080030d 	sth	r2,12(r16)
10208a0c:	00800084 	movi	r2,2
10208a10:	80000015 	stw	zero,0(r16)
10208a14:	80000115 	stw	zero,4(r16)
10208a18:	80000215 	stw	zero,8(r16)
10208a1c:	80001915 	stw	zero,100(r16)
10208a20:	8080038d 	sth	r2,14(r16)
10208a24:	80000415 	stw	zero,16(r16)
10208a28:	80000515 	stw	zero,20(r16)
10208a2c:	80000615 	stw	zero,24(r16)
10208a30:	81001704 	addi	r4,r16,92
10208a34:	000b883a 	mov	r5,zero
10208a38:	b80d883a 	mov	r6,r23
10208a3c:	0209e580 	call	10209e58 <memset>
10208a40:	00800044 	movi	r2,1
10208a44:	84000715 	stw	r16,28(r16)
10208a48:	85800815 	stw	r22,32(r16)
10208a4c:	85400915 	stw	r21,36(r16)
10208a50:	85000a15 	stw	r20,40(r16)
10208a54:	84c00b15 	stw	r19,44(r16)
10208a58:	90800e15 	stw	r2,56(r18)
10208a5c:	dfc00817 	ldw	ra,32(sp)
10208a60:	ddc00717 	ldw	r23,28(sp)
10208a64:	dd800617 	ldw	r22,24(sp)
10208a68:	dd400517 	ldw	r21,20(sp)
10208a6c:	dd000417 	ldw	r20,16(sp)
10208a70:	dcc00317 	ldw	r19,12(sp)
10208a74:	dc800217 	ldw	r18,8(sp)
10208a78:	dc400117 	ldw	r17,4(sp)
10208a7c:	dc000017 	ldw	r16,0(sp)
10208a80:	dec00904 	addi	sp,sp,36
10208a84:	f800283a 	ret

10208a88 <__sfmoreglue>:
10208a88:	defffc04 	addi	sp,sp,-16
10208a8c:	dc400115 	stw	r17,4(sp)
10208a90:	2c7fffc4 	addi	r17,r5,-1
10208a94:	8c401a24 	muli	r17,r17,104
10208a98:	dc800215 	stw	r18,8(sp)
10208a9c:	2825883a 	mov	r18,r5
10208aa0:	89401d04 	addi	r5,r17,116
10208aa4:	dc000015 	stw	r16,0(sp)
10208aa8:	dfc00315 	stw	ra,12(sp)
10208aac:	02025a40 	call	102025a4 <_malloc_r>
10208ab0:	1021883a 	mov	r16,r2
10208ab4:	10000726 	beq	r2,zero,10208ad4 <__sfmoreglue+0x4c>
10208ab8:	11000304 	addi	r4,r2,12
10208abc:	10000015 	stw	zero,0(r2)
10208ac0:	14800115 	stw	r18,4(r2)
10208ac4:	11000215 	stw	r4,8(r2)
10208ac8:	000b883a 	mov	r5,zero
10208acc:	89801a04 	addi	r6,r17,104
10208ad0:	0209e580 	call	10209e58 <memset>
10208ad4:	8005883a 	mov	r2,r16
10208ad8:	dfc00317 	ldw	ra,12(sp)
10208adc:	dc800217 	ldw	r18,8(sp)
10208ae0:	dc400117 	ldw	r17,4(sp)
10208ae4:	dc000017 	ldw	r16,0(sp)
10208ae8:	dec00404 	addi	sp,sp,16
10208aec:	f800283a 	ret

10208af0 <__sfp>:
10208af0:	008408b4 	movhi	r2,4130
10208af4:	defffb04 	addi	sp,sp,-20
10208af8:	10bd0504 	addi	r2,r2,-3052
10208afc:	dc800215 	stw	r18,8(sp)
10208b00:	14800017 	ldw	r18,0(r2)
10208b04:	dcc00315 	stw	r19,12(sp)
10208b08:	dfc00415 	stw	ra,16(sp)
10208b0c:	90800e17 	ldw	r2,56(r18)
10208b10:	dc400115 	stw	r17,4(sp)
10208b14:	dc000015 	stw	r16,0(sp)
10208b18:	2027883a 	mov	r19,r4
10208b1c:	1000021e 	bne	r2,zero,10208b28 <__sfp+0x38>
10208b20:	9009883a 	mov	r4,r18
10208b24:	02088ec0 	call	102088ec <__sinit.part.1>
10208b28:	9480b804 	addi	r18,r18,736
10208b2c:	047fffc4 	movi	r17,-1
10208b30:	91400117 	ldw	r5,4(r18)
10208b34:	94000217 	ldw	r16,8(r18)
10208b38:	297fffc4 	addi	r5,r5,-1
10208b3c:	28000a16 	blt	r5,zero,10208b68 <__sfp+0x78>
10208b40:	8080030f 	ldh	r2,12(r16)
10208b44:	10000c26 	beq	r2,zero,10208b78 <__sfp+0x88>
10208b48:	80c01d04 	addi	r3,r16,116
10208b4c:	00000206 	br	10208b58 <__sfp+0x68>
10208b50:	18bfe60f 	ldh	r2,-104(r3)
10208b54:	10000826 	beq	r2,zero,10208b78 <__sfp+0x88>
10208b58:	297fffc4 	addi	r5,r5,-1
10208b5c:	1c3ffd04 	addi	r16,r3,-12
10208b60:	18c01a04 	addi	r3,r3,104
10208b64:	2c7ffa1e 	bne	r5,r17,10208b50 <__sfp+0x60>
10208b68:	90800017 	ldw	r2,0(r18)
10208b6c:	10001d26 	beq	r2,zero,10208be4 <__sfp+0xf4>
10208b70:	1025883a 	mov	r18,r2
10208b74:	003fee06 	br	10208b30 <__sfp+0x40>
10208b78:	00bfffc4 	movi	r2,-1
10208b7c:	8080038d 	sth	r2,14(r16)
10208b80:	00800044 	movi	r2,1
10208b84:	8080030d 	sth	r2,12(r16)
10208b88:	80001915 	stw	zero,100(r16)
10208b8c:	80000015 	stw	zero,0(r16)
10208b90:	80000215 	stw	zero,8(r16)
10208b94:	80000115 	stw	zero,4(r16)
10208b98:	80000415 	stw	zero,16(r16)
10208b9c:	80000515 	stw	zero,20(r16)
10208ba0:	80000615 	stw	zero,24(r16)
10208ba4:	81001704 	addi	r4,r16,92
10208ba8:	000b883a 	mov	r5,zero
10208bac:	01800204 	movi	r6,8
10208bb0:	0209e580 	call	10209e58 <memset>
10208bb4:	8005883a 	mov	r2,r16
10208bb8:	80000c15 	stw	zero,48(r16)
10208bbc:	80000d15 	stw	zero,52(r16)
10208bc0:	80001115 	stw	zero,68(r16)
10208bc4:	80001215 	stw	zero,72(r16)
10208bc8:	dfc00417 	ldw	ra,16(sp)
10208bcc:	dcc00317 	ldw	r19,12(sp)
10208bd0:	dc800217 	ldw	r18,8(sp)
10208bd4:	dc400117 	ldw	r17,4(sp)
10208bd8:	dc000017 	ldw	r16,0(sp)
10208bdc:	dec00504 	addi	sp,sp,20
10208be0:	f800283a 	ret
10208be4:	9809883a 	mov	r4,r19
10208be8:	01400104 	movi	r5,4
10208bec:	0208a880 	call	10208a88 <__sfmoreglue>
10208bf0:	90800015 	stw	r2,0(r18)
10208bf4:	103fde1e 	bne	r2,zero,10208b70 <__sfp+0x80>
10208bf8:	00800304 	movi	r2,12
10208bfc:	98800015 	stw	r2,0(r19)
10208c00:	0005883a 	mov	r2,zero
10208c04:	003ff006 	br	10208bc8 <__sfp+0xd8>

10208c08 <_cleanup>:
10208c08:	008408b4 	movhi	r2,4130
10208c0c:	10bd0504 	addi	r2,r2,-3052
10208c10:	11000017 	ldw	r4,0(r2)
10208c14:	01440874 	movhi	r5,4129
10208c18:	294a4504 	addi	r5,r5,10516
10208c1c:	02096081 	jmpi	10209608 <_fwalk_reent>

10208c20 <__sinit>:
10208c20:	20800e17 	ldw	r2,56(r4)
10208c24:	10000126 	beq	r2,zero,10208c2c <__sinit+0xc>
10208c28:	f800283a 	ret
10208c2c:	02088ec1 	jmpi	102088ec <__sinit.part.1>

10208c30 <__sfp_lock_acquire>:
10208c30:	f800283a 	ret

10208c34 <__sfp_lock_release>:
10208c34:	f800283a 	ret

10208c38 <__sinit_lock_acquire>:
10208c38:	f800283a 	ret

10208c3c <__sinit_lock_release>:
10208c3c:	f800283a 	ret

10208c40 <__fp_lock_all>:
10208c40:	008408b4 	movhi	r2,4130
10208c44:	10bd0604 	addi	r2,r2,-3048
10208c48:	11000017 	ldw	r4,0(r2)
10208c4c:	01440874 	movhi	r5,4129
10208c50:	29623404 	addi	r5,r5,-30512
10208c54:	02095441 	jmpi	10209544 <_fwalk>

10208c58 <__fp_unlock_all>:
10208c58:	008408b4 	movhi	r2,4130
10208c5c:	10bd0604 	addi	r2,r2,-3048
10208c60:	11000017 	ldw	r4,0(r2)
10208c64:	01440874 	movhi	r5,4129
10208c68:	29623604 	addi	r5,r5,-30504
10208c6c:	02095441 	jmpi	10209544 <_fwalk>

10208c70 <_malloc_trim_r>:
10208c70:	defffb04 	addi	sp,sp,-20
10208c74:	dcc00315 	stw	r19,12(sp)
10208c78:	04c408b4 	movhi	r19,4130
10208c7c:	dc800215 	stw	r18,8(sp)
10208c80:	dc400115 	stw	r17,4(sp)
10208c84:	dc000015 	stw	r16,0(sp)
10208c88:	dfc00415 	stw	ra,16(sp)
10208c8c:	2821883a 	mov	r16,r5
10208c90:	9cf6ea04 	addi	r19,r19,-9304
10208c94:	2025883a 	mov	r18,r4
10208c98:	021897c0 	call	1021897c <__malloc_lock>
10208c9c:	98800217 	ldw	r2,8(r19)
10208ca0:	14400117 	ldw	r17,4(r2)
10208ca4:	00bfff04 	movi	r2,-4
10208ca8:	88a2703a 	and	r17,r17,r2
10208cac:	8c21c83a 	sub	r16,r17,r16
10208cb0:	8403fbc4 	addi	r16,r16,4079
10208cb4:	8020d33a 	srli	r16,r16,12
10208cb8:	0083ffc4 	movi	r2,4095
10208cbc:	843fffc4 	addi	r16,r16,-1
10208cc0:	8020933a 	slli	r16,r16,12
10208cc4:	1400060e 	bge	r2,r16,10208ce0 <_malloc_trim_r+0x70>
10208cc8:	9009883a 	mov	r4,r18
10208ccc:	000b883a 	mov	r5,zero
10208cd0:	02030cc0 	call	102030cc <_sbrk_r>
10208cd4:	98c00217 	ldw	r3,8(r19)
10208cd8:	1c47883a 	add	r3,r3,r17
10208cdc:	10c00a26 	beq	r2,r3,10208d08 <_malloc_trim_r+0x98>
10208ce0:	9009883a 	mov	r4,r18
10208ce4:	021899c0 	call	1021899c <__malloc_unlock>
10208ce8:	0005883a 	mov	r2,zero
10208cec:	dfc00417 	ldw	ra,16(sp)
10208cf0:	dcc00317 	ldw	r19,12(sp)
10208cf4:	dc800217 	ldw	r18,8(sp)
10208cf8:	dc400117 	ldw	r17,4(sp)
10208cfc:	dc000017 	ldw	r16,0(sp)
10208d00:	dec00504 	addi	sp,sp,20
10208d04:	f800283a 	ret
10208d08:	9009883a 	mov	r4,r18
10208d0c:	040bc83a 	sub	r5,zero,r16
10208d10:	02030cc0 	call	102030cc <_sbrk_r>
10208d14:	00ffffc4 	movi	r3,-1
10208d18:	10c00d26 	beq	r2,r3,10208d50 <_malloc_trim_r+0xe0>
10208d1c:	00c408b4 	movhi	r3,4130
10208d20:	18c46304 	addi	r3,r3,4492
10208d24:	18800017 	ldw	r2,0(r3)
10208d28:	99000217 	ldw	r4,8(r19)
10208d2c:	8c23c83a 	sub	r17,r17,r16
10208d30:	8c400054 	ori	r17,r17,1
10208d34:	1421c83a 	sub	r16,r2,r16
10208d38:	24400115 	stw	r17,4(r4)
10208d3c:	9009883a 	mov	r4,r18
10208d40:	1c000015 	stw	r16,0(r3)
10208d44:	021899c0 	call	1021899c <__malloc_unlock>
10208d48:	00800044 	movi	r2,1
10208d4c:	003fe706 	br	10208cec <_malloc_trim_r+0x7c>
10208d50:	9009883a 	mov	r4,r18
10208d54:	000b883a 	mov	r5,zero
10208d58:	02030cc0 	call	102030cc <_sbrk_r>
10208d5c:	99000217 	ldw	r4,8(r19)
10208d60:	014003c4 	movi	r5,15
10208d64:	1107c83a 	sub	r3,r2,r4
10208d68:	28ffdd0e 	bge	r5,r3,10208ce0 <_malloc_trim_r+0x70>
10208d6c:	014408b4 	movhi	r5,4130
10208d70:	297d0704 	addi	r5,r5,-3044
10208d74:	29400017 	ldw	r5,0(r5)
10208d78:	18c00054 	ori	r3,r3,1
10208d7c:	20c00115 	stw	r3,4(r4)
10208d80:	00c408b4 	movhi	r3,4130
10208d84:	1145c83a 	sub	r2,r2,r5
10208d88:	18c46304 	addi	r3,r3,4492
10208d8c:	18800015 	stw	r2,0(r3)
10208d90:	003fd306 	br	10208ce0 <_malloc_trim_r+0x70>

10208d94 <_free_r>:
10208d94:	28004c26 	beq	r5,zero,10208ec8 <_free_r+0x134>
10208d98:	defffd04 	addi	sp,sp,-12
10208d9c:	dc400115 	stw	r17,4(sp)
10208da0:	dc000015 	stw	r16,0(sp)
10208da4:	2023883a 	mov	r17,r4
10208da8:	2821883a 	mov	r16,r5
10208dac:	dfc00215 	stw	ra,8(sp)
10208db0:	021897c0 	call	1021897c <__malloc_lock>
10208db4:	813fff17 	ldw	r4,-4(r16)
10208db8:	00bfff84 	movi	r2,-2
10208dbc:	024408b4 	movhi	r9,4130
10208dc0:	81bffe04 	addi	r6,r16,-8
10208dc4:	2084703a 	and	r2,r4,r2
10208dc8:	4a76ea04 	addi	r9,r9,-9304
10208dcc:	308b883a 	add	r5,r6,r2
10208dd0:	2a000117 	ldw	r8,4(r5)
10208dd4:	49c00217 	ldw	r7,8(r9)
10208dd8:	00ffff04 	movi	r3,-4
10208ddc:	40c6703a 	and	r3,r8,r3
10208de0:	39405326 	beq	r7,r5,10208f30 <_free_r+0x19c>
10208de4:	28c00115 	stw	r3,4(r5)
10208de8:	2100004c 	andi	r4,r4,1
10208dec:	2000091e 	bne	r4,zero,10208e14 <_free_r+0x80>
10208df0:	81fffe17 	ldw	r7,-8(r16)
10208df4:	4a000204 	addi	r8,r9,8
10208df8:	31cdc83a 	sub	r6,r6,r7
10208dfc:	31000217 	ldw	r4,8(r6)
10208e00:	11c5883a 	add	r2,r2,r7
10208e04:	22006126 	beq	r4,r8,10208f8c <_free_r+0x1f8>
10208e08:	31c00317 	ldw	r7,12(r6)
10208e0c:	21c00315 	stw	r7,12(r4)
10208e10:	39000215 	stw	r4,8(r7)
10208e14:	28c9883a 	add	r4,r5,r3
10208e18:	21c00117 	ldw	r7,4(r4)
10208e1c:	39c0004c 	andi	r7,r7,1
10208e20:	38000d1e 	bne	r7,zero,10208e58 <_free_r+0xc4>
10208e24:	29000217 	ldw	r4,8(r5)
10208e28:	10c5883a 	add	r2,r2,r3
10208e2c:	00c408b4 	movhi	r3,4130
10208e30:	18f6ec04 	addi	r3,r3,-9296
10208e34:	20c07526 	beq	r4,r3,1020900c <_free_r+0x278>
10208e38:	29c00317 	ldw	r7,12(r5)
10208e3c:	11400054 	ori	r5,r2,1
10208e40:	3087883a 	add	r3,r6,r2
10208e44:	21c00315 	stw	r7,12(r4)
10208e48:	39000215 	stw	r4,8(r7)
10208e4c:	31400115 	stw	r5,4(r6)
10208e50:	18800015 	stw	r2,0(r3)
10208e54:	00000406 	br	10208e68 <_free_r+0xd4>
10208e58:	10c00054 	ori	r3,r2,1
10208e5c:	30c00115 	stw	r3,4(r6)
10208e60:	3087883a 	add	r3,r6,r2
10208e64:	18800015 	stw	r2,0(r3)
10208e68:	00c07fc4 	movi	r3,511
10208e6c:	18801736 	bltu	r3,r2,10208ecc <_free_r+0x138>
10208e70:	1004d0fa 	srli	r2,r2,3
10208e74:	01400044 	movi	r5,1
10208e78:	49000117 	ldw	r4,4(r9)
10208e7c:	1087883a 	add	r3,r2,r2
10208e80:	18c7883a 	add	r3,r3,r3
10208e84:	1005d0ba 	srai	r2,r2,2
10208e88:	18c7883a 	add	r3,r3,r3
10208e8c:	1a47883a 	add	r3,r3,r9
10208e90:	19c00217 	ldw	r7,8(r3)
10208e94:	2884983a 	sll	r2,r5,r2
10208e98:	30c00315 	stw	r3,12(r6)
10208e9c:	31c00215 	stw	r7,8(r6)
10208ea0:	1104b03a 	or	r2,r2,r4
10208ea4:	19800215 	stw	r6,8(r3)
10208ea8:	48800115 	stw	r2,4(r9)
10208eac:	39800315 	stw	r6,12(r7)
10208eb0:	8809883a 	mov	r4,r17
10208eb4:	dfc00217 	ldw	ra,8(sp)
10208eb8:	dc400117 	ldw	r17,4(sp)
10208ebc:	dc000017 	ldw	r16,0(sp)
10208ec0:	dec00304 	addi	sp,sp,12
10208ec4:	021899c1 	jmpi	1021899c <__malloc_unlock>
10208ec8:	f800283a 	ret
10208ecc:	1006d27a 	srli	r3,r2,9
10208ed0:	01000104 	movi	r4,4
10208ed4:	20c04036 	bltu	r4,r3,10208fd8 <_free_r+0x244>
10208ed8:	1006d1ba 	srli	r3,r2,6
10208edc:	19400e04 	addi	r5,r3,56
10208ee0:	2947883a 	add	r3,r5,r5
10208ee4:	18c7883a 	add	r3,r3,r3
10208ee8:	18c7883a 	add	r3,r3,r3
10208eec:	1a49883a 	add	r4,r3,r9
10208ef0:	20c00217 	ldw	r3,8(r4)
10208ef4:	01c408b4 	movhi	r7,4130
10208ef8:	39f6ea04 	addi	r7,r7,-9304
10208efc:	19003b26 	beq	r3,r4,10208fec <_free_r+0x258>
10208f00:	01ffff04 	movi	r7,-4
10208f04:	19400117 	ldw	r5,4(r3)
10208f08:	29ca703a 	and	r5,r5,r7
10208f0c:	1140022e 	bgeu	r2,r5,10208f18 <_free_r+0x184>
10208f10:	18c00217 	ldw	r3,8(r3)
10208f14:	20fffb1e 	bne	r4,r3,10208f04 <_free_r+0x170>
10208f18:	18800317 	ldw	r2,12(r3)
10208f1c:	30800315 	stw	r2,12(r6)
10208f20:	30c00215 	stw	r3,8(r6)
10208f24:	11800215 	stw	r6,8(r2)
10208f28:	19800315 	stw	r6,12(r3)
10208f2c:	003fe006 	br	10208eb0 <_free_r+0x11c>
10208f30:	2100004c 	andi	r4,r4,1
10208f34:	1885883a 	add	r2,r3,r2
10208f38:	2000071e 	bne	r4,zero,10208f58 <_free_r+0x1c4>
10208f3c:	817ffe17 	ldw	r5,-8(r16)
10208f40:	314dc83a 	sub	r6,r6,r5
10208f44:	30c00317 	ldw	r3,12(r6)
10208f48:	31000217 	ldw	r4,8(r6)
10208f4c:	1145883a 	add	r2,r2,r5
10208f50:	20c00315 	stw	r3,12(r4)
10208f54:	19000215 	stw	r4,8(r3)
10208f58:	10c00054 	ori	r3,r2,1
10208f5c:	30c00115 	stw	r3,4(r6)
10208f60:	00c408b4 	movhi	r3,4130
10208f64:	18fd0804 	addi	r3,r3,-3040
10208f68:	18c00017 	ldw	r3,0(r3)
10208f6c:	49800215 	stw	r6,8(r9)
10208f70:	10ffcf36 	bltu	r2,r3,10208eb0 <_free_r+0x11c>
10208f74:	008408b4 	movhi	r2,4130
10208f78:	10845704 	addi	r2,r2,4444
10208f7c:	11400017 	ldw	r5,0(r2)
10208f80:	8809883a 	mov	r4,r17
10208f84:	0208c700 	call	10208c70 <_malloc_trim_r>
10208f88:	003fc906 	br	10208eb0 <_free_r+0x11c>
10208f8c:	28c9883a 	add	r4,r5,r3
10208f90:	21000117 	ldw	r4,4(r4)
10208f94:	2100004c 	andi	r4,r4,1
10208f98:	20000a1e 	bne	r4,zero,10208fc4 <_free_r+0x230>
10208f9c:	29000317 	ldw	r4,12(r5)
10208fa0:	29400217 	ldw	r5,8(r5)
10208fa4:	10c5883a 	add	r2,r2,r3
10208fa8:	10c00054 	ori	r3,r2,1
10208fac:	29000315 	stw	r4,12(r5)
10208fb0:	21400215 	stw	r5,8(r4)
10208fb4:	30c00115 	stw	r3,4(r6)
10208fb8:	308d883a 	add	r6,r6,r2
10208fbc:	30800015 	stw	r2,0(r6)
10208fc0:	003fbb06 	br	10208eb0 <_free_r+0x11c>
10208fc4:	10c00054 	ori	r3,r2,1
10208fc8:	30c00115 	stw	r3,4(r6)
10208fcc:	308d883a 	add	r6,r6,r2
10208fd0:	30800015 	stw	r2,0(r6)
10208fd4:	003fb606 	br	10208eb0 <_free_r+0x11c>
10208fd8:	01000504 	movi	r4,20
10208fdc:	20c01436 	bltu	r4,r3,10209030 <_free_r+0x29c>
10208fe0:	194016c4 	addi	r5,r3,91
10208fe4:	2947883a 	add	r3,r5,r5
10208fe8:	003fbe06 	br	10208ee4 <_free_r+0x150>
10208fec:	280bd0ba 	srai	r5,r5,2
10208ff0:	00800044 	movi	r2,1
10208ff4:	39000117 	ldw	r4,4(r7)
10208ff8:	114a983a 	sll	r5,r2,r5
10208ffc:	1805883a 	mov	r2,r3
10209000:	2908b03a 	or	r4,r5,r4
10209004:	39000115 	stw	r4,4(r7)
10209008:	003fc406 	br	10208f1c <_free_r+0x188>
1020900c:	49800515 	stw	r6,20(r9)
10209010:	49800415 	stw	r6,16(r9)
10209014:	10c00054 	ori	r3,r2,1
10209018:	31000315 	stw	r4,12(r6)
1020901c:	31000215 	stw	r4,8(r6)
10209020:	30c00115 	stw	r3,4(r6)
10209024:	308d883a 	add	r6,r6,r2
10209028:	30800015 	stw	r2,0(r6)
1020902c:	003fa006 	br	10208eb0 <_free_r+0x11c>
10209030:	01001504 	movi	r4,84
10209034:	20c00436 	bltu	r4,r3,10209048 <_free_r+0x2b4>
10209038:	1006d33a 	srli	r3,r2,12
1020903c:	19401b84 	addi	r5,r3,110
10209040:	2947883a 	add	r3,r5,r5
10209044:	003fa706 	br	10208ee4 <_free_r+0x150>
10209048:	01005504 	movi	r4,340
1020904c:	20c00436 	bltu	r4,r3,10209060 <_free_r+0x2cc>
10209050:	1006d3fa 	srli	r3,r2,15
10209054:	19401dc4 	addi	r5,r3,119
10209058:	2947883a 	add	r3,r5,r5
1020905c:	003fa106 	br	10208ee4 <_free_r+0x150>
10209060:	01015504 	movi	r4,1364
10209064:	20c00436 	bltu	r4,r3,10209078 <_free_r+0x2e4>
10209068:	1006d4ba 	srli	r3,r2,18
1020906c:	19401f04 	addi	r5,r3,124
10209070:	2947883a 	add	r3,r5,r5
10209074:	003f9b06 	br	10208ee4 <_free_r+0x150>
10209078:	00c03f04 	movi	r3,252
1020907c:	01401f84 	movi	r5,126
10209080:	003f9806 	br	10208ee4 <_free_r+0x150>

10209084 <__sfvwrite_r>:
10209084:	30800217 	ldw	r2,8(r6)
10209088:	10006726 	beq	r2,zero,10209228 <__sfvwrite_r+0x1a4>
1020908c:	defff404 	addi	sp,sp,-48
10209090:	dd000615 	stw	r20,24(sp)
10209094:	2029883a 	mov	r20,r4
10209098:	2900030b 	ldhu	r4,12(r5)
1020909c:	ddc00915 	stw	r23,36(sp)
102090a0:	dc000215 	stw	r16,8(sp)
102090a4:	dfc00b15 	stw	ra,44(sp)
102090a8:	df000a15 	stw	fp,40(sp)
102090ac:	dd800815 	stw	r22,32(sp)
102090b0:	dd400715 	stw	r21,28(sp)
102090b4:	dcc00515 	stw	r19,20(sp)
102090b8:	dc800415 	stw	r18,16(sp)
102090bc:	dc400315 	stw	r17,12(sp)
102090c0:	2080020c 	andi	r2,r4,8
102090c4:	2821883a 	mov	r16,r5
102090c8:	302f883a 	mov	r23,r6
102090cc:	10002726 	beq	r2,zero,1020916c <__sfvwrite_r+0xe8>
102090d0:	28800417 	ldw	r2,16(r5)
102090d4:	10002526 	beq	r2,zero,1020916c <__sfvwrite_r+0xe8>
102090d8:	2080008c 	andi	r2,r4,2
102090dc:	bc400017 	ldw	r17,0(r23)
102090e0:	10002a26 	beq	r2,zero,1020918c <__sfvwrite_r+0x108>
102090e4:	05600034 	movhi	r21,32768
102090e8:	0027883a 	mov	r19,zero
102090ec:	0025883a 	mov	r18,zero
102090f0:	ad7f0004 	addi	r21,r21,-1024
102090f4:	980d883a 	mov	r6,r19
102090f8:	a009883a 	mov	r4,r20
102090fc:	90004626 	beq	r18,zero,10209218 <__sfvwrite_r+0x194>
10209100:	900f883a 	mov	r7,r18
10209104:	81400717 	ldw	r5,28(r16)
10209108:	ac80022e 	bgeu	r21,r18,10209114 <__sfvwrite_r+0x90>
1020910c:	01e00034 	movhi	r7,32768
10209110:	39ff0004 	addi	r7,r7,-1024
10209114:	80800917 	ldw	r2,36(r16)
10209118:	103ee83a 	callr	r2
1020911c:	0080520e 	bge	zero,r2,10209268 <__sfvwrite_r+0x1e4>
10209120:	b8c00217 	ldw	r3,8(r23)
10209124:	98a7883a 	add	r19,r19,r2
10209128:	90a5c83a 	sub	r18,r18,r2
1020912c:	1885c83a 	sub	r2,r3,r2
10209130:	b8800215 	stw	r2,8(r23)
10209134:	103fef1e 	bne	r2,zero,102090f4 <__sfvwrite_r+0x70>
10209138:	0005883a 	mov	r2,zero
1020913c:	dfc00b17 	ldw	ra,44(sp)
10209140:	df000a17 	ldw	fp,40(sp)
10209144:	ddc00917 	ldw	r23,36(sp)
10209148:	dd800817 	ldw	r22,32(sp)
1020914c:	dd400717 	ldw	r21,28(sp)
10209150:	dd000617 	ldw	r20,24(sp)
10209154:	dcc00517 	ldw	r19,20(sp)
10209158:	dc800417 	ldw	r18,16(sp)
1020915c:	dc400317 	ldw	r17,12(sp)
10209160:	dc000217 	ldw	r16,8(sp)
10209164:	dec00c04 	addi	sp,sp,48
10209168:	f800283a 	ret
1020916c:	a009883a 	mov	r4,r20
10209170:	800b883a 	mov	r5,r16
10209174:	0206b6c0 	call	10206b6c <__swsetup_r>
10209178:	1000ec1e 	bne	r2,zero,1020952c <__sfvwrite_r+0x4a8>
1020917c:	8100030b 	ldhu	r4,12(r16)
10209180:	bc400017 	ldw	r17,0(r23)
10209184:	2080008c 	andi	r2,r4,2
10209188:	103fd61e 	bne	r2,zero,102090e4 <__sfvwrite_r+0x60>
1020918c:	2080004c 	andi	r2,r4,1
10209190:	10003a1e 	bne	r2,zero,1020927c <__sfvwrite_r+0x1f8>
10209194:	0039883a 	mov	fp,zero
10209198:	0025883a 	mov	r18,zero
1020919c:	90001a26 	beq	r18,zero,10209208 <__sfvwrite_r+0x184>
102091a0:	2080800c 	andi	r2,r4,512
102091a4:	85800217 	ldw	r22,8(r16)
102091a8:	10007626 	beq	r2,zero,10209384 <__sfvwrite_r+0x300>
102091ac:	b027883a 	mov	r19,r22
102091b0:	95809436 	bltu	r18,r22,10209404 <__sfvwrite_r+0x380>
102091b4:	2081200c 	andi	r2,r4,1152
102091b8:	10009f1e 	bne	r2,zero,10209438 <__sfvwrite_r+0x3b4>
102091bc:	81000017 	ldw	r4,0(r16)
102091c0:	e00b883a 	mov	r5,fp
102091c4:	980d883a 	mov	r6,r19
102091c8:	0209cfc0 	call	10209cfc <memmove>
102091cc:	81000217 	ldw	r4,8(r16)
102091d0:	81400017 	ldw	r5,0(r16)
102091d4:	9005883a 	mov	r2,r18
102091d8:	2587c83a 	sub	r3,r4,r22
102091dc:	2ce7883a 	add	r19,r5,r19
102091e0:	80c00215 	stw	r3,8(r16)
102091e4:	84c00015 	stw	r19,0(r16)
102091e8:	b8c00217 	ldw	r3,8(r23)
102091ec:	e0b9883a 	add	fp,fp,r2
102091f0:	90a5c83a 	sub	r18,r18,r2
102091f4:	1885c83a 	sub	r2,r3,r2
102091f8:	b8800215 	stw	r2,8(r23)
102091fc:	103fce26 	beq	r2,zero,10209138 <__sfvwrite_r+0xb4>
10209200:	8100030b 	ldhu	r4,12(r16)
10209204:	903fe61e 	bne	r18,zero,102091a0 <__sfvwrite_r+0x11c>
10209208:	8f000017 	ldw	fp,0(r17)
1020920c:	8c800117 	ldw	r18,4(r17)
10209210:	8c400204 	addi	r17,r17,8
10209214:	003fe106 	br	1020919c <__sfvwrite_r+0x118>
10209218:	8cc00017 	ldw	r19,0(r17)
1020921c:	8c800117 	ldw	r18,4(r17)
10209220:	8c400204 	addi	r17,r17,8
10209224:	003fb306 	br	102090f4 <__sfvwrite_r+0x70>
10209228:	0005883a 	mov	r2,zero
1020922c:	f800283a 	ret
10209230:	00a00034 	movhi	r2,32768
10209234:	10bfffc4 	addi	r2,r2,-1
10209238:	9009883a 	mov	r4,r18
1020923c:	1480012e 	bgeu	r2,r18,10209244 <__sfvwrite_r+0x1c0>
10209240:	1009883a 	mov	r4,r2
10209244:	980b883a 	mov	r5,r19
10209248:	02023c40 	call	102023c4 <__divsi3>
1020924c:	81400717 	ldw	r5,28(r16)
10209250:	80c00917 	ldw	r3,36(r16)
10209254:	988f383a 	mul	r7,r19,r2
10209258:	a009883a 	mov	r4,r20
1020925c:	e00d883a 	mov	r6,fp
10209260:	183ee83a 	callr	r3
10209264:	00bfe016 	blt	zero,r2,102091e8 <__sfvwrite_r+0x164>
10209268:	8080030b 	ldhu	r2,12(r16)
1020926c:	10801014 	ori	r2,r2,64
10209270:	8080030d 	sth	r2,12(r16)
10209274:	00bfffc4 	movi	r2,-1
10209278:	003fb006 	br	1020913c <__sfvwrite_r+0xb8>
1020927c:	0027883a 	mov	r19,zero
10209280:	0011883a 	mov	r8,zero
10209284:	0039883a 	mov	fp,zero
10209288:	0025883a 	mov	r18,zero
1020928c:	90001f26 	beq	r18,zero,1020930c <__sfvwrite_r+0x288>
10209290:	40006026 	beq	r8,zero,10209414 <__sfvwrite_r+0x390>
10209294:	982b883a 	mov	r21,r19
10209298:	94c0012e 	bgeu	r18,r19,102092a0 <__sfvwrite_r+0x21c>
1020929c:	902b883a 	mov	r21,r18
102092a0:	81000017 	ldw	r4,0(r16)
102092a4:	80800417 	ldw	r2,16(r16)
102092a8:	a82d883a 	mov	r22,r21
102092ac:	81800217 	ldw	r6,8(r16)
102092b0:	81c00517 	ldw	r7,20(r16)
102092b4:	1100022e 	bgeu	r2,r4,102092c0 <__sfvwrite_r+0x23c>
102092b8:	31c7883a 	add	r3,r6,r7
102092bc:	1d401816 	blt	r3,r21,10209320 <__sfvwrite_r+0x29c>
102092c0:	a9c04416 	blt	r21,r7,102093d4 <__sfvwrite_r+0x350>
102092c4:	80800917 	ldw	r2,36(r16)
102092c8:	81400717 	ldw	r5,28(r16)
102092cc:	a009883a 	mov	r4,r20
102092d0:	da000115 	stw	r8,4(sp)
102092d4:	e00d883a 	mov	r6,fp
102092d8:	103ee83a 	callr	r2
102092dc:	102d883a 	mov	r22,r2
102092e0:	da000117 	ldw	r8,4(sp)
102092e4:	00bfe00e 	bge	zero,r2,10209268 <__sfvwrite_r+0x1e4>
102092e8:	9da7c83a 	sub	r19,r19,r22
102092ec:	98001f26 	beq	r19,zero,1020936c <__sfvwrite_r+0x2e8>
102092f0:	b8800217 	ldw	r2,8(r23)
102092f4:	e5b9883a 	add	fp,fp,r22
102092f8:	95a5c83a 	sub	r18,r18,r22
102092fc:	15adc83a 	sub	r22,r2,r22
10209300:	bd800215 	stw	r22,8(r23)
10209304:	b03f8c26 	beq	r22,zero,10209138 <__sfvwrite_r+0xb4>
10209308:	903fe11e 	bne	r18,zero,10209290 <__sfvwrite_r+0x20c>
1020930c:	8f000017 	ldw	fp,0(r17)
10209310:	8c800117 	ldw	r18,4(r17)
10209314:	0011883a 	mov	r8,zero
10209318:	8c400204 	addi	r17,r17,8
1020931c:	003fdb06 	br	1020928c <__sfvwrite_r+0x208>
10209320:	180d883a 	mov	r6,r3
10209324:	e00b883a 	mov	r5,fp
10209328:	da000115 	stw	r8,4(sp)
1020932c:	d8c00015 	stw	r3,0(sp)
10209330:	0209cfc0 	call	10209cfc <memmove>
10209334:	d8c00017 	ldw	r3,0(sp)
10209338:	80800017 	ldw	r2,0(r16)
1020933c:	a009883a 	mov	r4,r20
10209340:	800b883a 	mov	r5,r16
10209344:	10c5883a 	add	r2,r2,r3
10209348:	80800015 	stw	r2,0(r16)
1020934c:	d8c00015 	stw	r3,0(sp)
10209350:	02088440 	call	10208844 <_fflush_r>
10209354:	d8c00017 	ldw	r3,0(sp)
10209358:	da000117 	ldw	r8,4(sp)
1020935c:	103fc21e 	bne	r2,zero,10209268 <__sfvwrite_r+0x1e4>
10209360:	182d883a 	mov	r22,r3
10209364:	9da7c83a 	sub	r19,r19,r22
10209368:	983fe11e 	bne	r19,zero,102092f0 <__sfvwrite_r+0x26c>
1020936c:	a009883a 	mov	r4,r20
10209370:	800b883a 	mov	r5,r16
10209374:	02088440 	call	10208844 <_fflush_r>
10209378:	103fbb1e 	bne	r2,zero,10209268 <__sfvwrite_r+0x1e4>
1020937c:	0011883a 	mov	r8,zero
10209380:	003fdb06 	br	102092f0 <__sfvwrite_r+0x26c>
10209384:	81000017 	ldw	r4,0(r16)
10209388:	80800417 	ldw	r2,16(r16)
1020938c:	11000236 	bltu	r2,r4,10209398 <__sfvwrite_r+0x314>
10209390:	84c00517 	ldw	r19,20(r16)
10209394:	94ffa62e 	bgeu	r18,r19,10209230 <__sfvwrite_r+0x1ac>
10209398:	9027883a 	mov	r19,r18
1020939c:	b480012e 	bgeu	r22,r18,102093a4 <__sfvwrite_r+0x320>
102093a0:	b027883a 	mov	r19,r22
102093a4:	e00b883a 	mov	r5,fp
102093a8:	980d883a 	mov	r6,r19
102093ac:	0209cfc0 	call	10209cfc <memmove>
102093b0:	80800217 	ldw	r2,8(r16)
102093b4:	80c00017 	ldw	r3,0(r16)
102093b8:	14c5c83a 	sub	r2,r2,r19
102093bc:	1cc7883a 	add	r3,r3,r19
102093c0:	80800215 	stw	r2,8(r16)
102093c4:	80c00015 	stw	r3,0(r16)
102093c8:	10004326 	beq	r2,zero,102094d8 <__sfvwrite_r+0x454>
102093cc:	9805883a 	mov	r2,r19
102093d0:	003f8506 	br	102091e8 <__sfvwrite_r+0x164>
102093d4:	a80d883a 	mov	r6,r21
102093d8:	e00b883a 	mov	r5,fp
102093dc:	da000115 	stw	r8,4(sp)
102093e0:	0209cfc0 	call	10209cfc <memmove>
102093e4:	80800217 	ldw	r2,8(r16)
102093e8:	80c00017 	ldw	r3,0(r16)
102093ec:	da000117 	ldw	r8,4(sp)
102093f0:	1545c83a 	sub	r2,r2,r21
102093f4:	1d6b883a 	add	r21,r3,r21
102093f8:	80800215 	stw	r2,8(r16)
102093fc:	85400015 	stw	r21,0(r16)
10209400:	003fb906 	br	102092e8 <__sfvwrite_r+0x264>
10209404:	81000017 	ldw	r4,0(r16)
10209408:	902d883a 	mov	r22,r18
1020940c:	9027883a 	mov	r19,r18
10209410:	003f6b06 	br	102091c0 <__sfvwrite_r+0x13c>
10209414:	e009883a 	mov	r4,fp
10209418:	01400284 	movi	r5,10
1020941c:	900d883a 	mov	r6,r18
10209420:	0209c140 	call	10209c14 <memchr>
10209424:	10003e26 	beq	r2,zero,10209520 <__sfvwrite_r+0x49c>
10209428:	10800044 	addi	r2,r2,1
1020942c:	1727c83a 	sub	r19,r2,fp
10209430:	02000044 	movi	r8,1
10209434:	003f9706 	br	10209294 <__sfvwrite_r+0x210>
10209438:	80800517 	ldw	r2,20(r16)
1020943c:	81400417 	ldw	r5,16(r16)
10209440:	80c00017 	ldw	r3,0(r16)
10209444:	10a7883a 	add	r19,r2,r2
10209448:	9885883a 	add	r2,r19,r2
1020944c:	1026d7fa 	srli	r19,r2,31
10209450:	196bc83a 	sub	r21,r3,r5
10209454:	a9800044 	addi	r6,r21,1
10209458:	9885883a 	add	r2,r19,r2
1020945c:	1027d07a 	srai	r19,r2,1
10209460:	3485883a 	add	r2,r6,r18
10209464:	980d883a 	mov	r6,r19
10209468:	9880022e 	bgeu	r19,r2,10209474 <__sfvwrite_r+0x3f0>
1020946c:	1027883a 	mov	r19,r2
10209470:	100d883a 	mov	r6,r2
10209474:	2101000c 	andi	r4,r4,1024
10209478:	20001c26 	beq	r4,zero,102094ec <__sfvwrite_r+0x468>
1020947c:	a009883a 	mov	r4,r20
10209480:	300b883a 	mov	r5,r6
10209484:	02025a40 	call	102025a4 <_malloc_r>
10209488:	102d883a 	mov	r22,r2
1020948c:	10002926 	beq	r2,zero,10209534 <__sfvwrite_r+0x4b0>
10209490:	81400417 	ldw	r5,16(r16)
10209494:	1009883a 	mov	r4,r2
10209498:	a80d883a 	mov	r6,r21
1020949c:	0202dc80 	call	10202dc8 <memcpy>
102094a0:	8080030b 	ldhu	r2,12(r16)
102094a4:	00fedfc4 	movi	r3,-1153
102094a8:	10c4703a 	and	r2,r2,r3
102094ac:	10802014 	ori	r2,r2,128
102094b0:	8080030d 	sth	r2,12(r16)
102094b4:	b549883a 	add	r4,r22,r21
102094b8:	9d4bc83a 	sub	r5,r19,r21
102094bc:	85800415 	stw	r22,16(r16)
102094c0:	84c00515 	stw	r19,20(r16)
102094c4:	81000015 	stw	r4,0(r16)
102094c8:	902d883a 	mov	r22,r18
102094cc:	81400215 	stw	r5,8(r16)
102094d0:	9027883a 	mov	r19,r18
102094d4:	003f3a06 	br	102091c0 <__sfvwrite_r+0x13c>
102094d8:	a009883a 	mov	r4,r20
102094dc:	800b883a 	mov	r5,r16
102094e0:	02088440 	call	10208844 <_fflush_r>
102094e4:	103fb926 	beq	r2,zero,102093cc <__sfvwrite_r+0x348>
102094e8:	003f5f06 	br	10209268 <__sfvwrite_r+0x1e4>
102094ec:	a009883a 	mov	r4,r20
102094f0:	020b0e40 	call	1020b0e4 <_realloc_r>
102094f4:	102d883a 	mov	r22,r2
102094f8:	103fee1e 	bne	r2,zero,102094b4 <__sfvwrite_r+0x430>
102094fc:	81400417 	ldw	r5,16(r16)
10209500:	a009883a 	mov	r4,r20
10209504:	0208d940 	call	10208d94 <_free_r>
10209508:	8080030b 	ldhu	r2,12(r16)
1020950c:	00ffdfc4 	movi	r3,-129
10209510:	1884703a 	and	r2,r3,r2
10209514:	00c00304 	movi	r3,12
10209518:	a0c00015 	stw	r3,0(r20)
1020951c:	003f5306 	br	1020926c <__sfvwrite_r+0x1e8>
10209520:	94c00044 	addi	r19,r18,1
10209524:	02000044 	movi	r8,1
10209528:	003f5a06 	br	10209294 <__sfvwrite_r+0x210>
1020952c:	00bfffc4 	movi	r2,-1
10209530:	003f0206 	br	1020913c <__sfvwrite_r+0xb8>
10209534:	00800304 	movi	r2,12
10209538:	a0800015 	stw	r2,0(r20)
1020953c:	8080030b 	ldhu	r2,12(r16)
10209540:	003f4a06 	br	1020926c <__sfvwrite_r+0x1e8>

10209544 <_fwalk>:
10209544:	defff704 	addi	sp,sp,-36
10209548:	dd000415 	stw	r20,16(sp)
1020954c:	dfc00815 	stw	ra,32(sp)
10209550:	ddc00715 	stw	r23,28(sp)
10209554:	dd800615 	stw	r22,24(sp)
10209558:	dd400515 	stw	r21,20(sp)
1020955c:	dcc00315 	stw	r19,12(sp)
10209560:	dc800215 	stw	r18,8(sp)
10209564:	dc400115 	stw	r17,4(sp)
10209568:	dc000015 	stw	r16,0(sp)
1020956c:	2500b804 	addi	r20,r4,736
10209570:	a0002326 	beq	r20,zero,10209600 <_fwalk+0xbc>
10209574:	282b883a 	mov	r21,r5
10209578:	002f883a 	mov	r23,zero
1020957c:	05800044 	movi	r22,1
10209580:	04ffffc4 	movi	r19,-1
10209584:	a4400117 	ldw	r17,4(r20)
10209588:	a4800217 	ldw	r18,8(r20)
1020958c:	8c7fffc4 	addi	r17,r17,-1
10209590:	88000d16 	blt	r17,zero,102095c8 <_fwalk+0x84>
10209594:	94000304 	addi	r16,r18,12
10209598:	94800384 	addi	r18,r18,14
1020959c:	80c0000b 	ldhu	r3,0(r16)
102095a0:	8c7fffc4 	addi	r17,r17,-1
102095a4:	813ffd04 	addi	r4,r16,-12
102095a8:	b0c0042e 	bgeu	r22,r3,102095bc <_fwalk+0x78>
102095ac:	90c0000f 	ldh	r3,0(r18)
102095b0:	1cc00226 	beq	r3,r19,102095bc <_fwalk+0x78>
102095b4:	a83ee83a 	callr	r21
102095b8:	b8aeb03a 	or	r23,r23,r2
102095bc:	84001a04 	addi	r16,r16,104
102095c0:	94801a04 	addi	r18,r18,104
102095c4:	8cfff51e 	bne	r17,r19,1020959c <_fwalk+0x58>
102095c8:	a5000017 	ldw	r20,0(r20)
102095cc:	a03fed1e 	bne	r20,zero,10209584 <_fwalk+0x40>
102095d0:	b805883a 	mov	r2,r23
102095d4:	dfc00817 	ldw	ra,32(sp)
102095d8:	ddc00717 	ldw	r23,28(sp)
102095dc:	dd800617 	ldw	r22,24(sp)
102095e0:	dd400517 	ldw	r21,20(sp)
102095e4:	dd000417 	ldw	r20,16(sp)
102095e8:	dcc00317 	ldw	r19,12(sp)
102095ec:	dc800217 	ldw	r18,8(sp)
102095f0:	dc400117 	ldw	r17,4(sp)
102095f4:	dc000017 	ldw	r16,0(sp)
102095f8:	dec00904 	addi	sp,sp,36
102095fc:	f800283a 	ret
10209600:	002f883a 	mov	r23,zero
10209604:	003ff206 	br	102095d0 <_fwalk+0x8c>

10209608 <_fwalk_reent>:
10209608:	defff704 	addi	sp,sp,-36
1020960c:	dd400515 	stw	r21,20(sp)
10209610:	dfc00815 	stw	ra,32(sp)
10209614:	ddc00715 	stw	r23,28(sp)
10209618:	dd800615 	stw	r22,24(sp)
1020961c:	dd000415 	stw	r20,16(sp)
10209620:	dcc00315 	stw	r19,12(sp)
10209624:	dc800215 	stw	r18,8(sp)
10209628:	dc400115 	stw	r17,4(sp)
1020962c:	dc000015 	stw	r16,0(sp)
10209630:	2540b804 	addi	r21,r4,736
10209634:	a8002326 	beq	r21,zero,102096c4 <_fwalk_reent+0xbc>
10209638:	2829883a 	mov	r20,r5
1020963c:	202d883a 	mov	r22,r4
10209640:	002f883a 	mov	r23,zero
10209644:	04c00044 	movi	r19,1
10209648:	04bfffc4 	movi	r18,-1
1020964c:	ac400117 	ldw	r17,4(r21)
10209650:	ac000217 	ldw	r16,8(r21)
10209654:	8c7fffc4 	addi	r17,r17,-1
10209658:	88000c16 	blt	r17,zero,1020968c <_fwalk_reent+0x84>
1020965c:	84000304 	addi	r16,r16,12
10209660:	80c0000b 	ldhu	r3,0(r16)
10209664:	8c7fffc4 	addi	r17,r17,-1
10209668:	817ffd04 	addi	r5,r16,-12
1020966c:	98c0052e 	bgeu	r19,r3,10209684 <_fwalk_reent+0x7c>
10209670:	80c0008f 	ldh	r3,2(r16)
10209674:	b009883a 	mov	r4,r22
10209678:	1c800226 	beq	r3,r18,10209684 <_fwalk_reent+0x7c>
1020967c:	a03ee83a 	callr	r20
10209680:	b8aeb03a 	or	r23,r23,r2
10209684:	84001a04 	addi	r16,r16,104
10209688:	8cbff51e 	bne	r17,r18,10209660 <_fwalk_reent+0x58>
1020968c:	ad400017 	ldw	r21,0(r21)
10209690:	a83fee1e 	bne	r21,zero,1020964c <_fwalk_reent+0x44>
10209694:	b805883a 	mov	r2,r23
10209698:	dfc00817 	ldw	ra,32(sp)
1020969c:	ddc00717 	ldw	r23,28(sp)
102096a0:	dd800617 	ldw	r22,24(sp)
102096a4:	dd400517 	ldw	r21,20(sp)
102096a8:	dd000417 	ldw	r20,16(sp)
102096ac:	dcc00317 	ldw	r19,12(sp)
102096b0:	dc800217 	ldw	r18,8(sp)
102096b4:	dc400117 	ldw	r17,4(sp)
102096b8:	dc000017 	ldw	r16,0(sp)
102096bc:	dec00904 	addi	sp,sp,36
102096c0:	f800283a 	ret
102096c4:	002f883a 	mov	r23,zero
102096c8:	003ff206 	br	10209694 <_fwalk_reent+0x8c>

102096cc <iswspace>:
102096cc:	00803fc4 	movi	r2,255
102096d0:	11000836 	bltu	r2,r4,102096f4 <iswspace+0x28>
102096d4:	008408b4 	movhi	r2,4130
102096d8:	10bd0904 	addi	r2,r2,-3036
102096dc:	10800017 	ldw	r2,0(r2)
102096e0:	1109883a 	add	r4,r2,r4
102096e4:	20800043 	ldbu	r2,1(r4)
102096e8:	1080020c 	andi	r2,r2,8
102096ec:	10803fcc 	andi	r2,r2,255
102096f0:	f800283a 	ret
102096f4:	0005883a 	mov	r2,zero
102096f8:	f800283a 	ret

102096fc <_setlocale_r>:
102096fc:	30001b26 	beq	r6,zero,1020976c <_setlocale_r+0x70>
10209700:	014408b4 	movhi	r5,4130
10209704:	defffe04 	addi	sp,sp,-8
10209708:	2974cd04 	addi	r5,r5,-11468
1020970c:	3009883a 	mov	r4,r6
10209710:	dc000015 	stw	r16,0(sp)
10209714:	dfc00115 	stw	ra,4(sp)
10209718:	3021883a 	mov	r16,r6
1020971c:	020ba3c0 	call	1020ba3c <strcmp>
10209720:	1000061e 	bne	r2,zero,1020973c <_setlocale_r+0x40>
10209724:	008408b4 	movhi	r2,4130
10209728:	10b40404 	addi	r2,r2,-12272
1020972c:	dfc00117 	ldw	ra,4(sp)
10209730:	dc000017 	ldw	r16,0(sp)
10209734:	dec00204 	addi	sp,sp,8
10209738:	f800283a 	ret
1020973c:	014408b4 	movhi	r5,4130
10209740:	29740404 	addi	r5,r5,-12272
10209744:	8009883a 	mov	r4,r16
10209748:	020ba3c0 	call	1020ba3c <strcmp>
1020974c:	103ff526 	beq	r2,zero,10209724 <_setlocale_r+0x28>
10209750:	014408b4 	movhi	r5,4130
10209754:	29741804 	addi	r5,r5,-12192
10209758:	8009883a 	mov	r4,r16
1020975c:	020ba3c0 	call	1020ba3c <strcmp>
10209760:	103ff026 	beq	r2,zero,10209724 <_setlocale_r+0x28>
10209764:	0005883a 	mov	r2,zero
10209768:	003ff006 	br	1020972c <_setlocale_r+0x30>
1020976c:	008408b4 	movhi	r2,4130
10209770:	10b40404 	addi	r2,r2,-12272
10209774:	f800283a 	ret

10209778 <__locale_charset>:
10209778:	008408b4 	movhi	r2,4130
1020977c:	10b7f404 	addi	r2,r2,-8240
10209780:	f800283a 	ret

10209784 <__locale_mb_cur_max>:
10209784:	008408b4 	movhi	r2,4130
10209788:	10bd0a04 	addi	r2,r2,-3032
1020978c:	10800017 	ldw	r2,0(r2)
10209790:	f800283a 	ret

10209794 <__locale_msgcharset>:
10209794:	008408b4 	movhi	r2,4130
10209798:	10b7ec04 	addi	r2,r2,-8272
1020979c:	f800283a 	ret

102097a0 <__locale_cjk_lang>:
102097a0:	0005883a 	mov	r2,zero
102097a4:	f800283a 	ret

102097a8 <_localeconv_r>:
102097a8:	008408b4 	movhi	r2,4130
102097ac:	10b7fc04 	addi	r2,r2,-8208
102097b0:	f800283a 	ret

102097b4 <setlocale>:
102097b4:	00c408b4 	movhi	r3,4130
102097b8:	18fd0604 	addi	r3,r3,-3048
102097bc:	2005883a 	mov	r2,r4
102097c0:	19000017 	ldw	r4,0(r3)
102097c4:	280d883a 	mov	r6,r5
102097c8:	100b883a 	mov	r5,r2
102097cc:	02096fc1 	jmpi	102096fc <_setlocale_r>

102097d0 <localeconv>:
102097d0:	008408b4 	movhi	r2,4130
102097d4:	10b7fc04 	addi	r2,r2,-8208
102097d8:	f800283a 	ret

102097dc <_lseek_r>:
102097dc:	defffd04 	addi	sp,sp,-12
102097e0:	dc000015 	stw	r16,0(sp)
102097e4:	040408b4 	movhi	r16,4130
102097e8:	dc400115 	stw	r17,4(sp)
102097ec:	84045804 	addi	r16,r16,4448
102097f0:	2023883a 	mov	r17,r4
102097f4:	2809883a 	mov	r4,r5
102097f8:	300b883a 	mov	r5,r6
102097fc:	380d883a 	mov	r6,r7
10209800:	dfc00215 	stw	ra,8(sp)
10209804:	80000015 	stw	zero,0(r16)
10209808:	02188300 	call	10218830 <lseek>
1020980c:	00ffffc4 	movi	r3,-1
10209810:	10c00526 	beq	r2,r3,10209828 <_lseek_r+0x4c>
10209814:	dfc00217 	ldw	ra,8(sp)
10209818:	dc400117 	ldw	r17,4(sp)
1020981c:	dc000017 	ldw	r16,0(sp)
10209820:	dec00304 	addi	sp,sp,12
10209824:	f800283a 	ret
10209828:	80c00017 	ldw	r3,0(r16)
1020982c:	183ff926 	beq	r3,zero,10209814 <_lseek_r+0x38>
10209830:	88c00015 	stw	r3,0(r17)
10209834:	003ff706 	br	10209814 <_lseek_r+0x38>

10209838 <__smakebuf_r>:
10209838:	2880030b 	ldhu	r2,12(r5)
1020983c:	10c0008c 	andi	r3,r2,2
10209840:	1800401e 	bne	r3,zero,10209944 <__smakebuf_r+0x10c>
10209844:	deffec04 	addi	sp,sp,-80
10209848:	dc000f15 	stw	r16,60(sp)
1020984c:	2821883a 	mov	r16,r5
10209850:	2940038f 	ldh	r5,14(r5)
10209854:	dc401015 	stw	r17,64(sp)
10209858:	dfc01315 	stw	ra,76(sp)
1020985c:	dcc01215 	stw	r19,72(sp)
10209860:	dc801115 	stw	r18,68(sp)
10209864:	2023883a 	mov	r17,r4
10209868:	28001b16 	blt	r5,zero,102098d8 <__smakebuf_r+0xa0>
1020986c:	d80d883a 	mov	r6,sp
10209870:	0212bf80 	call	10212bf8 <_fstat_r>
10209874:	10001716 	blt	r2,zero,102098d4 <__smakebuf_r+0x9c>
10209878:	d8800117 	ldw	r2,4(sp)
1020987c:	00e00014 	movui	r3,32768
10209880:	10bc000c 	andi	r2,r2,61440
10209884:	10c03726 	beq	r2,r3,10209964 <__smakebuf_r+0x12c>
10209888:	80c0030b 	ldhu	r3,12(r16)
1020988c:	18c20014 	ori	r3,r3,2048
10209890:	80c0030d 	sth	r3,12(r16)
10209894:	00c80004 	movi	r3,8192
10209898:	10c03c1e 	bne	r2,r3,1020998c <__smakebuf_r+0x154>
1020989c:	8140038f 	ldh	r5,14(r16)
102098a0:	8809883a 	mov	r4,r17
102098a4:	02137f00 	call	102137f0 <_isatty_r>
102098a8:	10004e26 	beq	r2,zero,102099e4 <__smakebuf_r+0x1ac>
102098ac:	8080030b 	ldhu	r2,12(r16)
102098b0:	04c00044 	movi	r19,1
102098b4:	80c010c4 	addi	r3,r16,67
102098b8:	14c4b03a 	or	r2,r2,r19
102098bc:	8080030d 	sth	r2,12(r16)
102098c0:	80c00015 	stw	r3,0(r16)
102098c4:	80c00415 	stw	r3,16(r16)
102098c8:	84c00515 	stw	r19,20(r16)
102098cc:	04810004 	movi	r18,1024
102098d0:	00000706 	br	102098f0 <__smakebuf_r+0xb8>
102098d4:	8080030b 	ldhu	r2,12(r16)
102098d8:	10c0200c 	andi	r3,r2,128
102098dc:	18001f1e 	bne	r3,zero,1020995c <__smakebuf_r+0x124>
102098e0:	04810004 	movi	r18,1024
102098e4:	10820014 	ori	r2,r2,2048
102098e8:	8080030d 	sth	r2,12(r16)
102098ec:	0027883a 	mov	r19,zero
102098f0:	8809883a 	mov	r4,r17
102098f4:	900b883a 	mov	r5,r18
102098f8:	02025a40 	call	102025a4 <_malloc_r>
102098fc:	10002e26 	beq	r2,zero,102099b8 <__smakebuf_r+0x180>
10209900:	80c0030b 	ldhu	r3,12(r16)
10209904:	01040874 	movhi	r4,4129
10209908:	21223804 	addi	r4,r4,-30496
1020990c:	89000f15 	stw	r4,60(r17)
10209910:	18c02014 	ori	r3,r3,128
10209914:	80c0030d 	sth	r3,12(r16)
10209918:	80800015 	stw	r2,0(r16)
1020991c:	80800415 	stw	r2,16(r16)
10209920:	84800515 	stw	r18,20(r16)
10209924:	98001c1e 	bne	r19,zero,10209998 <__smakebuf_r+0x160>
10209928:	dfc01317 	ldw	ra,76(sp)
1020992c:	dcc01217 	ldw	r19,72(sp)
10209930:	dc801117 	ldw	r18,68(sp)
10209934:	dc401017 	ldw	r17,64(sp)
10209938:	dc000f17 	ldw	r16,60(sp)
1020993c:	dec01404 	addi	sp,sp,80
10209940:	f800283a 	ret
10209944:	288010c4 	addi	r2,r5,67
10209948:	28800015 	stw	r2,0(r5)
1020994c:	28800415 	stw	r2,16(r5)
10209950:	00800044 	movi	r2,1
10209954:	28800515 	stw	r2,20(r5)
10209958:	f800283a 	ret
1020995c:	04801004 	movi	r18,64
10209960:	003fe006 	br	102098e4 <__smakebuf_r+0xac>
10209964:	81000a17 	ldw	r4,40(r16)
10209968:	00c40834 	movhi	r3,4128
1020996c:	18ccbb04 	addi	r3,r3,13036
10209970:	20ffc51e 	bne	r4,r3,10209888 <__smakebuf_r+0x50>
10209974:	80c0030b 	ldhu	r3,12(r16)
10209978:	01010004 	movi	r4,1024
1020997c:	81001315 	stw	r4,76(r16)
10209980:	1906b03a 	or	r3,r3,r4
10209984:	80c0030d 	sth	r3,12(r16)
10209988:	003fc206 	br	10209894 <__smakebuf_r+0x5c>
1020998c:	0027883a 	mov	r19,zero
10209990:	04810004 	movi	r18,1024
10209994:	003fd606 	br	102098f0 <__smakebuf_r+0xb8>
10209998:	8140038f 	ldh	r5,14(r16)
1020999c:	8809883a 	mov	r4,r17
102099a0:	02137f00 	call	102137f0 <_isatty_r>
102099a4:	103fe026 	beq	r2,zero,10209928 <__smakebuf_r+0xf0>
102099a8:	8080030b 	ldhu	r2,12(r16)
102099ac:	10800054 	ori	r2,r2,1
102099b0:	8080030d 	sth	r2,12(r16)
102099b4:	003fdc06 	br	10209928 <__smakebuf_r+0xf0>
102099b8:	8080030b 	ldhu	r2,12(r16)
102099bc:	10c0800c 	andi	r3,r2,512
102099c0:	183fd91e 	bne	r3,zero,10209928 <__smakebuf_r+0xf0>
102099c4:	10800094 	ori	r2,r2,2
102099c8:	80c010c4 	addi	r3,r16,67
102099cc:	8080030d 	sth	r2,12(r16)
102099d0:	00800044 	movi	r2,1
102099d4:	80c00015 	stw	r3,0(r16)
102099d8:	80c00415 	stw	r3,16(r16)
102099dc:	80800515 	stw	r2,20(r16)
102099e0:	003fd106 	br	10209928 <__smakebuf_r+0xf0>
102099e4:	04c00044 	movi	r19,1
102099e8:	04810004 	movi	r18,1024
102099ec:	003fc006 	br	102098f0 <__smakebuf_r+0xb8>

102099f0 <_mbrtowc_r>:
102099f0:	defff704 	addi	sp,sp,-36
102099f4:	008408b4 	movhi	r2,4130
102099f8:	dc800715 	stw	r18,28(sp)
102099fc:	dc400615 	stw	r17,24(sp)
10209a00:	dc000515 	stw	r16,20(sp)
10209a04:	10bd0b04 	addi	r2,r2,-3028
10209a08:	dfc00815 	stw	ra,32(sp)
10209a0c:	2021883a 	mov	r16,r4
10209a10:	dc400917 	ldw	r17,36(sp)
10209a14:	14800017 	ldw	r18,0(r2)
10209a18:	30001626 	beq	r6,zero,10209a74 <_mbrtowc_r+0x84>
10209a1c:	d9400215 	stw	r5,8(sp)
10209a20:	d9800315 	stw	r6,12(sp)
10209a24:	d9c00415 	stw	r7,16(sp)
10209a28:	02097780 	call	10209778 <__locale_charset>
10209a2c:	d9400217 	ldw	r5,8(sp)
10209a30:	d9800317 	ldw	r6,12(sp)
10209a34:	d9c00417 	ldw	r7,16(sp)
10209a38:	d8800015 	stw	r2,0(sp)
10209a3c:	dc400115 	stw	r17,4(sp)
10209a40:	8009883a 	mov	r4,r16
10209a44:	903ee83a 	callr	r18
10209a48:	00ffffc4 	movi	r3,-1
10209a4c:	10c0031e 	bne	r2,r3,10209a5c <_mbrtowc_r+0x6c>
10209a50:	88000015 	stw	zero,0(r17)
10209a54:	00c02284 	movi	r3,138
10209a58:	80c00015 	stw	r3,0(r16)
10209a5c:	dfc00817 	ldw	ra,32(sp)
10209a60:	dc800717 	ldw	r18,28(sp)
10209a64:	dc400617 	ldw	r17,24(sp)
10209a68:	dc000517 	ldw	r16,20(sp)
10209a6c:	dec00904 	addi	sp,sp,36
10209a70:	f800283a 	ret
10209a74:	02097780 	call	10209778 <__locale_charset>
10209a78:	018408b4 	movhi	r6,4130
10209a7c:	31b41804 	addi	r6,r6,-12192
10209a80:	d8800015 	stw	r2,0(sp)
10209a84:	dc400115 	stw	r17,4(sp)
10209a88:	8009883a 	mov	r4,r16
10209a8c:	000b883a 	mov	r5,zero
10209a90:	01c00044 	movi	r7,1
10209a94:	903ee83a 	callr	r18
10209a98:	003feb06 	br	10209a48 <_mbrtowc_r+0x58>

10209a9c <mbrtowc>:
10209a9c:	defff704 	addi	sp,sp,-36
10209aa0:	008408b4 	movhi	r2,4130
10209aa4:	dc800415 	stw	r18,16(sp)
10209aa8:	dc400315 	stw	r17,12(sp)
10209aac:	dc000215 	stw	r16,8(sp)
10209ab0:	10bd0604 	addi	r2,r2,-3048
10209ab4:	dfc00815 	stw	ra,32(sp)
10209ab8:	dd400715 	stw	r21,28(sp)
10209abc:	dd000615 	stw	r20,24(sp)
10209ac0:	dcc00515 	stw	r19,20(sp)
10209ac4:	2821883a 	mov	r16,r5
10209ac8:	3825883a 	mov	r18,r7
10209acc:	14400017 	ldw	r17,0(r2)
10209ad0:	28001b26 	beq	r5,zero,10209b40 <mbrtowc+0xa4>
10209ad4:	008408b4 	movhi	r2,4130
10209ad8:	10bd0b04 	addi	r2,r2,-3028
10209adc:	15400017 	ldw	r21,0(r2)
10209ae0:	2029883a 	mov	r20,r4
10209ae4:	3027883a 	mov	r19,r6
10209ae8:	02097780 	call	10209778 <__locale_charset>
10209aec:	d8800015 	stw	r2,0(sp)
10209af0:	dc800115 	stw	r18,4(sp)
10209af4:	8809883a 	mov	r4,r17
10209af8:	a00b883a 	mov	r5,r20
10209afc:	800d883a 	mov	r6,r16
10209b00:	980f883a 	mov	r7,r19
10209b04:	a83ee83a 	callr	r21
10209b08:	00ffffc4 	movi	r3,-1
10209b0c:	10c0031e 	bne	r2,r3,10209b1c <mbrtowc+0x80>
10209b10:	90000015 	stw	zero,0(r18)
10209b14:	00c02284 	movi	r3,138
10209b18:	88c00015 	stw	r3,0(r17)
10209b1c:	dfc00817 	ldw	ra,32(sp)
10209b20:	dd400717 	ldw	r21,28(sp)
10209b24:	dd000617 	ldw	r20,24(sp)
10209b28:	dcc00517 	ldw	r19,20(sp)
10209b2c:	dc800417 	ldw	r18,16(sp)
10209b30:	dc400317 	ldw	r17,12(sp)
10209b34:	dc000217 	ldw	r16,8(sp)
10209b38:	dec00904 	addi	sp,sp,36
10209b3c:	f800283a 	ret
10209b40:	008408b4 	movhi	r2,4130
10209b44:	10bd0b04 	addi	r2,r2,-3028
10209b48:	14000017 	ldw	r16,0(r2)
10209b4c:	02097780 	call	10209778 <__locale_charset>
10209b50:	018408b4 	movhi	r6,4130
10209b54:	31b41804 	addi	r6,r6,-12192
10209b58:	d8800015 	stw	r2,0(sp)
10209b5c:	dc800115 	stw	r18,4(sp)
10209b60:	8809883a 	mov	r4,r17
10209b64:	000b883a 	mov	r5,zero
10209b68:	01c00044 	movi	r7,1
10209b6c:	803ee83a 	callr	r16
10209b70:	003fe506 	br	10209b08 <mbrtowc+0x6c>

10209b74 <__ascii_mbtowc>:
10209b74:	deffff04 	addi	sp,sp,-4
10209b78:	28000826 	beq	r5,zero,10209b9c <__ascii_mbtowc+0x28>
10209b7c:	30000926 	beq	r6,zero,10209ba4 <__ascii_mbtowc+0x30>
10209b80:	38000b26 	beq	r7,zero,10209bb0 <__ascii_mbtowc+0x3c>
10209b84:	30800003 	ldbu	r2,0(r6)
10209b88:	28800015 	stw	r2,0(r5)
10209b8c:	30800003 	ldbu	r2,0(r6)
10209b90:	1004c03a 	cmpne	r2,r2,zero
10209b94:	dec00104 	addi	sp,sp,4
10209b98:	f800283a 	ret
10209b9c:	d80b883a 	mov	r5,sp
10209ba0:	303ff71e 	bne	r6,zero,10209b80 <__ascii_mbtowc+0xc>
10209ba4:	0005883a 	mov	r2,zero
10209ba8:	dec00104 	addi	sp,sp,4
10209bac:	f800283a 	ret
10209bb0:	00bfff84 	movi	r2,-2
10209bb4:	003ff706 	br	10209b94 <__ascii_mbtowc+0x20>

10209bb8 <_mbtowc_r>:
10209bb8:	008408b4 	movhi	r2,4130
10209bbc:	defff804 	addi	sp,sp,-32
10209bc0:	10bd0b04 	addi	r2,r2,-3028
10209bc4:	dfc00715 	stw	ra,28(sp)
10209bc8:	dc000615 	stw	r16,24(sp)
10209bcc:	14000017 	ldw	r16,0(r2)
10209bd0:	d9000215 	stw	r4,8(sp)
10209bd4:	d9400315 	stw	r5,12(sp)
10209bd8:	d9800415 	stw	r6,16(sp)
10209bdc:	d9c00515 	stw	r7,20(sp)
10209be0:	02097780 	call	10209778 <__locale_charset>
10209be4:	d8800015 	stw	r2,0(sp)
10209be8:	d8800817 	ldw	r2,32(sp)
10209bec:	d9000217 	ldw	r4,8(sp)
10209bf0:	d9400317 	ldw	r5,12(sp)
10209bf4:	d9800417 	ldw	r6,16(sp)
10209bf8:	d9c00517 	ldw	r7,20(sp)
10209bfc:	d8800115 	stw	r2,4(sp)
10209c00:	803ee83a 	callr	r16
10209c04:	dfc00717 	ldw	ra,28(sp)
10209c08:	dc000617 	ldw	r16,24(sp)
10209c0c:	dec00804 	addi	sp,sp,32
10209c10:	f800283a 	ret

10209c14 <memchr>:
10209c14:	208000cc 	andi	r2,r4,3
10209c18:	280f883a 	mov	r7,r5
10209c1c:	10003526 	beq	r2,zero,10209cf4 <memchr+0xe0>
10209c20:	30bfffc4 	addi	r2,r6,-1
10209c24:	30001b26 	beq	r6,zero,10209c94 <memchr+0x80>
10209c28:	21800003 	ldbu	r6,0(r4)
10209c2c:	28c03fcc 	andi	r3,r5,255
10209c30:	30c01a26 	beq	r6,r3,10209c9c <memchr+0x88>
10209c34:	180d883a 	mov	r6,r3
10209c38:	00000406 	br	10209c4c <memchr+0x38>
10209c3c:	10001526 	beq	r2,zero,10209c94 <memchr+0x80>
10209c40:	20c00003 	ldbu	r3,0(r4)
10209c44:	10bfffc4 	addi	r2,r2,-1
10209c48:	19801426 	beq	r3,r6,10209c9c <memchr+0x88>
10209c4c:	21000044 	addi	r4,r4,1
10209c50:	20c000cc 	andi	r3,r4,3
10209c54:	183ff91e 	bne	r3,zero,10209c3c <memchr+0x28>
10209c58:	024000c4 	movi	r9,3
10209c5c:	48801136 	bltu	r9,r2,10209ca4 <memchr+0x90>
10209c60:	10000c26 	beq	r2,zero,10209c94 <memchr+0x80>
10209c64:	20c00003 	ldbu	r3,0(r4)
10209c68:	29403fcc 	andi	r5,r5,255
10209c6c:	19400b26 	beq	r3,r5,10209c9c <memchr+0x88>
10209c70:	20c00044 	addi	r3,r4,1
10209c74:	2085883a 	add	r2,r4,r2
10209c78:	39803fcc 	andi	r6,r7,255
10209c7c:	00000306 	br	10209c8c <memchr+0x78>
10209c80:	18c00044 	addi	r3,r3,1
10209c84:	197fffc3 	ldbu	r5,-1(r3)
10209c88:	29800426 	beq	r5,r6,10209c9c <memchr+0x88>
10209c8c:	1809883a 	mov	r4,r3
10209c90:	18bffb1e 	bne	r3,r2,10209c80 <memchr+0x6c>
10209c94:	0005883a 	mov	r2,zero
10209c98:	f800283a 	ret
10209c9c:	2005883a 	mov	r2,r4
10209ca0:	f800283a 	ret
10209ca4:	28c03fcc 	andi	r3,r5,255
10209ca8:	1810923a 	slli	r8,r3,8
10209cac:	02ffbff4 	movhi	r11,65279
10209cb0:	02a02074 	movhi	r10,32897
10209cb4:	40c6b03a 	or	r3,r8,r3
10209cb8:	1810943a 	slli	r8,r3,16
10209cbc:	5affbfc4 	addi	r11,r11,-257
10209cc0:	52a02004 	addi	r10,r10,-32640
10209cc4:	40d0b03a 	or	r8,r8,r3
10209cc8:	20c00017 	ldw	r3,0(r4)
10209ccc:	40c6f03a 	xor	r3,r8,r3
10209cd0:	1acd883a 	add	r6,r3,r11
10209cd4:	00c6303a 	nor	r3,zero,r3
10209cd8:	30c6703a 	and	r3,r6,r3
10209cdc:	1a86703a 	and	r3,r3,r10
10209ce0:	183fdf1e 	bne	r3,zero,10209c60 <memchr+0x4c>
10209ce4:	10bfff04 	addi	r2,r2,-4
10209ce8:	21000104 	addi	r4,r4,4
10209cec:	48bff636 	bltu	r9,r2,10209cc8 <memchr+0xb4>
10209cf0:	003fdb06 	br	10209c60 <memchr+0x4c>
10209cf4:	3005883a 	mov	r2,r6
10209cf8:	003fd706 	br	10209c58 <memchr+0x44>

10209cfc <memmove>:
10209cfc:	2005883a 	mov	r2,r4
10209d00:	29000b2e 	bgeu	r5,r4,10209d30 <memmove+0x34>
10209d04:	298f883a 	add	r7,r5,r6
10209d08:	21c0092e 	bgeu	r4,r7,10209d30 <memmove+0x34>
10209d0c:	2187883a 	add	r3,r4,r6
10209d10:	198bc83a 	sub	r5,r3,r6
10209d14:	30004b26 	beq	r6,zero,10209e44 <memmove+0x148>
10209d18:	39ffffc4 	addi	r7,r7,-1
10209d1c:	39000003 	ldbu	r4,0(r7)
10209d20:	18ffffc4 	addi	r3,r3,-1
10209d24:	19000005 	stb	r4,0(r3)
10209d28:	197ffb1e 	bne	r3,r5,10209d18 <memmove+0x1c>
10209d2c:	f800283a 	ret
10209d30:	00c003c4 	movi	r3,15
10209d34:	1980412e 	bgeu	r3,r6,10209e3c <memmove+0x140>
10209d38:	1146b03a 	or	r3,r2,r5
10209d3c:	18c000cc 	andi	r3,r3,3
10209d40:	1800411e 	bne	r3,zero,10209e48 <memmove+0x14c>
10209d44:	33fffc04 	addi	r15,r6,-16
10209d48:	781ed13a 	srli	r15,r15,4
10209d4c:	28c00104 	addi	r3,r5,4
10209d50:	13400104 	addi	r13,r2,4
10209d54:	781c913a 	slli	r14,r15,4
10209d58:	2b000204 	addi	r12,r5,8
10209d5c:	12c00204 	addi	r11,r2,8
10209d60:	73800504 	addi	r14,r14,20
10209d64:	2a800304 	addi	r10,r5,12
10209d68:	12400304 	addi	r9,r2,12
10209d6c:	2b9d883a 	add	r14,r5,r14
10209d70:	2811883a 	mov	r8,r5
10209d74:	100f883a 	mov	r7,r2
10209d78:	41000017 	ldw	r4,0(r8)
10209d7c:	39c00404 	addi	r7,r7,16
10209d80:	18c00404 	addi	r3,r3,16
10209d84:	393ffc15 	stw	r4,-16(r7)
10209d88:	193ffc17 	ldw	r4,-16(r3)
10209d8c:	6b400404 	addi	r13,r13,16
10209d90:	5ac00404 	addi	r11,r11,16
10209d94:	693ffc15 	stw	r4,-16(r13)
10209d98:	61000017 	ldw	r4,0(r12)
10209d9c:	4a400404 	addi	r9,r9,16
10209da0:	42000404 	addi	r8,r8,16
10209da4:	593ffc15 	stw	r4,-16(r11)
10209da8:	51000017 	ldw	r4,0(r10)
10209dac:	63000404 	addi	r12,r12,16
10209db0:	52800404 	addi	r10,r10,16
10209db4:	493ffc15 	stw	r4,-16(r9)
10209db8:	1bbfef1e 	bne	r3,r14,10209d78 <memmove+0x7c>
10209dbc:	79000044 	addi	r4,r15,1
10209dc0:	2008913a 	slli	r4,r4,4
10209dc4:	328003cc 	andi	r10,r6,15
10209dc8:	02c000c4 	movi	r11,3
10209dcc:	1107883a 	add	r3,r2,r4
10209dd0:	290b883a 	add	r5,r5,r4
10209dd4:	5a801e2e 	bgeu	r11,r10,10209e50 <memmove+0x154>
10209dd8:	1813883a 	mov	r9,r3
10209ddc:	2811883a 	mov	r8,r5
10209de0:	500f883a 	mov	r7,r10
10209de4:	41000017 	ldw	r4,0(r8)
10209de8:	4a400104 	addi	r9,r9,4
10209dec:	39ffff04 	addi	r7,r7,-4
10209df0:	493fff15 	stw	r4,-4(r9)
10209df4:	42000104 	addi	r8,r8,4
10209df8:	59fffa36 	bltu	r11,r7,10209de4 <memmove+0xe8>
10209dfc:	513fff04 	addi	r4,r10,-4
10209e00:	2008d0ba 	srli	r4,r4,2
10209e04:	318000cc 	andi	r6,r6,3
10209e08:	21000044 	addi	r4,r4,1
10209e0c:	2109883a 	add	r4,r4,r4
10209e10:	2109883a 	add	r4,r4,r4
10209e14:	1907883a 	add	r3,r3,r4
10209e18:	290b883a 	add	r5,r5,r4
10209e1c:	30000926 	beq	r6,zero,10209e44 <memmove+0x148>
10209e20:	198d883a 	add	r6,r3,r6
10209e24:	29c00003 	ldbu	r7,0(r5)
10209e28:	18c00044 	addi	r3,r3,1
10209e2c:	29400044 	addi	r5,r5,1
10209e30:	19ffffc5 	stb	r7,-1(r3)
10209e34:	19bffb1e 	bne	r3,r6,10209e24 <memmove+0x128>
10209e38:	f800283a 	ret
10209e3c:	1007883a 	mov	r3,r2
10209e40:	003ff606 	br	10209e1c <memmove+0x120>
10209e44:	f800283a 	ret
10209e48:	1007883a 	mov	r3,r2
10209e4c:	003ff406 	br	10209e20 <memmove+0x124>
10209e50:	500d883a 	mov	r6,r10
10209e54:	003ff106 	br	10209e1c <memmove+0x120>

10209e58 <memset>:
10209e58:	20c000cc 	andi	r3,r4,3
10209e5c:	2005883a 	mov	r2,r4
10209e60:	18004326 	beq	r3,zero,10209f70 <memset+0x118>
10209e64:	31ffffc4 	addi	r7,r6,-1
10209e68:	30004026 	beq	r6,zero,10209f6c <memset+0x114>
10209e6c:	2813883a 	mov	r9,r5
10209e70:	200d883a 	mov	r6,r4
10209e74:	2007883a 	mov	r3,r4
10209e78:	00000406 	br	10209e8c <memset+0x34>
10209e7c:	3a3fffc4 	addi	r8,r7,-1
10209e80:	31800044 	addi	r6,r6,1
10209e84:	38003926 	beq	r7,zero,10209f6c <memset+0x114>
10209e88:	400f883a 	mov	r7,r8
10209e8c:	18c00044 	addi	r3,r3,1
10209e90:	32400005 	stb	r9,0(r6)
10209e94:	1a0000cc 	andi	r8,r3,3
10209e98:	403ff81e 	bne	r8,zero,10209e7c <memset+0x24>
10209e9c:	010000c4 	movi	r4,3
10209ea0:	21c02d2e 	bgeu	r4,r7,10209f58 <memset+0x100>
10209ea4:	29803fcc 	andi	r6,r5,255
10209ea8:	3008923a 	slli	r4,r6,8
10209eac:	218cb03a 	or	r6,r4,r6
10209eb0:	3008943a 	slli	r4,r6,16
10209eb4:	218cb03a 	or	r6,r4,r6
10209eb8:	010003c4 	movi	r4,15
10209ebc:	21c0182e 	bgeu	r4,r7,10209f20 <memset+0xc8>
10209ec0:	3b3ffc04 	addi	r12,r7,-16
10209ec4:	6018d13a 	srli	r12,r12,4
10209ec8:	1a000104 	addi	r8,r3,4
10209ecc:	1ac00204 	addi	r11,r3,8
10209ed0:	6008913a 	slli	r4,r12,4
10209ed4:	1a800304 	addi	r10,r3,12
10209ed8:	1813883a 	mov	r9,r3
10209edc:	21000504 	addi	r4,r4,20
10209ee0:	1909883a 	add	r4,r3,r4
10209ee4:	49800015 	stw	r6,0(r9)
10209ee8:	41800015 	stw	r6,0(r8)
10209eec:	59800015 	stw	r6,0(r11)
10209ef0:	51800015 	stw	r6,0(r10)
10209ef4:	42000404 	addi	r8,r8,16
10209ef8:	4a400404 	addi	r9,r9,16
10209efc:	5ac00404 	addi	r11,r11,16
10209f00:	52800404 	addi	r10,r10,16
10209f04:	413ff71e 	bne	r8,r4,10209ee4 <memset+0x8c>
10209f08:	63000044 	addi	r12,r12,1
10209f0c:	6018913a 	slli	r12,r12,4
10209f10:	39c003cc 	andi	r7,r7,15
10209f14:	010000c4 	movi	r4,3
10209f18:	1b07883a 	add	r3,r3,r12
10209f1c:	21c00e2e 	bgeu	r4,r7,10209f58 <memset+0x100>
10209f20:	1813883a 	mov	r9,r3
10209f24:	3811883a 	mov	r8,r7
10209f28:	010000c4 	movi	r4,3
10209f2c:	49800015 	stw	r6,0(r9)
10209f30:	423fff04 	addi	r8,r8,-4
10209f34:	4a400104 	addi	r9,r9,4
10209f38:	223ffc36 	bltu	r4,r8,10209f2c <memset+0xd4>
10209f3c:	393fff04 	addi	r4,r7,-4
10209f40:	2008d0ba 	srli	r4,r4,2
10209f44:	39c000cc 	andi	r7,r7,3
10209f48:	21000044 	addi	r4,r4,1
10209f4c:	2109883a 	add	r4,r4,r4
10209f50:	2109883a 	add	r4,r4,r4
10209f54:	1907883a 	add	r3,r3,r4
10209f58:	38000426 	beq	r7,zero,10209f6c <memset+0x114>
10209f5c:	19cf883a 	add	r7,r3,r7
10209f60:	19400005 	stb	r5,0(r3)
10209f64:	18c00044 	addi	r3,r3,1
10209f68:	19fffd1e 	bne	r3,r7,10209f60 <memset+0x108>
10209f6c:	f800283a 	ret
10209f70:	2007883a 	mov	r3,r4
10209f74:	300f883a 	mov	r7,r6
10209f78:	003fc806 	br	10209e9c <memset+0x44>

10209f7c <_Balloc>:
10209f7c:	20801317 	ldw	r2,76(r4)
10209f80:	defffc04 	addi	sp,sp,-16
10209f84:	dc400115 	stw	r17,4(sp)
10209f88:	dc000015 	stw	r16,0(sp)
10209f8c:	dfc00315 	stw	ra,12(sp)
10209f90:	dc800215 	stw	r18,8(sp)
10209f94:	2023883a 	mov	r17,r4
10209f98:	2821883a 	mov	r16,r5
10209f9c:	10000f26 	beq	r2,zero,10209fdc <_Balloc+0x60>
10209fa0:	8407883a 	add	r3,r16,r16
10209fa4:	18c7883a 	add	r3,r3,r3
10209fa8:	10c7883a 	add	r3,r2,r3
10209fac:	18800017 	ldw	r2,0(r3)
10209fb0:	10001126 	beq	r2,zero,10209ff8 <_Balloc+0x7c>
10209fb4:	11000017 	ldw	r4,0(r2)
10209fb8:	19000015 	stw	r4,0(r3)
10209fbc:	10000415 	stw	zero,16(r2)
10209fc0:	10000315 	stw	zero,12(r2)
10209fc4:	dfc00317 	ldw	ra,12(sp)
10209fc8:	dc800217 	ldw	r18,8(sp)
10209fcc:	dc400117 	ldw	r17,4(sp)
10209fd0:	dc000017 	ldw	r16,0(sp)
10209fd4:	dec00404 	addi	sp,sp,16
10209fd8:	f800283a 	ret
10209fdc:	01400104 	movi	r5,4
10209fe0:	01800844 	movi	r6,33
10209fe4:	02128500 	call	10212850 <_calloc_r>
10209fe8:	88801315 	stw	r2,76(r17)
10209fec:	103fec1e 	bne	r2,zero,10209fa0 <_Balloc+0x24>
10209ff0:	0005883a 	mov	r2,zero
10209ff4:	003ff306 	br	10209fc4 <_Balloc+0x48>
10209ff8:	01400044 	movi	r5,1
10209ffc:	2c24983a 	sll	r18,r5,r16
1020a000:	8809883a 	mov	r4,r17
1020a004:	91800144 	addi	r6,r18,5
1020a008:	318d883a 	add	r6,r6,r6
1020a00c:	318d883a 	add	r6,r6,r6
1020a010:	02128500 	call	10212850 <_calloc_r>
1020a014:	103ff626 	beq	r2,zero,10209ff0 <_Balloc+0x74>
1020a018:	14000115 	stw	r16,4(r2)
1020a01c:	14800215 	stw	r18,8(r2)
1020a020:	003fe606 	br	10209fbc <_Balloc+0x40>

1020a024 <_Bfree>:
1020a024:	28000826 	beq	r5,zero,1020a048 <_Bfree+0x24>
1020a028:	28c00117 	ldw	r3,4(r5)
1020a02c:	20801317 	ldw	r2,76(r4)
1020a030:	18c7883a 	add	r3,r3,r3
1020a034:	18c7883a 	add	r3,r3,r3
1020a038:	10c5883a 	add	r2,r2,r3
1020a03c:	10c00017 	ldw	r3,0(r2)
1020a040:	28c00015 	stw	r3,0(r5)
1020a044:	11400015 	stw	r5,0(r2)
1020a048:	f800283a 	ret

1020a04c <__multadd>:
1020a04c:	defffa04 	addi	sp,sp,-24
1020a050:	dc000115 	stw	r16,4(sp)
1020a054:	2c000417 	ldw	r16,16(r5)
1020a058:	dc800315 	stw	r18,12(sp)
1020a05c:	dc400215 	stw	r17,8(sp)
1020a060:	dfc00515 	stw	ra,20(sp)
1020a064:	dcc00415 	stw	r19,16(sp)
1020a068:	2823883a 	mov	r17,r5
1020a06c:	2025883a 	mov	r18,r4
1020a070:	2a400504 	addi	r9,r5,20
1020a074:	0015883a 	mov	r10,zero
1020a078:	4a000017 	ldw	r8,0(r9)
1020a07c:	4a400104 	addi	r9,r9,4
1020a080:	52800044 	addi	r10,r10,1
1020a084:	40ffffcc 	andi	r3,r8,65535
1020a088:	1987383a 	mul	r3,r3,r6
1020a08c:	4010d43a 	srli	r8,r8,16
1020a090:	19cf883a 	add	r7,r3,r7
1020a094:	4191383a 	mul	r8,r8,r6
1020a098:	3816d43a 	srli	r11,r7,16
1020a09c:	38ffffcc 	andi	r3,r7,65535
1020a0a0:	5a0f883a 	add	r7,r11,r8
1020a0a4:	3810943a 	slli	r8,r7,16
1020a0a8:	380ed43a 	srli	r7,r7,16
1020a0ac:	40c7883a 	add	r3,r8,r3
1020a0b0:	48ffff15 	stw	r3,-4(r9)
1020a0b4:	543ff016 	blt	r10,r16,1020a078 <__multadd+0x2c>
1020a0b8:	38000926 	beq	r7,zero,1020a0e0 <__multadd+0x94>
1020a0bc:	88800217 	ldw	r2,8(r17)
1020a0c0:	80800f0e 	bge	r16,r2,1020a100 <__multadd+0xb4>
1020a0c4:	80800144 	addi	r2,r16,5
1020a0c8:	1085883a 	add	r2,r2,r2
1020a0cc:	1085883a 	add	r2,r2,r2
1020a0d0:	8885883a 	add	r2,r17,r2
1020a0d4:	11c00015 	stw	r7,0(r2)
1020a0d8:	84000044 	addi	r16,r16,1
1020a0dc:	8c000415 	stw	r16,16(r17)
1020a0e0:	8805883a 	mov	r2,r17
1020a0e4:	dfc00517 	ldw	ra,20(sp)
1020a0e8:	dcc00417 	ldw	r19,16(sp)
1020a0ec:	dc800317 	ldw	r18,12(sp)
1020a0f0:	dc400217 	ldw	r17,8(sp)
1020a0f4:	dc000117 	ldw	r16,4(sp)
1020a0f8:	dec00604 	addi	sp,sp,24
1020a0fc:	f800283a 	ret
1020a100:	89400117 	ldw	r5,4(r17)
1020a104:	9009883a 	mov	r4,r18
1020a108:	d9c00015 	stw	r7,0(sp)
1020a10c:	29400044 	addi	r5,r5,1
1020a110:	0209f7c0 	call	10209f7c <_Balloc>
1020a114:	89800417 	ldw	r6,16(r17)
1020a118:	11000304 	addi	r4,r2,12
1020a11c:	89400304 	addi	r5,r17,12
1020a120:	31800084 	addi	r6,r6,2
1020a124:	318d883a 	add	r6,r6,r6
1020a128:	318d883a 	add	r6,r6,r6
1020a12c:	1027883a 	mov	r19,r2
1020a130:	0202dc80 	call	10202dc8 <memcpy>
1020a134:	d9c00017 	ldw	r7,0(sp)
1020a138:	88000a26 	beq	r17,zero,1020a164 <__multadd+0x118>
1020a13c:	89000117 	ldw	r4,4(r17)
1020a140:	90c01317 	ldw	r3,76(r18)
1020a144:	2109883a 	add	r4,r4,r4
1020a148:	2109883a 	add	r4,r4,r4
1020a14c:	1907883a 	add	r3,r3,r4
1020a150:	18800017 	ldw	r2,0(r3)
1020a154:	88800015 	stw	r2,0(r17)
1020a158:	1c400015 	stw	r17,0(r3)
1020a15c:	9823883a 	mov	r17,r19
1020a160:	003fd806 	br	1020a0c4 <__multadd+0x78>
1020a164:	9823883a 	mov	r17,r19
1020a168:	003fd606 	br	1020a0c4 <__multadd+0x78>

1020a16c <__s2b>:
1020a16c:	defff904 	addi	sp,sp,-28
1020a170:	dc400115 	stw	r17,4(sp)
1020a174:	dc000015 	stw	r16,0(sp)
1020a178:	2023883a 	mov	r17,r4
1020a17c:	2821883a 	mov	r16,r5
1020a180:	39000204 	addi	r4,r7,8
1020a184:	01400244 	movi	r5,9
1020a188:	dcc00315 	stw	r19,12(sp)
1020a18c:	dc800215 	stw	r18,8(sp)
1020a190:	dfc00615 	stw	ra,24(sp)
1020a194:	dd400515 	stw	r21,20(sp)
1020a198:	dd000415 	stw	r20,16(sp)
1020a19c:	3825883a 	mov	r18,r7
1020a1a0:	3027883a 	mov	r19,r6
1020a1a4:	02023c40 	call	102023c4 <__divsi3>
1020a1a8:	00c00044 	movi	r3,1
1020a1ac:	000b883a 	mov	r5,zero
1020a1b0:	1880030e 	bge	r3,r2,1020a1c0 <__s2b+0x54>
1020a1b4:	18c7883a 	add	r3,r3,r3
1020a1b8:	29400044 	addi	r5,r5,1
1020a1bc:	18bffd16 	blt	r3,r2,1020a1b4 <__s2b+0x48>
1020a1c0:	8809883a 	mov	r4,r17
1020a1c4:	0209f7c0 	call	10209f7c <_Balloc>
1020a1c8:	d8c00717 	ldw	r3,28(sp)
1020a1cc:	10c00515 	stw	r3,20(r2)
1020a1d0:	00c00044 	movi	r3,1
1020a1d4:	10c00415 	stw	r3,16(r2)
1020a1d8:	00c00244 	movi	r3,9
1020a1dc:	1cc0210e 	bge	r3,r19,1020a264 <__s2b+0xf8>
1020a1e0:	80eb883a 	add	r21,r16,r3
1020a1e4:	a829883a 	mov	r20,r21
1020a1e8:	84e1883a 	add	r16,r16,r19
1020a1ec:	a1c00007 	ldb	r7,0(r20)
1020a1f0:	8809883a 	mov	r4,r17
1020a1f4:	a5000044 	addi	r20,r20,1
1020a1f8:	100b883a 	mov	r5,r2
1020a1fc:	01800284 	movi	r6,10
1020a200:	39fff404 	addi	r7,r7,-48
1020a204:	020a04c0 	call	1020a04c <__multadd>
1020a208:	a43ff81e 	bne	r20,r16,1020a1ec <__s2b+0x80>
1020a20c:	ace1883a 	add	r16,r21,r19
1020a210:	843ffe04 	addi	r16,r16,-8
1020a214:	9c800a0e 	bge	r19,r18,1020a240 <__s2b+0xd4>
1020a218:	94e5c83a 	sub	r18,r18,r19
1020a21c:	84a5883a 	add	r18,r16,r18
1020a220:	81c00007 	ldb	r7,0(r16)
1020a224:	8809883a 	mov	r4,r17
1020a228:	84000044 	addi	r16,r16,1
1020a22c:	100b883a 	mov	r5,r2
1020a230:	01800284 	movi	r6,10
1020a234:	39fff404 	addi	r7,r7,-48
1020a238:	020a04c0 	call	1020a04c <__multadd>
1020a23c:	84bff81e 	bne	r16,r18,1020a220 <__s2b+0xb4>
1020a240:	dfc00617 	ldw	ra,24(sp)
1020a244:	dd400517 	ldw	r21,20(sp)
1020a248:	dd000417 	ldw	r20,16(sp)
1020a24c:	dcc00317 	ldw	r19,12(sp)
1020a250:	dc800217 	ldw	r18,8(sp)
1020a254:	dc400117 	ldw	r17,4(sp)
1020a258:	dc000017 	ldw	r16,0(sp)
1020a25c:	dec00704 	addi	sp,sp,28
1020a260:	f800283a 	ret
1020a264:	84000284 	addi	r16,r16,10
1020a268:	1827883a 	mov	r19,r3
1020a26c:	003fe906 	br	1020a214 <__s2b+0xa8>

1020a270 <__hi0bits>:
1020a270:	20bfffec 	andhi	r2,r4,65535
1020a274:	1000141e 	bne	r2,zero,1020a2c8 <__hi0bits+0x58>
1020a278:	2008943a 	slli	r4,r4,16
1020a27c:	00800404 	movi	r2,16
1020a280:	20ffc02c 	andhi	r3,r4,65280
1020a284:	1800021e 	bne	r3,zero,1020a290 <__hi0bits+0x20>
1020a288:	2008923a 	slli	r4,r4,8
1020a28c:	10800204 	addi	r2,r2,8
1020a290:	20fc002c 	andhi	r3,r4,61440
1020a294:	1800021e 	bne	r3,zero,1020a2a0 <__hi0bits+0x30>
1020a298:	2008913a 	slli	r4,r4,4
1020a29c:	10800104 	addi	r2,r2,4
1020a2a0:	20f0002c 	andhi	r3,r4,49152
1020a2a4:	1800031e 	bne	r3,zero,1020a2b4 <__hi0bits+0x44>
1020a2a8:	2109883a 	add	r4,r4,r4
1020a2ac:	10800084 	addi	r2,r2,2
1020a2b0:	2109883a 	add	r4,r4,r4
1020a2b4:	20000316 	blt	r4,zero,1020a2c4 <__hi0bits+0x54>
1020a2b8:	2110002c 	andhi	r4,r4,16384
1020a2bc:	2000041e 	bne	r4,zero,1020a2d0 <__hi0bits+0x60>
1020a2c0:	00800804 	movi	r2,32
1020a2c4:	f800283a 	ret
1020a2c8:	0005883a 	mov	r2,zero
1020a2cc:	003fec06 	br	1020a280 <__hi0bits+0x10>
1020a2d0:	10800044 	addi	r2,r2,1
1020a2d4:	f800283a 	ret

1020a2d8 <__lo0bits>:
1020a2d8:	20c00017 	ldw	r3,0(r4)
1020a2dc:	188001cc 	andi	r2,r3,7
1020a2e0:	10000826 	beq	r2,zero,1020a304 <__lo0bits+0x2c>
1020a2e4:	1880004c 	andi	r2,r3,1
1020a2e8:	1000211e 	bne	r2,zero,1020a370 <__lo0bits+0x98>
1020a2ec:	1880008c 	andi	r2,r3,2
1020a2f0:	1000211e 	bne	r2,zero,1020a378 <__lo0bits+0xa0>
1020a2f4:	1806d0ba 	srli	r3,r3,2
1020a2f8:	00800084 	movi	r2,2
1020a2fc:	20c00015 	stw	r3,0(r4)
1020a300:	f800283a 	ret
1020a304:	18bfffcc 	andi	r2,r3,65535
1020a308:	10001326 	beq	r2,zero,1020a358 <__lo0bits+0x80>
1020a30c:	0005883a 	mov	r2,zero
1020a310:	19403fcc 	andi	r5,r3,255
1020a314:	2800021e 	bne	r5,zero,1020a320 <__lo0bits+0x48>
1020a318:	1806d23a 	srli	r3,r3,8
1020a31c:	10800204 	addi	r2,r2,8
1020a320:	194003cc 	andi	r5,r3,15
1020a324:	2800021e 	bne	r5,zero,1020a330 <__lo0bits+0x58>
1020a328:	1806d13a 	srli	r3,r3,4
1020a32c:	10800104 	addi	r2,r2,4
1020a330:	194000cc 	andi	r5,r3,3
1020a334:	2800021e 	bne	r5,zero,1020a340 <__lo0bits+0x68>
1020a338:	1806d0ba 	srli	r3,r3,2
1020a33c:	10800084 	addi	r2,r2,2
1020a340:	1940004c 	andi	r5,r3,1
1020a344:	2800081e 	bne	r5,zero,1020a368 <__lo0bits+0x90>
1020a348:	1806d07a 	srli	r3,r3,1
1020a34c:	1800051e 	bne	r3,zero,1020a364 <__lo0bits+0x8c>
1020a350:	00800804 	movi	r2,32
1020a354:	f800283a 	ret
1020a358:	1806d43a 	srli	r3,r3,16
1020a35c:	00800404 	movi	r2,16
1020a360:	003feb06 	br	1020a310 <__lo0bits+0x38>
1020a364:	10800044 	addi	r2,r2,1
1020a368:	20c00015 	stw	r3,0(r4)
1020a36c:	f800283a 	ret
1020a370:	0005883a 	mov	r2,zero
1020a374:	f800283a 	ret
1020a378:	1806d07a 	srli	r3,r3,1
1020a37c:	00800044 	movi	r2,1
1020a380:	20c00015 	stw	r3,0(r4)
1020a384:	f800283a 	ret

1020a388 <__i2b>:
1020a388:	defffd04 	addi	sp,sp,-12
1020a38c:	dc000015 	stw	r16,0(sp)
1020a390:	04000044 	movi	r16,1
1020a394:	dc400115 	stw	r17,4(sp)
1020a398:	2823883a 	mov	r17,r5
1020a39c:	800b883a 	mov	r5,r16
1020a3a0:	dfc00215 	stw	ra,8(sp)
1020a3a4:	0209f7c0 	call	10209f7c <_Balloc>
1020a3a8:	14400515 	stw	r17,20(r2)
1020a3ac:	14000415 	stw	r16,16(r2)
1020a3b0:	dfc00217 	ldw	ra,8(sp)
1020a3b4:	dc400117 	ldw	r17,4(sp)
1020a3b8:	dc000017 	ldw	r16,0(sp)
1020a3bc:	dec00304 	addi	sp,sp,12
1020a3c0:	f800283a 	ret

1020a3c4 <__multiply>:
1020a3c4:	defffa04 	addi	sp,sp,-24
1020a3c8:	dcc00315 	stw	r19,12(sp)
1020a3cc:	dc800215 	stw	r18,8(sp)
1020a3d0:	2cc00417 	ldw	r19,16(r5)
1020a3d4:	34800417 	ldw	r18,16(r6)
1020a3d8:	dd000415 	stw	r20,16(sp)
1020a3dc:	dc400115 	stw	r17,4(sp)
1020a3e0:	dfc00515 	stw	ra,20(sp)
1020a3e4:	dc000015 	stw	r16,0(sp)
1020a3e8:	2829883a 	mov	r20,r5
1020a3ec:	3023883a 	mov	r17,r6
1020a3f0:	9c807016 	blt	r19,r18,1020a5b4 <__multiply+0x1f0>
1020a3f4:	9005883a 	mov	r2,r18
1020a3f8:	9825883a 	mov	r18,r19
1020a3fc:	1027883a 	mov	r19,r2
1020a400:	a0800217 	ldw	r2,8(r20)
1020a404:	94e1883a 	add	r16,r18,r19
1020a408:	a1400117 	ldw	r5,4(r20)
1020a40c:	1400010e 	bge	r2,r16,1020a414 <__multiply+0x50>
1020a410:	29400044 	addi	r5,r5,1
1020a414:	0209f7c0 	call	10209f7c <_Balloc>
1020a418:	8417883a 	add	r11,r16,r16
1020a41c:	13000504 	addi	r12,r2,20
1020a420:	5ad7883a 	add	r11,r11,r11
1020a424:	62d7883a 	add	r11,r12,r11
1020a428:	6007883a 	mov	r3,r12
1020a42c:	62c0032e 	bgeu	r12,r11,1020a43c <__multiply+0x78>
1020a430:	18000015 	stw	zero,0(r3)
1020a434:	18c00104 	addi	r3,r3,4
1020a438:	1afffd36 	bltu	r3,r11,1020a430 <__multiply+0x6c>
1020a43c:	9ce7883a 	add	r19,r19,r19
1020a440:	94a5883a 	add	r18,r18,r18
1020a444:	89800504 	addi	r6,r17,20
1020a448:	9ce7883a 	add	r19,r19,r19
1020a44c:	a3800504 	addi	r14,r20,20
1020a450:	94a5883a 	add	r18,r18,r18
1020a454:	34db883a 	add	r13,r6,r19
1020a458:	7495883a 	add	r10,r14,r18
1020a45c:	3340422e 	bgeu	r6,r13,1020a568 <__multiply+0x1a4>
1020a460:	34400017 	ldw	r17,0(r6)
1020a464:	8cbfffcc 	andi	r18,r17,65535
1020a468:	90001b26 	beq	r18,zero,1020a4d8 <__multiply+0x114>
1020a46c:	6013883a 	mov	r9,r12
1020a470:	7023883a 	mov	r17,r14
1020a474:	0011883a 	mov	r8,zero
1020a478:	88c00017 	ldw	r3,0(r17)
1020a47c:	4bc00017 	ldw	r15,0(r9)
1020a480:	8c400104 	addi	r17,r17,4
1020a484:	19ffffcc 	andi	r7,r3,65535
1020a488:	3c8f383a 	mul	r7,r7,r18
1020a48c:	1808d43a 	srli	r4,r3,16
1020a490:	797fffcc 	andi	r5,r15,65535
1020a494:	29cb883a 	add	r5,r5,r7
1020a498:	2a0b883a 	add	r5,r5,r8
1020a49c:	2489383a 	mul	r4,r4,r18
1020a4a0:	7806d43a 	srli	r3,r15,16
1020a4a4:	2810d43a 	srli	r8,r5,16
1020a4a8:	297fffcc 	andi	r5,r5,65535
1020a4ac:	1907883a 	add	r3,r3,r4
1020a4b0:	1a07883a 	add	r3,r3,r8
1020a4b4:	1808943a 	slli	r4,r3,16
1020a4b8:	480f883a 	mov	r7,r9
1020a4bc:	1810d43a 	srli	r8,r3,16
1020a4c0:	214ab03a 	or	r5,r4,r5
1020a4c4:	49400015 	stw	r5,0(r9)
1020a4c8:	4a400104 	addi	r9,r9,4
1020a4cc:	8abfea36 	bltu	r17,r10,1020a478 <__multiply+0xb4>
1020a4d0:	3a000115 	stw	r8,4(r7)
1020a4d4:	34400017 	ldw	r17,0(r6)
1020a4d8:	8822d43a 	srli	r17,r17,16
1020a4dc:	88001f26 	beq	r17,zero,1020a55c <__multiply+0x198>
1020a4e0:	60c00017 	ldw	r3,0(r12)
1020a4e4:	7013883a 	mov	r9,r14
1020a4e8:	601f883a 	mov	r15,r12
1020a4ec:	1811883a 	mov	r8,r3
1020a4f0:	6027883a 	mov	r19,r12
1020a4f4:	000f883a 	mov	r7,zero
1020a4f8:	00000106 	br	1020a500 <__multiply+0x13c>
1020a4fc:	9027883a 	mov	r19,r18
1020a500:	4940000b 	ldhu	r5,0(r9)
1020a504:	4010d43a 	srli	r8,r8,16
1020a508:	193fffcc 	andi	r4,r3,65535
1020a50c:	2c4b383a 	mul	r5,r5,r17
1020a510:	7bc00104 	addi	r15,r15,4
1020a514:	4a400104 	addi	r9,r9,4
1020a518:	2a0b883a 	add	r5,r5,r8
1020a51c:	29cb883a 	add	r5,r5,r7
1020a520:	2806943a 	slli	r3,r5,16
1020a524:	9c800104 	addi	r18,r19,4
1020a528:	280ad43a 	srli	r5,r5,16
1020a52c:	1908b03a 	or	r4,r3,r4
1020a530:	793fff15 	stw	r4,-4(r15)
1020a534:	48ffff17 	ldw	r3,-4(r9)
1020a538:	92000017 	ldw	r8,0(r18)
1020a53c:	1806d43a 	srli	r3,r3,16
1020a540:	413fffcc 	andi	r4,r8,65535
1020a544:	1c47383a 	mul	r3,r3,r17
1020a548:	1907883a 	add	r3,r3,r4
1020a54c:	1947883a 	add	r3,r3,r5
1020a550:	180ed43a 	srli	r7,r3,16
1020a554:	4abfe936 	bltu	r9,r10,1020a4fc <__multiply+0x138>
1020a558:	98c00115 	stw	r3,4(r19)
1020a55c:	31800104 	addi	r6,r6,4
1020a560:	63000104 	addi	r12,r12,4
1020a564:	337fbe36 	bltu	r6,r13,1020a460 <__multiply+0x9c>
1020a568:	0400090e 	bge	zero,r16,1020a590 <__multiply+0x1cc>
1020a56c:	58ffff17 	ldw	r3,-4(r11)
1020a570:	5affff04 	addi	r11,r11,-4
1020a574:	18000326 	beq	r3,zero,1020a584 <__multiply+0x1c0>
1020a578:	00000506 	br	1020a590 <__multiply+0x1cc>
1020a57c:	58c00017 	ldw	r3,0(r11)
1020a580:	1800031e 	bne	r3,zero,1020a590 <__multiply+0x1cc>
1020a584:	843fffc4 	addi	r16,r16,-1
1020a588:	5affff04 	addi	r11,r11,-4
1020a58c:	803ffb1e 	bne	r16,zero,1020a57c <__multiply+0x1b8>
1020a590:	14000415 	stw	r16,16(r2)
1020a594:	dfc00517 	ldw	ra,20(sp)
1020a598:	dd000417 	ldw	r20,16(sp)
1020a59c:	dcc00317 	ldw	r19,12(sp)
1020a5a0:	dc800217 	ldw	r18,8(sp)
1020a5a4:	dc400117 	ldw	r17,4(sp)
1020a5a8:	dc000017 	ldw	r16,0(sp)
1020a5ac:	dec00604 	addi	sp,sp,24
1020a5b0:	f800283a 	ret
1020a5b4:	3029883a 	mov	r20,r6
1020a5b8:	2823883a 	mov	r17,r5
1020a5bc:	003f9006 	br	1020a400 <__multiply+0x3c>

1020a5c0 <__pow5mult>:
1020a5c0:	defffa04 	addi	sp,sp,-24
1020a5c4:	dcc00315 	stw	r19,12(sp)
1020a5c8:	dc800215 	stw	r18,8(sp)
1020a5cc:	dc000015 	stw	r16,0(sp)
1020a5d0:	dfc00515 	stw	ra,20(sp)
1020a5d4:	dd000415 	stw	r20,16(sp)
1020a5d8:	dc400115 	stw	r17,4(sp)
1020a5dc:	308000cc 	andi	r2,r6,3
1020a5e0:	3021883a 	mov	r16,r6
1020a5e4:	2027883a 	mov	r19,r4
1020a5e8:	2825883a 	mov	r18,r5
1020a5ec:	10002e1e 	bne	r2,zero,1020a6a8 <__pow5mult+0xe8>
1020a5f0:	8021d0ba 	srai	r16,r16,2
1020a5f4:	80001a26 	beq	r16,zero,1020a660 <__pow5mult+0xa0>
1020a5f8:	9c401217 	ldw	r17,72(r19)
1020a5fc:	8800061e 	bne	r17,zero,1020a618 <__pow5mult+0x58>
1020a600:	00003406 	br	1020a6d4 <__pow5mult+0x114>
1020a604:	8021d07a 	srai	r16,r16,1
1020a608:	80001526 	beq	r16,zero,1020a660 <__pow5mult+0xa0>
1020a60c:	88800017 	ldw	r2,0(r17)
1020a610:	10001c26 	beq	r2,zero,1020a684 <__pow5mult+0xc4>
1020a614:	1023883a 	mov	r17,r2
1020a618:	80c0004c 	andi	r3,r16,1
1020a61c:	183ff926 	beq	r3,zero,1020a604 <__pow5mult+0x44>
1020a620:	900b883a 	mov	r5,r18
1020a624:	880d883a 	mov	r6,r17
1020a628:	9809883a 	mov	r4,r19
1020a62c:	020a3c40 	call	1020a3c4 <__multiply>
1020a630:	90001b26 	beq	r18,zero,1020a6a0 <__pow5mult+0xe0>
1020a634:	91c00117 	ldw	r7,4(r18)
1020a638:	98c01317 	ldw	r3,76(r19)
1020a63c:	8021d07a 	srai	r16,r16,1
1020a640:	39cf883a 	add	r7,r7,r7
1020a644:	39cf883a 	add	r7,r7,r7
1020a648:	19c7883a 	add	r3,r3,r7
1020a64c:	19000017 	ldw	r4,0(r3)
1020a650:	91000015 	stw	r4,0(r18)
1020a654:	1c800015 	stw	r18,0(r3)
1020a658:	1025883a 	mov	r18,r2
1020a65c:	803feb1e 	bne	r16,zero,1020a60c <__pow5mult+0x4c>
1020a660:	9005883a 	mov	r2,r18
1020a664:	dfc00517 	ldw	ra,20(sp)
1020a668:	dd000417 	ldw	r20,16(sp)
1020a66c:	dcc00317 	ldw	r19,12(sp)
1020a670:	dc800217 	ldw	r18,8(sp)
1020a674:	dc400117 	ldw	r17,4(sp)
1020a678:	dc000017 	ldw	r16,0(sp)
1020a67c:	dec00604 	addi	sp,sp,24
1020a680:	f800283a 	ret
1020a684:	9809883a 	mov	r4,r19
1020a688:	880b883a 	mov	r5,r17
1020a68c:	880d883a 	mov	r6,r17
1020a690:	020a3c40 	call	1020a3c4 <__multiply>
1020a694:	88800015 	stw	r2,0(r17)
1020a698:	10000015 	stw	zero,0(r2)
1020a69c:	003fdd06 	br	1020a614 <__pow5mult+0x54>
1020a6a0:	1025883a 	mov	r18,r2
1020a6a4:	003fd706 	br	1020a604 <__pow5mult+0x44>
1020a6a8:	10bfffc4 	addi	r2,r2,-1
1020a6ac:	1085883a 	add	r2,r2,r2
1020a6b0:	00c408b4 	movhi	r3,4130
1020a6b4:	18f4d004 	addi	r3,r3,-11456
1020a6b8:	1085883a 	add	r2,r2,r2
1020a6bc:	1885883a 	add	r2,r3,r2
1020a6c0:	11800017 	ldw	r6,0(r2)
1020a6c4:	000f883a 	mov	r7,zero
1020a6c8:	020a04c0 	call	1020a04c <__multadd>
1020a6cc:	1025883a 	mov	r18,r2
1020a6d0:	003fc706 	br	1020a5f0 <__pow5mult+0x30>
1020a6d4:	05000044 	movi	r20,1
1020a6d8:	9809883a 	mov	r4,r19
1020a6dc:	a00b883a 	mov	r5,r20
1020a6e0:	0209f7c0 	call	10209f7c <_Balloc>
1020a6e4:	1023883a 	mov	r17,r2
1020a6e8:	00809c44 	movi	r2,625
1020a6ec:	88800515 	stw	r2,20(r17)
1020a6f0:	8d000415 	stw	r20,16(r17)
1020a6f4:	9c401215 	stw	r17,72(r19)
1020a6f8:	88000015 	stw	zero,0(r17)
1020a6fc:	003fc606 	br	1020a618 <__pow5mult+0x58>

1020a700 <__lshift>:
1020a700:	defff904 	addi	sp,sp,-28
1020a704:	dd000415 	stw	r20,16(sp)
1020a708:	dcc00315 	stw	r19,12(sp)
1020a70c:	3029d17a 	srai	r20,r6,5
1020a710:	2cc00417 	ldw	r19,16(r5)
1020a714:	28800217 	ldw	r2,8(r5)
1020a718:	dd400515 	stw	r21,20(sp)
1020a71c:	a4e7883a 	add	r19,r20,r19
1020a720:	dc800215 	stw	r18,8(sp)
1020a724:	dc400115 	stw	r17,4(sp)
1020a728:	dc000015 	stw	r16,0(sp)
1020a72c:	dfc00615 	stw	ra,24(sp)
1020a730:	9c000044 	addi	r16,r19,1
1020a734:	2823883a 	mov	r17,r5
1020a738:	302b883a 	mov	r21,r6
1020a73c:	2025883a 	mov	r18,r4
1020a740:	29400117 	ldw	r5,4(r5)
1020a744:	1400030e 	bge	r2,r16,1020a754 <__lshift+0x54>
1020a748:	1085883a 	add	r2,r2,r2
1020a74c:	29400044 	addi	r5,r5,1
1020a750:	143ffd16 	blt	r2,r16,1020a748 <__lshift+0x48>
1020a754:	9009883a 	mov	r4,r18
1020a758:	0209f7c0 	call	10209f7c <_Balloc>
1020a75c:	11c00504 	addi	r7,r2,20
1020a760:	0500090e 	bge	zero,r20,1020a788 <__lshift+0x88>
1020a764:	3811883a 	mov	r8,r7
1020a768:	0007883a 	mov	r3,zero
1020a76c:	40000015 	stw	zero,0(r8)
1020a770:	18c00044 	addi	r3,r3,1
1020a774:	42000104 	addi	r8,r8,4
1020a778:	1d3ffc1e 	bne	r3,r20,1020a76c <__lshift+0x6c>
1020a77c:	18c7883a 	add	r3,r3,r3
1020a780:	18c7883a 	add	r3,r3,r3
1020a784:	38cf883a 	add	r7,r7,r3
1020a788:	89000417 	ldw	r4,16(r17)
1020a78c:	88c00504 	addi	r3,r17,20
1020a790:	a98007cc 	andi	r6,r21,31
1020a794:	2109883a 	add	r4,r4,r4
1020a798:	2109883a 	add	r4,r4,r4
1020a79c:	1909883a 	add	r4,r3,r4
1020a7a0:	30002326 	beq	r6,zero,1020a830 <__lshift+0x130>
1020a7a4:	01400804 	movi	r5,32
1020a7a8:	298bc83a 	sub	r5,r5,r6
1020a7ac:	0013883a 	mov	r9,zero
1020a7b0:	1a000017 	ldw	r8,0(r3)
1020a7b4:	3815883a 	mov	r10,r7
1020a7b8:	39c00104 	addi	r7,r7,4
1020a7bc:	4190983a 	sll	r8,r8,r6
1020a7c0:	18c00104 	addi	r3,r3,4
1020a7c4:	4a10b03a 	or	r8,r9,r8
1020a7c8:	3a3fff15 	stw	r8,-4(r7)
1020a7cc:	1a3fff17 	ldw	r8,-4(r3)
1020a7d0:	4152d83a 	srl	r9,r8,r5
1020a7d4:	193ff636 	bltu	r3,r4,1020a7b0 <__lshift+0xb0>
1020a7d8:	52400115 	stw	r9,4(r10)
1020a7dc:	48001a1e 	bne	r9,zero,1020a848 <__lshift+0x148>
1020a7e0:	843fffc4 	addi	r16,r16,-1
1020a7e4:	14000415 	stw	r16,16(r2)
1020a7e8:	88000826 	beq	r17,zero,1020a80c <__lshift+0x10c>
1020a7ec:	89000117 	ldw	r4,4(r17)
1020a7f0:	90c01317 	ldw	r3,76(r18)
1020a7f4:	2109883a 	add	r4,r4,r4
1020a7f8:	2109883a 	add	r4,r4,r4
1020a7fc:	1907883a 	add	r3,r3,r4
1020a800:	19000017 	ldw	r4,0(r3)
1020a804:	89000015 	stw	r4,0(r17)
1020a808:	1c400015 	stw	r17,0(r3)
1020a80c:	dfc00617 	ldw	ra,24(sp)
1020a810:	dd400517 	ldw	r21,20(sp)
1020a814:	dd000417 	ldw	r20,16(sp)
1020a818:	dcc00317 	ldw	r19,12(sp)
1020a81c:	dc800217 	ldw	r18,8(sp)
1020a820:	dc400117 	ldw	r17,4(sp)
1020a824:	dc000017 	ldw	r16,0(sp)
1020a828:	dec00704 	addi	sp,sp,28
1020a82c:	f800283a 	ret
1020a830:	19400017 	ldw	r5,0(r3)
1020a834:	39c00104 	addi	r7,r7,4
1020a838:	18c00104 	addi	r3,r3,4
1020a83c:	397fff15 	stw	r5,-4(r7)
1020a840:	193ffb36 	bltu	r3,r4,1020a830 <__lshift+0x130>
1020a844:	003fe606 	br	1020a7e0 <__lshift+0xe0>
1020a848:	9c000084 	addi	r16,r19,2
1020a84c:	003fe406 	br	1020a7e0 <__lshift+0xe0>

1020a850 <__mcmp>:
1020a850:	20800417 	ldw	r2,16(r4)
1020a854:	28c00417 	ldw	r3,16(r5)
1020a858:	10c5c83a 	sub	r2,r2,r3
1020a85c:	1000111e 	bne	r2,zero,1020a8a4 <__mcmp+0x54>
1020a860:	18c7883a 	add	r3,r3,r3
1020a864:	18c7883a 	add	r3,r3,r3
1020a868:	21000504 	addi	r4,r4,20
1020a86c:	29400504 	addi	r5,r5,20
1020a870:	20c5883a 	add	r2,r4,r3
1020a874:	28cb883a 	add	r5,r5,r3
1020a878:	00000106 	br	1020a880 <__mcmp+0x30>
1020a87c:	20800a2e 	bgeu	r4,r2,1020a8a8 <__mcmp+0x58>
1020a880:	10bfff04 	addi	r2,r2,-4
1020a884:	297fff04 	addi	r5,r5,-4
1020a888:	11800017 	ldw	r6,0(r2)
1020a88c:	28c00017 	ldw	r3,0(r5)
1020a890:	30fffa26 	beq	r6,r3,1020a87c <__mcmp+0x2c>
1020a894:	30c00236 	bltu	r6,r3,1020a8a0 <__mcmp+0x50>
1020a898:	00800044 	movi	r2,1
1020a89c:	f800283a 	ret
1020a8a0:	00bfffc4 	movi	r2,-1
1020a8a4:	f800283a 	ret
1020a8a8:	0005883a 	mov	r2,zero
1020a8ac:	f800283a 	ret

1020a8b0 <__mdiff>:
1020a8b0:	defffb04 	addi	sp,sp,-20
1020a8b4:	dc000015 	stw	r16,0(sp)
1020a8b8:	2821883a 	mov	r16,r5
1020a8bc:	dcc00315 	stw	r19,12(sp)
1020a8c0:	300b883a 	mov	r5,r6
1020a8c4:	2027883a 	mov	r19,r4
1020a8c8:	8009883a 	mov	r4,r16
1020a8cc:	dc800215 	stw	r18,8(sp)
1020a8d0:	dfc00415 	stw	ra,16(sp)
1020a8d4:	dc400115 	stw	r17,4(sp)
1020a8d8:	3025883a 	mov	r18,r6
1020a8dc:	020a8500 	call	1020a850 <__mcmp>
1020a8e0:	10005226 	beq	r2,zero,1020aa2c <__mdiff+0x17c>
1020a8e4:	10004c16 	blt	r2,zero,1020aa18 <__mdiff+0x168>
1020a8e8:	0023883a 	mov	r17,zero
1020a8ec:	81400117 	ldw	r5,4(r16)
1020a8f0:	9809883a 	mov	r4,r19
1020a8f4:	0209f7c0 	call	10209f7c <_Balloc>
1020a8f8:	83400417 	ldw	r13,16(r16)
1020a8fc:	93800417 	ldw	r14,16(r18)
1020a900:	81000504 	addi	r4,r16,20
1020a904:	6b59883a 	add	r12,r13,r13
1020a908:	739d883a 	add	r14,r14,r14
1020a90c:	6319883a 	add	r12,r12,r12
1020a910:	91800504 	addi	r6,r18,20
1020a914:	739d883a 	add	r14,r14,r14
1020a918:	14400315 	stw	r17,12(r2)
1020a91c:	2319883a 	add	r12,r4,r12
1020a920:	339d883a 	add	r14,r6,r14
1020a924:	12400504 	addi	r9,r2,20
1020a928:	0007883a 	mov	r3,zero
1020a92c:	22000017 	ldw	r8,0(r4)
1020a930:	32800017 	ldw	r10,0(r6)
1020a934:	4ac00104 	addi	r11,r9,4
1020a938:	41ffffcc 	andi	r7,r8,65535
1020a93c:	38c7883a 	add	r3,r7,r3
1020a940:	51ffffcc 	andi	r7,r10,65535
1020a944:	19cfc83a 	sub	r7,r3,r7
1020a948:	4010d43a 	srli	r8,r8,16
1020a94c:	5014d43a 	srli	r10,r10,16
1020a950:	3807d43a 	srai	r3,r7,16
1020a954:	39ffffcc 	andi	r7,r7,65535
1020a958:	4291c83a 	sub	r8,r8,r10
1020a95c:	40c7883a 	add	r3,r8,r3
1020a960:	1810943a 	slli	r8,r3,16
1020a964:	31800104 	addi	r6,r6,4
1020a968:	21000104 	addi	r4,r4,4
1020a96c:	41ceb03a 	or	r7,r8,r7
1020a970:	49c00015 	stw	r7,0(r9)
1020a974:	1807d43a 	srai	r3,r3,16
1020a978:	580b883a 	mov	r5,r11
1020a97c:	5813883a 	mov	r9,r11
1020a980:	33bfea36 	bltu	r6,r14,1020a92c <__mdiff+0x7c>
1020a984:	2011883a 	mov	r8,r4
1020a988:	2300152e 	bgeu	r4,r12,1020a9e0 <__mdiff+0x130>
1020a98c:	21400017 	ldw	r5,0(r4)
1020a990:	4a400104 	addi	r9,r9,4
1020a994:	21000104 	addi	r4,r4,4
1020a998:	29ffffcc 	andi	r7,r5,65535
1020a99c:	38c7883a 	add	r3,r7,r3
1020a9a0:	280ad43a 	srli	r5,r5,16
1020a9a4:	180dd43a 	srai	r6,r3,16
1020a9a8:	19ffffcc 	andi	r7,r3,65535
1020a9ac:	3147883a 	add	r3,r6,r5
1020a9b0:	180a943a 	slli	r5,r3,16
1020a9b4:	1807d43a 	srai	r3,r3,16
1020a9b8:	29ceb03a 	or	r7,r5,r7
1020a9bc:	49ffff15 	stw	r7,-4(r9)
1020a9c0:	233ff236 	bltu	r4,r12,1020a98c <__mdiff+0xdc>
1020a9c4:	0206303a 	nor	r3,zero,r8
1020a9c8:	1b07883a 	add	r3,r3,r12
1020a9cc:	1806d0ba 	srli	r3,r3,2
1020a9d0:	18c00044 	addi	r3,r3,1
1020a9d4:	18c7883a 	add	r3,r3,r3
1020a9d8:	18c7883a 	add	r3,r3,r3
1020a9dc:	58cb883a 	add	r5,r11,r3
1020a9e0:	28ffff04 	addi	r3,r5,-4
1020a9e4:	3800041e 	bne	r7,zero,1020a9f8 <__mdiff+0x148>
1020a9e8:	18ffff04 	addi	r3,r3,-4
1020a9ec:	19000017 	ldw	r4,0(r3)
1020a9f0:	6b7fffc4 	addi	r13,r13,-1
1020a9f4:	203ffc26 	beq	r4,zero,1020a9e8 <__mdiff+0x138>
1020a9f8:	13400415 	stw	r13,16(r2)
1020a9fc:	dfc00417 	ldw	ra,16(sp)
1020aa00:	dcc00317 	ldw	r19,12(sp)
1020aa04:	dc800217 	ldw	r18,8(sp)
1020aa08:	dc400117 	ldw	r17,4(sp)
1020aa0c:	dc000017 	ldw	r16,0(sp)
1020aa10:	dec00504 	addi	sp,sp,20
1020aa14:	f800283a 	ret
1020aa18:	8005883a 	mov	r2,r16
1020aa1c:	04400044 	movi	r17,1
1020aa20:	9021883a 	mov	r16,r18
1020aa24:	1025883a 	mov	r18,r2
1020aa28:	003fb006 	br	1020a8ec <__mdiff+0x3c>
1020aa2c:	9809883a 	mov	r4,r19
1020aa30:	000b883a 	mov	r5,zero
1020aa34:	0209f7c0 	call	10209f7c <_Balloc>
1020aa38:	00c00044 	movi	r3,1
1020aa3c:	10c00415 	stw	r3,16(r2)
1020aa40:	10000515 	stw	zero,20(r2)
1020aa44:	003fed06 	br	1020a9fc <__mdiff+0x14c>

1020aa48 <__ulp>:
1020aa48:	295ffc2c 	andhi	r5,r5,32752
1020aa4c:	00bf3034 	movhi	r2,64704
1020aa50:	2887883a 	add	r3,r5,r2
1020aa54:	00c0020e 	bge	zero,r3,1020aa60 <__ulp+0x18>
1020aa58:	0005883a 	mov	r2,zero
1020aa5c:	f800283a 	ret
1020aa60:	00c7c83a 	sub	r3,zero,r3
1020aa64:	180bd53a 	srai	r5,r3,20
1020aa68:	008004c4 	movi	r2,19
1020aa6c:	11400a0e 	bge	r2,r5,1020aa98 <__ulp+0x50>
1020aa70:	00800c84 	movi	r2,50
1020aa74:	0007883a 	mov	r3,zero
1020aa78:	11400516 	blt	r2,r5,1020aa90 <__ulp+0x48>
1020aa7c:	00800cc4 	movi	r2,51
1020aa80:	114bc83a 	sub	r5,r2,r5
1020aa84:	00800044 	movi	r2,1
1020aa88:	1144983a 	sll	r2,r2,r5
1020aa8c:	f800283a 	ret
1020aa90:	00800044 	movi	r2,1
1020aa94:	f800283a 	ret
1020aa98:	00800234 	movhi	r2,8
1020aa9c:	1147d83a 	sra	r3,r2,r5
1020aaa0:	0005883a 	mov	r2,zero
1020aaa4:	f800283a 	ret

1020aaa8 <__b2d>:
1020aaa8:	defffa04 	addi	sp,sp,-24
1020aaac:	dc000015 	stw	r16,0(sp)
1020aab0:	24000417 	ldw	r16,16(r4)
1020aab4:	dc400115 	stw	r17,4(sp)
1020aab8:	24400504 	addi	r17,r4,20
1020aabc:	8421883a 	add	r16,r16,r16
1020aac0:	8421883a 	add	r16,r16,r16
1020aac4:	8c21883a 	add	r16,r17,r16
1020aac8:	dc800215 	stw	r18,8(sp)
1020aacc:	84bfff17 	ldw	r18,-4(r16)
1020aad0:	dd000415 	stw	r20,16(sp)
1020aad4:	dcc00315 	stw	r19,12(sp)
1020aad8:	9009883a 	mov	r4,r18
1020aadc:	2829883a 	mov	r20,r5
1020aae0:	dfc00515 	stw	ra,20(sp)
1020aae4:	020a2700 	call	1020a270 <__hi0bits>
1020aae8:	00c00804 	movi	r3,32
1020aaec:	1887c83a 	sub	r3,r3,r2
1020aaf0:	a0c00015 	stw	r3,0(r20)
1020aaf4:	00c00284 	movi	r3,10
1020aaf8:	84ffff04 	addi	r19,r16,-4
1020aafc:	18801216 	blt	r3,r2,1020ab48 <__b2d+0xa0>
1020ab00:	014002c4 	movi	r5,11
1020ab04:	2889c83a 	sub	r4,r5,r2
1020ab08:	9106d83a 	srl	r3,r18,r4
1020ab0c:	18cffc34 	orhi	r3,r3,16368
1020ab10:	8cc0282e 	bgeu	r17,r19,1020abb4 <__b2d+0x10c>
1020ab14:	817ffe17 	ldw	r5,-8(r16)
1020ab18:	290ad83a 	srl	r5,r5,r4
1020ab1c:	10800544 	addi	r2,r2,21
1020ab20:	9084983a 	sll	r2,r18,r2
1020ab24:	2884b03a 	or	r2,r5,r2
1020ab28:	dfc00517 	ldw	ra,20(sp)
1020ab2c:	dd000417 	ldw	r20,16(sp)
1020ab30:	dcc00317 	ldw	r19,12(sp)
1020ab34:	dc800217 	ldw	r18,8(sp)
1020ab38:	dc400117 	ldw	r17,4(sp)
1020ab3c:	dc000017 	ldw	r16,0(sp)
1020ab40:	dec00604 	addi	sp,sp,24
1020ab44:	f800283a 	ret
1020ab48:	113ffd44 	addi	r4,r2,-11
1020ab4c:	8cc00f2e 	bgeu	r17,r19,1020ab8c <__b2d+0xe4>
1020ab50:	81bffe04 	addi	r6,r16,-8
1020ab54:	817ffe17 	ldw	r5,-8(r16)
1020ab58:	20001326 	beq	r4,zero,1020aba8 <__b2d+0x100>
1020ab5c:	00c00ac4 	movi	r3,43
1020ab60:	1885c83a 	sub	r2,r3,r2
1020ab64:	2886d83a 	srl	r3,r5,r2
1020ab68:	9124983a 	sll	r18,r18,r4
1020ab6c:	90e4b03a 	or	r18,r18,r3
1020ab70:	90cffc34 	orhi	r3,r18,16368
1020ab74:	8980112e 	bgeu	r17,r6,1020abbc <__b2d+0x114>
1020ab78:	81bffd17 	ldw	r6,-12(r16)
1020ab7c:	308cd83a 	srl	r6,r6,r2
1020ab80:	2904983a 	sll	r2,r5,r4
1020ab84:	1184b03a 	or	r2,r2,r6
1020ab88:	003fe706 	br	1020ab28 <__b2d+0x80>
1020ab8c:	20000526 	beq	r4,zero,1020aba4 <__b2d+0xfc>
1020ab90:	9124983a 	sll	r18,r18,r4
1020ab94:	000d883a 	mov	r6,zero
1020ab98:	000b883a 	mov	r5,zero
1020ab9c:	90cffc34 	orhi	r3,r18,16368
1020aba0:	003ff706 	br	1020ab80 <__b2d+0xd8>
1020aba4:	000b883a 	mov	r5,zero
1020aba8:	90cffc34 	orhi	r3,r18,16368
1020abac:	2805883a 	mov	r2,r5
1020abb0:	003fdd06 	br	1020ab28 <__b2d+0x80>
1020abb4:	000b883a 	mov	r5,zero
1020abb8:	003fd806 	br	1020ab1c <__b2d+0x74>
1020abbc:	000d883a 	mov	r6,zero
1020abc0:	003fef06 	br	1020ab80 <__b2d+0xd8>

1020abc4 <__d2b>:
1020abc4:	defff704 	addi	sp,sp,-36
1020abc8:	dc000215 	stw	r16,8(sp)
1020abcc:	3021883a 	mov	r16,r6
1020abd0:	dc400315 	stw	r17,12(sp)
1020abd4:	8022907a 	slli	r17,r16,1
1020abd8:	dd400715 	stw	r21,28(sp)
1020abdc:	282b883a 	mov	r21,r5
1020abe0:	01400044 	movi	r5,1
1020abe4:	dd000615 	stw	r20,24(sp)
1020abe8:	dcc00515 	stw	r19,20(sp)
1020abec:	dc800415 	stw	r18,16(sp)
1020abf0:	dfc00815 	stw	ra,32(sp)
1020abf4:	3829883a 	mov	r20,r7
1020abf8:	dc800917 	ldw	r18,36(sp)
1020abfc:	8822d57a 	srli	r17,r17,21
1020ac00:	0209f7c0 	call	10209f7c <_Balloc>
1020ac04:	1027883a 	mov	r19,r2
1020ac08:	00800434 	movhi	r2,16
1020ac0c:	10bfffc4 	addi	r2,r2,-1
1020ac10:	808c703a 	and	r6,r16,r2
1020ac14:	88000126 	beq	r17,zero,1020ac1c <__d2b+0x58>
1020ac18:	31800434 	orhi	r6,r6,16
1020ac1c:	d9800015 	stw	r6,0(sp)
1020ac20:	a8001f26 	beq	r21,zero,1020aca0 <__d2b+0xdc>
1020ac24:	d9000104 	addi	r4,sp,4
1020ac28:	dd400115 	stw	r21,4(sp)
1020ac2c:	020a2d80 	call	1020a2d8 <__lo0bits>
1020ac30:	d8c00017 	ldw	r3,0(sp)
1020ac34:	1000291e 	bne	r2,zero,1020acdc <__d2b+0x118>
1020ac38:	d9000117 	ldw	r4,4(sp)
1020ac3c:	99000515 	stw	r4,20(r19)
1020ac40:	1820c03a 	cmpne	r16,r3,zero
1020ac44:	84000044 	addi	r16,r16,1
1020ac48:	98c00615 	stw	r3,24(r19)
1020ac4c:	9c000415 	stw	r16,16(r19)
1020ac50:	88001b1e 	bne	r17,zero,1020acc0 <__d2b+0xfc>
1020ac54:	800690ba 	slli	r3,r16,2
1020ac58:	10bef384 	addi	r2,r2,-1074
1020ac5c:	a0800015 	stw	r2,0(r20)
1020ac60:	98c5883a 	add	r2,r19,r3
1020ac64:	11000417 	ldw	r4,16(r2)
1020ac68:	8020917a 	slli	r16,r16,5
1020ac6c:	020a2700 	call	1020a270 <__hi0bits>
1020ac70:	8085c83a 	sub	r2,r16,r2
1020ac74:	90800015 	stw	r2,0(r18)
1020ac78:	9805883a 	mov	r2,r19
1020ac7c:	dfc00817 	ldw	ra,32(sp)
1020ac80:	dd400717 	ldw	r21,28(sp)
1020ac84:	dd000617 	ldw	r20,24(sp)
1020ac88:	dcc00517 	ldw	r19,20(sp)
1020ac8c:	dc800417 	ldw	r18,16(sp)
1020ac90:	dc400317 	ldw	r17,12(sp)
1020ac94:	dc000217 	ldw	r16,8(sp)
1020ac98:	dec00904 	addi	sp,sp,36
1020ac9c:	f800283a 	ret
1020aca0:	d809883a 	mov	r4,sp
1020aca4:	020a2d80 	call	1020a2d8 <__lo0bits>
1020aca8:	d8c00017 	ldw	r3,0(sp)
1020acac:	04000044 	movi	r16,1
1020acb0:	9c000415 	stw	r16,16(r19)
1020acb4:	98c00515 	stw	r3,20(r19)
1020acb8:	10800804 	addi	r2,r2,32
1020acbc:	883fe526 	beq	r17,zero,1020ac54 <__d2b+0x90>
1020acc0:	8c7ef344 	addi	r17,r17,-1075
1020acc4:	88a3883a 	add	r17,r17,r2
1020acc8:	00c00d44 	movi	r3,53
1020accc:	a4400015 	stw	r17,0(r20)
1020acd0:	1885c83a 	sub	r2,r3,r2
1020acd4:	90800015 	stw	r2,0(r18)
1020acd8:	003fe706 	br	1020ac78 <__d2b+0xb4>
1020acdc:	01000804 	movi	r4,32
1020ace0:	2089c83a 	sub	r4,r4,r2
1020ace4:	1908983a 	sll	r4,r3,r4
1020ace8:	d9400117 	ldw	r5,4(sp)
1020acec:	1886d83a 	srl	r3,r3,r2
1020acf0:	2148b03a 	or	r4,r4,r5
1020acf4:	99000515 	stw	r4,20(r19)
1020acf8:	d8c00015 	stw	r3,0(sp)
1020acfc:	003fd006 	br	1020ac40 <__d2b+0x7c>

1020ad00 <__ratio>:
1020ad00:	defff904 	addi	sp,sp,-28
1020ad04:	dc400315 	stw	r17,12(sp)
1020ad08:	2823883a 	mov	r17,r5
1020ad0c:	d9400104 	addi	r5,sp,4
1020ad10:	dfc00615 	stw	ra,24(sp)
1020ad14:	dcc00515 	stw	r19,20(sp)
1020ad18:	dc800415 	stw	r18,16(sp)
1020ad1c:	2027883a 	mov	r19,r4
1020ad20:	dc000215 	stw	r16,8(sp)
1020ad24:	020aaa80 	call	1020aaa8 <__b2d>
1020ad28:	8809883a 	mov	r4,r17
1020ad2c:	d80b883a 	mov	r5,sp
1020ad30:	1025883a 	mov	r18,r2
1020ad34:	1821883a 	mov	r16,r3
1020ad38:	020aaa80 	call	1020aaa8 <__b2d>
1020ad3c:	8a400417 	ldw	r9,16(r17)
1020ad40:	9a000417 	ldw	r8,16(r19)
1020ad44:	100d883a 	mov	r6,r2
1020ad48:	d8800017 	ldw	r2,0(sp)
1020ad4c:	4251c83a 	sub	r8,r8,r9
1020ad50:	4012917a 	slli	r9,r8,5
1020ad54:	da000117 	ldw	r8,4(sp)
1020ad58:	4091c83a 	sub	r8,r8,r2
1020ad5c:	4251883a 	add	r8,r8,r9
1020ad60:	02000d0e 	bge	zero,r8,1020ad98 <__ratio+0x98>
1020ad64:	4010953a 	slli	r8,r8,20
1020ad68:	4421883a 	add	r16,r8,r16
1020ad6c:	9009883a 	mov	r4,r18
1020ad70:	800b883a 	mov	r5,r16
1020ad74:	180f883a 	mov	r7,r3
1020ad78:	02163940 	call	10216394 <__divdf3>
1020ad7c:	dfc00617 	ldw	ra,24(sp)
1020ad80:	dcc00517 	ldw	r19,20(sp)
1020ad84:	dc800417 	ldw	r18,16(sp)
1020ad88:	dc400317 	ldw	r17,12(sp)
1020ad8c:	dc000217 	ldw	r16,8(sp)
1020ad90:	dec00704 	addi	sp,sp,28
1020ad94:	f800283a 	ret
1020ad98:	4010953a 	slli	r8,r8,20
1020ad9c:	1a07c83a 	sub	r3,r3,r8
1020ada0:	003ff206 	br	1020ad6c <__ratio+0x6c>

1020ada4 <_mprec_log10>:
1020ada4:	defffe04 	addi	sp,sp,-8
1020ada8:	dc000015 	stw	r16,0(sp)
1020adac:	dfc00115 	stw	ra,4(sp)
1020adb0:	008005c4 	movi	r2,23
1020adb4:	2021883a 	mov	r16,r4
1020adb8:	11000d0e 	bge	r2,r4,1020adf0 <_mprec_log10+0x4c>
1020adbc:	0005883a 	mov	r2,zero
1020adc0:	00cffc34 	movhi	r3,16368
1020adc4:	843fffc4 	addi	r16,r16,-1
1020adc8:	1009883a 	mov	r4,r2
1020adcc:	180b883a 	mov	r5,r3
1020add0:	000d883a 	mov	r6,zero
1020add4:	01d00934 	movhi	r7,16420
1020add8:	0216ea40 	call	10216ea4 <__muldf3>
1020addc:	803ff91e 	bne	r16,zero,1020adc4 <_mprec_log10+0x20>
1020ade0:	dfc00117 	ldw	ra,4(sp)
1020ade4:	dc000017 	ldw	r16,0(sp)
1020ade8:	dec00204 	addi	sp,sp,8
1020adec:	f800283a 	ret
1020adf0:	202090fa 	slli	r16,r4,3
1020adf4:	008408b4 	movhi	r2,4130
1020adf8:	10b4e704 	addi	r2,r2,-11364
1020adfc:	1421883a 	add	r16,r2,r16
1020ae00:	80800017 	ldw	r2,0(r16)
1020ae04:	80c00117 	ldw	r3,4(r16)
1020ae08:	dfc00117 	ldw	ra,4(sp)
1020ae0c:	dc000017 	ldw	r16,0(sp)
1020ae10:	dec00204 	addi	sp,sp,8
1020ae14:	f800283a 	ret

1020ae18 <__copybits>:
1020ae18:	297fffc4 	addi	r5,r5,-1
1020ae1c:	280fd17a 	srai	r7,r5,5
1020ae20:	30c00417 	ldw	r3,16(r6)
1020ae24:	30800504 	addi	r2,r6,20
1020ae28:	39c00044 	addi	r7,r7,1
1020ae2c:	18c7883a 	add	r3,r3,r3
1020ae30:	39cf883a 	add	r7,r7,r7
1020ae34:	18c7883a 	add	r3,r3,r3
1020ae38:	39cf883a 	add	r7,r7,r7
1020ae3c:	10c7883a 	add	r3,r2,r3
1020ae40:	21cf883a 	add	r7,r4,r7
1020ae44:	10c00d2e 	bgeu	r2,r3,1020ae7c <__copybits+0x64>
1020ae48:	200b883a 	mov	r5,r4
1020ae4c:	12000017 	ldw	r8,0(r2)
1020ae50:	29400104 	addi	r5,r5,4
1020ae54:	10800104 	addi	r2,r2,4
1020ae58:	2a3fff15 	stw	r8,-4(r5)
1020ae5c:	10fffb36 	bltu	r2,r3,1020ae4c <__copybits+0x34>
1020ae60:	1985c83a 	sub	r2,r3,r6
1020ae64:	10bffac4 	addi	r2,r2,-21
1020ae68:	1004d0ba 	srli	r2,r2,2
1020ae6c:	10800044 	addi	r2,r2,1
1020ae70:	1085883a 	add	r2,r2,r2
1020ae74:	1085883a 	add	r2,r2,r2
1020ae78:	2089883a 	add	r4,r4,r2
1020ae7c:	21c0032e 	bgeu	r4,r7,1020ae8c <__copybits+0x74>
1020ae80:	20000015 	stw	zero,0(r4)
1020ae84:	21000104 	addi	r4,r4,4
1020ae88:	21fffd36 	bltu	r4,r7,1020ae80 <__copybits+0x68>
1020ae8c:	f800283a 	ret

1020ae90 <__any_on>:
1020ae90:	20c00417 	ldw	r3,16(r4)
1020ae94:	2805d17a 	srai	r2,r5,5
1020ae98:	21000504 	addi	r4,r4,20
1020ae9c:	18800d0e 	bge	r3,r2,1020aed4 <__any_on+0x44>
1020aea0:	18c7883a 	add	r3,r3,r3
1020aea4:	18c7883a 	add	r3,r3,r3
1020aea8:	20c7883a 	add	r3,r4,r3
1020aeac:	20c0192e 	bgeu	r4,r3,1020af14 <__any_on+0x84>
1020aeb0:	18bfff17 	ldw	r2,-4(r3)
1020aeb4:	18ffff04 	addi	r3,r3,-4
1020aeb8:	1000041e 	bne	r2,zero,1020aecc <__any_on+0x3c>
1020aebc:	20c0142e 	bgeu	r4,r3,1020af10 <__any_on+0x80>
1020aec0:	18ffff04 	addi	r3,r3,-4
1020aec4:	19400017 	ldw	r5,0(r3)
1020aec8:	283ffc26 	beq	r5,zero,1020aebc <__any_on+0x2c>
1020aecc:	00800044 	movi	r2,1
1020aed0:	f800283a 	ret
1020aed4:	10c00a0e 	bge	r2,r3,1020af00 <__any_on+0x70>
1020aed8:	1085883a 	add	r2,r2,r2
1020aedc:	1085883a 	add	r2,r2,r2
1020aee0:	294007cc 	andi	r5,r5,31
1020aee4:	2087883a 	add	r3,r4,r2
1020aee8:	283ff026 	beq	r5,zero,1020aeac <__any_on+0x1c>
1020aeec:	19800017 	ldw	r6,0(r3)
1020aef0:	3144d83a 	srl	r2,r6,r5
1020aef4:	114a983a 	sll	r5,r2,r5
1020aef8:	29bff41e 	bne	r5,r6,1020aecc <__any_on+0x3c>
1020aefc:	003feb06 	br	1020aeac <__any_on+0x1c>
1020af00:	1085883a 	add	r2,r2,r2
1020af04:	1085883a 	add	r2,r2,r2
1020af08:	2087883a 	add	r3,r4,r2
1020af0c:	003fe706 	br	1020aeac <__any_on+0x1c>
1020af10:	f800283a 	ret
1020af14:	0005883a 	mov	r2,zero
1020af18:	f800283a 	ret

1020af1c <_putc_r>:
1020af1c:	defffc04 	addi	sp,sp,-16
1020af20:	dc000215 	stw	r16,8(sp)
1020af24:	dfc00315 	stw	ra,12(sp)
1020af28:	2021883a 	mov	r16,r4
1020af2c:	20000226 	beq	r4,zero,1020af38 <_putc_r+0x1c>
1020af30:	20800e17 	ldw	r2,56(r4)
1020af34:	10001b26 	beq	r2,zero,1020afa4 <_putc_r+0x88>
1020af38:	30800217 	ldw	r2,8(r6)
1020af3c:	10bfffc4 	addi	r2,r2,-1
1020af40:	30800215 	stw	r2,8(r6)
1020af44:	10000a16 	blt	r2,zero,1020af70 <_putc_r+0x54>
1020af48:	30800017 	ldw	r2,0(r6)
1020af4c:	11400005 	stb	r5,0(r2)
1020af50:	30800017 	ldw	r2,0(r6)
1020af54:	10c00044 	addi	r3,r2,1
1020af58:	30c00015 	stw	r3,0(r6)
1020af5c:	10800003 	ldbu	r2,0(r2)
1020af60:	dfc00317 	ldw	ra,12(sp)
1020af64:	dc000217 	ldw	r16,8(sp)
1020af68:	dec00404 	addi	sp,sp,16
1020af6c:	f800283a 	ret
1020af70:	30c00617 	ldw	r3,24(r6)
1020af74:	10c00616 	blt	r2,r3,1020af90 <_putc_r+0x74>
1020af78:	30800017 	ldw	r2,0(r6)
1020af7c:	00c00284 	movi	r3,10
1020af80:	11400005 	stb	r5,0(r2)
1020af84:	30800017 	ldw	r2,0(r6)
1020af88:	11400003 	ldbu	r5,0(r2)
1020af8c:	28fff11e 	bne	r5,r3,1020af54 <_putc_r+0x38>
1020af90:	8009883a 	mov	r4,r16
1020af94:	dfc00317 	ldw	ra,12(sp)
1020af98:	dc000217 	ldw	r16,8(sp)
1020af9c:	dec00404 	addi	sp,sp,16
1020afa0:	02126fc1 	jmpi	102126fc <__swbuf_r>
1020afa4:	d9400015 	stw	r5,0(sp)
1020afa8:	d9800115 	stw	r6,4(sp)
1020afac:	0208c200 	call	10208c20 <__sinit>
1020afb0:	d9800117 	ldw	r6,4(sp)
1020afb4:	d9400017 	ldw	r5,0(sp)
1020afb8:	003fdf06 	br	1020af38 <_putc_r+0x1c>

1020afbc <putc>:
1020afbc:	008408b4 	movhi	r2,4130
1020afc0:	defffc04 	addi	sp,sp,-16
1020afc4:	10bd0604 	addi	r2,r2,-3048
1020afc8:	dc400115 	stw	r17,4(sp)
1020afcc:	14400017 	ldw	r17,0(r2)
1020afd0:	dc800215 	stw	r18,8(sp)
1020afd4:	dc000015 	stw	r16,0(sp)
1020afd8:	dfc00315 	stw	ra,12(sp)
1020afdc:	2025883a 	mov	r18,r4
1020afe0:	2821883a 	mov	r16,r5
1020afe4:	88000226 	beq	r17,zero,1020aff0 <putc+0x34>
1020afe8:	88800e17 	ldw	r2,56(r17)
1020afec:	10001a26 	beq	r2,zero,1020b058 <putc+0x9c>
1020aff0:	80800217 	ldw	r2,8(r16)
1020aff4:	10bfffc4 	addi	r2,r2,-1
1020aff8:	80800215 	stw	r2,8(r16)
1020affc:	10000c16 	blt	r2,zero,1020b030 <putc+0x74>
1020b000:	80800017 	ldw	r2,0(r16)
1020b004:	14800005 	stb	r18,0(r2)
1020b008:	80800017 	ldw	r2,0(r16)
1020b00c:	10c00044 	addi	r3,r2,1
1020b010:	80c00015 	stw	r3,0(r16)
1020b014:	10800003 	ldbu	r2,0(r2)
1020b018:	dfc00317 	ldw	ra,12(sp)
1020b01c:	dc800217 	ldw	r18,8(sp)
1020b020:	dc400117 	ldw	r17,4(sp)
1020b024:	dc000017 	ldw	r16,0(sp)
1020b028:	dec00404 	addi	sp,sp,16
1020b02c:	f800283a 	ret
1020b030:	80c00617 	ldw	r3,24(r16)
1020b034:	10c00b16 	blt	r2,r3,1020b064 <putc+0xa8>
1020b038:	80800017 	ldw	r2,0(r16)
1020b03c:	00c00284 	movi	r3,10
1020b040:	14800005 	stb	r18,0(r2)
1020b044:	80800017 	ldw	r2,0(r16)
1020b048:	11400003 	ldbu	r5,0(r2)
1020b04c:	28ffef1e 	bne	r5,r3,1020b00c <putc+0x50>
1020b050:	8809883a 	mov	r4,r17
1020b054:	00000506 	br	1020b06c <putc+0xb0>
1020b058:	8809883a 	mov	r4,r17
1020b05c:	0208c200 	call	10208c20 <__sinit>
1020b060:	003fe306 	br	1020aff0 <putc+0x34>
1020b064:	8809883a 	mov	r4,r17
1020b068:	900b883a 	mov	r5,r18
1020b06c:	800d883a 	mov	r6,r16
1020b070:	dfc00317 	ldw	ra,12(sp)
1020b074:	dc800217 	ldw	r18,8(sp)
1020b078:	dc400117 	ldw	r17,4(sp)
1020b07c:	dc000017 	ldw	r16,0(sp)
1020b080:	dec00404 	addi	sp,sp,16
1020b084:	02126fc1 	jmpi	102126fc <__swbuf_r>

1020b088 <_read_r>:
1020b088:	defffd04 	addi	sp,sp,-12
1020b08c:	dc000015 	stw	r16,0(sp)
1020b090:	040408b4 	movhi	r16,4130
1020b094:	dc400115 	stw	r17,4(sp)
1020b098:	84045804 	addi	r16,r16,4448
1020b09c:	2023883a 	mov	r17,r4
1020b0a0:	2809883a 	mov	r4,r5
1020b0a4:	300b883a 	mov	r5,r6
1020b0a8:	380d883a 	mov	r6,r7
1020b0ac:	dfc00215 	stw	ra,8(sp)
1020b0b0:	80000015 	stw	zero,0(r16)
1020b0b4:	0218a0c0 	call	10218a0c <read>
1020b0b8:	00ffffc4 	movi	r3,-1
1020b0bc:	10c00526 	beq	r2,r3,1020b0d4 <_read_r+0x4c>
1020b0c0:	dfc00217 	ldw	ra,8(sp)
1020b0c4:	dc400117 	ldw	r17,4(sp)
1020b0c8:	dc000017 	ldw	r16,0(sp)
1020b0cc:	dec00304 	addi	sp,sp,12
1020b0d0:	f800283a 	ret
1020b0d4:	80c00017 	ldw	r3,0(r16)
1020b0d8:	183ff926 	beq	r3,zero,1020b0c0 <_read_r+0x38>
1020b0dc:	88c00015 	stw	r3,0(r17)
1020b0e0:	003ff706 	br	1020b0c0 <_read_r+0x38>

1020b0e4 <_realloc_r>:
1020b0e4:	defff604 	addi	sp,sp,-40
1020b0e8:	dd000415 	stw	r20,16(sp)
1020b0ec:	dc400115 	stw	r17,4(sp)
1020b0f0:	dfc00915 	stw	ra,36(sp)
1020b0f4:	df000815 	stw	fp,32(sp)
1020b0f8:	ddc00715 	stw	r23,28(sp)
1020b0fc:	dd800615 	stw	r22,24(sp)
1020b100:	dd400515 	stw	r21,20(sp)
1020b104:	dcc00315 	stw	r19,12(sp)
1020b108:	dc800215 	stw	r18,8(sp)
1020b10c:	dc000015 	stw	r16,0(sp)
1020b110:	2829883a 	mov	r20,r5
1020b114:	3023883a 	mov	r17,r6
1020b118:	2800ad26 	beq	r5,zero,1020b3d0 <_realloc_r+0x2ec>
1020b11c:	2025883a 	mov	r18,r4
1020b120:	021897c0 	call	1021897c <__malloc_lock>
1020b124:	a0ffff17 	ldw	r3,-4(r20)
1020b128:	043fff04 	movi	r16,-4
1020b12c:	890002c4 	addi	r4,r17,11
1020b130:	01c00584 	movi	r7,22
1020b134:	a57ffe04 	addi	r21,r20,-8
1020b138:	1c20703a 	and	r16,r3,r16
1020b13c:	39001d2e 	bgeu	r7,r4,1020b1b4 <_realloc_r+0xd0>
1020b140:	05bffe04 	movi	r22,-8
1020b144:	25ac703a 	and	r22,r4,r22
1020b148:	b00f883a 	mov	r7,r22
1020b14c:	b0006516 	blt	r22,zero,1020b2e4 <_realloc_r+0x200>
1020b150:	b4406436 	bltu	r22,r17,1020b2e4 <_realloc_r+0x200>
1020b154:	81c01a0e 	bge	r16,r7,1020b1c0 <_realloc_r+0xdc>
1020b158:	070408b4 	movhi	fp,4130
1020b15c:	e736ea04 	addi	fp,fp,-9304
1020b160:	e1400217 	ldw	r5,8(fp)
1020b164:	ac11883a 	add	r8,r21,r16
1020b168:	2a006226 	beq	r5,r8,1020b2f4 <_realloc_r+0x210>
1020b16c:	41800117 	ldw	r6,4(r8)
1020b170:	027fff84 	movi	r9,-2
1020b174:	3252703a 	and	r9,r6,r9
1020b178:	4253883a 	add	r9,r8,r9
1020b17c:	49000117 	ldw	r4,4(r9)
1020b180:	2100004c 	andi	r4,r4,1
1020b184:	2000281e 	bne	r4,zero,1020b228 <_realloc_r+0x144>
1020b188:	00bfff04 	movi	r2,-4
1020b18c:	3084703a 	and	r2,r6,r2
1020b190:	1409883a 	add	r4,r2,r16
1020b194:	21c05e16 	blt	r4,r7,1020b310 <_realloc_r+0x22c>
1020b198:	40800317 	ldw	r2,12(r8)
1020b19c:	41400217 	ldw	r5,8(r8)
1020b1a0:	a023883a 	mov	r17,r20
1020b1a4:	2021883a 	mov	r16,r4
1020b1a8:	28800315 	stw	r2,12(r5)
1020b1ac:	11400215 	stw	r5,8(r2)
1020b1b0:	00000406 	br	1020b1c4 <_realloc_r+0xe0>
1020b1b4:	01c00404 	movi	r7,16
1020b1b8:	382d883a 	mov	r22,r7
1020b1bc:	003fe406 	br	1020b150 <_realloc_r+0x6c>
1020b1c0:	a023883a 	mov	r17,r20
1020b1c4:	858fc83a 	sub	r7,r16,r22
1020b1c8:	008003c4 	movi	r2,15
1020b1cc:	18c0004c 	andi	r3,r3,1
1020b1d0:	11c07236 	bltu	r2,r7,1020b39c <_realloc_r+0x2b8>
1020b1d4:	1c06b03a 	or	r3,r3,r16
1020b1d8:	a8c00115 	stw	r3,4(r21)
1020b1dc:	ac21883a 	add	r16,r21,r16
1020b1e0:	80800117 	ldw	r2,4(r16)
1020b1e4:	10800054 	ori	r2,r2,1
1020b1e8:	80800115 	stw	r2,4(r16)
1020b1ec:	9009883a 	mov	r4,r18
1020b1f0:	021899c0 	call	1021899c <__malloc_unlock>
1020b1f4:	8805883a 	mov	r2,r17
1020b1f8:	dfc00917 	ldw	ra,36(sp)
1020b1fc:	df000817 	ldw	fp,32(sp)
1020b200:	ddc00717 	ldw	r23,28(sp)
1020b204:	dd800617 	ldw	r22,24(sp)
1020b208:	dd400517 	ldw	r21,20(sp)
1020b20c:	dd000417 	ldw	r20,16(sp)
1020b210:	dcc00317 	ldw	r19,12(sp)
1020b214:	dc800217 	ldw	r18,8(sp)
1020b218:	dc400117 	ldw	r17,4(sp)
1020b21c:	dc000017 	ldw	r16,0(sp)
1020b220:	dec00a04 	addi	sp,sp,40
1020b224:	f800283a 	ret
1020b228:	18c0004c 	andi	r3,r3,1
1020b22c:	1800081e 	bne	r3,zero,1020b250 <_realloc_r+0x16c>
1020b230:	a4fffe17 	ldw	r19,-8(r20)
1020b234:	00bfff04 	movi	r2,-4
1020b238:	ace7c83a 	sub	r19,r21,r19
1020b23c:	98c00117 	ldw	r3,4(r19)
1020b240:	1886703a 	and	r3,r3,r2
1020b244:	98000226 	beq	r19,zero,1020b250 <_realloc_r+0x16c>
1020b248:	1c2f883a 	add	r23,r3,r16
1020b24c:	b9c06d0e 	bge	r23,r7,1020b404 <_realloc_r+0x320>
1020b250:	880b883a 	mov	r5,r17
1020b254:	9009883a 	mov	r4,r18
1020b258:	02025a40 	call	102025a4 <_malloc_r>
1020b25c:	1023883a 	mov	r17,r2
1020b260:	1000ef26 	beq	r2,zero,1020b620 <_realloc_r+0x53c>
1020b264:	a0ffff17 	ldw	r3,-4(r20)
1020b268:	113ffe04 	addi	r4,r2,-8
1020b26c:	00bfff84 	movi	r2,-2
1020b270:	1884703a 	and	r2,r3,r2
1020b274:	a885883a 	add	r2,r21,r2
1020b278:	2080bf26 	beq	r4,r2,1020b578 <_realloc_r+0x494>
1020b27c:	81bfff04 	addi	r6,r16,-4
1020b280:	00800904 	movi	r2,36
1020b284:	11808936 	bltu	r2,r6,1020b4ac <_realloc_r+0x3c8>
1020b288:	00c004c4 	movi	r3,19
1020b28c:	19806c2e 	bgeu	r3,r6,1020b440 <_realloc_r+0x35c>
1020b290:	a0c00017 	ldw	r3,0(r20)
1020b294:	88c00015 	stw	r3,0(r17)
1020b298:	a0c00117 	ldw	r3,4(r20)
1020b29c:	88c00115 	stw	r3,4(r17)
1020b2a0:	00c006c4 	movi	r3,27
1020b2a4:	1980ac36 	bltu	r3,r6,1020b558 <_realloc_r+0x474>
1020b2a8:	88800204 	addi	r2,r17,8
1020b2ac:	a0c00204 	addi	r3,r20,8
1020b2b0:	19000017 	ldw	r4,0(r3)
1020b2b4:	11000015 	stw	r4,0(r2)
1020b2b8:	19000117 	ldw	r4,4(r3)
1020b2bc:	11000115 	stw	r4,4(r2)
1020b2c0:	18c00217 	ldw	r3,8(r3)
1020b2c4:	10c00215 	stw	r3,8(r2)
1020b2c8:	a00b883a 	mov	r5,r20
1020b2cc:	9009883a 	mov	r4,r18
1020b2d0:	0208d940 	call	10208d94 <_free_r>
1020b2d4:	9009883a 	mov	r4,r18
1020b2d8:	021899c0 	call	1021899c <__malloc_unlock>
1020b2dc:	8805883a 	mov	r2,r17
1020b2e0:	003fc506 	br	1020b1f8 <_realloc_r+0x114>
1020b2e4:	00800304 	movi	r2,12
1020b2e8:	90800015 	stw	r2,0(r18)
1020b2ec:	0005883a 	mov	r2,zero
1020b2f0:	003fc106 	br	1020b1f8 <_realloc_r+0x114>
1020b2f4:	29800117 	ldw	r6,4(r5)
1020b2f8:	00bfff04 	movi	r2,-4
1020b2fc:	b1000404 	addi	r4,r22,16
1020b300:	3084703a 	and	r2,r6,r2
1020b304:	140d883a 	add	r6,r2,r16
1020b308:	31005b0e 	bge	r6,r4,1020b478 <_realloc_r+0x394>
1020b30c:	2811883a 	mov	r8,r5
1020b310:	18c0004c 	andi	r3,r3,1
1020b314:	183fce1e 	bne	r3,zero,1020b250 <_realloc_r+0x16c>
1020b318:	a4fffe17 	ldw	r19,-8(r20)
1020b31c:	00ffff04 	movi	r3,-4
1020b320:	ace7c83a 	sub	r19,r21,r19
1020b324:	99000117 	ldw	r4,4(r19)
1020b328:	20c6703a 	and	r3,r4,r3
1020b32c:	403fc526 	beq	r8,zero,1020b244 <_realloc_r+0x160>
1020b330:	1c2f883a 	add	r23,r3,r16
1020b334:	b8af883a 	add	r23,r23,r2
1020b338:	41406026 	beq	r8,r5,1020b4bc <_realloc_r+0x3d8>
1020b33c:	b9ffc116 	blt	r23,r7,1020b244 <_realloc_r+0x160>
1020b340:	40c00217 	ldw	r3,8(r8)
1020b344:	40800317 	ldw	r2,12(r8)
1020b348:	81bfff04 	addi	r6,r16,-4
1020b34c:	01000904 	movi	r4,36
1020b350:	18800315 	stw	r2,12(r3)
1020b354:	10c00215 	stw	r3,8(r2)
1020b358:	99400217 	ldw	r5,8(r19)
1020b35c:	98c00317 	ldw	r3,12(r19)
1020b360:	9c400204 	addi	r17,r19,8
1020b364:	28c00315 	stw	r3,12(r5)
1020b368:	19400215 	stw	r5,8(r3)
1020b36c:	21802d36 	bltu	r4,r6,1020b424 <_realloc_r+0x340>
1020b370:	008004c4 	movi	r2,19
1020b374:	1180352e 	bgeu	r2,r6,1020b44c <_realloc_r+0x368>
1020b378:	a0800017 	ldw	r2,0(r20)
1020b37c:	98800215 	stw	r2,8(r19)
1020b380:	a0800117 	ldw	r2,4(r20)
1020b384:	98800315 	stw	r2,12(r19)
1020b388:	008006c4 	movi	r2,27
1020b38c:	11808036 	bltu	r2,r6,1020b590 <_realloc_r+0x4ac>
1020b390:	98c00404 	addi	r3,r19,16
1020b394:	a5000204 	addi	r20,r20,8
1020b398:	00002d06 	br	1020b450 <_realloc_r+0x36c>
1020b39c:	1d86b03a 	or	r3,r3,r22
1020b3a0:	ad8b883a 	add	r5,r21,r22
1020b3a4:	a8c00115 	stw	r3,4(r21)
1020b3a8:	38800054 	ori	r2,r7,1
1020b3ac:	28800115 	stw	r2,4(r5)
1020b3b0:	29cf883a 	add	r7,r5,r7
1020b3b4:	38800117 	ldw	r2,4(r7)
1020b3b8:	9009883a 	mov	r4,r18
1020b3bc:	29400204 	addi	r5,r5,8
1020b3c0:	10800054 	ori	r2,r2,1
1020b3c4:	38800115 	stw	r2,4(r7)
1020b3c8:	0208d940 	call	10208d94 <_free_r>
1020b3cc:	003f8706 	br	1020b1ec <_realloc_r+0x108>
1020b3d0:	300b883a 	mov	r5,r6
1020b3d4:	dfc00917 	ldw	ra,36(sp)
1020b3d8:	df000817 	ldw	fp,32(sp)
1020b3dc:	ddc00717 	ldw	r23,28(sp)
1020b3e0:	dd800617 	ldw	r22,24(sp)
1020b3e4:	dd400517 	ldw	r21,20(sp)
1020b3e8:	dd000417 	ldw	r20,16(sp)
1020b3ec:	dcc00317 	ldw	r19,12(sp)
1020b3f0:	dc800217 	ldw	r18,8(sp)
1020b3f4:	dc400117 	ldw	r17,4(sp)
1020b3f8:	dc000017 	ldw	r16,0(sp)
1020b3fc:	dec00a04 	addi	sp,sp,40
1020b400:	02025a41 	jmpi	102025a4 <_malloc_r>
1020b404:	98800317 	ldw	r2,12(r19)
1020b408:	98c00217 	ldw	r3,8(r19)
1020b40c:	81bfff04 	addi	r6,r16,-4
1020b410:	01000904 	movi	r4,36
1020b414:	18800315 	stw	r2,12(r3)
1020b418:	10c00215 	stw	r3,8(r2)
1020b41c:	9c400204 	addi	r17,r19,8
1020b420:	21bfd32e 	bgeu	r4,r6,1020b370 <_realloc_r+0x28c>
1020b424:	8809883a 	mov	r4,r17
1020b428:	a00b883a 	mov	r5,r20
1020b42c:	0209cfc0 	call	10209cfc <memmove>
1020b430:	98c00117 	ldw	r3,4(r19)
1020b434:	b821883a 	mov	r16,r23
1020b438:	982b883a 	mov	r21,r19
1020b43c:	003f6106 	br	1020b1c4 <_realloc_r+0xe0>
1020b440:	8805883a 	mov	r2,r17
1020b444:	a007883a 	mov	r3,r20
1020b448:	003f9906 	br	1020b2b0 <_realloc_r+0x1cc>
1020b44c:	8807883a 	mov	r3,r17
1020b450:	a0800017 	ldw	r2,0(r20)
1020b454:	b821883a 	mov	r16,r23
1020b458:	982b883a 	mov	r21,r19
1020b45c:	18800015 	stw	r2,0(r3)
1020b460:	a0800117 	ldw	r2,4(r20)
1020b464:	18800115 	stw	r2,4(r3)
1020b468:	a0800217 	ldw	r2,8(r20)
1020b46c:	18800215 	stw	r2,8(r3)
1020b470:	98c00117 	ldw	r3,4(r19)
1020b474:	003f5306 	br	1020b1c4 <_realloc_r+0xe0>
1020b478:	adab883a 	add	r21,r21,r22
1020b47c:	3585c83a 	sub	r2,r6,r22
1020b480:	e5400215 	stw	r21,8(fp)
1020b484:	10800054 	ori	r2,r2,1
1020b488:	a8800115 	stw	r2,4(r21)
1020b48c:	a0bfff17 	ldw	r2,-4(r20)
1020b490:	9009883a 	mov	r4,r18
1020b494:	1080004c 	andi	r2,r2,1
1020b498:	b0acb03a 	or	r22,r22,r2
1020b49c:	a5bfff15 	stw	r22,-4(r20)
1020b4a0:	021899c0 	call	1021899c <__malloc_unlock>
1020b4a4:	a005883a 	mov	r2,r20
1020b4a8:	003f5306 	br	1020b1f8 <_realloc_r+0x114>
1020b4ac:	8809883a 	mov	r4,r17
1020b4b0:	a00b883a 	mov	r5,r20
1020b4b4:	0209cfc0 	call	10209cfc <memmove>
1020b4b8:	003f8306 	br	1020b2c8 <_realloc_r+0x1e4>
1020b4bc:	b0800404 	addi	r2,r22,16
1020b4c0:	b8bf6016 	blt	r23,r2,1020b244 <_realloc_r+0x160>
1020b4c4:	98800317 	ldw	r2,12(r19)
1020b4c8:	98c00217 	ldw	r3,8(r19)
1020b4cc:	81bfff04 	addi	r6,r16,-4
1020b4d0:	01000904 	movi	r4,36
1020b4d4:	18800315 	stw	r2,12(r3)
1020b4d8:	10c00215 	stw	r3,8(r2)
1020b4dc:	9c400204 	addi	r17,r19,8
1020b4e0:	21804336 	bltu	r4,r6,1020b5f0 <_realloc_r+0x50c>
1020b4e4:	008004c4 	movi	r2,19
1020b4e8:	11803f2e 	bgeu	r2,r6,1020b5e8 <_realloc_r+0x504>
1020b4ec:	a0800017 	ldw	r2,0(r20)
1020b4f0:	98800215 	stw	r2,8(r19)
1020b4f4:	a0800117 	ldw	r2,4(r20)
1020b4f8:	98800315 	stw	r2,12(r19)
1020b4fc:	008006c4 	movi	r2,27
1020b500:	11803f36 	bltu	r2,r6,1020b600 <_realloc_r+0x51c>
1020b504:	98800404 	addi	r2,r19,16
1020b508:	a5000204 	addi	r20,r20,8
1020b50c:	a0c00017 	ldw	r3,0(r20)
1020b510:	10c00015 	stw	r3,0(r2)
1020b514:	a0c00117 	ldw	r3,4(r20)
1020b518:	10c00115 	stw	r3,4(r2)
1020b51c:	a0c00217 	ldw	r3,8(r20)
1020b520:	10c00215 	stw	r3,8(r2)
1020b524:	9d87883a 	add	r3,r19,r22
1020b528:	bd85c83a 	sub	r2,r23,r22
1020b52c:	e0c00215 	stw	r3,8(fp)
1020b530:	10800054 	ori	r2,r2,1
1020b534:	18800115 	stw	r2,4(r3)
1020b538:	98800117 	ldw	r2,4(r19)
1020b53c:	9009883a 	mov	r4,r18
1020b540:	1080004c 	andi	r2,r2,1
1020b544:	b0acb03a 	or	r22,r22,r2
1020b548:	9d800115 	stw	r22,4(r19)
1020b54c:	021899c0 	call	1021899c <__malloc_unlock>
1020b550:	8805883a 	mov	r2,r17
1020b554:	003f2806 	br	1020b1f8 <_realloc_r+0x114>
1020b558:	a0c00217 	ldw	r3,8(r20)
1020b55c:	88c00215 	stw	r3,8(r17)
1020b560:	a0c00317 	ldw	r3,12(r20)
1020b564:	88c00315 	stw	r3,12(r17)
1020b568:	30801126 	beq	r6,r2,1020b5b0 <_realloc_r+0x4cc>
1020b56c:	88800404 	addi	r2,r17,16
1020b570:	a0c00404 	addi	r3,r20,16
1020b574:	003f4e06 	br	1020b2b0 <_realloc_r+0x1cc>
1020b578:	893fff17 	ldw	r4,-4(r17)
1020b57c:	00bfff04 	movi	r2,-4
1020b580:	a023883a 	mov	r17,r20
1020b584:	2084703a 	and	r2,r4,r2
1020b588:	80a1883a 	add	r16,r16,r2
1020b58c:	003f0d06 	br	1020b1c4 <_realloc_r+0xe0>
1020b590:	a0800217 	ldw	r2,8(r20)
1020b594:	98800415 	stw	r2,16(r19)
1020b598:	a0800317 	ldw	r2,12(r20)
1020b59c:	98800515 	stw	r2,20(r19)
1020b5a0:	31000a26 	beq	r6,r4,1020b5cc <_realloc_r+0x4e8>
1020b5a4:	98c00604 	addi	r3,r19,24
1020b5a8:	a5000404 	addi	r20,r20,16
1020b5ac:	003fa806 	br	1020b450 <_realloc_r+0x36c>
1020b5b0:	a1000417 	ldw	r4,16(r20)
1020b5b4:	88800604 	addi	r2,r17,24
1020b5b8:	a0c00604 	addi	r3,r20,24
1020b5bc:	89000415 	stw	r4,16(r17)
1020b5c0:	a1000517 	ldw	r4,20(r20)
1020b5c4:	89000515 	stw	r4,20(r17)
1020b5c8:	003f3906 	br	1020b2b0 <_realloc_r+0x1cc>
1020b5cc:	a0800417 	ldw	r2,16(r20)
1020b5d0:	a5000604 	addi	r20,r20,24
1020b5d4:	98c00804 	addi	r3,r19,32
1020b5d8:	98800615 	stw	r2,24(r19)
1020b5dc:	a0bfff17 	ldw	r2,-4(r20)
1020b5e0:	98800715 	stw	r2,28(r19)
1020b5e4:	003f9a06 	br	1020b450 <_realloc_r+0x36c>
1020b5e8:	8805883a 	mov	r2,r17
1020b5ec:	003fc706 	br	1020b50c <_realloc_r+0x428>
1020b5f0:	8809883a 	mov	r4,r17
1020b5f4:	a00b883a 	mov	r5,r20
1020b5f8:	0209cfc0 	call	10209cfc <memmove>
1020b5fc:	003fc906 	br	1020b524 <_realloc_r+0x440>
1020b600:	a0800217 	ldw	r2,8(r20)
1020b604:	98800415 	stw	r2,16(r19)
1020b608:	a0800317 	ldw	r2,12(r20)
1020b60c:	98800515 	stw	r2,20(r19)
1020b610:	31000726 	beq	r6,r4,1020b630 <_realloc_r+0x54c>
1020b614:	98800604 	addi	r2,r19,24
1020b618:	a5000404 	addi	r20,r20,16
1020b61c:	003fbb06 	br	1020b50c <_realloc_r+0x428>
1020b620:	9009883a 	mov	r4,r18
1020b624:	021899c0 	call	1021899c <__malloc_unlock>
1020b628:	0005883a 	mov	r2,zero
1020b62c:	003ef206 	br	1020b1f8 <_realloc_r+0x114>
1020b630:	a0c00417 	ldw	r3,16(r20)
1020b634:	a5000604 	addi	r20,r20,24
1020b638:	98800804 	addi	r2,r19,32
1020b63c:	98c00615 	stw	r3,24(r19)
1020b640:	a0ffff17 	ldw	r3,-4(r20)
1020b644:	98c00715 	stw	r3,28(r19)
1020b648:	003fb006 	br	1020b50c <_realloc_r+0x428>

1020b64c <lflush>:
1020b64c:	2080030b 	ldhu	r2,12(r4)
1020b650:	00c00244 	movi	r3,9
1020b654:	1080024c 	andi	r2,r2,9
1020b658:	10c00226 	beq	r2,r3,1020b664 <lflush+0x18>
1020b65c:	0005883a 	mov	r2,zero
1020b660:	f800283a 	ret
1020b664:	02088a01 	jmpi	102088a0 <fflush>

1020b668 <__srefill_r>:
1020b668:	defffc04 	addi	sp,sp,-16
1020b66c:	dc400115 	stw	r17,4(sp)
1020b670:	dc000015 	stw	r16,0(sp)
1020b674:	dfc00315 	stw	ra,12(sp)
1020b678:	dc800215 	stw	r18,8(sp)
1020b67c:	2023883a 	mov	r17,r4
1020b680:	2821883a 	mov	r16,r5
1020b684:	20000226 	beq	r4,zero,1020b690 <__srefill_r+0x28>
1020b688:	20800e17 	ldw	r2,56(r4)
1020b68c:	10003c26 	beq	r2,zero,1020b780 <__srefill_r+0x118>
1020b690:	80c0030b 	ldhu	r3,12(r16)
1020b694:	1908000c 	andi	r4,r3,8192
1020b698:	1805883a 	mov	r2,r3
1020b69c:	2000071e 	bne	r4,zero,1020b6bc <__srefill_r+0x54>
1020b6a0:	81001917 	ldw	r4,100(r16)
1020b6a4:	18880014 	ori	r2,r3,8192
1020b6a8:	00f7ffc4 	movi	r3,-8193
1020b6ac:	20c8703a 	and	r4,r4,r3
1020b6b0:	8080030d 	sth	r2,12(r16)
1020b6b4:	1007883a 	mov	r3,r2
1020b6b8:	81001915 	stw	r4,100(r16)
1020b6bc:	80000115 	stw	zero,4(r16)
1020b6c0:	1100080c 	andi	r4,r2,32
1020b6c4:	2000571e 	bne	r4,zero,1020b824 <__srefill_r+0x1bc>
1020b6c8:	1100010c 	andi	r4,r2,4
1020b6cc:	20001f26 	beq	r4,zero,1020b74c <__srefill_r+0xe4>
1020b6d0:	81400c17 	ldw	r5,48(r16)
1020b6d4:	28000826 	beq	r5,zero,1020b6f8 <__srefill_r+0x90>
1020b6d8:	80801004 	addi	r2,r16,64
1020b6dc:	28800226 	beq	r5,r2,1020b6e8 <__srefill_r+0x80>
1020b6e0:	8809883a 	mov	r4,r17
1020b6e4:	0208d940 	call	10208d94 <_free_r>
1020b6e8:	80800f17 	ldw	r2,60(r16)
1020b6ec:	80000c15 	stw	zero,48(r16)
1020b6f0:	80800115 	stw	r2,4(r16)
1020b6f4:	1000391e 	bne	r2,zero,1020b7dc <__srefill_r+0x174>
1020b6f8:	80800417 	ldw	r2,16(r16)
1020b6fc:	10004b26 	beq	r2,zero,1020b82c <__srefill_r+0x1c4>
1020b700:	8480030b 	ldhu	r18,12(r16)
1020b704:	908000cc 	andi	r2,r18,3
1020b708:	10001f1e 	bne	r2,zero,1020b788 <__srefill_r+0x120>
1020b70c:	81800417 	ldw	r6,16(r16)
1020b710:	80800817 	ldw	r2,32(r16)
1020b714:	81400717 	ldw	r5,28(r16)
1020b718:	81c00517 	ldw	r7,20(r16)
1020b71c:	81800015 	stw	r6,0(r16)
1020b720:	8809883a 	mov	r4,r17
1020b724:	103ee83a 	callr	r2
1020b728:	80800115 	stw	r2,4(r16)
1020b72c:	00800e0e 	bge	zero,r2,1020b768 <__srefill_r+0x100>
1020b730:	0005883a 	mov	r2,zero
1020b734:	dfc00317 	ldw	ra,12(sp)
1020b738:	dc800217 	ldw	r18,8(sp)
1020b73c:	dc400117 	ldw	r17,4(sp)
1020b740:	dc000017 	ldw	r16,0(sp)
1020b744:	dec00404 	addi	sp,sp,16
1020b748:	f800283a 	ret
1020b74c:	1100040c 	andi	r4,r2,16
1020b750:	20003026 	beq	r4,zero,1020b814 <__srefill_r+0x1ac>
1020b754:	1080020c 	andi	r2,r2,8
1020b758:	1000241e 	bne	r2,zero,1020b7ec <__srefill_r+0x184>
1020b75c:	18c00114 	ori	r3,r3,4
1020b760:	80c0030d 	sth	r3,12(r16)
1020b764:	003fe406 	br	1020b6f8 <__srefill_r+0x90>
1020b768:	80c0030b 	ldhu	r3,12(r16)
1020b76c:	1000161e 	bne	r2,zero,1020b7c8 <__srefill_r+0x160>
1020b770:	18c00814 	ori	r3,r3,32
1020b774:	00bfffc4 	movi	r2,-1
1020b778:	80c0030d 	sth	r3,12(r16)
1020b77c:	003fed06 	br	1020b734 <__srefill_r+0xcc>
1020b780:	0208c200 	call	10208c20 <__sinit>
1020b784:	003fc206 	br	1020b690 <__srefill_r+0x28>
1020b788:	008408b4 	movhi	r2,4130
1020b78c:	10bd0504 	addi	r2,r2,-3052
1020b790:	11000017 	ldw	r4,0(r2)
1020b794:	01440874 	movhi	r5,4129
1020b798:	00800044 	movi	r2,1
1020b79c:	296d9304 	addi	r5,r5,-18868
1020b7a0:	8080030d 	sth	r2,12(r16)
1020b7a4:	02095440 	call	10209544 <_fwalk>
1020b7a8:	00800244 	movi	r2,9
1020b7ac:	8480030d 	sth	r18,12(r16)
1020b7b0:	9480024c 	andi	r18,r18,9
1020b7b4:	90bfd51e 	bne	r18,r2,1020b70c <__srefill_r+0xa4>
1020b7b8:	8809883a 	mov	r4,r17
1020b7bc:	800b883a 	mov	r5,r16
1020b7c0:	020863c0 	call	1020863c <__sflush_r>
1020b7c4:	003fd106 	br	1020b70c <__srefill_r+0xa4>
1020b7c8:	18c01014 	ori	r3,r3,64
1020b7cc:	80000115 	stw	zero,4(r16)
1020b7d0:	00bfffc4 	movi	r2,-1
1020b7d4:	80c0030d 	sth	r3,12(r16)
1020b7d8:	003fd606 	br	1020b734 <__srefill_r+0xcc>
1020b7dc:	80c00e17 	ldw	r3,56(r16)
1020b7e0:	0005883a 	mov	r2,zero
1020b7e4:	80c00015 	stw	r3,0(r16)
1020b7e8:	003fd206 	br	1020b734 <__srefill_r+0xcc>
1020b7ec:	8809883a 	mov	r4,r17
1020b7f0:	800b883a 	mov	r5,r16
1020b7f4:	02088440 	call	10208844 <_fflush_r>
1020b7f8:	10000a1e 	bne	r2,zero,1020b824 <__srefill_r+0x1bc>
1020b7fc:	8080030b 	ldhu	r2,12(r16)
1020b800:	00fffdc4 	movi	r3,-9
1020b804:	80000215 	stw	zero,8(r16)
1020b808:	1886703a 	and	r3,r3,r2
1020b80c:	80000615 	stw	zero,24(r16)
1020b810:	003fd206 	br	1020b75c <__srefill_r+0xf4>
1020b814:	00800244 	movi	r2,9
1020b818:	88800015 	stw	r2,0(r17)
1020b81c:	18c01014 	ori	r3,r3,64
1020b820:	80c0030d 	sth	r3,12(r16)
1020b824:	00bfffc4 	movi	r2,-1
1020b828:	003fc206 	br	1020b734 <__srefill_r+0xcc>
1020b82c:	8809883a 	mov	r4,r17
1020b830:	800b883a 	mov	r5,r16
1020b834:	02098380 	call	10209838 <__smakebuf_r>
1020b838:	003fb106 	br	1020b700 <__srefill_r+0x98>

1020b83c <__fpclassifyd>:
1020b83c:	00a00034 	movhi	r2,32768
1020b840:	10bfffc4 	addi	r2,r2,-1
1020b844:	2884703a 	and	r2,r5,r2
1020b848:	10000726 	beq	r2,zero,1020b868 <__fpclassifyd+0x2c>
1020b84c:	00fffc34 	movhi	r3,65520
1020b850:	019ff834 	movhi	r6,32736
1020b854:	28c7883a 	add	r3,r5,r3
1020b858:	31bfffc4 	addi	r6,r6,-1
1020b85c:	30c00536 	bltu	r6,r3,1020b874 <__fpclassifyd+0x38>
1020b860:	00800104 	movi	r2,4
1020b864:	f800283a 	ret
1020b868:	2000021e 	bne	r4,zero,1020b874 <__fpclassifyd+0x38>
1020b86c:	00800084 	movi	r2,2
1020b870:	f800283a 	ret
1020b874:	00dffc34 	movhi	r3,32752
1020b878:	019ff834 	movhi	r6,32736
1020b87c:	28cb883a 	add	r5,r5,r3
1020b880:	31bfffc4 	addi	r6,r6,-1
1020b884:	317ff62e 	bgeu	r6,r5,1020b860 <__fpclassifyd+0x24>
1020b888:	01400434 	movhi	r5,16
1020b88c:	297fffc4 	addi	r5,r5,-1
1020b890:	28800236 	bltu	r5,r2,1020b89c <__fpclassifyd+0x60>
1020b894:	008000c4 	movi	r2,3
1020b898:	f800283a 	ret
1020b89c:	10c00226 	beq	r2,r3,1020b8a8 <__fpclassifyd+0x6c>
1020b8a0:	0005883a 	mov	r2,zero
1020b8a4:	f800283a 	ret
1020b8a8:	2005003a 	cmpeq	r2,r4,zero
1020b8ac:	f800283a 	ret

1020b8b0 <__sccl>:
1020b8b0:	2a000003 	ldbu	r8,0(r5)
1020b8b4:	00801784 	movi	r2,94
1020b8b8:	40802526 	beq	r8,r2,1020b950 <__sccl+0xa0>
1020b8bc:	29400044 	addi	r5,r5,1
1020b8c0:	000f883a 	mov	r7,zero
1020b8c4:	0013883a 	mov	r9,zero
1020b8c8:	2007883a 	mov	r3,r4
1020b8cc:	21804004 	addi	r6,r4,256
1020b8d0:	19c00005 	stb	r7,0(r3)
1020b8d4:	18c00044 	addi	r3,r3,1
1020b8d8:	19bffd1e 	bne	r3,r6,1020b8d0 <__sccl+0x20>
1020b8dc:	40001026 	beq	r8,zero,1020b920 <__sccl+0x70>
1020b8e0:	00800044 	movi	r2,1
1020b8e4:	124dc83a 	sub	r6,r2,r9
1020b8e8:	02801744 	movi	r10,93
1020b8ec:	02400b44 	movi	r9,45
1020b8f0:	2205883a 	add	r2,r4,r8
1020b8f4:	11800005 	stb	r6,0(r2)
1020b8f8:	28800044 	addi	r2,r5,1
1020b8fc:	28c00003 	ldbu	r3,0(r5)
1020b900:	1a400926 	beq	r3,r9,1020b928 <__sccl+0x78>
1020b904:	1a800526 	beq	r3,r10,1020b91c <__sccl+0x6c>
1020b908:	18000326 	beq	r3,zero,1020b918 <__sccl+0x68>
1020b90c:	1811883a 	mov	r8,r3
1020b910:	100b883a 	mov	r5,r2
1020b914:	003ff606 	br	1020b8f0 <__sccl+0x40>
1020b918:	2805883a 	mov	r2,r5
1020b91c:	f800283a 	ret
1020b920:	28bfffc4 	addi	r2,r5,-1
1020b924:	f800283a 	ret
1020b928:	11c00003 	ldbu	r7,0(r2)
1020b92c:	3a800d26 	beq	r7,r10,1020b964 <__sccl+0xb4>
1020b930:	3a000c16 	blt	r7,r8,1020b964 <__sccl+0xb4>
1020b934:	29400084 	addi	r5,r5,2
1020b938:	42000044 	addi	r8,r8,1
1020b93c:	2207883a 	add	r3,r4,r8
1020b940:	19800005 	stb	r6,0(r3)
1020b944:	41fffc16 	blt	r8,r7,1020b938 <__sccl+0x88>
1020b948:	10800084 	addi	r2,r2,2
1020b94c:	003feb06 	br	1020b8fc <__sccl+0x4c>
1020b950:	2a000043 	ldbu	r8,1(r5)
1020b954:	01c00044 	movi	r7,1
1020b958:	29400084 	addi	r5,r5,2
1020b95c:	02400044 	movi	r9,1
1020b960:	003fd906 	br	1020b8c8 <__sccl+0x18>
1020b964:	100b883a 	mov	r5,r2
1020b968:	4811883a 	mov	r8,r9
1020b96c:	003fe006 	br	1020b8f0 <__sccl+0x40>

1020b970 <nanf>:
1020b970:	009ff034 	movhi	r2,32704
1020b974:	f800283a 	ret

1020b978 <_sprintf_r>:
1020b978:	deffe404 	addi	sp,sp,-112
1020b97c:	2807883a 	mov	r3,r5
1020b980:	dfc01a15 	stw	ra,104(sp)
1020b984:	d9c01b15 	stw	r7,108(sp)
1020b988:	00a00034 	movhi	r2,32768
1020b98c:	10bfffc4 	addi	r2,r2,-1
1020b990:	02008204 	movi	r8,520
1020b994:	d8800215 	stw	r2,8(sp)
1020b998:	d8800515 	stw	r2,20(sp)
1020b99c:	d80b883a 	mov	r5,sp
1020b9a0:	d9c01b04 	addi	r7,sp,108
1020b9a4:	00bfffc4 	movi	r2,-1
1020b9a8:	d8c00015 	stw	r3,0(sp)
1020b9ac:	d8c00415 	stw	r3,16(sp)
1020b9b0:	da00030d 	sth	r8,12(sp)
1020b9b4:	d880038d 	sth	r2,14(sp)
1020b9b8:	020f0300 	call	1020f030 <___svfprintf_internal_r>
1020b9bc:	d8c00017 	ldw	r3,0(sp)
1020b9c0:	18000005 	stb	zero,0(r3)
1020b9c4:	dfc01a17 	ldw	ra,104(sp)
1020b9c8:	dec01c04 	addi	sp,sp,112
1020b9cc:	f800283a 	ret

1020b9d0 <sprintf>:
1020b9d0:	deffe304 	addi	sp,sp,-116
1020b9d4:	2007883a 	mov	r3,r4
1020b9d8:	dfc01a15 	stw	ra,104(sp)
1020b9dc:	d9801b15 	stw	r6,108(sp)
1020b9e0:	d9c01c15 	stw	r7,112(sp)
1020b9e4:	010408b4 	movhi	r4,4130
1020b9e8:	213d0604 	addi	r4,r4,-3048
1020b9ec:	21000017 	ldw	r4,0(r4)
1020b9f0:	00a00034 	movhi	r2,32768
1020b9f4:	10bfffc4 	addi	r2,r2,-1
1020b9f8:	280d883a 	mov	r6,r5
1020b9fc:	02008204 	movi	r8,520
1020ba00:	d8800215 	stw	r2,8(sp)
1020ba04:	d8800515 	stw	r2,20(sp)
1020ba08:	d80b883a 	mov	r5,sp
1020ba0c:	d9c01b04 	addi	r7,sp,108
1020ba10:	00bfffc4 	movi	r2,-1
1020ba14:	d8c00015 	stw	r3,0(sp)
1020ba18:	d8c00415 	stw	r3,16(sp)
1020ba1c:	da00030d 	sth	r8,12(sp)
1020ba20:	d880038d 	sth	r2,14(sp)
1020ba24:	020f0300 	call	1020f030 <___svfprintf_internal_r>
1020ba28:	d8c00017 	ldw	r3,0(sp)
1020ba2c:	18000005 	stb	zero,0(r3)
1020ba30:	dfc01a17 	ldw	ra,104(sp)
1020ba34:	dec01d04 	addi	sp,sp,116
1020ba38:	f800283a 	ret

1020ba3c <strcmp>:
1020ba3c:	2144b03a 	or	r2,r4,r5
1020ba40:	108000cc 	andi	r2,r2,3
1020ba44:	1000171e 	bne	r2,zero,1020baa4 <strcmp+0x68>
1020ba48:	20800017 	ldw	r2,0(r4)
1020ba4c:	28c00017 	ldw	r3,0(r5)
1020ba50:	10c0141e 	bne	r2,r3,1020baa4 <strcmp+0x68>
1020ba54:	027fbff4 	movhi	r9,65279
1020ba58:	4a7fbfc4 	addi	r9,r9,-257
1020ba5c:	0086303a 	nor	r3,zero,r2
1020ba60:	02202074 	movhi	r8,32897
1020ba64:	1245883a 	add	r2,r2,r9
1020ba68:	42202004 	addi	r8,r8,-32640
1020ba6c:	10c4703a 	and	r2,r2,r3
1020ba70:	1204703a 	and	r2,r2,r8
1020ba74:	10000226 	beq	r2,zero,1020ba80 <strcmp+0x44>
1020ba78:	00001706 	br	1020bad8 <strcmp+0x9c>
1020ba7c:	1000161e 	bne	r2,zero,1020bad8 <strcmp+0x9c>
1020ba80:	21000104 	addi	r4,r4,4
1020ba84:	20c00017 	ldw	r3,0(r4)
1020ba88:	29400104 	addi	r5,r5,4
1020ba8c:	29800017 	ldw	r6,0(r5)
1020ba90:	1a4f883a 	add	r7,r3,r9
1020ba94:	00c4303a 	nor	r2,zero,r3
1020ba98:	3884703a 	and	r2,r7,r2
1020ba9c:	1204703a 	and	r2,r2,r8
1020baa0:	19bff626 	beq	r3,r6,1020ba7c <strcmp+0x40>
1020baa4:	20800007 	ldb	r2,0(r4)
1020baa8:	1000051e 	bne	r2,zero,1020bac0 <strcmp+0x84>
1020baac:	00000606 	br	1020bac8 <strcmp+0x8c>
1020bab0:	21000044 	addi	r4,r4,1
1020bab4:	20800007 	ldb	r2,0(r4)
1020bab8:	29400044 	addi	r5,r5,1
1020babc:	10000226 	beq	r2,zero,1020bac8 <strcmp+0x8c>
1020bac0:	28c00007 	ldb	r3,0(r5)
1020bac4:	10fffa26 	beq	r2,r3,1020bab0 <strcmp+0x74>
1020bac8:	20800003 	ldbu	r2,0(r4)
1020bacc:	28c00003 	ldbu	r3,0(r5)
1020bad0:	10c5c83a 	sub	r2,r2,r3
1020bad4:	f800283a 	ret
1020bad8:	0005883a 	mov	r2,zero
1020badc:	f800283a 	ret

1020bae0 <sulp>:
1020bae0:	defffd04 	addi	sp,sp,-12
1020bae4:	dc400115 	stw	r17,4(sp)
1020bae8:	3023883a 	mov	r17,r6
1020baec:	dc000015 	stw	r16,0(sp)
1020baf0:	dfc00215 	stw	ra,8(sp)
1020baf4:	2821883a 	mov	r16,r5
1020baf8:	020aa480 	call	1020aa48 <__ulp>
1020bafc:	88000c26 	beq	r17,zero,1020bb30 <sulp+0x50>
1020bb00:	841ffc2c 	andhi	r16,r16,32752
1020bb04:	8020d53a 	srli	r16,r16,20
1020bb08:	01c01ac4 	movi	r7,107
1020bb0c:	3c21c83a 	sub	r16,r7,r16
1020bb10:	0400070e 	bge	zero,r16,1020bb30 <sulp+0x50>
1020bb14:	8020953a 	slli	r16,r16,20
1020bb18:	01cffc34 	movhi	r7,16368
1020bb1c:	1009883a 	mov	r4,r2
1020bb20:	180b883a 	mov	r5,r3
1020bb24:	000d883a 	mov	r6,zero
1020bb28:	81cf883a 	add	r7,r16,r7
1020bb2c:	0216ea40 	call	10216ea4 <__muldf3>
1020bb30:	dfc00217 	ldw	ra,8(sp)
1020bb34:	dc400117 	ldw	r17,4(sp)
1020bb38:	dc000017 	ldw	r16,0(sp)
1020bb3c:	dec00304 	addi	sp,sp,12
1020bb40:	f800283a 	ret

1020bb44 <_strtod_r>:
1020bb44:	deffe104 	addi	sp,sp,-124
1020bb48:	dd801b15 	stw	r22,108(sp)
1020bb4c:	dd001915 	stw	r20,100(sp)
1020bb50:	dcc01815 	stw	r19,96(sp)
1020bb54:	dc801715 	stw	r18,92(sp)
1020bb58:	dc401615 	stw	r17,88(sp)
1020bb5c:	dc001515 	stw	r16,84(sp)
1020bb60:	dfc01e15 	stw	ra,120(sp)
1020bb64:	df001d15 	stw	fp,116(sp)
1020bb68:	ddc01c15 	stw	r23,112(sp)
1020bb6c:	dd401a15 	stw	r21,104(sp)
1020bb70:	d8000515 	stw	zero,20(sp)
1020bb74:	d9400615 	stw	r5,24(sp)
1020bb78:	2829883a 	mov	r20,r5
1020bb7c:	a0800003 	ldbu	r2,0(r20)
1020bb80:	01c40874 	movhi	r7,4129
1020bb84:	2021883a 	mov	r16,r4
1020bb88:	10c03fcc 	andi	r3,r2,255
1020bb8c:	01000b44 	movi	r4,45
1020bb90:	39eeee04 	addi	r7,r7,-17480
1020bb94:	282d883a 	mov	r22,r5
1020bb98:	3027883a 	mov	r19,r6
1020bb9c:	0025883a 	mov	r18,zero
1020bba0:	0023883a 	mov	r17,zero
1020bba4:	20c0bd36 	bltu	r4,r3,1020be9c <_strtod_r+0x358>
1020bba8:	180690ba 	slli	r3,r3,2
1020bbac:	19c7883a 	add	r3,r3,r7
1020bbb0:	18c00017 	ldw	r3,0(r3)
1020bbb4:	1800683a 	jmp	r3
1020bbb8:	1020bc78 	rdprs	zero,r2,-32015
1020bbbc:	1020be9c 	xori	zero,r2,33530
1020bbc0:	1020be9c 	xori	zero,r2,33530
1020bbc4:	1020be9c 	xori	zero,r2,33530
1020bbc8:	1020be9c 	xori	zero,r2,33530
1020bbcc:	1020be9c 	xori	zero,r2,33530
1020bbd0:	1020be9c 	xori	zero,r2,33530
1020bbd4:	1020be9c 	xori	zero,r2,33530
1020bbd8:	1020be9c 	xori	zero,r2,33530
1020bbdc:	1020be88 	cmpgei	zero,r2,-32006
1020bbe0:	1020be88 	cmpgei	zero,r2,-32006
1020bbe4:	1020be88 	cmpgei	zero,r2,-32006
1020bbe8:	1020be88 	cmpgei	zero,r2,-32006
1020bbec:	1020be88 	cmpgei	zero,r2,-32006
1020bbf0:	1020be9c 	xori	zero,r2,33530
1020bbf4:	1020be9c 	xori	zero,r2,33530
1020bbf8:	1020be9c 	xori	zero,r2,33530
1020bbfc:	1020be9c 	xori	zero,r2,33530
1020bc00:	1020be9c 	xori	zero,r2,33530
1020bc04:	1020be9c 	xori	zero,r2,33530
1020bc08:	1020be9c 	xori	zero,r2,33530
1020bc0c:	1020be9c 	xori	zero,r2,33530
1020bc10:	1020be9c 	xori	zero,r2,33530
1020bc14:	1020be9c 	xori	zero,r2,33530
1020bc18:	1020be9c 	xori	zero,r2,33530
1020bc1c:	1020be9c 	xori	zero,r2,33530
1020bc20:	1020be9c 	xori	zero,r2,33530
1020bc24:	1020be9c 	xori	zero,r2,33530
1020bc28:	1020be9c 	xori	zero,r2,33530
1020bc2c:	1020be9c 	xori	zero,r2,33530
1020bc30:	1020be9c 	xori	zero,r2,33530
1020bc34:	1020be9c 	xori	zero,r2,33530
1020bc38:	1020be88 	cmpgei	zero,r2,-32006
1020bc3c:	1020be9c 	xori	zero,r2,33530
1020bc40:	1020be9c 	xori	zero,r2,33530
1020bc44:	1020be9c 	xori	zero,r2,33530
1020bc48:	1020be9c 	xori	zero,r2,33530
1020bc4c:	1020be9c 	xori	zero,r2,33530
1020bc50:	1020be9c 	xori	zero,r2,33530
1020bc54:	1020be9c 	xori	zero,r2,33530
1020bc58:	1020be9c 	xori	zero,r2,33530
1020bc5c:	1020be9c 	xori	zero,r2,33530
1020bc60:	1020be9c 	xori	zero,r2,33530
1020bc64:	1020bcd0 	cmplti	zero,r2,-32013
1020bc68:	1020be9c 	xori	zero,r2,33530
1020bc6c:	1020be78 	rdprs	zero,r2,-32007
1020bc70:	00801244 	movi	r2,73
1020bc74:	90844026 	beq	r18,r2,1020cd78 <_strtod_r+0x1234>
1020bc78:	002b883a 	mov	r21,zero
1020bc7c:	002f883a 	mov	r23,zero
1020bc80:	98000526 	beq	r19,zero,1020bc98 <_strtod_r+0x154>
1020bc84:	d8000715 	stw	zero,28(sp)
1020bc88:	9d800015 	stw	r22,0(r19)
1020bc8c:	d8c00717 	ldw	r3,28(sp)
1020bc90:	18000126 	beq	r3,zero,1020bc98 <_strtod_r+0x154>
1020bc94:	bde0003c 	xorhi	r23,r23,32768
1020bc98:	a805883a 	mov	r2,r21
1020bc9c:	b807883a 	mov	r3,r23
1020bca0:	dfc01e17 	ldw	ra,120(sp)
1020bca4:	df001d17 	ldw	fp,116(sp)
1020bca8:	ddc01c17 	ldw	r23,112(sp)
1020bcac:	dd801b17 	ldw	r22,108(sp)
1020bcb0:	dd401a17 	ldw	r21,104(sp)
1020bcb4:	dd001917 	ldw	r20,100(sp)
1020bcb8:	dcc01817 	ldw	r19,96(sp)
1020bcbc:	dc801717 	ldw	r18,92(sp)
1020bcc0:	dc401617 	ldw	r17,88(sp)
1020bcc4:	dc001517 	ldw	r16,84(sp)
1020bcc8:	dec01f04 	addi	sp,sp,124
1020bccc:	f800283a 	ret
1020bcd0:	a005883a 	mov	r2,r20
1020bcd4:	d8000715 	stw	zero,28(sp)
1020bcd8:	a5000044 	addi	r20,r20,1
1020bcdc:	dd000615 	stw	r20,24(sp)
1020bce0:	10800043 	ldbu	r2,1(r2)
1020bce4:	10c03fcc 	andi	r3,r2,255
1020bce8:	18c0201c 	xori	r3,r3,128
1020bcec:	18ffe004 	addi	r3,r3,-128
1020bcf0:	183fe126 	beq	r3,zero,1020bc78 <_strtod_r+0x134>
1020bcf4:	11403fcc 	andi	r5,r2,255
1020bcf8:	2940201c 	xori	r5,r5,128
1020bcfc:	297fe004 	addi	r5,r5,-128
1020bd00:	00c00c04 	movi	r3,48
1020bd04:	28c0f226 	beq	r5,r3,1020c0d0 <_strtod_r+0x58c>
1020bd08:	d8000815 	stw	zero,32(sp)
1020bd0c:	10fff404 	addi	r3,r2,-48
1020bd10:	18c03fcc 	andi	r3,r3,255
1020bd14:	01800244 	movi	r6,9
1020bd18:	30c38d36 	bltu	r6,r3,1020cb50 <_strtod_r+0x100c>
1020bd1c:	a1400044 	addi	r5,r20,1
1020bd20:	0039883a 	mov	fp,zero
1020bd24:	002f883a 	mov	r23,zero
1020bd28:	002b883a 	mov	r21,zero
1020bd2c:	02400204 	movi	r9,8
1020bd30:	4d405c16 	blt	r9,r21,1020bea4 <_strtod_r+0x360>
1020bd34:	bdc002a4 	muli	r23,r23,10
1020bd38:	10c03fcc 	andi	r3,r2,255
1020bd3c:	18c0201c 	xori	r3,r3,128
1020bd40:	18ffe004 	addi	r3,r3,-128
1020bd44:	b8ef883a 	add	r23,r23,r3
1020bd48:	bdfff404 	addi	r23,r23,-48
1020bd4c:	d9400615 	stw	r5,24(sp)
1020bd50:	28800003 	ldbu	r2,0(r5)
1020bd54:	2823883a 	mov	r17,r5
1020bd58:	ad400044 	addi	r21,r21,1
1020bd5c:	10fff404 	addi	r3,r2,-48
1020bd60:	18c03fcc 	andi	r3,r3,255
1020bd64:	29400044 	addi	r5,r5,1
1020bd68:	30fff12e 	bgeu	r6,r3,1020bd30 <_strtod_r+0x1ec>
1020bd6c:	14803fcc 	andi	r18,r2,255
1020bd70:	9480201c 	xori	r18,r18,128
1020bd74:	94bfe004 	addi	r18,r18,-128
1020bd78:	8009883a 	mov	r4,r16
1020bd7c:	02097a80 	call	102097a8 <_localeconv_r>
1020bd80:	11400017 	ldw	r5,0(r2)
1020bd84:	8009883a 	mov	r4,r16
1020bd88:	d9401315 	stw	r5,76(sp)
1020bd8c:	02097a80 	call	102097a8 <_localeconv_r>
1020bd90:	11000017 	ldw	r4,0(r2)
1020bd94:	02033500 	call	10203350 <strlen>
1020bd98:	d9401317 	ldw	r5,76(sp)
1020bd9c:	8809883a 	mov	r4,r17
1020bda0:	100d883a 	mov	r6,r2
1020bda4:	02138440 	call	10213844 <strncmp>
1020bda8:	1000db26 	beq	r2,zero,1020c118 <_strtod_r+0x5d4>
1020bdac:	a811883a 	mov	r8,r21
1020bdb0:	000b883a 	mov	r5,zero
1020bdb4:	0013883a 	mov	r9,zero
1020bdb8:	0015883a 	mov	r10,zero
1020bdbc:	00801944 	movi	r2,101
1020bdc0:	90804226 	beq	r18,r2,1020becc <_strtod_r+0x388>
1020bdc4:	00801144 	movi	r2,69
1020bdc8:	90804026 	beq	r18,r2,1020becc <_strtod_r+0x388>
1020bdcc:	000f883a 	mov	r7,zero
1020bdd0:	40007d1e 	bne	r8,zero,1020bfc8 <_strtod_r+0x484>
1020bdd4:	28003a1e 	bne	r5,zero,1020bec0 <_strtod_r+0x37c>
1020bdd8:	d8c00817 	ldw	r3,32(sp)
1020bddc:	1800381e 	bne	r3,zero,1020bec0 <_strtod_r+0x37c>
1020bde0:	503fa51e 	bne	r10,zero,1020bc78 <_strtod_r+0x134>
1020bde4:	00801384 	movi	r2,78
1020bde8:	90800526 	beq	r18,r2,1020be00 <_strtod_r+0x2bc>
1020bdec:	14bfa00e 	bge	r2,r18,1020bc70 <_strtod_r+0x12c>
1020bdf0:	00801a44 	movi	r2,105
1020bdf4:	9083e026 	beq	r18,r2,1020cd78 <_strtod_r+0x1234>
1020bdf8:	00801b84 	movi	r2,110
1020bdfc:	90bf9e1e 	bne	r18,r2,1020bc78 <_strtod_r+0x134>
1020be00:	014408b4 	movhi	r5,4130
1020be04:	d9000617 	ldw	r4,24(sp)
1020be08:	29751c04 	addi	r5,r5,-11152
1020be0c:	01c00644 	movi	r7,25
1020be10:	00000b06 	br	1020be40 <_strtod_r+0x2fc>
1020be14:	21000044 	addi	r4,r4,1
1020be18:	20800003 	ldbu	r2,0(r4)
1020be1c:	10ffefc4 	addi	r3,r2,-65
1020be20:	10803fcc 	andi	r2,r2,255
1020be24:	1080201c 	xori	r2,r2,128
1020be28:	18c03fcc 	andi	r3,r3,255
1020be2c:	10bfe004 	addi	r2,r2,-128
1020be30:	38c00136 	bltu	r7,r3,1020be38 <_strtod_r+0x2f4>
1020be34:	10800804 	addi	r2,r2,32
1020be38:	29400044 	addi	r5,r5,1
1020be3c:	11bf8e1e 	bne	r2,r6,1020bc78 <_strtod_r+0x134>
1020be40:	29800007 	ldb	r6,0(r5)
1020be44:	303ff31e 	bne	r6,zero,1020be14 <_strtod_r+0x2d0>
1020be48:	20800044 	addi	r2,r4,1
1020be4c:	d8800615 	stw	r2,24(sp)
1020be50:	20c00047 	ldb	r3,1(r4)
1020be54:	00800a04 	movi	r2,40
1020be58:	18849b26 	beq	r3,r2,1020d0c8 <_strtod_r+0x1584>
1020be5c:	047ffe34 	movhi	r17,65528
1020be60:	0025883a 	mov	r18,zero
1020be64:	902b883a 	mov	r21,r18
1020be68:	882f883a 	mov	r23,r17
1020be6c:	983f8726 	beq	r19,zero,1020bc8c <_strtod_r+0x148>
1020be70:	dd800617 	ldw	r22,24(sp)
1020be74:	003f8406 	br	1020bc88 <_strtod_r+0x144>
1020be78:	00c00044 	movi	r3,1
1020be7c:	a005883a 	mov	r2,r20
1020be80:	d8c00715 	stw	r3,28(sp)
1020be84:	003f9406 	br	1020bcd8 <_strtod_r+0x194>
1020be88:	a5000044 	addi	r20,r20,1
1020be8c:	dd000615 	stw	r20,24(sp)
1020be90:	a0800003 	ldbu	r2,0(r20)
1020be94:	10c03fcc 	andi	r3,r2,255
1020be98:	20ff432e 	bgeu	r4,r3,1020bba8 <_strtod_r+0x64>
1020be9c:	d8000715 	stw	zero,28(sp)
1020bea0:	003f9406 	br	1020bcf4 <_strtod_r+0x1b0>
1020bea4:	e70002a4 	muli	fp,fp,10
1020bea8:	10803fcc 	andi	r2,r2,255
1020beac:	1080201c 	xori	r2,r2,128
1020beb0:	10bfe004 	addi	r2,r2,-128
1020beb4:	e085883a 	add	r2,fp,r2
1020beb8:	173ff404 	addi	fp,r2,-48
1020bebc:	003fa306 	br	1020bd4c <_strtod_r+0x208>
1020bec0:	002b883a 	mov	r21,zero
1020bec4:	002f883a 	mov	r23,zero
1020bec8:	003fe806 	br	1020be6c <_strtod_r+0x328>
1020becc:	40007b26 	beq	r8,zero,1020c0bc <_strtod_r+0x578>
1020bed0:	dd800617 	ldw	r22,24(sp)
1020bed4:	00c00ac4 	movi	r3,43
1020bed8:	b0800044 	addi	r2,r22,1
1020bedc:	d8800615 	stw	r2,24(sp)
1020bee0:	b0800047 	ldb	r2,1(r22)
1020bee4:	10c1f926 	beq	r2,r3,1020c6cc <_strtod_r+0xb88>
1020bee8:	00c00b44 	movi	r3,45
1020beec:	10c1f226 	beq	r2,r3,1020c6b8 <_strtod_r+0xb74>
1020bef0:	1025883a 	mov	r18,r2
1020bef4:	000f883a 	mov	r7,zero
1020bef8:	90fff404 	addi	r3,r18,-48
1020befc:	01000244 	movi	r4,9
1020bf00:	9005883a 	mov	r2,r18
1020bf04:	20c1c136 	bltu	r4,r3,1020c60c <_strtod_r+0xac8>
1020bf08:	00c00c04 	movi	r3,48
1020bf0c:	90c0071e 	bne	r18,r3,1020bf2c <_strtod_r+0x3e8>
1020bf10:	d8c00617 	ldw	r3,24(sp)
1020bf14:	18c00044 	addi	r3,r3,1
1020bf18:	d8c00615 	stw	r3,24(sp)
1020bf1c:	18800007 	ldb	r2,0(r3)
1020bf20:	18c00044 	addi	r3,r3,1
1020bf24:	14bffc26 	beq	r2,r18,1020bf18 <_strtod_r+0x3d4>
1020bf28:	1025883a 	mov	r18,r2
1020bf2c:	10bff3c4 	addi	r2,r2,-49
1020bf30:	00c00204 	movi	r3,8
1020bf34:	18bfa536 	bltu	r3,r2,1020bdcc <_strtod_r+0x288>
1020bf38:	db400617 	ldw	r13,24(sp)
1020bf3c:	90bff404 	addi	r2,r18,-48
1020bf40:	03000244 	movi	r12,9
1020bf44:	6ac00044 	addi	r11,r13,1
1020bf48:	dac00615 	stw	r11,24(sp)
1020bf4c:	6c800043 	ldbu	r18,1(r13)
1020bf50:	90fff404 	addi	r3,r18,-48
1020bf54:	94803fcc 	andi	r18,r18,255
1020bf58:	9480201c 	xori	r18,r18,128
1020bf5c:	18c03fcc 	andi	r3,r3,255
1020bf60:	94bfe004 	addi	r18,r18,-128
1020bf64:	60c00e36 	bltu	r12,r3,1020bfa0 <_strtod_r+0x45c>
1020bf68:	69000084 	addi	r4,r13,2
1020bf6c:	d9000615 	stw	r4,24(sp)
1020bf70:	108002a4 	muli	r2,r2,10
1020bf74:	21800003 	ldbu	r6,0(r4)
1020bf78:	2017883a 	mov	r11,r4
1020bf7c:	14a5883a 	add	r18,r2,r18
1020bf80:	30fff404 	addi	r3,r6,-48
1020bf84:	90bff404 	addi	r2,r18,-48
1020bf88:	34803fcc 	andi	r18,r6,255
1020bf8c:	9480201c 	xori	r18,r18,128
1020bf90:	18c03fcc 	andi	r3,r3,255
1020bf94:	94bfe004 	addi	r18,r18,-128
1020bf98:	21000044 	addi	r4,r4,1
1020bf9c:	60fff32e 	bgeu	r12,r3,1020bf6c <_strtod_r+0x428>
1020bfa0:	5b57c83a 	sub	r11,r11,r13
1020bfa4:	00c00204 	movi	r3,8
1020bfa8:	1ac2e316 	blt	r3,r11,1020cb38 <_strtod_r+0xff4>
1020bfac:	00d387c4 	movi	r3,19999
1020bfb0:	1880010e 	bge	r3,r2,1020bfb8 <_strtod_r+0x474>
1020bfb4:	1805883a 	mov	r2,r3
1020bfb8:	01c7c83a 	sub	r3,zero,r7
1020bfbc:	10c4f03a 	xor	r2,r2,r3
1020bfc0:	11cf883a 	add	r7,r2,r7
1020bfc4:	403f8326 	beq	r8,zero,1020bdd4 <_strtod_r+0x290>
1020bfc8:	3a53c83a 	sub	r9,r7,r9
1020bfcc:	da400915 	stw	r9,36(sp)
1020bfd0:	a800011e 	bne	r21,zero,1020bfd8 <_strtod_r+0x494>
1020bfd4:	402b883a 	mov	r21,r8
1020bfd8:	00800404 	movi	r2,16
1020bfdc:	402d883a 	mov	r22,r8
1020bfe0:	1200010e 	bge	r2,r8,1020bfe8 <_strtod_r+0x4a4>
1020bfe4:	102d883a 	mov	r22,r2
1020bfe8:	b809883a 	mov	r4,r23
1020bfec:	da001415 	stw	r8,80(sp)
1020bff0:	0217ff00 	call	10217ff0 <__floatunsidf>
1020bff4:	1025883a 	mov	r18,r2
1020bff8:	00800244 	movi	r2,9
1020bffc:	1823883a 	mov	r17,r3
1020c000:	da001417 	ldw	r8,80(sp)
1020c004:	1580160e 	bge	r2,r22,1020c060 <_strtod_r+0x51c>
1020c008:	b0bffdc4 	addi	r2,r22,-9
1020c00c:	100490fa 	slli	r2,r2,3
1020c010:	180b883a 	mov	r5,r3
1020c014:	00c408b4 	movhi	r3,4130
1020c018:	18f4e704 	addi	r3,r3,-11364
1020c01c:	1885883a 	add	r2,r3,r2
1020c020:	11800017 	ldw	r6,0(r2)
1020c024:	11c00117 	ldw	r7,4(r2)
1020c028:	9009883a 	mov	r4,r18
1020c02c:	0216ea40 	call	10216ea4 <__muldf3>
1020c030:	e009883a 	mov	r4,fp
1020c034:	1025883a 	mov	r18,r2
1020c038:	1823883a 	mov	r17,r3
1020c03c:	0217ff00 	call	10217ff0 <__floatunsidf>
1020c040:	9009883a 	mov	r4,r18
1020c044:	880b883a 	mov	r5,r17
1020c048:	100d883a 	mov	r6,r2
1020c04c:	180f883a 	mov	r7,r3
1020c050:	0215af80 	call	10215af8 <__adddf3>
1020c054:	da001417 	ldw	r8,80(sp)
1020c058:	1025883a 	mov	r18,r2
1020c05c:	1823883a 	mov	r17,r3
1020c060:	008003c4 	movi	r2,15
1020c064:	12004b16 	blt	r2,r8,1020c194 <_strtod_r+0x650>
1020c068:	d9000917 	ldw	r4,36(sp)
1020c06c:	203f7d26 	beq	r4,zero,1020be64 <_strtod_r+0x320>
1020c070:	d8c00917 	ldw	r3,36(sp)
1020c074:	00c32c0e 	bge	zero,r3,1020cd28 <_strtod_r+0x11e4>
1020c078:	d9000917 	ldw	r4,36(sp)
1020c07c:	00c00584 	movi	r3,22
1020c080:	1902bb16 	blt	r3,r4,1020cb70 <_strtod_r+0x102c>
1020c084:	200490fa 	slli	r2,r4,3
1020c088:	00c408b4 	movhi	r3,4130
1020c08c:	18f4e704 	addi	r3,r3,-11364
1020c090:	1885883a 	add	r2,r3,r2
1020c094:	11000017 	ldw	r4,0(r2)
1020c098:	11400117 	ldw	r5,4(r2)
1020c09c:	900d883a 	mov	r6,r18
1020c0a0:	880f883a 	mov	r7,r17
1020c0a4:	0216ea40 	call	10216ea4 <__muldf3>
1020c0a8:	102b883a 	mov	r21,r2
1020c0ac:	182f883a 	mov	r23,r3
1020c0b0:	003f6e06 	br	1020be6c <_strtod_r+0x328>
1020c0b4:	0013883a 	mov	r9,zero
1020c0b8:	02800044 	movi	r10,1
1020c0bc:	2800021e 	bne	r5,zero,1020c0c8 <_strtod_r+0x584>
1020c0c0:	d8c00817 	ldw	r3,32(sp)
1020c0c4:	183eec26 	beq	r3,zero,1020bc78 <_strtod_r+0x134>
1020c0c8:	0011883a 	mov	r8,zero
1020c0cc:	003f8006 	br	1020bed0 <_strtod_r+0x38c>
1020c0d0:	a0800047 	ldb	r2,1(r20)
1020c0d4:	00c01604 	movi	r3,88
1020c0d8:	10c1e626 	beq	r2,r3,1020c874 <_strtod_r+0xd30>
1020c0dc:	00c01e04 	movi	r3,120
1020c0e0:	10c1e426 	beq	r2,r3,1020c874 <_strtod_r+0xd30>
1020c0e4:	a0c00044 	addi	r3,r20,1
1020c0e8:	1829883a 	mov	r20,r3
1020c0ec:	d8c00615 	stw	r3,24(sp)
1020c0f0:	18c00044 	addi	r3,r3,1
1020c0f4:	18bfffc3 	ldbu	r2,-1(r3)
1020c0f8:	11003fcc 	andi	r4,r2,255
1020c0fc:	2100201c 	xori	r4,r4,128
1020c100:	213fe004 	addi	r4,r4,-128
1020c104:	217ff826 	beq	r4,r5,1020c0e8 <_strtod_r+0x5a4>
1020c108:	203f6d26 	beq	r4,zero,1020bec0 <_strtod_r+0x37c>
1020c10c:	00c00044 	movi	r3,1
1020c110:	d8c00815 	stw	r3,32(sp)
1020c114:	003efd06 	br	1020bd0c <_strtod_r+0x1c8>
1020c118:	8009883a 	mov	r4,r16
1020c11c:	02097a80 	call	102097a8 <_localeconv_r>
1020c120:	11000017 	ldw	r4,0(r2)
1020c124:	02033500 	call	10203350 <strlen>
1020c128:	d8c00617 	ldw	r3,24(sp)
1020c12c:	1885883a 	add	r2,r3,r2
1020c130:	d8800615 	stw	r2,24(sp)
1020c134:	14800007 	ldb	r18,0(r2)
1020c138:	a801501e 	bne	r21,zero,1020c67c <_strtod_r+0xb38>
1020c13c:	00c00c04 	movi	r3,48
1020c140:	90c3891e 	bne	r18,r3,1020cf68 <_strtod_r+0x1424>
1020c144:	10c00044 	addi	r3,r2,1
1020c148:	9009883a 	mov	r4,r18
1020c14c:	d8c00615 	stw	r3,24(sp)
1020c150:	1c800007 	ldb	r18,0(r3)
1020c154:	188bc83a 	sub	r5,r3,r2
1020c158:	18c00044 	addi	r3,r3,1
1020c15c:	913ffb26 	beq	r18,r4,1020c14c <_strtod_r+0x608>
1020c160:	90bff3c4 	addi	r2,r18,-49
1020c164:	00c00204 	movi	r3,8
1020c168:	18819d36 	bltu	r3,r2,1020c7e0 <_strtod_r+0xc9c>
1020c16c:	dd000617 	ldw	r20,24(sp)
1020c170:	90bff404 	addi	r2,r18,-48
1020c174:	2a400044 	addi	r9,r5,1
1020c178:	a007883a 	mov	r3,r20
1020c17c:	02000044 	movi	r8,1
1020c180:	b9c002a4 	muli	r7,r23,10
1020c184:	1809883a 	mov	r4,r3
1020c188:	000b883a 	mov	r5,zero
1020c18c:	11ef883a 	add	r23,r2,r7
1020c190:	00014506 	br	1020c6a8 <_strtod_r+0xb64>
1020c194:	d9000917 	ldw	r4,36(sp)
1020c198:	45adc83a 	sub	r22,r8,r22
1020c19c:	25ad883a 	add	r22,r4,r22
1020c1a0:	05821f0e 	bge	zero,r22,1020ca20 <_strtod_r+0xedc>
1020c1a4:	b08003cc 	andi	r2,r22,15
1020c1a8:	10000d26 	beq	r2,zero,1020c1e0 <_strtod_r+0x69c>
1020c1ac:	100490fa 	slli	r2,r2,3
1020c1b0:	00c408b4 	movhi	r3,4130
1020c1b4:	18f4e704 	addi	r3,r3,-11364
1020c1b8:	1885883a 	add	r2,r3,r2
1020c1bc:	11000017 	ldw	r4,0(r2)
1020c1c0:	11400117 	ldw	r5,4(r2)
1020c1c4:	900d883a 	mov	r6,r18
1020c1c8:	880f883a 	mov	r7,r17
1020c1cc:	da001415 	stw	r8,80(sp)
1020c1d0:	0216ea40 	call	10216ea4 <__muldf3>
1020c1d4:	da001417 	ldw	r8,80(sp)
1020c1d8:	1025883a 	mov	r18,r2
1020c1dc:	1823883a 	mov	r17,r3
1020c1e0:	073ffc04 	movi	fp,-16
1020c1e4:	b72c703a 	and	r22,r22,fp
1020c1e8:	b0013c1e 	bne	r22,zero,1020c6dc <_strtod_r+0xb98>
1020c1ec:	d8000815 	stw	zero,32(sp)
1020c1f0:	ddc00015 	stw	r23,0(sp)
1020c1f4:	8009883a 	mov	r4,r16
1020c1f8:	a00b883a 	mov	r5,r20
1020c1fc:	a80d883a 	mov	r6,r21
1020c200:	400f883a 	mov	r7,r8
1020c204:	020a16c0 	call	1020a16c <__s2b>
1020c208:	d8800a15 	stw	r2,40(sp)
1020c20c:	1001ad26 	beq	r2,zero,1020c8c4 <_strtod_r+0xd80>
1020c210:	d9000917 	ldw	r4,36(sp)
1020c214:	0011883a 	mov	r8,zero
1020c218:	dcc01215 	stw	r19,72(sp)
1020c21c:	2005d7fa 	srai	r2,r4,31
1020c220:	0107c83a 	sub	r3,zero,r4
1020c224:	0029883a 	mov	r20,zero
1020c228:	10c4703a 	and	r2,r2,r3
1020c22c:	d8800c15 	stw	r2,48(sp)
1020c230:	d8800a17 	ldw	r2,40(sp)
1020c234:	4027883a 	mov	r19,r8
1020c238:	10800304 	addi	r2,r2,12
1020c23c:	d8800f15 	stw	r2,60(sp)
1020c240:	d8c00a17 	ldw	r3,40(sp)
1020c244:	8009883a 	mov	r4,r16
1020c248:	19400117 	ldw	r5,4(r3)
1020c24c:	0209f7c0 	call	10209f7c <_Balloc>
1020c250:	1039883a 	mov	fp,r2
1020c254:	10016b26 	beq	r2,zero,1020c804 <_strtod_r+0xcc0>
1020c258:	d9000a17 	ldw	r4,40(sp)
1020c25c:	d9400f17 	ldw	r5,60(sp)
1020c260:	21800417 	ldw	r6,16(r4)
1020c264:	11000304 	addi	r4,r2,12
1020c268:	31800084 	addi	r6,r6,2
1020c26c:	318d883a 	add	r6,r6,r6
1020c270:	318d883a 	add	r6,r6,r6
1020c274:	0202dc80 	call	10202dc8 <memcpy>
1020c278:	d8800204 	addi	r2,sp,8
1020c27c:	8009883a 	mov	r4,r16
1020c280:	d8800015 	stw	r2,0(sp)
1020c284:	900b883a 	mov	r5,r18
1020c288:	880d883a 	mov	r6,r17
1020c28c:	d9c00404 	addi	r7,sp,16
1020c290:	020abc40 	call	1020abc4 <__d2b>
1020c294:	d8800515 	stw	r2,20(sp)
1020c298:	dc801115 	stw	r18,68(sp)
1020c29c:	dc401015 	stw	r17,64(sp)
1020c2a0:	10017126 	beq	r2,zero,1020c868 <_strtod_r+0xd24>
1020c2a4:	8009883a 	mov	r4,r16
1020c2a8:	01400044 	movi	r5,1
1020c2ac:	020a3880 	call	1020a388 <__i2b>
1020c2b0:	1029883a 	mov	r20,r2
1020c2b4:	10015326 	beq	r2,zero,1020c804 <_strtod_r+0xcc0>
1020c2b8:	d8c00917 	ldw	r3,36(sp)
1020c2bc:	002b883a 	mov	r21,zero
1020c2c0:	00c0010e 	bge	zero,r3,1020c2c8 <_strtod_r+0x784>
1020c2c4:	182b883a 	mov	r21,r3
1020c2c8:	d9000417 	ldw	r4,16(sp)
1020c2cc:	2000c516 	blt	r4,zero,1020c5e4 <_strtod_r+0xaa0>
1020c2d0:	d8800c17 	ldw	r2,48(sp)
1020c2d4:	a807883a 	mov	r3,r21
1020c2d8:	112d883a 	add	r22,r2,r4
1020c2dc:	d8800817 	ldw	r2,32(sp)
1020c2e0:	d9800217 	ldw	r6,8(sp)
1020c2e4:	05ff00c4 	movi	r23,-1021
1020c2e8:	2089c83a 	sub	r4,r4,r2
1020c2ec:	218b883a 	add	r5,r4,r6
1020c2f0:	01000d84 	movi	r4,54
1020c2f4:	2185c83a 	sub	r2,r4,r6
1020c2f8:	2dc0a90e 	bge	r5,r23,1020c5a0 <_strtod_r+0xa5c>
1020c2fc:	b96fc83a 	sub	r23,r23,r5
1020c300:	010007c4 	movi	r4,31
1020c304:	15c5c83a 	sub	r2,r2,r23
1020c308:	25c0b916 	blt	r4,r23,1020c5f0 <_strtod_r+0xaac>
1020c30c:	01000044 	movi	r4,1
1020c310:	25c8983a 	sll	r4,r4,r23
1020c314:	d8000b15 	stw	zero,44(sp)
1020c318:	d9000d15 	stw	r4,52(sp)
1020c31c:	b091883a 	add	r8,r22,r2
1020c320:	1887883a 	add	r3,r3,r2
1020c324:	d8800817 	ldw	r2,32(sp)
1020c328:	18af883a 	add	r23,r3,r2
1020c32c:	4005883a 	mov	r2,r8
1020c330:	b200010e 	bge	r22,r8,1020c338 <_strtod_r+0x7f4>
1020c334:	b005883a 	mov	r2,r22
1020c338:	b880010e 	bge	r23,r2,1020c340 <_strtod_r+0x7fc>
1020c33c:	b805883a 	mov	r2,r23
1020c340:	0080030e 	bge	zero,r2,1020c350 <_strtod_r+0x80c>
1020c344:	4091c83a 	sub	r8,r8,r2
1020c348:	b8afc83a 	sub	r23,r23,r2
1020c34c:	b0adc83a 	sub	r22,r22,r2
1020c350:	d8c00c17 	ldw	r3,48(sp)
1020c354:	18001726 	beq	r3,zero,1020c3b4 <_strtod_r+0x870>
1020c358:	a00b883a 	mov	r5,r20
1020c35c:	8009883a 	mov	r4,r16
1020c360:	180d883a 	mov	r6,r3
1020c364:	da001415 	stw	r8,80(sp)
1020c368:	020a5c00 	call	1020a5c0 <__pow5mult>
1020c36c:	1029883a 	mov	r20,r2
1020c370:	da001417 	ldw	r8,80(sp)
1020c374:	10012326 	beq	r2,zero,1020c804 <_strtod_r+0xcc0>
1020c378:	d9800517 	ldw	r6,20(sp)
1020c37c:	8009883a 	mov	r4,r16
1020c380:	100b883a 	mov	r5,r2
1020c384:	da001415 	stw	r8,80(sp)
1020c388:	020a3c40 	call	1020a3c4 <__multiply>
1020c38c:	da001417 	ldw	r8,80(sp)
1020c390:	10011c26 	beq	r2,zero,1020c804 <_strtod_r+0xcc0>
1020c394:	d9400517 	ldw	r5,20(sp)
1020c398:	8009883a 	mov	r4,r16
1020c39c:	d8801315 	stw	r2,76(sp)
1020c3a0:	da001415 	stw	r8,80(sp)
1020c3a4:	020a0240 	call	1020a024 <_Bfree>
1020c3a8:	d8801317 	ldw	r2,76(sp)
1020c3ac:	da001417 	ldw	r8,80(sp)
1020c3b0:	d8800515 	stw	r2,20(sp)
1020c3b4:	0200060e 	bge	zero,r8,1020c3d0 <_strtod_r+0x88c>
1020c3b8:	d9400517 	ldw	r5,20(sp)
1020c3bc:	8009883a 	mov	r4,r16
1020c3c0:	400d883a 	mov	r6,r8
1020c3c4:	020a7000 	call	1020a700 <__lshift>
1020c3c8:	d8800515 	stw	r2,20(sp)
1020c3cc:	10012626 	beq	r2,zero,1020c868 <_strtod_r+0xd24>
1020c3d0:	a8000626 	beq	r21,zero,1020c3ec <_strtod_r+0x8a8>
1020c3d4:	e00b883a 	mov	r5,fp
1020c3d8:	8009883a 	mov	r4,r16
1020c3dc:	a80d883a 	mov	r6,r21
1020c3e0:	020a5c00 	call	1020a5c0 <__pow5mult>
1020c3e4:	1039883a 	mov	fp,r2
1020c3e8:	10010626 	beq	r2,zero,1020c804 <_strtod_r+0xcc0>
1020c3ec:	05c0060e 	bge	zero,r23,1020c408 <_strtod_r+0x8c4>
1020c3f0:	e00b883a 	mov	r5,fp
1020c3f4:	8009883a 	mov	r4,r16
1020c3f8:	b80d883a 	mov	r6,r23
1020c3fc:	020a7000 	call	1020a700 <__lshift>
1020c400:	1039883a 	mov	fp,r2
1020c404:	1000ff26 	beq	r2,zero,1020c804 <_strtod_r+0xcc0>
1020c408:	0580060e 	bge	zero,r22,1020c424 <_strtod_r+0x8e0>
1020c40c:	a00b883a 	mov	r5,r20
1020c410:	8009883a 	mov	r4,r16
1020c414:	b00d883a 	mov	r6,r22
1020c418:	020a7000 	call	1020a700 <__lshift>
1020c41c:	1029883a 	mov	r20,r2
1020c420:	1000f826 	beq	r2,zero,1020c804 <_strtod_r+0xcc0>
1020c424:	d9400517 	ldw	r5,20(sp)
1020c428:	8009883a 	mov	r4,r16
1020c42c:	e00d883a 	mov	r6,fp
1020c430:	020a8b00 	call	1020a8b0 <__mdiff>
1020c434:	1027883a 	mov	r19,r2
1020c438:	1000f226 	beq	r2,zero,1020c804 <_strtod_r+0xcc0>
1020c43c:	11000317 	ldw	r4,12(r2)
1020c440:	a00b883a 	mov	r5,r20
1020c444:	10000315 	stw	zero,12(r2)
1020c448:	d9000e15 	stw	r4,56(sp)
1020c44c:	1009883a 	mov	r4,r2
1020c450:	020a8500 	call	1020a850 <__mcmp>
1020c454:	10027116 	blt	r2,zero,1020ce1c <_strtod_r+0x12d8>
1020c458:	1002a426 	beq	r2,zero,1020ceec <_strtod_r+0x13a8>
1020c45c:	9809883a 	mov	r4,r19
1020c460:	a00b883a 	mov	r5,r20
1020c464:	020ad000 	call	1020ad00 <__ratio>
1020c468:	1009883a 	mov	r4,r2
1020c46c:	180b883a 	mov	r5,r3
1020c470:	000d883a 	mov	r6,zero
1020c474:	01d00034 	movhi	r7,16384
1020c478:	102d883a 	mov	r22,r2
1020c47c:	182b883a 	mov	r21,r3
1020c480:	0216dc40 	call	10216dc4 <__ledf2>
1020c484:	00804a16 	blt	zero,r2,1020c5b0 <_strtod_r+0xa6c>
1020c488:	d8800e17 	ldw	r2,56(sp)
1020c48c:	10006426 	beq	r2,zero,1020c620 <_strtod_r+0xadc>
1020c490:	054ffc34 	movhi	r21,16368
1020c494:	d8000b15 	stw	zero,44(sp)
1020c498:	d8000d15 	stw	zero,52(sp)
1020c49c:	a82d883a 	mov	r22,r21
1020c4a0:	8ddffc2c 	andhi	r23,r17,32752
1020c4a4:	009ff834 	movhi	r2,32736
1020c4a8:	b8810b26 	beq	r23,r2,1020c8d8 <_strtod_r+0xd94>
1020c4ac:	d8800817 	ldw	r2,32(sp)
1020c4b0:	10001a26 	beq	r2,zero,1020c51c <_strtod_r+0x9d8>
1020c4b4:	0081a834 	movhi	r2,1696
1020c4b8:	15c01836 	bltu	r2,r23,1020c51c <_strtod_r+0x9d8>
1020c4bc:	d9000d17 	ldw	r4,52(sp)
1020c4c0:	01d07834 	movhi	r7,16864
1020c4c4:	39ffffc4 	addi	r7,r7,-1
1020c4c8:	b00b883a 	mov	r5,r22
1020c4cc:	01bff034 	movhi	r6,65472
1020c4d0:	0216dc40 	call	10216dc4 <__ledf2>
1020c4d4:	00800e16 	blt	zero,r2,1020c510 <_strtod_r+0x9cc>
1020c4d8:	d9000d17 	ldw	r4,52(sp)
1020c4dc:	b00b883a 	mov	r5,r22
1020c4e0:	0214d500 	call	10214d50 <__fixunsdfsi>
1020c4e4:	1001d026 	beq	r2,zero,1020cc28 <_strtod_r+0x10e4>
1020c4e8:	1009883a 	mov	r4,r2
1020c4ec:	0217ff00 	call	10217ff0 <__floatunsidf>
1020c4f0:	d8800d15 	stw	r2,52(sp)
1020c4f4:	182d883a 	mov	r22,r3
1020c4f8:	d8c00e17 	ldw	r3,56(sp)
1020c4fc:	1801c81e 	bne	r3,zero,1020cc20 <_strtod_r+0x10dc>
1020c500:	b220003c 	xorhi	r8,r22,32768
1020c504:	d9000d17 	ldw	r4,52(sp)
1020c508:	402b883a 	mov	r21,r8
1020c50c:	d9000b15 	stw	r4,44(sp)
1020c510:	0081ac34 	movhi	r2,1712
1020c514:	a891883a 	add	r8,r21,r2
1020c518:	45ebc83a 	sub	r21,r8,r23
1020c51c:	9009883a 	mov	r4,r18
1020c520:	880b883a 	mov	r5,r17
1020c524:	020aa480 	call	1020aa48 <__ulp>
1020c528:	d9000b17 	ldw	r4,44(sp)
1020c52c:	a80b883a 	mov	r5,r21
1020c530:	100d883a 	mov	r6,r2
1020c534:	180f883a 	mov	r7,r3
1020c538:	0216ea40 	call	10216ea4 <__muldf3>
1020c53c:	9009883a 	mov	r4,r18
1020c540:	880b883a 	mov	r5,r17
1020c544:	100d883a 	mov	r6,r2
1020c548:	180f883a 	mov	r7,r3
1020c54c:	0215af80 	call	10215af8 <__adddf3>
1020c550:	1025883a 	mov	r18,r2
1020c554:	1823883a 	mov	r17,r3
1020c558:	182b883a 	mov	r21,r3
1020c55c:	d8800817 	ldw	r2,32(sp)
1020c560:	1000021e 	bne	r2,zero,1020c56c <_strtod_r+0xa28>
1020c564:	a89ffc2c 	andhi	r2,r21,32752
1020c568:	b880f726 	beq	r23,r2,1020c948 <_strtod_r+0xe04>
1020c56c:	d9400517 	ldw	r5,20(sp)
1020c570:	8009883a 	mov	r4,r16
1020c574:	020a0240 	call	1020a024 <_Bfree>
1020c578:	8009883a 	mov	r4,r16
1020c57c:	e00b883a 	mov	r5,fp
1020c580:	020a0240 	call	1020a024 <_Bfree>
1020c584:	8009883a 	mov	r4,r16
1020c588:	a00b883a 	mov	r5,r20
1020c58c:	020a0240 	call	1020a024 <_Bfree>
1020c590:	8009883a 	mov	r4,r16
1020c594:	980b883a 	mov	r5,r19
1020c598:	020a0240 	call	1020a024 <_Bfree>
1020c59c:	003f2806 	br	1020c240 <_strtod_r+0x6fc>
1020c5a0:	01000044 	movi	r4,1
1020c5a4:	d8000b15 	stw	zero,44(sp)
1020c5a8:	d9000d15 	stw	r4,52(sp)
1020c5ac:	003f5b06 	br	1020c31c <_strtod_r+0x7d8>
1020c5b0:	b009883a 	mov	r4,r22
1020c5b4:	a80b883a 	mov	r5,r21
1020c5b8:	000d883a 	mov	r6,zero
1020c5bc:	01cff834 	movhi	r7,16352
1020c5c0:	0216ea40 	call	10216ea4 <__muldf3>
1020c5c4:	d9000e17 	ldw	r4,56(sp)
1020c5c8:	d8800d15 	stw	r2,52(sp)
1020c5cc:	182d883a 	mov	r22,r3
1020c5d0:	2000111e 	bne	r4,zero,1020c618 <_strtod_r+0xad4>
1020c5d4:	1a20003c 	xorhi	r8,r3,32768
1020c5d8:	d8800b15 	stw	r2,44(sp)
1020c5dc:	402b883a 	mov	r21,r8
1020c5e0:	003faf06 	br	1020c4a0 <_strtod_r+0x95c>
1020c5e4:	a907c83a 	sub	r3,r21,r4
1020c5e8:	dd800c17 	ldw	r22,48(sp)
1020c5ec:	003f3b06 	br	1020c2dc <_strtod_r+0x798>
1020c5f0:	013ef8c4 	movi	r4,-1053
1020c5f4:	05c00044 	movi	r23,1
1020c5f8:	2149c83a 	sub	r4,r4,r5
1020c5fc:	b908983a 	sll	r4,r23,r4
1020c600:	ddc00d15 	stw	r23,52(sp)
1020c604:	d9000b15 	stw	r4,44(sp)
1020c608:	003f4406 	br	1020c31c <_strtod_r+0x7d8>
1020c60c:	dd800615 	stw	r22,24(sp)
1020c610:	000f883a 	mov	r7,zero
1020c614:	003dee06 	br	1020bdd0 <_strtod_r+0x28c>
1020c618:	1811883a 	mov	r8,r3
1020c61c:	003fee06 	br	1020c5d8 <_strtod_r+0xa94>
1020c620:	9000681e 	bne	r18,zero,1020c7c4 <_strtod_r+0xc80>
1020c624:	00c00434 	movhi	r3,16
1020c628:	18ffffc4 	addi	r3,r3,-1
1020c62c:	88c4703a 	and	r2,r17,r3
1020c630:	1000661e 	bne	r2,zero,1020c7cc <_strtod_r+0xc88>
1020c634:	b009883a 	mov	r4,r22
1020c638:	a80b883a 	mov	r5,r21
1020c63c:	000d883a 	mov	r6,zero
1020c640:	01cffc34 	movhi	r7,16368
1020c644:	0216dc40 	call	10216dc4 <__ledf2>
1020c648:	10024d16 	blt	r2,zero,1020cf80 <_strtod_r+0x143c>
1020c64c:	b009883a 	mov	r4,r22
1020c650:	a80b883a 	mov	r5,r21
1020c654:	000d883a 	mov	r6,zero
1020c658:	01cff834 	movhi	r7,16352
1020c65c:	0216ea40 	call	10216ea4 <__muldf3>
1020c660:	d8800d15 	stw	r2,52(sp)
1020c664:	182d883a 	mov	r22,r3
1020c668:	102b883a 	mov	r21,r2
1020c66c:	1a20003c 	xorhi	r8,r3,32768
1020c670:	dd400b15 	stw	r21,44(sp)
1020c674:	402b883a 	mov	r21,r8
1020c678:	003f8906 	br	1020c4a0 <_strtod_r+0x95c>
1020c67c:	a811883a 	mov	r8,r21
1020c680:	000b883a 	mov	r5,zero
1020c684:	0013883a 	mov	r9,zero
1020c688:	91bff404 	addi	r6,r18,-48
1020c68c:	00800244 	movi	r2,9
1020c690:	11801036 	bltu	r2,r6,1020c6d4 <_strtod_r+0xb90>
1020c694:	28c00044 	addi	r3,r5,1
1020c698:	3005883a 	mov	r2,r6
1020c69c:	30014e1e 	bne	r6,zero,1020cbd8 <_strtod_r+0x1094>
1020c6a0:	d9000617 	ldw	r4,24(sp)
1020c6a4:	180b883a 	mov	r5,r3
1020c6a8:	20800044 	addi	r2,r4,1
1020c6ac:	d8800615 	stw	r2,24(sp)
1020c6b0:	24800047 	ldb	r18,1(r4)
1020c6b4:	003ff406 	br	1020c688 <_strtod_r+0xb44>
1020c6b8:	01c00044 	movi	r7,1
1020c6bc:	b0800084 	addi	r2,r22,2
1020c6c0:	d8800615 	stw	r2,24(sp)
1020c6c4:	b4800087 	ldb	r18,2(r22)
1020c6c8:	003e0b06 	br	1020bef8 <_strtod_r+0x3b4>
1020c6cc:	000f883a 	mov	r7,zero
1020c6d0:	003ffa06 	br	1020c6bc <_strtod_r+0xb78>
1020c6d4:	02800044 	movi	r10,1
1020c6d8:	003db806 	br	1020bdbc <_strtod_r+0x278>
1020c6dc:	00804d04 	movi	r2,308
1020c6e0:	15807816 	blt	r2,r22,1020c8c4 <_strtod_r+0xd80>
1020c6e4:	b039d13a 	srai	fp,r22,4
1020c6e8:	01800044 	movi	r6,1
1020c6ec:	3702390e 	bge	r6,fp,1020cfd4 <_strtod_r+0x1490>
1020c6f0:	008408b4 	movhi	r2,4130
1020c6f4:	10b4dd04 	addi	r2,r2,-11404
1020c6f8:	d8800815 	stw	r2,32(sp)
1020c6fc:	9005883a 	mov	r2,r18
1020c700:	dc800817 	ldw	r18,32(sp)
1020c704:	002d883a 	mov	r22,zero
1020c708:	9809883a 	mov	r4,r19
1020c70c:	8807883a 	mov	r3,r17
1020c710:	8027883a 	mov	r19,r16
1020c714:	3023883a 	mov	r17,r6
1020c718:	b021883a 	mov	r16,r22
1020c71c:	da000a15 	stw	r8,40(sp)
1020c720:	202d883a 	mov	r22,r4
1020c724:	e180004c 	andi	r6,fp,1
1020c728:	30000726 	beq	r6,zero,1020c748 <_strtod_r+0xc04>
1020c72c:	800c90fa 	slli	r6,r16,3
1020c730:	1009883a 	mov	r4,r2
1020c734:	180b883a 	mov	r5,r3
1020c738:	9185883a 	add	r2,r18,r6
1020c73c:	11800017 	ldw	r6,0(r2)
1020c740:	11c00117 	ldw	r7,4(r2)
1020c744:	0216ea40 	call	10216ea4 <__muldf3>
1020c748:	e039d07a 	srai	fp,fp,1
1020c74c:	84000044 	addi	r16,r16,1
1020c750:	e47ff41e 	bne	fp,r17,1020c724 <_strtod_r+0xbe0>
1020c754:	da000a17 	ldw	r8,40(sp)
1020c758:	b009883a 	mov	r4,r22
1020c75c:	1025883a 	mov	r18,r2
1020c760:	802d883a 	mov	r22,r16
1020c764:	1823883a 	mov	r17,r3
1020c768:	9821883a 	mov	r16,r19
1020c76c:	2027883a 	mov	r19,r4
1020c770:	b01290fa 	slli	r9,r22,3
1020c774:	d9000817 	ldw	r4,32(sp)
1020c778:	01ff2c34 	movhi	r7,64688
1020c77c:	900d883a 	mov	r6,r18
1020c780:	226d883a 	add	r22,r4,r9
1020c784:	b1000017 	ldw	r4,0(r22)
1020c788:	b1400117 	ldw	r5,4(r22)
1020c78c:	89cf883a 	add	r7,r17,r7
1020c790:	da001415 	stw	r8,80(sp)
1020c794:	0216ea40 	call	10216ea4 <__muldf3>
1020c798:	1025883a 	mov	r18,r2
1020c79c:	011f2834 	movhi	r4,31904
1020c7a0:	189ffc2c 	andhi	r2,r3,32752
1020c7a4:	da001417 	ldw	r8,80(sp)
1020c7a8:	20804636 	bltu	r4,r2,1020c8c4 <_strtod_r+0xd80>
1020c7ac:	011f2434 	movhi	r4,31888
1020c7b0:	2081ef2e 	bgeu	r4,r2,1020cf70 <_strtod_r+0x142c>
1020c7b4:	045ffc34 	movhi	r17,32752
1020c7b8:	8c7fffc4 	addi	r17,r17,-1
1020c7bc:	04bfffc4 	movi	r18,-1
1020c7c0:	003e8a06 	br	1020c1ec <_strtod_r+0x6a8>
1020c7c4:	00800044 	movi	r2,1
1020c7c8:	90811a26 	beq	r18,r2,1020cc34 <_strtod_r+0x10f0>
1020c7cc:	d8000b15 	stw	zero,44(sp)
1020c7d0:	056ffc34 	movhi	r21,49136
1020c7d4:	d8000d15 	stw	zero,52(sp)
1020c7d8:	058ffc34 	movhi	r22,16368
1020c7dc:	003f3006 	br	1020c4a0 <_strtod_r+0x95c>
1020c7e0:	00801944 	movi	r2,101
1020c7e4:	90be3326 	beq	r18,r2,1020c0b4 <_strtod_r+0x570>
1020c7e8:	0011883a 	mov	r8,zero
1020c7ec:	0013883a 	mov	r9,zero
1020c7f0:	02800044 	movi	r10,1
1020c7f4:	003d7306 	br	1020bdc4 <_strtod_r+0x280>
1020c7f8:	d9001117 	ldw	r4,68(sp)
1020c7fc:	00bfffc4 	movi	r2,-1
1020c800:	20804d1e 	bne	r4,r2,1020c938 <_strtod_r+0xdf4>
1020c804:	9811883a 	mov	r8,r19
1020c808:	dcc01217 	ldw	r19,72(sp)
1020c80c:	d8800517 	ldw	r2,20(sp)
1020c810:	00c00884 	movi	r3,34
1020c814:	80c00015 	stw	r3,0(r16)
1020c818:	002b883a 	mov	r21,zero
1020c81c:	05dffc34 	movhi	r23,32752
1020c820:	100b883a 	mov	r5,r2
1020c824:	8009883a 	mov	r4,r16
1020c828:	da001415 	stw	r8,80(sp)
1020c82c:	020a0240 	call	1020a024 <_Bfree>
1020c830:	8009883a 	mov	r4,r16
1020c834:	e00b883a 	mov	r5,fp
1020c838:	020a0240 	call	1020a024 <_Bfree>
1020c83c:	8009883a 	mov	r4,r16
1020c840:	a00b883a 	mov	r5,r20
1020c844:	020a0240 	call	1020a024 <_Bfree>
1020c848:	d9400a17 	ldw	r5,40(sp)
1020c84c:	8009883a 	mov	r4,r16
1020c850:	020a0240 	call	1020a024 <_Bfree>
1020c854:	da001417 	ldw	r8,80(sp)
1020c858:	8009883a 	mov	r4,r16
1020c85c:	400b883a 	mov	r5,r8
1020c860:	020a0240 	call	1020a024 <_Bfree>
1020c864:	003d8106 	br	1020be6c <_strtod_r+0x328>
1020c868:	9811883a 	mov	r8,r19
1020c86c:	dcc01217 	ldw	r19,72(sp)
1020c870:	003fe706 	br	1020c810 <_strtod_r+0xccc>
1020c874:	d9000717 	ldw	r4,28(sp)
1020c878:	d8800504 	addi	r2,sp,20
1020c87c:	018408b4 	movhi	r6,4130
1020c880:	d9000115 	stw	r4,4(sp)
1020c884:	31b52204 	addi	r6,r6,-11128
1020c888:	d8800015 	stw	r2,0(sp)
1020c88c:	8009883a 	mov	r4,r16
1020c890:	d9400604 	addi	r5,sp,24
1020c894:	d9c00404 	addi	r7,sp,16
1020c898:	0212d500 	call	10212d50 <__gethex>
1020c89c:	154001cc 	andi	r21,r2,7
1020c8a0:	a83d8726 	beq	r21,zero,1020bec0 <_strtod_r+0x37c>
1020c8a4:	00c00184 	movi	r3,6
1020c8a8:	a8c0eb1e 	bne	r21,r3,1020cc58 <_strtod_r+0x1114>
1020c8ac:	a5000044 	addi	r20,r20,1
1020c8b0:	dd000615 	stw	r20,24(sp)
1020c8b4:	002b883a 	mov	r21,zero
1020c8b8:	002f883a 	mov	r23,zero
1020c8bc:	d8000715 	stw	zero,28(sp)
1020c8c0:	003d6a06 	br	1020be6c <_strtod_r+0x328>
1020c8c4:	00800884 	movi	r2,34
1020c8c8:	80800015 	stw	r2,0(r16)
1020c8cc:	002b883a 	mov	r21,zero
1020c8d0:	05dffc34 	movhi	r23,32752
1020c8d4:	003d6506 	br	1020be6c <_strtod_r+0x328>
1020c8d8:	00bf2c34 	movhi	r2,64688
1020c8dc:	88a3883a 	add	r17,r17,r2
1020c8e0:	9009883a 	mov	r4,r18
1020c8e4:	880b883a 	mov	r5,r17
1020c8e8:	020aa480 	call	1020aa48 <__ulp>
1020c8ec:	d9000b17 	ldw	r4,44(sp)
1020c8f0:	a80b883a 	mov	r5,r21
1020c8f4:	100d883a 	mov	r6,r2
1020c8f8:	180f883a 	mov	r7,r3
1020c8fc:	0216ea40 	call	10216ea4 <__muldf3>
1020c900:	9009883a 	mov	r4,r18
1020c904:	880b883a 	mov	r5,r17
1020c908:	100d883a 	mov	r6,r2
1020c90c:	180f883a 	mov	r7,r3
1020c910:	0215af80 	call	10215af8 <__adddf3>
1020c914:	011f2834 	movhi	r4,31904
1020c918:	1025883a 	mov	r18,r2
1020c91c:	213fffc4 	addi	r4,r4,-1
1020c920:	189ffc2c 	andhi	r2,r3,32752
1020c924:	2080862e 	bgeu	r4,r2,1020cb40 <_strtod_r+0xffc>
1020c928:	d8801017 	ldw	r2,64(sp)
1020c92c:	00dffc34 	movhi	r3,32752
1020c930:	18ffffc4 	addi	r3,r3,-1
1020c934:	10ffb026 	beq	r2,r3,1020c7f8 <_strtod_r+0xcb4>
1020c938:	045ffc34 	movhi	r17,32752
1020c93c:	8c7fffc4 	addi	r17,r17,-1
1020c940:	04bfffc4 	movi	r18,-1
1020c944:	003f0906 	br	1020c56c <_strtod_r+0xa28>
1020c948:	d9000d17 	ldw	r4,52(sp)
1020c94c:	b00b883a 	mov	r5,r22
1020c950:	0217e980 	call	10217e98 <__fixdfsi>
1020c954:	1009883a 	mov	r4,r2
1020c958:	0217f200 	call	10217f20 <__floatsidf>
1020c95c:	d9000d17 	ldw	r4,52(sp)
1020c960:	b00b883a 	mov	r5,r22
1020c964:	100d883a 	mov	r6,r2
1020c968:	180f883a 	mov	r7,r3
1020c96c:	02175c80 	call	102175c8 <__subdf3>
1020c970:	182d883a 	mov	r22,r3
1020c974:	d8c00e17 	ldw	r3,56(sp)
1020c978:	102f883a 	mov	r23,r2
1020c97c:	1800131e 	bne	r3,zero,1020c9cc <_strtod_r+0xe88>
1020c980:	9000121e 	bne	r18,zero,1020c9cc <_strtod_r+0xe88>
1020c984:	01000434 	movhi	r4,16
1020c988:	213fffc4 	addi	r4,r4,-1
1020c98c:	a92a703a 	and	r21,r21,r4
1020c990:	a8000e1e 	bne	r21,zero,1020c9cc <_strtod_r+0xe88>
1020c994:	01a52834 	movhi	r6,38048
1020c998:	01cff434 	movhi	r7,16336
1020c99c:	318d6544 	addi	r6,r6,13717
1020c9a0:	39ffffc4 	addi	r7,r7,-1
1020c9a4:	b809883a 	mov	r4,r23
1020c9a8:	b00b883a 	mov	r5,r22
1020c9ac:	0216dc40 	call	10216dc4 <__ledf2>
1020c9b0:	103eee0e 	bge	r2,zero,1020c56c <_strtod_r+0xa28>
1020c9b4:	9811883a 	mov	r8,r19
1020c9b8:	d8800517 	ldw	r2,20(sp)
1020c9bc:	dcc01217 	ldw	r19,72(sp)
1020c9c0:	002b883a 	mov	r21,zero
1020c9c4:	882f883a 	mov	r23,r17
1020c9c8:	003f9506 	br	1020c820 <_strtod_r+0xcdc>
1020c9cc:	01a52834 	movhi	r6,38048
1020c9d0:	01cff834 	movhi	r7,16352
1020c9d4:	318d6544 	addi	r6,r6,13717
1020c9d8:	39ffffc4 	addi	r7,r7,-1
1020c9dc:	b809883a 	mov	r4,r23
1020c9e0:	b00b883a 	mov	r5,r22
1020c9e4:	0216dc40 	call	10216dc4 <__ledf2>
1020c9e8:	10000716 	blt	r2,zero,1020ca08 <_strtod_r+0xec4>
1020c9ec:	018d6c34 	movhi	r6,13744
1020c9f0:	31b94d44 	addi	r6,r6,-6859
1020c9f4:	b809883a 	mov	r4,r23
1020c9f8:	b00b883a 	mov	r5,r22
1020c9fc:	01cff834 	movhi	r7,16352
1020ca00:	0216ce40 	call	10216ce4 <__gedf2>
1020ca04:	00bed90e 	bge	zero,r2,1020c56c <_strtod_r+0xa28>
1020ca08:	9811883a 	mov	r8,r19
1020ca0c:	d8800517 	ldw	r2,20(sp)
1020ca10:	dcc01217 	ldw	r19,72(sp)
1020ca14:	902b883a 	mov	r21,r18
1020ca18:	882f883a 	mov	r23,r17
1020ca1c:	003f8006 	br	1020c820 <_strtod_r+0xcdc>
1020ca20:	b03df226 	beq	r22,zero,1020c1ec <_strtod_r+0x6a8>
1020ca24:	05adc83a 	sub	r22,zero,r22
1020ca28:	b08003cc 	andi	r2,r22,15
1020ca2c:	10000d26 	beq	r2,zero,1020ca64 <_strtod_r+0xf20>
1020ca30:	100490fa 	slli	r2,r2,3
1020ca34:	00c408b4 	movhi	r3,4130
1020ca38:	18f4e704 	addi	r3,r3,-11364
1020ca3c:	1885883a 	add	r2,r3,r2
1020ca40:	11800017 	ldw	r6,0(r2)
1020ca44:	11c00117 	ldw	r7,4(r2)
1020ca48:	9009883a 	mov	r4,r18
1020ca4c:	880b883a 	mov	r5,r17
1020ca50:	da001415 	stw	r8,80(sp)
1020ca54:	02163940 	call	10216394 <__divdf3>
1020ca58:	da001417 	ldw	r8,80(sp)
1020ca5c:	1025883a 	mov	r18,r2
1020ca60:	1823883a 	mov	r17,r3
1020ca64:	b02dd13a 	srai	r22,r22,4
1020ca68:	b03de026 	beq	r22,zero,1020c1ec <_strtod_r+0x6a8>
1020ca6c:	008007c4 	movi	r2,31
1020ca70:	15802c16 	blt	r2,r22,1020cb24 <_strtod_r+0xfe0>
1020ca74:	b080040c 	andi	r2,r22,16
1020ca78:	10018726 	beq	r2,zero,1020d098 <_strtod_r+0x1554>
1020ca7c:	0581a60e 	bge	zero,r22,1020d118 <_strtod_r+0x15d4>
1020ca80:	00801a84 	movi	r2,106
1020ca84:	d8800815 	stw	r2,32(sp)
1020ca88:	070408b4 	movhi	fp,4130
1020ca8c:	8807883a 	mov	r3,r17
1020ca90:	e7352704 	addi	fp,fp,-11108
1020ca94:	9005883a 	mov	r2,r18
1020ca98:	4023883a 	mov	r17,r8
1020ca9c:	b180004c 	andi	r6,r22,1
1020caa0:	30000526 	beq	r6,zero,1020cab8 <_strtod_r+0xf74>
1020caa4:	e1800017 	ldw	r6,0(fp)
1020caa8:	e1c00117 	ldw	r7,4(fp)
1020caac:	1009883a 	mov	r4,r2
1020cab0:	180b883a 	mov	r5,r3
1020cab4:	0216ea40 	call	10216ea4 <__muldf3>
1020cab8:	b02dd07a 	srai	r22,r22,1
1020cabc:	e7000204 	addi	fp,fp,8
1020cac0:	05bff616 	blt	zero,r22,1020ca9c <_strtod_r+0xf58>
1020cac4:	8811883a 	mov	r8,r17
1020cac8:	1823883a 	mov	r17,r3
1020cacc:	d8c00817 	ldw	r3,32(sp)
1020cad0:	1025883a 	mov	r18,r2
1020cad4:	18000b26 	beq	r3,zero,1020cb04 <_strtod_r+0xfc0>
1020cad8:	8d9ffc2c 	andhi	r22,r17,32752
1020cadc:	b02cd53a 	srli	r22,r22,20
1020cae0:	00801ac4 	movi	r2,107
1020cae4:	1585c83a 	sub	r2,r2,r22
1020cae8:	0080060e 	bge	zero,r2,1020cb04 <_strtod_r+0xfc0>
1020caec:	00c007c4 	movi	r3,31
1020caf0:	1881800e 	bge	r3,r2,1020d0f4 <_strtod_r+0x15b0>
1020caf4:	00c00d04 	movi	r3,52
1020caf8:	0025883a 	mov	r18,zero
1020cafc:	1881810e 	bge	r3,r2,1020d104 <_strtod_r+0x15c0>
1020cb00:	0440dc34 	movhi	r17,880
1020cb04:	9009883a 	mov	r4,r18
1020cb08:	880b883a 	mov	r5,r17
1020cb0c:	000d883a 	mov	r6,zero
1020cb10:	000f883a 	mov	r7,zero
1020cb14:	da001415 	stw	r8,80(sp)
1020cb18:	0216c600 	call	10216c60 <__eqdf2>
1020cb1c:	da001417 	ldw	r8,80(sp)
1020cb20:	103db31e 	bne	r2,zero,1020c1f0 <_strtod_r+0x6ac>
1020cb24:	00800884 	movi	r2,34
1020cb28:	80800015 	stw	r2,0(r16)
1020cb2c:	002b883a 	mov	r21,zero
1020cb30:	002f883a 	mov	r23,zero
1020cb34:	003ccd06 	br	1020be6c <_strtod_r+0x328>
1020cb38:	009387c4 	movi	r2,19999
1020cb3c:	003d1e06 	br	1020bfb8 <_strtod_r+0x474>
1020cb40:	0440d434 	movhi	r17,848
1020cb44:	1c63883a 	add	r17,r3,r17
1020cb48:	882b883a 	mov	r21,r17
1020cb4c:	003e8306 	br	1020c55c <_strtod_r+0xa18>
1020cb50:	14803fcc 	andi	r18,r2,255
1020cb54:	9480201c 	xori	r18,r18,128
1020cb58:	94bfe004 	addi	r18,r18,-128
1020cb5c:	a023883a 	mov	r17,r20
1020cb60:	0039883a 	mov	fp,zero
1020cb64:	002f883a 	mov	r23,zero
1020cb68:	002b883a 	mov	r21,zero
1020cb6c:	003c8206 	br	1020bd78 <_strtod_r+0x234>
1020cb70:	d9000917 	ldw	r4,36(sp)
1020cb74:	00c00944 	movi	r3,37
1020cb78:	1a07c83a 	sub	r3,r3,r8
1020cb7c:	193d8516 	blt	r3,r4,1020c194 <_strtod_r+0x650>
1020cb80:	1221c83a 	sub	r16,r2,r8
1020cb84:	800690fa 	slli	r3,r16,3
1020cb88:	050408b4 	movhi	r20,4130
1020cb8c:	a534e704 	addi	r20,r20,-11364
1020cb90:	a0c7883a 	add	r3,r20,r3
1020cb94:	19000017 	ldw	r4,0(r3)
1020cb98:	19400117 	ldw	r5,4(r3)
1020cb9c:	900d883a 	mov	r6,r18
1020cba0:	880f883a 	mov	r7,r17
1020cba4:	0216ea40 	call	10216ea4 <__muldf3>
1020cba8:	d9000917 	ldw	r4,36(sp)
1020cbac:	180b883a 	mov	r5,r3
1020cbb0:	240dc83a 	sub	r6,r4,r16
1020cbb4:	300c90fa 	slli	r6,r6,3
1020cbb8:	1009883a 	mov	r4,r2
1020cbbc:	a185883a 	add	r2,r20,r6
1020cbc0:	11800017 	ldw	r6,0(r2)
1020cbc4:	11c00117 	ldw	r7,4(r2)
1020cbc8:	0216ea40 	call	10216ea4 <__muldf3>
1020cbcc:	102b883a 	mov	r21,r2
1020cbd0:	182f883a 	mov	r23,r3
1020cbd4:	003ca506 	br	1020be6c <_strtod_r+0x328>
1020cbd8:	48d3883a 	add	r9,r9,r3
1020cbdc:	28010526 	beq	r5,zero,1020cff4 <_strtod_r+0x14b0>
1020cbe0:	2a0b883a 	add	r5,r5,r8
1020cbe4:	01000204 	movi	r4,8
1020cbe8:	01c00404 	movi	r7,16
1020cbec:	42000044 	addi	r8,r8,1
1020cbf0:	40ffffc4 	addi	r3,r8,-1
1020cbf4:	20c00716 	blt	r4,r3,1020cc14 <_strtod_r+0x10d0>
1020cbf8:	bdc002a4 	muli	r23,r23,10
1020cbfc:	417ffb1e 	bne	r8,r5,1020cbec <_strtod_r+0x10a8>
1020cc00:	00c00204 	movi	r3,8
1020cc04:	2a000044 	addi	r8,r5,1
1020cc08:	19405616 	blt	r3,r5,1020cd64 <_strtod_r+0x1220>
1020cc0c:	d8c00617 	ldw	r3,24(sp)
1020cc10:	003d5b06 	br	1020c180 <_strtod_r+0x63c>
1020cc14:	3a3ff916 	blt	r7,r8,1020cbfc <_strtod_r+0x10b8>
1020cc18:	e70002a4 	muli	fp,fp,10
1020cc1c:	003ff706 	br	1020cbfc <_strtod_r+0x10b8>
1020cc20:	b011883a 	mov	r8,r22
1020cc24:	003e3706 	br	1020c504 <_strtod_r+0x9c0>
1020cc28:	d8000d15 	stw	zero,52(sp)
1020cc2c:	058ffc34 	movhi	r22,16368
1020cc30:	003e3106 	br	1020c4f8 <_strtod_r+0x9b4>
1020cc34:	883ee51e 	bne	r17,zero,1020c7cc <_strtod_r+0xc88>
1020cc38:	9811883a 	mov	r8,r19
1020cc3c:	dcc01217 	ldw	r19,72(sp)
1020cc40:	00800884 	movi	r2,34
1020cc44:	80800015 	stw	r2,0(r16)
1020cc48:	002b883a 	mov	r21,zero
1020cc4c:	d8800517 	ldw	r2,20(sp)
1020cc50:	002f883a 	mov	r23,zero
1020cc54:	003ef206 	br	1020c820 <_strtod_r+0xcdc>
1020cc58:	d9800517 	ldw	r6,20(sp)
1020cc5c:	30000826 	beq	r6,zero,1020cc80 <_strtod_r+0x113c>
1020cc60:	01400d44 	movi	r5,53
1020cc64:	d9000204 	addi	r4,sp,8
1020cc68:	d8801315 	stw	r2,76(sp)
1020cc6c:	020ae180 	call	1020ae18 <__copybits>
1020cc70:	d9400517 	ldw	r5,20(sp)
1020cc74:	8009883a 	mov	r4,r16
1020cc78:	020a0240 	call	1020a024 <_Bfree>
1020cc7c:	d8801317 	ldw	r2,76(sp)
1020cc80:	00c00184 	movi	r3,6
1020cc84:	d9000417 	ldw	r4,16(sp)
1020cc88:	1d400f36 	bltu	r3,r21,1020ccc8 <_strtod_r+0x1184>
1020cc8c:	a82a90ba 	slli	r21,r21,2
1020cc90:	00c40874 	movhi	r3,4129
1020cc94:	18f32904 	addi	r3,r3,-13148
1020cc98:	a8eb883a 	add	r21,r21,r3
1020cc9c:	a8c00017 	ldw	r3,0(r21)
1020cca0:	1800683a 	jmp	r3
1020cca4:	1020cd1c 	xori	zero,r2,33588
1020cca8:	1020ccf8 	rdprs	zero,r2,-31949
1020ccac:	1020ccdc 	xori	zero,r2,33587
1020ccb0:	1020ccc0 	call	11020ccc <__ram_exceptions_end+0xc18a8c>
1020ccb4:	1020cce8 	cmpgeui	zero,r2,33587
1020ccb8:	1020ccf8 	rdprs	zero,r2,-31949
1020ccbc:	1020cd1c 	xori	zero,r2,33588
1020ccc0:	045ffc34 	movhi	r17,32752
1020ccc4:	0025883a 	mov	r18,zero
1020ccc8:	1080020c 	andi	r2,r2,8
1020cccc:	902b883a 	mov	r21,r18
1020ccd0:	103c6526 	beq	r2,zero,1020be68 <_strtod_r+0x324>
1020ccd4:	8de00034 	orhi	r23,r17,32768
1020ccd8:	003c6406 	br	1020be6c <_strtod_r+0x328>
1020ccdc:	dc800217 	ldw	r18,8(sp)
1020cce0:	dc400317 	ldw	r17,12(sp)
1020cce4:	003ff806 	br	1020ccc8 <_strtod_r+0x1184>
1020cce8:	04600034 	movhi	r17,32768
1020ccec:	8c7fffc4 	addi	r17,r17,-1
1020ccf0:	04bfffc4 	movi	r18,-1
1020ccf4:	003ff406 	br	1020ccc8 <_strtod_r+0x1184>
1020ccf8:	20c10cc4 	addi	r3,r4,1075
1020ccfc:	dc400317 	ldw	r17,12(sp)
1020cd00:	1806953a 	slli	r3,r3,20
1020cd04:	013ffc34 	movhi	r4,65520
1020cd08:	213fffc4 	addi	r4,r4,-1
1020cd0c:	8922703a 	and	r17,r17,r4
1020cd10:	dc800217 	ldw	r18,8(sp)
1020cd14:	1c62b03a 	or	r17,r3,r17
1020cd18:	003feb06 	br	1020ccc8 <_strtod_r+0x1184>
1020cd1c:	0023883a 	mov	r17,zero
1020cd20:	0025883a 	mov	r18,zero
1020cd24:	003fe806 	br	1020ccc8 <_strtod_r+0x1184>
1020cd28:	d8c00917 	ldw	r3,36(sp)
1020cd2c:	00bffa84 	movi	r2,-22
1020cd30:	18bd1816 	blt	r3,r2,1020c194 <_strtod_r+0x650>
1020cd34:	180690fa 	slli	r3,r3,3
1020cd38:	008408b4 	movhi	r2,4130
1020cd3c:	10b4e704 	addi	r2,r2,-11364
1020cd40:	10c5c83a 	sub	r2,r2,r3
1020cd44:	11800017 	ldw	r6,0(r2)
1020cd48:	11c00117 	ldw	r7,4(r2)
1020cd4c:	9009883a 	mov	r4,r18
1020cd50:	880b883a 	mov	r5,r17
1020cd54:	02163940 	call	10216394 <__divdf3>
1020cd58:	102b883a 	mov	r21,r2
1020cd5c:	182f883a 	mov	r23,r3
1020cd60:	003c4206 	br	1020be6c <_strtod_r+0x328>
1020cd64:	00800404 	movi	r2,16
1020cd68:	12008a0e 	bge	r2,r8,1020cf94 <_strtod_r+0x1450>
1020cd6c:	d9000617 	ldw	r4,24(sp)
1020cd70:	000b883a 	mov	r5,zero
1020cd74:	003e4c06 	br	1020c6a8 <_strtod_r+0xb64>
1020cd78:	014408b4 	movhi	r5,4130
1020cd7c:	d8c00617 	ldw	r3,24(sp)
1020cd80:	29751904 	addi	r5,r5,-11164
1020cd84:	01c00644 	movi	r7,25
1020cd88:	00000b06 	br	1020cdb8 <_strtod_r+0x1274>
1020cd8c:	18c00044 	addi	r3,r3,1
1020cd90:	18800003 	ldbu	r2,0(r3)
1020cd94:	113fefc4 	addi	r4,r2,-65
1020cd98:	10803fcc 	andi	r2,r2,255
1020cd9c:	1080201c 	xori	r2,r2,128
1020cda0:	21003fcc 	andi	r4,r4,255
1020cda4:	10bfe004 	addi	r2,r2,-128
1020cda8:	39000136 	bltu	r7,r4,1020cdb0 <_strtod_r+0x126c>
1020cdac:	10800804 	addi	r2,r2,32
1020cdb0:	29400044 	addi	r5,r5,1
1020cdb4:	11bbb01e 	bne	r2,r6,1020bc78 <_strtod_r+0x134>
1020cdb8:	29800007 	ldb	r6,0(r5)
1020cdbc:	303ff31e 	bne	r6,zero,1020cd8c <_strtod_r+0x1248>
1020cdc0:	014408b4 	movhi	r5,4130
1020cdc4:	1811883a 	mov	r8,r3
1020cdc8:	d8c00615 	stw	r3,24(sp)
1020cdcc:	29751a04 	addi	r5,r5,-11160
1020cdd0:	01c00644 	movi	r7,25
1020cdd4:	00000a06 	br	1020ce00 <_strtod_r+0x12bc>
1020cdd8:	18800003 	ldbu	r2,0(r3)
1020cddc:	113fefc4 	addi	r4,r2,-65
1020cde0:	10803fcc 	andi	r2,r2,255
1020cde4:	1080201c 	xori	r2,r2,128
1020cde8:	21003fcc 	andi	r4,r4,255
1020cdec:	10bfe004 	addi	r2,r2,-128
1020cdf0:	39000136 	bltu	r7,r4,1020cdf8 <_strtod_r+0x12b4>
1020cdf4:	10800804 	addi	r2,r2,32
1020cdf8:	29400044 	addi	r5,r5,1
1020cdfc:	11807a1e 	bne	r2,r6,1020cfe8 <_strtod_r+0x14a4>
1020ce00:	29800007 	ldb	r6,0(r5)
1020ce04:	18c00044 	addi	r3,r3,1
1020ce08:	303ff31e 	bne	r6,zero,1020cdd8 <_strtod_r+0x1294>
1020ce0c:	d8c00615 	stw	r3,24(sp)
1020ce10:	045ffc34 	movhi	r17,32752
1020ce14:	0025883a 	mov	r18,zero
1020ce18:	003c1206 	br	1020be64 <_strtod_r+0x320>
1020ce1c:	d8800e17 	ldw	r2,56(sp)
1020ce20:	9811883a 	mov	r8,r19
1020ce24:	dd401117 	ldw	r21,68(sp)
1020ce28:	dcc01217 	ldw	r19,72(sp)
1020ce2c:	ddc01017 	ldw	r23,64(sp)
1020ce30:	1000491e 	bne	r2,zero,1020cf58 <_strtod_r+0x1414>
1020ce34:	9000481e 	bne	r18,zero,1020cf58 <_strtod_r+0x1414>
1020ce38:	00800434 	movhi	r2,16
1020ce3c:	10bfffc4 	addi	r2,r2,-1
1020ce40:	8884703a 	and	r2,r17,r2
1020ce44:	1000441e 	bne	r2,zero,1020cf58 <_strtod_r+0x1414>
1020ce48:	8d9ffc2c 	andhi	r22,r17,32752
1020ce4c:	0081ac34 	movhi	r2,1712
1020ce50:	1580412e 	bgeu	r2,r22,1020cf58 <_strtod_r+0x1414>
1020ce54:	40800517 	ldw	r2,20(r8)
1020ce58:	1000031e 	bne	r2,zero,1020ce68 <_strtod_r+0x1324>
1020ce5c:	40800417 	ldw	r2,16(r8)
1020ce60:	00c00044 	movi	r3,1
1020ce64:	18803c0e 	bge	r3,r2,1020cf58 <_strtod_r+0x1414>
1020ce68:	400b883a 	mov	r5,r8
1020ce6c:	8009883a 	mov	r4,r16
1020ce70:	01800044 	movi	r6,1
1020ce74:	020a7000 	call	1020a700 <__lshift>
1020ce78:	1009883a 	mov	r4,r2
1020ce7c:	a00b883a 	mov	r5,r20
1020ce80:	d8801415 	stw	r2,80(sp)
1020ce84:	020a8500 	call	1020a850 <__mcmp>
1020ce88:	da001417 	ldw	r8,80(sp)
1020ce8c:	0080320e 	bge	zero,r2,1020cf58 <_strtod_r+0x1414>
1020ce90:	d8800817 	ldw	r2,32(sp)
1020ce94:	10008526 	beq	r2,zero,1020d0ac <_strtod_r+0x1568>
1020ce98:	0081ac34 	movhi	r2,1712
1020ce9c:	15808316 	blt	r2,r22,1020d0ac <_strtod_r+0x1568>
1020cea0:	0080dc34 	movhi	r2,880
1020cea4:	15bf660e 	bge	r2,r22,1020cc40 <_strtod_r+0x10fc>
1020cea8:	002b883a 	mov	r21,zero
1020ceac:	882f883a 	mov	r23,r17
1020ceb0:	a809883a 	mov	r4,r21
1020ceb4:	b80b883a 	mov	r5,r23
1020ceb8:	000d883a 	mov	r6,zero
1020cebc:	01ce5434 	movhi	r7,14672
1020cec0:	da001415 	stw	r8,80(sp)
1020cec4:	0216ea40 	call	10216ea4 <__muldf3>
1020cec8:	102b883a 	mov	r21,r2
1020cecc:	182f883a 	mov	r23,r3
1020ced0:	da001417 	ldw	r8,80(sp)
1020ced4:	1800221e 	bne	r3,zero,1020cf60 <_strtod_r+0x141c>
1020ced8:	d8800517 	ldw	r2,20(sp)
1020cedc:	a83e501e 	bne	r21,zero,1020c820 <_strtod_r+0xcdc>
1020cee0:	00c00884 	movi	r3,34
1020cee4:	80c00015 	stw	r3,0(r16)
1020cee8:	003e4d06 	br	1020c820 <_strtod_r+0xcdc>
1020ceec:	d8c00e17 	ldw	r3,56(sp)
1020cef0:	00800434 	movhi	r2,16
1020cef4:	9811883a 	mov	r8,r19
1020cef8:	10bfffc4 	addi	r2,r2,-1
1020cefc:	dcc01217 	ldw	r19,72(sp)
1020cf00:	18002f26 	beq	r3,zero,1020cfc0 <_strtod_r+0x147c>
1020cf04:	8886703a 	and	r3,r17,r2
1020cf08:	18805026 	beq	r3,r2,1020d04c <_strtod_r+0x1508>
1020cf0c:	d8c00b17 	ldw	r3,44(sp)
1020cf10:	18002526 	beq	r3,zero,1020cfa8 <_strtod_r+0x1464>
1020cf14:	1c6e703a 	and	r23,r3,r17
1020cf18:	b8002626 	beq	r23,zero,1020cfb4 <_strtod_r+0x1470>
1020cf1c:	d9000e17 	ldw	r4,56(sp)
1020cf20:	20003626 	beq	r4,zero,1020cffc <_strtod_r+0x14b8>
1020cf24:	d9800817 	ldw	r6,32(sp)
1020cf28:	9009883a 	mov	r4,r18
1020cf2c:	880b883a 	mov	r5,r17
1020cf30:	da001415 	stw	r8,80(sp)
1020cf34:	020bae00 	call	1020bae0 <sulp>
1020cf38:	9009883a 	mov	r4,r18
1020cf3c:	880b883a 	mov	r5,r17
1020cf40:	100d883a 	mov	r6,r2
1020cf44:	180f883a 	mov	r7,r3
1020cf48:	0215af80 	call	10215af8 <__adddf3>
1020cf4c:	da001417 	ldw	r8,80(sp)
1020cf50:	102b883a 	mov	r21,r2
1020cf54:	182f883a 	mov	r23,r3
1020cf58:	d8800817 	ldw	r2,32(sp)
1020cf5c:	103fd41e 	bne	r2,zero,1020ceb0 <_strtod_r+0x136c>
1020cf60:	d8800517 	ldw	r2,20(sp)
1020cf64:	003e2e06 	br	1020c820 <_strtod_r+0xcdc>
1020cf68:	000b883a 	mov	r5,zero
1020cf6c:	003c7c06 	br	1020c160 <_strtod_r+0x61c>
1020cf70:	0440d434 	movhi	r17,848
1020cf74:	1c63883a 	add	r17,r3,r17
1020cf78:	d8000815 	stw	zero,32(sp)
1020cf7c:	003c9c06 	br	1020c1f0 <_strtod_r+0x6ac>
1020cf80:	002b883a 	mov	r21,zero
1020cf84:	022ff834 	movhi	r8,49120
1020cf88:	d8000d15 	stw	zero,52(sp)
1020cf8c:	058ff834 	movhi	r22,16352
1020cf90:	003db706 	br	1020c670 <_strtod_r+0xb2c>
1020cf94:	e08002a4 	muli	r2,fp,10
1020cf98:	d9000617 	ldw	r4,24(sp)
1020cf9c:	000b883a 	mov	r5,zero
1020cfa0:	30b9883a 	add	fp,r6,r2
1020cfa4:	003dc006 	br	1020c6a8 <_strtod_r+0xb64>
1020cfa8:	d8c00d17 	ldw	r3,52(sp)
1020cfac:	1c84703a 	and	r2,r3,r18
1020cfb0:	103fda1e 	bne	r2,zero,1020cf1c <_strtod_r+0x13d8>
1020cfb4:	902b883a 	mov	r21,r18
1020cfb8:	882f883a 	mov	r23,r17
1020cfbc:	003fe606 	br	1020cf58 <_strtod_r+0x1414>
1020cfc0:	8884703a 	and	r2,r17,r2
1020cfc4:	103fd11e 	bne	r2,zero,1020cf0c <_strtod_r+0x13c8>
1020cfc8:	903fd01e 	bne	r18,zero,1020cf0c <_strtod_r+0x13c8>
1020cfcc:	8d9ffc2c 	andhi	r22,r17,32752
1020cfd0:	003faf06 	br	1020ce90 <_strtod_r+0x134c>
1020cfd4:	00c408b4 	movhi	r3,4130
1020cfd8:	18f4dd04 	addi	r3,r3,-11404
1020cfdc:	d8c00815 	stw	r3,32(sp)
1020cfe0:	002d883a 	mov	r22,zero
1020cfe4:	003de206 	br	1020c770 <_strtod_r+0xc2c>
1020cfe8:	40800044 	addi	r2,r8,1
1020cfec:	d8800615 	stw	r2,24(sp)
1020cff0:	003f8706 	br	1020ce10 <_strtod_r+0x12cc>
1020cff4:	400b883a 	mov	r5,r8
1020cff8:	003f0106 	br	1020cc00 <_strtod_r+0x10bc>
1020cffc:	d9800817 	ldw	r6,32(sp)
1020d000:	9009883a 	mov	r4,r18
1020d004:	880b883a 	mov	r5,r17
1020d008:	da001415 	stw	r8,80(sp)
1020d00c:	020bae00 	call	1020bae0 <sulp>
1020d010:	9009883a 	mov	r4,r18
1020d014:	880b883a 	mov	r5,r17
1020d018:	100d883a 	mov	r6,r2
1020d01c:	180f883a 	mov	r7,r3
1020d020:	02175c80 	call	102175c8 <__subdf3>
1020d024:	1009883a 	mov	r4,r2
1020d028:	180b883a 	mov	r5,r3
1020d02c:	000d883a 	mov	r6,zero
1020d030:	000f883a 	mov	r7,zero
1020d034:	102b883a 	mov	r21,r2
1020d038:	182f883a 	mov	r23,r3
1020d03c:	0216c600 	call	10216c60 <__eqdf2>
1020d040:	da001417 	ldw	r8,80(sp)
1020d044:	103efe26 	beq	r2,zero,1020cc40 <_strtod_r+0x10fc>
1020d048:	003fc306 	br	1020cf58 <_strtod_r+0x1414>
1020d04c:	d9000817 	ldw	r4,32(sp)
1020d050:	20001426 	beq	r4,zero,1020d0a4 <_strtod_r+0x1560>
1020d054:	889ffc2c 	andhi	r2,r17,32752
1020d058:	00c1a834 	movhi	r3,1696
1020d05c:	18801136 	bltu	r3,r2,1020d0a4 <_strtod_r+0x1560>
1020d060:	1004d53a 	srli	r2,r2,20
1020d064:	00c01ac4 	movi	r3,107
1020d068:	1887c83a 	sub	r3,r3,r2
1020d06c:	00bfffc4 	movi	r2,-1
1020d070:	10c4983a 	sll	r2,r2,r3
1020d074:	90bfa51e 	bne	r18,r2,1020cf0c <_strtod_r+0x13c8>
1020d078:	009ffc34 	movhi	r2,32752
1020d07c:	10bfffc4 	addi	r2,r2,-1
1020d080:	88802826 	beq	r17,r2,1020d124 <_strtod_r+0x15e0>
1020d084:	8c5ffc2c 	andhi	r17,r17,32752
1020d088:	00800434 	movhi	r2,16
1020d08c:	002b883a 	mov	r21,zero
1020d090:	88af883a 	add	r23,r17,r2
1020d094:	003fb006 	br	1020cf58 <_strtod_r+0x1414>
1020d098:	d8000815 	stw	zero,32(sp)
1020d09c:	05be7a16 	blt	zero,r22,1020ca88 <_strtod_r+0xf44>
1020d0a0:	003e9806 	br	1020cb04 <_strtod_r+0xfc0>
1020d0a4:	00bfffc4 	movi	r2,-1
1020d0a8:	003ff206 	br	1020d074 <_strtod_r+0x1530>
1020d0ac:	00bffc34 	movhi	r2,65520
1020d0b0:	b0ad883a 	add	r22,r22,r2
1020d0b4:	057fffc4 	movi	r21,-1
1020d0b8:	00800434 	movhi	r2,16
1020d0bc:	1545883a 	add	r2,r2,r21
1020d0c0:	b0aeb03a 	or	r23,r22,r2
1020d0c4:	003fa406 	br	1020cf58 <_strtod_r+0x1414>
1020d0c8:	014408b4 	movhi	r5,4130
1020d0cc:	29751d04 	addi	r5,r5,-11148
1020d0d0:	d9000604 	addi	r4,sp,24
1020d0d4:	d9800204 	addi	r6,sp,8
1020d0d8:	02135840 	call	10213584 <__hexnan>
1020d0dc:	00c00144 	movi	r3,5
1020d0e0:	10fb5e1e 	bne	r2,r3,1020be5c <_strtod_r+0x318>
1020d0e4:	dc400317 	ldw	r17,12(sp)
1020d0e8:	dc800217 	ldw	r18,8(sp)
1020d0ec:	8c5ffc34 	orhi	r17,r17,32752
1020d0f0:	003b5c06 	br	1020be64 <_strtod_r+0x320>
1020d0f4:	00ffffc4 	movi	r3,-1
1020d0f8:	1884983a 	sll	r2,r3,r2
1020d0fc:	14a4703a 	and	r18,r2,r18
1020d100:	003e8006 	br	1020cb04 <_strtod_r+0xfc0>
1020d104:	10bff804 	addi	r2,r2,-32
1020d108:	00ffffc4 	movi	r3,-1
1020d10c:	1884983a 	sll	r2,r3,r2
1020d110:	1462703a 	and	r17,r2,r17
1020d114:	003e7b06 	br	1020cb04 <_strtod_r+0xfc0>
1020d118:	01001a84 	movi	r4,106
1020d11c:	d9000815 	stw	r4,32(sp)
1020d120:	003e6d06 	br	1020cad8 <_strtod_r+0xf94>
1020d124:	00bfffc4 	movi	r2,-1
1020d128:	90bfd61e 	bne	r18,r2,1020d084 <_strtod_r+0x1540>
1020d12c:	003db706 	br	1020c80c <_strtod_r+0xcc8>

1020d130 <strtod>:
1020d130:	00c408b4 	movhi	r3,4130
1020d134:	18fd0604 	addi	r3,r3,-3048
1020d138:	2005883a 	mov	r2,r4
1020d13c:	19000017 	ldw	r4,0(r3)
1020d140:	280d883a 	mov	r6,r5
1020d144:	100b883a 	mov	r5,r2
1020d148:	020bb441 	jmpi	1020bb44 <_strtod_r>

1020d14c <strtof>:
1020d14c:	defffb04 	addi	sp,sp,-20
1020d150:	dcc00315 	stw	r19,12(sp)
1020d154:	04c408b4 	movhi	r19,4130
1020d158:	9cfd0604 	addi	r19,r19,-3048
1020d15c:	2005883a 	mov	r2,r4
1020d160:	99000017 	ldw	r4,0(r19)
1020d164:	280d883a 	mov	r6,r5
1020d168:	100b883a 	mov	r5,r2
1020d16c:	dfc00415 	stw	ra,16(sp)
1020d170:	dc800215 	stw	r18,8(sp)
1020d174:	dc400115 	stw	r17,4(sp)
1020d178:	dc000015 	stw	r16,0(sp)
1020d17c:	020bb440 	call	1020bb44 <_strtod_r>
1020d180:	1009883a 	mov	r4,r2
1020d184:	180b883a 	mov	r5,r3
1020d188:	1025883a 	mov	r18,r2
1020d18c:	1823883a 	mov	r17,r3
1020d190:	02180940 	call	10218094 <__truncdfsf2>
1020d194:	1009883a 	mov	r4,r2
1020d198:	000b883a 	mov	r5,zero
1020d19c:	1021883a 	mov	r16,r2
1020d1a0:	02159140 	call	10215914 <__eqsf2>
1020d1a4:	1000111e 	bne	r2,zero,1020d1ec <strtof+0xa0>
1020d1a8:	9009883a 	mov	r4,r18
1020d1ac:	880b883a 	mov	r5,r17
1020d1b0:	000d883a 	mov	r6,zero
1020d1b4:	000f883a 	mov	r7,zero
1020d1b8:	0216c600 	call	10216c60 <__eqdf2>
1020d1bc:	10000b26 	beq	r2,zero,1020d1ec <strtof+0xa0>
1020d1c0:	98800017 	ldw	r2,0(r19)
1020d1c4:	00c00884 	movi	r3,34
1020d1c8:	10c00015 	stw	r3,0(r2)
1020d1cc:	8005883a 	mov	r2,r16
1020d1d0:	dfc00417 	ldw	ra,16(sp)
1020d1d4:	dcc00317 	ldw	r19,12(sp)
1020d1d8:	dc800217 	ldw	r18,8(sp)
1020d1dc:	dc400117 	ldw	r17,4(sp)
1020d1e0:	dc000017 	ldw	r16,0(sp)
1020d1e4:	dec00504 	addi	sp,sp,20
1020d1e8:	f800283a 	ret
1020d1ec:	015fe034 	movhi	r5,32640
1020d1f0:	297fffc4 	addi	r5,r5,-1
1020d1f4:	8009883a 	mov	r4,r16
1020d1f8:	02159880 	call	10215988 <__gesf2>
1020d1fc:	0080070e 	bge	zero,r2,1020d21c <strtof+0xd0>
1020d200:	01dffc34 	movhi	r7,32752
1020d204:	39ffffc4 	addi	r7,r7,-1
1020d208:	9009883a 	mov	r4,r18
1020d20c:	880b883a 	mov	r5,r17
1020d210:	01bfffc4 	movi	r6,-1
1020d214:	0216ce40 	call	10216ce4 <__gedf2>
1020d218:	00bfe90e 	bge	zero,r2,1020d1c0 <strtof+0x74>
1020d21c:	017fe034 	movhi	r5,65408
1020d220:	297fffc4 	addi	r5,r5,-1
1020d224:	8009883a 	mov	r4,r16
1020d228:	0215a400 	call	10215a40 <__lesf2>
1020d22c:	103fe70e 	bge	r2,zero,1020d1cc <strtof+0x80>
1020d230:	01fffc34 	movhi	r7,65520
1020d234:	39ffffc4 	addi	r7,r7,-1
1020d238:	9009883a 	mov	r4,r18
1020d23c:	880b883a 	mov	r5,r17
1020d240:	01bfffc4 	movi	r6,-1
1020d244:	0216dc40 	call	10216dc4 <__ledf2>
1020d248:	103fdd0e 	bge	r2,zero,1020d1c0 <strtof+0x74>
1020d24c:	003fdf06 	br	1020d1cc <strtof+0x80>

1020d250 <_strtol_r>:
1020d250:	008408b4 	movhi	r2,4130
1020d254:	defff404 	addi	sp,sp,-48
1020d258:	10bd0904 	addi	r2,r2,-3036
1020d25c:	dcc00515 	stw	r19,20(sp)
1020d260:	14c00017 	ldw	r19,0(r2)
1020d264:	dd800815 	stw	r22,32(sp)
1020d268:	dd400715 	stw	r21,28(sp)
1020d26c:	dd000615 	stw	r20,24(sp)
1020d270:	dfc00b15 	stw	ra,44(sp)
1020d274:	df000a15 	stw	fp,40(sp)
1020d278:	ddc00915 	stw	r23,36(sp)
1020d27c:	dc800415 	stw	r18,16(sp)
1020d280:	dc400315 	stw	r17,12(sp)
1020d284:	dc000215 	stw	r16,8(sp)
1020d288:	282b883a 	mov	r21,r5
1020d28c:	d9000015 	stw	r4,0(sp)
1020d290:	3029883a 	mov	r20,r6
1020d294:	382d883a 	mov	r22,r7
1020d298:	2813883a 	mov	r9,r5
1020d29c:	4a000003 	ldbu	r8,0(r9)
1020d2a0:	4807883a 	mov	r3,r9
1020d2a4:	4a400044 	addi	r9,r9,1
1020d2a8:	9a05883a 	add	r2,r19,r8
1020d2ac:	10800043 	ldbu	r2,1(r2)
1020d2b0:	1080020c 	andi	r2,r2,8
1020d2b4:	103ff91e 	bne	r2,zero,1020d29c <_strtol_r+0x4c>
1020d2b8:	00800b44 	movi	r2,45
1020d2bc:	4025883a 	mov	r18,r8
1020d2c0:	4823883a 	mov	r17,r9
1020d2c4:	40805826 	beq	r8,r2,1020d428 <_strtol_r+0x1d8>
1020d2c8:	00800ac4 	movi	r2,43
1020d2cc:	40805a26 	beq	r8,r2,1020d438 <_strtol_r+0x1e8>
1020d2d0:	0039883a 	mov	fp,zero
1020d2d4:	b0000426 	beq	r22,zero,1020d2e8 <_strtol_r+0x98>
1020d2d8:	00800404 	movi	r2,16
1020d2dc:	b0805a26 	beq	r22,r2,1020d448 <_strtol_r+0x1f8>
1020d2e0:	b02f883a 	mov	r23,r22
1020d2e4:	00000406 	br	1020d2f8 <_strtol_r+0xa8>
1020d2e8:	00800c04 	movi	r2,48
1020d2ec:	90806126 	beq	r18,r2,1020d474 <_strtol_r+0x224>
1020d2f0:	05800284 	movi	r22,10
1020d2f4:	b02f883a 	mov	r23,r22
1020d2f8:	00e00034 	movhi	r3,32768
1020d2fc:	18ffffc4 	addi	r3,r3,-1
1020d300:	e0e1883a 	add	r16,fp,r3
1020d304:	b80b883a 	mov	r5,r23
1020d308:	8009883a 	mov	r4,r16
1020d30c:	020247c0 	call	1020247c <__umodsi3>
1020d310:	8009883a 	mov	r4,r16
1020d314:	b80b883a 	mov	r5,r23
1020d318:	d8800115 	stw	r2,4(sp)
1020d31c:	02024740 	call	10202474 <__udivsi3>
1020d320:	9c91883a 	add	r8,r19,r18
1020d324:	42000043 	ldbu	r8,1(r8)
1020d328:	8807883a 	mov	r3,r17
1020d32c:	000d883a 	mov	r6,zero
1020d330:	4240010c 	andi	r9,r8,4
1020d334:	0009883a 	mov	r4,zero
1020d338:	02800044 	movi	r10,1
1020d33c:	017fffc4 	movi	r5,-1
1020d340:	d9c00117 	ldw	r7,4(sp)
1020d344:	48000e26 	beq	r9,zero,1020d380 <_strtol_r+0x130>
1020d348:	923ff404 	addi	r8,r18,-48
1020d34c:	4580120e 	bge	r8,r22,1020d398 <_strtol_r+0x148>
1020d350:	31400526 	beq	r6,r5,1020d368 <_strtol_r+0x118>
1020d354:	11002736 	bltu	r2,r4,1020d3f4 <_strtol_r+0x1a4>
1020d358:	20802526 	beq	r4,r2,1020d3f0 <_strtol_r+0x1a0>
1020d35c:	25c9383a 	mul	r4,r4,r23
1020d360:	01800044 	movi	r6,1
1020d364:	4109883a 	add	r4,r8,r4
1020d368:	1c800003 	ldbu	r18,0(r3)
1020d36c:	18c00044 	addi	r3,r3,1
1020d370:	9c91883a 	add	r8,r19,r18
1020d374:	42000043 	ldbu	r8,1(r8)
1020d378:	4240010c 	andi	r9,r8,4
1020d37c:	483ff21e 	bne	r9,zero,1020d348 <_strtol_r+0xf8>
1020d380:	420000cc 	andi	r8,r8,3
1020d384:	40000426 	beq	r8,zero,1020d398 <_strtol_r+0x148>
1020d388:	42801c26 	beq	r8,r10,1020d3fc <_strtol_r+0x1ac>
1020d38c:	024015c4 	movi	r9,87
1020d390:	9251c83a 	sub	r8,r18,r9
1020d394:	45bfee16 	blt	r8,r22,1020d350 <_strtol_r+0x100>
1020d398:	00bfffc4 	movi	r2,-1
1020d39c:	30801926 	beq	r6,r2,1020d404 <_strtol_r+0x1b4>
1020d3a0:	0705c83a 	sub	r2,zero,fp
1020d3a4:	2084f03a 	xor	r2,r4,r2
1020d3a8:	1739883a 	add	fp,r2,fp
1020d3ac:	e005883a 	mov	r2,fp
1020d3b0:	a0000326 	beq	r20,zero,1020d3c0 <_strtol_r+0x170>
1020d3b4:	30001a1e 	bne	r6,zero,1020d420 <_strtol_r+0x1d0>
1020d3b8:	a80b883a 	mov	r5,r21
1020d3bc:	a1400015 	stw	r5,0(r20)
1020d3c0:	dfc00b17 	ldw	ra,44(sp)
1020d3c4:	df000a17 	ldw	fp,40(sp)
1020d3c8:	ddc00917 	ldw	r23,36(sp)
1020d3cc:	dd800817 	ldw	r22,32(sp)
1020d3d0:	dd400717 	ldw	r21,28(sp)
1020d3d4:	dd000617 	ldw	r20,24(sp)
1020d3d8:	dcc00517 	ldw	r19,20(sp)
1020d3dc:	dc800417 	ldw	r18,16(sp)
1020d3e0:	dc400317 	ldw	r17,12(sp)
1020d3e4:	dc000217 	ldw	r16,8(sp)
1020d3e8:	dec00c04 	addi	sp,sp,48
1020d3ec:	f800283a 	ret
1020d3f0:	3a3fda0e 	bge	r7,r8,1020d35c <_strtol_r+0x10c>
1020d3f4:	01bfffc4 	movi	r6,-1
1020d3f8:	003fdb06 	br	1020d368 <_strtol_r+0x118>
1020d3fc:	02400dc4 	movi	r9,55
1020d400:	003fe306 	br	1020d390 <_strtol_r+0x140>
1020d404:	d9000017 	ldw	r4,0(sp)
1020d408:	00800884 	movi	r2,34
1020d40c:	20800015 	stw	r2,0(r4)
1020d410:	00a00034 	movhi	r2,32768
1020d414:	10bfffc4 	addi	r2,r2,-1
1020d418:	e085883a 	add	r2,fp,r2
1020d41c:	a03fe826 	beq	r20,zero,1020d3c0 <_strtol_r+0x170>
1020d420:	197fffc4 	addi	r5,r3,-1
1020d424:	003fe506 	br	1020d3bc <_strtol_r+0x16c>
1020d428:	1c400084 	addi	r17,r3,2
1020d42c:	1c800043 	ldbu	r18,1(r3)
1020d430:	07000044 	movi	fp,1
1020d434:	003fa706 	br	1020d2d4 <_strtol_r+0x84>
1020d438:	1c400084 	addi	r17,r3,2
1020d43c:	1c800043 	ldbu	r18,1(r3)
1020d440:	0039883a 	mov	fp,zero
1020d444:	003fa306 	br	1020d2d4 <_strtol_r+0x84>
1020d448:	00800c04 	movi	r2,48
1020d44c:	90bfa41e 	bne	r18,r2,1020d2e0 <_strtol_r+0x90>
1020d450:	88800003 	ldbu	r2,0(r17)
1020d454:	00c01604 	movi	r3,88
1020d458:	108037cc 	andi	r2,r2,223
1020d45c:	10ffa01e 	bne	r2,r3,1020d2e0 <_strtol_r+0x90>
1020d460:	05c00404 	movi	r23,16
1020d464:	8c800043 	ldbu	r18,1(r17)
1020d468:	b82d883a 	mov	r22,r23
1020d46c:	8c400084 	addi	r17,r17,2
1020d470:	003fa106 	br	1020d2f8 <_strtol_r+0xa8>
1020d474:	88800003 	ldbu	r2,0(r17)
1020d478:	00c01604 	movi	r3,88
1020d47c:	108037cc 	andi	r2,r2,223
1020d480:	10fff726 	beq	r2,r3,1020d460 <_strtol_r+0x210>
1020d484:	05800204 	movi	r22,8
1020d488:	b02f883a 	mov	r23,r22
1020d48c:	003f9a06 	br	1020d2f8 <_strtol_r+0xa8>

1020d490 <strtol>:
1020d490:	2007883a 	mov	r3,r4
1020d494:	010408b4 	movhi	r4,4130
1020d498:	213d0604 	addi	r4,r4,-3048
1020d49c:	21000017 	ldw	r4,0(r4)
1020d4a0:	2805883a 	mov	r2,r5
1020d4a4:	300f883a 	mov	r7,r6
1020d4a8:	180b883a 	mov	r5,r3
1020d4ac:	100d883a 	mov	r6,r2
1020d4b0:	020d2501 	jmpi	1020d250 <_strtol_r>

1020d4b4 <_strtoll_r>:
1020d4b4:	008408b4 	movhi	r2,4130
1020d4b8:	deffef04 	addi	sp,sp,-68
1020d4bc:	10bd0904 	addi	r2,r2,-3036
1020d4c0:	dd800d15 	stw	r22,52(sp)
1020d4c4:	15800017 	ldw	r22,0(r2)
1020d4c8:	df000f15 	stw	fp,60(sp)
1020d4cc:	dfc01015 	stw	ra,64(sp)
1020d4d0:	ddc00e15 	stw	r23,56(sp)
1020d4d4:	dd400c15 	stw	r21,48(sp)
1020d4d8:	dd000b15 	stw	r20,44(sp)
1020d4dc:	dcc00a15 	stw	r19,40(sp)
1020d4e0:	dc800915 	stw	r18,36(sp)
1020d4e4:	dc400815 	stw	r17,32(sp)
1020d4e8:	dc000715 	stw	r16,28(sp)
1020d4ec:	d9400415 	stw	r5,16(sp)
1020d4f0:	d9000515 	stw	r4,20(sp)
1020d4f4:	d9800215 	stw	r6,8(sp)
1020d4f8:	3839883a 	mov	fp,r7
1020d4fc:	2811883a 	mov	r8,r5
1020d500:	42400003 	ldbu	r9,0(r8)
1020d504:	4007883a 	mov	r3,r8
1020d508:	42000044 	addi	r8,r8,1
1020d50c:	b245883a 	add	r2,r22,r9
1020d510:	10800043 	ldbu	r2,1(r2)
1020d514:	1080020c 	andi	r2,r2,8
1020d518:	103ff91e 	bne	r2,zero,1020d500 <_strtoll_r+0x4c>
1020d51c:	00800b44 	movi	r2,45
1020d520:	4025883a 	mov	r18,r8
1020d524:	48807d26 	beq	r9,r2,1020d71c <_strtoll_r+0x268>
1020d528:	00800ac4 	movi	r2,43
1020d52c:	48808026 	beq	r9,r2,1020d730 <_strtoll_r+0x27c>
1020d530:	d8000115 	stw	zero,4(sp)
1020d534:	e0000a26 	beq	fp,zero,1020d560 <_strtoll_r+0xac>
1020d538:	00800404 	movi	r2,16
1020d53c:	e0808826 	beq	fp,r2,1020d760 <_strtoll_r+0x2ac>
1020d540:	e005d7fa 	srai	r2,fp,31
1020d544:	d8c00117 	ldw	r3,4(sp)
1020d548:	e027883a 	mov	r19,fp
1020d54c:	d8800015 	stw	r2,0(sp)
1020d550:	18000a26 	beq	r3,zero,1020d57c <_strtoll_r+0xc8>
1020d554:	0023883a 	mov	r17,zero
1020d558:	04200034 	movhi	r16,32768
1020d55c:	00000a06 	br	1020d588 <_strtoll_r+0xd4>
1020d560:	00800c04 	movi	r2,48
1020d564:	48807626 	beq	r9,r2,1020d740 <_strtoll_r+0x28c>
1020d568:	04c00284 	movi	r19,10
1020d56c:	d8000015 	stw	zero,0(sp)
1020d570:	9839883a 	mov	fp,r19
1020d574:	d8c00117 	ldw	r3,4(sp)
1020d578:	183ff61e 	bne	r3,zero,1020d554 <_strtoll_r+0xa0>
1020d57c:	047fffc4 	movi	r17,-1
1020d580:	04200034 	movhi	r16,32768
1020d584:	8461883a 	add	r16,r16,r17
1020d588:	d9c00017 	ldw	r7,0(sp)
1020d58c:	8809883a 	mov	r4,r17
1020d590:	800b883a 	mov	r5,r16
1020d594:	980d883a 	mov	r6,r19
1020d598:	da400615 	stw	r9,24(sp)
1020d59c:	02153840 	call	10215384 <__umoddi3>
1020d5a0:	d9c00017 	ldw	r7,0(sp)
1020d5a4:	8809883a 	mov	r4,r17
1020d5a8:	800b883a 	mov	r5,r16
1020d5ac:	980d883a 	mov	r6,r19
1020d5b0:	d8800315 	stw	r2,12(sp)
1020d5b4:	0214dc40 	call	10214dc4 <__udivdi3>
1020d5b8:	da400617 	ldw	r9,24(sp)
1020d5bc:	1823883a 	mov	r17,r3
1020d5c0:	902f883a 	mov	r23,r18
1020d5c4:	b247883a 	add	r3,r22,r9
1020d5c8:	19800043 	ldbu	r6,1(r3)
1020d5cc:	1021883a 	mov	r16,r2
1020d5d0:	000f883a 	mov	r7,zero
1020d5d4:	30c0010c 	andi	r3,r6,4
1020d5d8:	0009883a 	mov	r4,zero
1020d5dc:	000b883a 	mov	r5,zero
1020d5e0:	04800044 	movi	r18,1
1020d5e4:	057fffc4 	movi	r21,-1
1020d5e8:	18000d26 	beq	r3,zero,1020d620 <_strtoll_r+0x16c>
1020d5ec:	4d3ff404 	addi	r20,r9,-48
1020d5f0:	a700110e 	bge	r20,fp,1020d638 <_strtoll_r+0x184>
1020d5f4:	3d400426 	beq	r7,r21,1020d608 <_strtoll_r+0x154>
1020d5f8:	89400236 	bltu	r17,r5,1020d604 <_strtoll_r+0x150>
1020d5fc:	2c40291e 	bne	r5,r17,1020d6a4 <_strtoll_r+0x1f0>
1020d600:	8100282e 	bgeu	r16,r4,1020d6a4 <_strtoll_r+0x1f0>
1020d604:	01ffffc4 	movi	r7,-1
1020d608:	ba400003 	ldbu	r9,0(r23)
1020d60c:	bdc00044 	addi	r23,r23,1
1020d610:	b247883a 	add	r3,r22,r9
1020d614:	19800043 	ldbu	r6,1(r3)
1020d618:	30c0010c 	andi	r3,r6,4
1020d61c:	183ff31e 	bne	r3,zero,1020d5ec <_strtoll_r+0x138>
1020d620:	318000cc 	andi	r6,r6,3
1020d624:	30000426 	beq	r6,zero,1020d638 <_strtoll_r+0x184>
1020d628:	34802a26 	beq	r6,r18,1020d6d4 <_strtoll_r+0x220>
1020d62c:	00c015c4 	movi	r3,87
1020d630:	48e9c83a 	sub	r20,r9,r3
1020d634:	a73fef16 	blt	r20,fp,1020d5f4 <_strtoll_r+0x140>
1020d638:	00bfffc4 	movi	r2,-1
1020d63c:	38802b26 	beq	r7,r2,1020d6ec <_strtoll_r+0x238>
1020d640:	d8800117 	ldw	r2,4(sp)
1020d644:	0093c83a 	sub	r9,zero,r2
1020d648:	2248f03a 	xor	r4,r4,r9
1020d64c:	2085883a 	add	r2,r4,r2
1020d650:	1109803a 	cmpltu	r4,r2,r4
1020d654:	2a46f03a 	xor	r3,r5,r9
1020d658:	20c7883a 	add	r3,r4,r3
1020d65c:	d9000217 	ldw	r4,8(sp)
1020d660:	20000426 	beq	r4,zero,1020d674 <_strtoll_r+0x1c0>
1020d664:	38002b1e 	bne	r7,zero,1020d714 <_strtoll_r+0x260>
1020d668:	dd800417 	ldw	r22,16(sp)
1020d66c:	d9400217 	ldw	r5,8(sp)
1020d670:	2d800015 	stw	r22,0(r5)
1020d674:	dfc01017 	ldw	ra,64(sp)
1020d678:	df000f17 	ldw	fp,60(sp)
1020d67c:	ddc00e17 	ldw	r23,56(sp)
1020d680:	dd800d17 	ldw	r22,52(sp)
1020d684:	dd400c17 	ldw	r21,48(sp)
1020d688:	dd000b17 	ldw	r20,44(sp)
1020d68c:	dcc00a17 	ldw	r19,40(sp)
1020d690:	dc800917 	ldw	r18,36(sp)
1020d694:	dc400817 	ldw	r17,32(sp)
1020d698:	dc000717 	ldw	r16,28(sp)
1020d69c:	dec01104 	addi	sp,sp,68
1020d6a0:	f800283a 	ret
1020d6a4:	24000d26 	beq	r4,r16,1020d6dc <_strtoll_r+0x228>
1020d6a8:	d9c00017 	ldw	r7,0(sp)
1020d6ac:	980d883a 	mov	r6,r19
1020d6b0:	0214cf00 	call	10214cf0 <__muldi3>
1020d6b4:	a00bd7fa 	srai	r5,r20,31
1020d6b8:	a085883a 	add	r2,r20,r2
1020d6bc:	1513803a 	cmpltu	r9,r2,r20
1020d6c0:	28c7883a 	add	r3,r5,r3
1020d6c4:	1009883a 	mov	r4,r2
1020d6c8:	48cb883a 	add	r5,r9,r3
1020d6cc:	01c00044 	movi	r7,1
1020d6d0:	003fcd06 	br	1020d608 <_strtoll_r+0x154>
1020d6d4:	00c00dc4 	movi	r3,55
1020d6d8:	003fd506 	br	1020d630 <_strtoll_r+0x17c>
1020d6dc:	2c7ff21e 	bne	r5,r17,1020d6a8 <_strtoll_r+0x1f4>
1020d6e0:	d8800317 	ldw	r2,12(sp)
1020d6e4:	153fc716 	blt	r2,r20,1020d604 <_strtoll_r+0x150>
1020d6e8:	003fef06 	br	1020d6a8 <_strtoll_r+0x1f4>
1020d6ec:	d8c00117 	ldw	r3,4(sp)
1020d6f0:	1800201e 	bne	r3,zero,1020d774 <_strtoll_r+0x2c0>
1020d6f4:	00e00034 	movhi	r3,32768
1020d6f8:	3805883a 	mov	r2,r7
1020d6fc:	18ffffc4 	addi	r3,r3,-1
1020d700:	d9400517 	ldw	r5,20(sp)
1020d704:	01000884 	movi	r4,34
1020d708:	29000015 	stw	r4,0(r5)
1020d70c:	d9000217 	ldw	r4,8(sp)
1020d710:	203fd826 	beq	r4,zero,1020d674 <_strtoll_r+0x1c0>
1020d714:	bdbfffc4 	addi	r22,r23,-1
1020d718:	003fd406 	br	1020d66c <_strtoll_r+0x1b8>
1020d71c:	00800044 	movi	r2,1
1020d720:	1c800084 	addi	r18,r3,2
1020d724:	1a400043 	ldbu	r9,1(r3)
1020d728:	d8800115 	stw	r2,4(sp)
1020d72c:	003f8106 	br	1020d534 <_strtoll_r+0x80>
1020d730:	1c800084 	addi	r18,r3,2
1020d734:	1a400043 	ldbu	r9,1(r3)
1020d738:	d8000115 	stw	zero,4(sp)
1020d73c:	003f7d06 	br	1020d534 <_strtoll_r+0x80>
1020d740:	90800003 	ldbu	r2,0(r18)
1020d744:	00c01604 	movi	r3,88
1020d748:	108037cc 	andi	r2,r2,223
1020d74c:	10c01026 	beq	r2,r3,1020d790 <_strtoll_r+0x2dc>
1020d750:	04c00204 	movi	r19,8
1020d754:	d8000015 	stw	zero,0(sp)
1020d758:	9839883a 	mov	fp,r19
1020d75c:	003f8506 	br	1020d574 <_strtoll_r+0xc0>
1020d760:	00800c04 	movi	r2,48
1020d764:	48800626 	beq	r9,r2,1020d780 <_strtoll_r+0x2cc>
1020d768:	e027883a 	mov	r19,fp
1020d76c:	d8000015 	stw	zero,0(sp)
1020d770:	003f8006 	br	1020d574 <_strtoll_r+0xc0>
1020d774:	0005883a 	mov	r2,zero
1020d778:	00e00034 	movhi	r3,32768
1020d77c:	003fe006 	br	1020d700 <_strtoll_r+0x24c>
1020d780:	90800003 	ldbu	r2,0(r18)
1020d784:	00c01604 	movi	r3,88
1020d788:	108037cc 	andi	r2,r2,223
1020d78c:	10fff61e 	bne	r2,r3,1020d768 <_strtoll_r+0x2b4>
1020d790:	04c00404 	movi	r19,16
1020d794:	92400043 	ldbu	r9,1(r18)
1020d798:	d8000015 	stw	zero,0(sp)
1020d79c:	94800084 	addi	r18,r18,2
1020d7a0:	9839883a 	mov	fp,r19
1020d7a4:	003f7306 	br	1020d574 <_strtoll_r+0xc0>

1020d7a8 <_strtoul_r>:
1020d7a8:	008408b4 	movhi	r2,4130
1020d7ac:	defff604 	addi	sp,sp,-40
1020d7b0:	10bd0904 	addi	r2,r2,-3036
1020d7b4:	dc800315 	stw	r18,12(sp)
1020d7b8:	14800017 	ldw	r18,0(r2)
1020d7bc:	dd400615 	stw	r21,24(sp)
1020d7c0:	dd000515 	stw	r20,20(sp)
1020d7c4:	dcc00415 	stw	r19,16(sp)
1020d7c8:	dfc00915 	stw	ra,36(sp)
1020d7cc:	ddc00815 	stw	r23,32(sp)
1020d7d0:	dd800715 	stw	r22,28(sp)
1020d7d4:	dc400215 	stw	r17,8(sp)
1020d7d8:	dc000115 	stw	r16,4(sp)
1020d7dc:	2827883a 	mov	r19,r5
1020d7e0:	2029883a 	mov	r20,r4
1020d7e4:	382b883a 	mov	r21,r7
1020d7e8:	2813883a 	mov	r9,r5
1020d7ec:	4a000003 	ldbu	r8,0(r9)
1020d7f0:	4807883a 	mov	r3,r9
1020d7f4:	4a400044 	addi	r9,r9,1
1020d7f8:	9205883a 	add	r2,r18,r8
1020d7fc:	10800043 	ldbu	r2,1(r2)
1020d800:	1080020c 	andi	r2,r2,8
1020d804:	103ff91e 	bne	r2,zero,1020d7ec <_strtoul_r+0x44>
1020d808:	00800b44 	movi	r2,45
1020d80c:	4023883a 	mov	r17,r8
1020d810:	4821883a 	mov	r16,r9
1020d814:	40805426 	beq	r8,r2,1020d968 <_strtoul_r+0x1c0>
1020d818:	00800ac4 	movi	r2,43
1020d81c:	40805626 	beq	r8,r2,1020d978 <_strtoul_r+0x1d0>
1020d820:	002f883a 	mov	r23,zero
1020d824:	a8000e26 	beq	r21,zero,1020d860 <_strtoul_r+0xb8>
1020d828:	00800404 	movi	r2,16
1020d82c:	a8805626 	beq	r21,r2,1020d988 <_strtoul_r+0x1e0>
1020d830:	013fffc4 	movi	r4,-1
1020d834:	a80b883a 	mov	r5,r21
1020d838:	d9800015 	stw	r6,0(sp)
1020d83c:	02024740 	call	10202474 <__udivsi3>
1020d840:	013fffc4 	movi	r4,-1
1020d844:	a80b883a 	mov	r5,r21
1020d848:	102d883a 	mov	r22,r2
1020d84c:	020247c0 	call	1020247c <__umodsi3>
1020d850:	d9800017 	ldw	r6,0(sp)
1020d854:	a819883a 	mov	r12,r21
1020d858:	b00b883a 	mov	r5,r22
1020d85c:	00000706 	br	1020d87c <_strtoul_r+0xd4>
1020d860:	00800c04 	movi	r2,48
1020d864:	88804f26 	beq	r17,r2,1020d9a4 <_strtoul_r+0x1fc>
1020d868:	05400284 	movi	r21,10
1020d86c:	014666b4 	movhi	r5,6554
1020d870:	00800144 	movi	r2,5
1020d874:	29666644 	addi	r5,r5,-26215
1020d878:	a819883a 	mov	r12,r21
1020d87c:	9451883a 	add	r8,r18,r17
1020d880:	42000043 	ldbu	r8,1(r8)
1020d884:	8007883a 	mov	r3,r16
1020d888:	0009883a 	mov	r4,zero
1020d88c:	4240010c 	andi	r9,r8,4
1020d890:	0015883a 	mov	r10,zero
1020d894:	02c00044 	movi	r11,1
1020d898:	01ffffc4 	movi	r7,-1
1020d89c:	48000e26 	beq	r9,zero,1020d8d8 <_strtoul_r+0x130>
1020d8a0:	8a3ff404 	addi	r8,r17,-48
1020d8a4:	4540120e 	bge	r8,r21,1020d8f0 <_strtoul_r+0x148>
1020d8a8:	21c00526 	beq	r4,r7,1020d8c0 <_strtoul_r+0x118>
1020d8ac:	2a802436 	bltu	r5,r10,1020d940 <_strtoul_r+0x198>
1020d8b0:	51402226 	beq	r10,r5,1020d93c <_strtoul_r+0x194>
1020d8b4:	5315383a 	mul	r10,r10,r12
1020d8b8:	01000044 	movi	r4,1
1020d8bc:	4295883a 	add	r10,r8,r10
1020d8c0:	1c400003 	ldbu	r17,0(r3)
1020d8c4:	18c00044 	addi	r3,r3,1
1020d8c8:	9451883a 	add	r8,r18,r17
1020d8cc:	42000043 	ldbu	r8,1(r8)
1020d8d0:	4240010c 	andi	r9,r8,4
1020d8d4:	483ff21e 	bne	r9,zero,1020d8a0 <_strtoul_r+0xf8>
1020d8d8:	420000cc 	andi	r8,r8,3
1020d8dc:	40000426 	beq	r8,zero,1020d8f0 <_strtoul_r+0x148>
1020d8e0:	42c01926 	beq	r8,r11,1020d948 <_strtoul_r+0x1a0>
1020d8e4:	024015c4 	movi	r9,87
1020d8e8:	8a51c83a 	sub	r8,r17,r9
1020d8ec:	457fee16 	blt	r8,r21,1020d8a8 <_strtoul_r+0x100>
1020d8f0:	20001916 	blt	r4,zero,1020d958 <_strtoul_r+0x1b0>
1020d8f4:	05c5c83a 	sub	r2,zero,r23
1020d8f8:	5084f03a 	xor	r2,r10,r2
1020d8fc:	15c5883a 	add	r2,r2,r23
1020d900:	30000326 	beq	r6,zero,1020d910 <_strtoul_r+0x168>
1020d904:	20001226 	beq	r4,zero,1020d950 <_strtoul_r+0x1a8>
1020d908:	197fffc4 	addi	r5,r3,-1
1020d90c:	31400015 	stw	r5,0(r6)
1020d910:	dfc00917 	ldw	ra,36(sp)
1020d914:	ddc00817 	ldw	r23,32(sp)
1020d918:	dd800717 	ldw	r22,28(sp)
1020d91c:	dd400617 	ldw	r21,24(sp)
1020d920:	dd000517 	ldw	r20,20(sp)
1020d924:	dcc00417 	ldw	r19,16(sp)
1020d928:	dc800317 	ldw	r18,12(sp)
1020d92c:	dc400217 	ldw	r17,8(sp)
1020d930:	dc000117 	ldw	r16,4(sp)
1020d934:	dec00a04 	addi	sp,sp,40
1020d938:	f800283a 	ret
1020d93c:	123fdd0e 	bge	r2,r8,1020d8b4 <_strtoul_r+0x10c>
1020d940:	013fffc4 	movi	r4,-1
1020d944:	003fde06 	br	1020d8c0 <_strtoul_r+0x118>
1020d948:	02400dc4 	movi	r9,55
1020d94c:	003fe606 	br	1020d8e8 <_strtoul_r+0x140>
1020d950:	980b883a 	mov	r5,r19
1020d954:	003fed06 	br	1020d90c <_strtoul_r+0x164>
1020d958:	00800884 	movi	r2,34
1020d95c:	a0800015 	stw	r2,0(r20)
1020d960:	00bfffc4 	movi	r2,-1
1020d964:	003fe606 	br	1020d900 <_strtoul_r+0x158>
1020d968:	1c000084 	addi	r16,r3,2
1020d96c:	1c400043 	ldbu	r17,1(r3)
1020d970:	05c00044 	movi	r23,1
1020d974:	003fab06 	br	1020d824 <_strtoul_r+0x7c>
1020d978:	1c000084 	addi	r16,r3,2
1020d97c:	1c400043 	ldbu	r17,1(r3)
1020d980:	002f883a 	mov	r23,zero
1020d984:	003fa706 	br	1020d824 <_strtoul_r+0x7c>
1020d988:	00800c04 	movi	r2,48
1020d98c:	88801726 	beq	r17,r2,1020d9ec <_strtoul_r+0x244>
1020d990:	01440034 	movhi	r5,4096
1020d994:	297fffc4 	addi	r5,r5,-1
1020d998:	008003c4 	movi	r2,15
1020d99c:	a819883a 	mov	r12,r21
1020d9a0:	003fb606 	br	1020d87c <_strtoul_r+0xd4>
1020d9a4:	80800003 	ldbu	r2,0(r16)
1020d9a8:	00c01604 	movi	r3,88
1020d9ac:	108037cc 	andi	r2,r2,223
1020d9b0:	10c00626 	beq	r2,r3,1020d9cc <_strtoul_r+0x224>
1020d9b4:	05400204 	movi	r21,8
1020d9b8:	01480034 	movhi	r5,8192
1020d9bc:	008001c4 	movi	r2,7
1020d9c0:	297fffc4 	addi	r5,r5,-1
1020d9c4:	a819883a 	mov	r12,r21
1020d9c8:	003fac06 	br	1020d87c <_strtoul_r+0xd4>
1020d9cc:	03000404 	movi	r12,16
1020d9d0:	05840034 	movhi	r22,4096
1020d9d4:	84400043 	ldbu	r17,1(r16)
1020d9d8:	008003c4 	movi	r2,15
1020d9dc:	84000084 	addi	r16,r16,2
1020d9e0:	b5bfffc4 	addi	r22,r22,-1
1020d9e4:	602b883a 	mov	r21,r12
1020d9e8:	003f9b06 	br	1020d858 <_strtoul_r+0xb0>
1020d9ec:	80800003 	ldbu	r2,0(r16)
1020d9f0:	00c01604 	movi	r3,88
1020d9f4:	108037cc 	andi	r2,r2,223
1020d9f8:	10fff426 	beq	r2,r3,1020d9cc <_strtoul_r+0x224>
1020d9fc:	01440034 	movhi	r5,4096
1020da00:	008003c4 	movi	r2,15
1020da04:	297fffc4 	addi	r5,r5,-1
1020da08:	a819883a 	mov	r12,r21
1020da0c:	003f9b06 	br	1020d87c <_strtoul_r+0xd4>

1020da10 <strtoul>:
1020da10:	2007883a 	mov	r3,r4
1020da14:	010408b4 	movhi	r4,4130
1020da18:	213d0604 	addi	r4,r4,-3048
1020da1c:	21000017 	ldw	r4,0(r4)
1020da20:	2805883a 	mov	r2,r5
1020da24:	300f883a 	mov	r7,r6
1020da28:	180b883a 	mov	r5,r3
1020da2c:	100d883a 	mov	r6,r2
1020da30:	020d7a81 	jmpi	1020d7a8 <_strtoul_r>

1020da34 <_strtoull_r>:
1020da34:	008408b4 	movhi	r2,4130
1020da38:	deffee04 	addi	sp,sp,-72
1020da3c:	10bd0904 	addi	r2,r2,-3036
1020da40:	ddc00f15 	stw	r23,60(sp)
1020da44:	15c00017 	ldw	r23,0(r2)
1020da48:	df001015 	stw	fp,64(sp)
1020da4c:	dfc01115 	stw	ra,68(sp)
1020da50:	dd800e15 	stw	r22,56(sp)
1020da54:	dd400d15 	stw	r21,52(sp)
1020da58:	dd000c15 	stw	r20,48(sp)
1020da5c:	dcc00b15 	stw	r19,44(sp)
1020da60:	dc800a15 	stw	r18,40(sp)
1020da64:	dc400915 	stw	r17,36(sp)
1020da68:	dc000815 	stw	r16,32(sp)
1020da6c:	d9400215 	stw	r5,8(sp)
1020da70:	d9000515 	stw	r4,20(sp)
1020da74:	d9800115 	stw	r6,4(sp)
1020da78:	3839883a 	mov	fp,r7
1020da7c:	2811883a 	mov	r8,r5
1020da80:	42400003 	ldbu	r9,0(r8)
1020da84:	4007883a 	mov	r3,r8
1020da88:	42000044 	addi	r8,r8,1
1020da8c:	ba45883a 	add	r2,r23,r9
1020da90:	10800043 	ldbu	r2,1(r2)
1020da94:	1080020c 	andi	r2,r2,8
1020da98:	103ff91e 	bne	r2,zero,1020da80 <_strtoull_r+0x4c>
1020da9c:	00800b44 	movi	r2,45
1020daa0:	48807826 	beq	r9,r2,1020dc84 <_strtoull_r+0x250>
1020daa4:	00800ac4 	movi	r2,43
1020daa8:	48807b26 	beq	r9,r2,1020dc98 <_strtoull_r+0x264>
1020daac:	d8000415 	stw	zero,16(sp)
1020dab0:	e0001726 	beq	fp,zero,1020db10 <_strtoull_r+0xdc>
1020dab4:	00800404 	movi	r2,16
1020dab8:	e0808926 	beq	fp,r2,1020dce0 <_strtoull_r+0x2ac>
1020dabc:	e027d7fa 	srai	r19,fp,31
1020dac0:	013fffc4 	movi	r4,-1
1020dac4:	200b883a 	mov	r5,r4
1020dac8:	e00d883a 	mov	r6,fp
1020dacc:	980f883a 	mov	r7,r19
1020dad0:	da000615 	stw	r8,24(sp)
1020dad4:	da400715 	stw	r9,28(sp)
1020dad8:	0214dc40 	call	10214dc4 <__udivdi3>
1020dadc:	013fffc4 	movi	r4,-1
1020dae0:	200b883a 	mov	r5,r4
1020dae4:	e00d883a 	mov	r6,fp
1020dae8:	980f883a 	mov	r7,r19
1020daec:	1021883a 	mov	r16,r2
1020daf0:	1823883a 	mov	r17,r3
1020daf4:	02153840 	call	10215384 <__umoddi3>
1020daf8:	da400717 	ldw	r9,28(sp)
1020dafc:	da000617 	ldw	r8,24(sp)
1020db00:	d8800315 	stw	r2,12(sp)
1020db04:	df000015 	stw	fp,0(sp)
1020db08:	8825883a 	mov	r18,r17
1020db0c:	00000c06 	br	1020db40 <_strtoull_r+0x10c>
1020db10:	00800c04 	movi	r2,48
1020db14:	48806426 	beq	r9,r2,1020dca8 <_strtoull_r+0x274>
1020db18:	00800284 	movi	r2,10
1020db1c:	01000144 	movi	r4,5
1020db20:	042666b4 	movhi	r16,39322
1020db24:	048666b4 	movhi	r18,6554
1020db28:	d8800015 	stw	r2,0(sp)
1020db2c:	d9000315 	stw	r4,12(sp)
1020db30:	84266644 	addi	r16,r16,-26215
1020db34:	94a66644 	addi	r18,r18,-26215
1020db38:	0027883a 	mov	r19,zero
1020db3c:	1039883a 	mov	fp,r2
1020db40:	ba45883a 	add	r2,r23,r9
1020db44:	12800043 	ldbu	r10,1(r2)
1020db48:	402d883a 	mov	r22,r8
1020db4c:	000d883a 	mov	r6,zero
1020db50:	5080010c 	andi	r2,r10,4
1020db54:	0009883a 	mov	r4,zero
1020db58:	000b883a 	mov	r5,zero
1020db5c:	04400044 	movi	r17,1
1020db60:	057fffc4 	movi	r21,-1
1020db64:	10000d26 	beq	r2,zero,1020db9c <_strtoull_r+0x168>
1020db68:	4d3ff404 	addi	r20,r9,-48
1020db6c:	a700110e 	bge	r20,fp,1020dbb4 <_strtoull_r+0x180>
1020db70:	35400426 	beq	r6,r21,1020db84 <_strtoull_r+0x150>
1020db74:	91400236 	bltu	r18,r5,1020db80 <_strtoull_r+0x14c>
1020db78:	2c80281e 	bne	r5,r18,1020dc1c <_strtoull_r+0x1e8>
1020db7c:	8100272e 	bgeu	r16,r4,1020dc1c <_strtoull_r+0x1e8>
1020db80:	01bfffc4 	movi	r6,-1
1020db84:	b2400003 	ldbu	r9,0(r22)
1020db88:	b5800044 	addi	r22,r22,1
1020db8c:	ba45883a 	add	r2,r23,r9
1020db90:	12800043 	ldbu	r10,1(r2)
1020db94:	5080010c 	andi	r2,r10,4
1020db98:	103ff31e 	bne	r2,zero,1020db68 <_strtoull_r+0x134>
1020db9c:	528000cc 	andi	r10,r10,3
1020dba0:	50000426 	beq	r10,zero,1020dbb4 <_strtoull_r+0x180>
1020dba4:	54402926 	beq	r10,r17,1020dc4c <_strtoull_r+0x218>
1020dba8:	00c015c4 	movi	r3,87
1020dbac:	48e9c83a 	sub	r20,r9,r3
1020dbb0:	a73fef16 	blt	r20,fp,1020db70 <_strtoull_r+0x13c>
1020dbb4:	30002d16 	blt	r6,zero,1020dc6c <_strtoull_r+0x238>
1020dbb8:	d9c00417 	ldw	r7,16(sp)
1020dbbc:	01c7c83a 	sub	r3,zero,r7
1020dbc0:	20c8f03a 	xor	r4,r4,r3
1020dbc4:	21c5883a 	add	r2,r4,r7
1020dbc8:	1109803a 	cmpltu	r4,r2,r4
1020dbcc:	28c6f03a 	xor	r3,r5,r3
1020dbd0:	20c7883a 	add	r3,r4,r3
1020dbd4:	d9000117 	ldw	r4,4(sp)
1020dbd8:	20000426 	beq	r4,zero,1020dbec <_strtoull_r+0x1b8>
1020dbdc:	30002126 	beq	r6,zero,1020dc64 <_strtoull_r+0x230>
1020dbe0:	b5bfffc4 	addi	r22,r22,-1
1020dbe4:	d9c00117 	ldw	r7,4(sp)
1020dbe8:	3d800015 	stw	r22,0(r7)
1020dbec:	dfc01117 	ldw	ra,68(sp)
1020dbf0:	df001017 	ldw	fp,64(sp)
1020dbf4:	ddc00f17 	ldw	r23,60(sp)
1020dbf8:	dd800e17 	ldw	r22,56(sp)
1020dbfc:	dd400d17 	ldw	r21,52(sp)
1020dc00:	dd000c17 	ldw	r20,48(sp)
1020dc04:	dcc00b17 	ldw	r19,44(sp)
1020dc08:	dc800a17 	ldw	r18,40(sp)
1020dc0c:	dc400917 	ldw	r17,36(sp)
1020dc10:	dc000817 	ldw	r16,32(sp)
1020dc14:	dec01204 	addi	sp,sp,72
1020dc18:	f800283a 	ret
1020dc1c:	24000d26 	beq	r4,r16,1020dc54 <_strtoull_r+0x220>
1020dc20:	d9800017 	ldw	r6,0(sp)
1020dc24:	980f883a 	mov	r7,r19
1020dc28:	0214cf00 	call	10214cf0 <__muldi3>
1020dc2c:	a00bd7fa 	srai	r5,r20,31
1020dc30:	a085883a 	add	r2,r20,r2
1020dc34:	1513803a 	cmpltu	r9,r2,r20
1020dc38:	28c7883a 	add	r3,r5,r3
1020dc3c:	1009883a 	mov	r4,r2
1020dc40:	48cb883a 	add	r5,r9,r3
1020dc44:	01800044 	movi	r6,1
1020dc48:	003fce06 	br	1020db84 <_strtoull_r+0x150>
1020dc4c:	00c00dc4 	movi	r3,55
1020dc50:	003fd606 	br	1020dbac <_strtoull_r+0x178>
1020dc54:	2cbff21e 	bne	r5,r18,1020dc20 <_strtoull_r+0x1ec>
1020dc58:	d9c00317 	ldw	r7,12(sp)
1020dc5c:	3d3fc816 	blt	r7,r20,1020db80 <_strtoull_r+0x14c>
1020dc60:	003fef06 	br	1020dc20 <_strtoull_r+0x1ec>
1020dc64:	dd800217 	ldw	r22,8(sp)
1020dc68:	003fde06 	br	1020dbe4 <_strtoull_r+0x1b0>
1020dc6c:	d9000517 	ldw	r4,20(sp)
1020dc70:	00c00884 	movi	r3,34
1020dc74:	00bfffc4 	movi	r2,-1
1020dc78:	20c00015 	stw	r3,0(r4)
1020dc7c:	1007883a 	mov	r3,r2
1020dc80:	003fd406 	br	1020dbd4 <_strtoull_r+0x1a0>
1020dc84:	00800044 	movi	r2,1
1020dc88:	1a000084 	addi	r8,r3,2
1020dc8c:	1a400043 	ldbu	r9,1(r3)
1020dc90:	d8800415 	stw	r2,16(sp)
1020dc94:	003f8606 	br	1020dab0 <_strtoull_r+0x7c>
1020dc98:	1a000084 	addi	r8,r3,2
1020dc9c:	1a400043 	ldbu	r9,1(r3)
1020dca0:	d8000415 	stw	zero,16(sp)
1020dca4:	003f8206 	br	1020dab0 <_strtoull_r+0x7c>
1020dca8:	40800003 	ldbu	r2,0(r8)
1020dcac:	00c01604 	movi	r3,88
1020dcb0:	108037cc 	andi	r2,r2,223
1020dcb4:	10c01426 	beq	r2,r3,1020dd08 <_strtoull_r+0x2d4>
1020dcb8:	00800204 	movi	r2,8
1020dcbc:	010001c4 	movi	r4,7
1020dcc0:	043fffc4 	movi	r16,-1
1020dcc4:	04880034 	movhi	r18,8192
1020dcc8:	d8800015 	stw	r2,0(sp)
1020dccc:	d9000315 	stw	r4,12(sp)
1020dcd0:	9425883a 	add	r18,r18,r16
1020dcd4:	0027883a 	mov	r19,zero
1020dcd8:	1039883a 	mov	fp,r2
1020dcdc:	003f9806 	br	1020db40 <_strtoull_r+0x10c>
1020dce0:	00800c04 	movi	r2,48
1020dce4:	48801426 	beq	r9,r2,1020dd38 <_strtoull_r+0x304>
1020dce8:	04840034 	movhi	r18,4096
1020dcec:	008003c4 	movi	r2,15
1020dcf0:	94bfffc4 	addi	r18,r18,-1
1020dcf4:	d8800315 	stw	r2,12(sp)
1020dcf8:	043fffc4 	movi	r16,-1
1020dcfc:	df000015 	stw	fp,0(sp)
1020dd00:	0027883a 	mov	r19,zero
1020dd04:	003f8e06 	br	1020db40 <_strtoull_r+0x10c>
1020dd08:	01000404 	movi	r4,16
1020dd0c:	01c003c4 	movi	r7,15
1020dd10:	043fffc4 	movi	r16,-1
1020dd14:	04440034 	movhi	r17,4096
1020dd18:	42400043 	ldbu	r9,1(r8)
1020dd1c:	d9000015 	stw	r4,0(sp)
1020dd20:	d9c00315 	stw	r7,12(sp)
1020dd24:	42000084 	addi	r8,r8,2
1020dd28:	8c23883a 	add	r17,r17,r16
1020dd2c:	0027883a 	mov	r19,zero
1020dd30:	2039883a 	mov	fp,r4
1020dd34:	003f7406 	br	1020db08 <_strtoull_r+0xd4>
1020dd38:	40800003 	ldbu	r2,0(r8)
1020dd3c:	00c01604 	movi	r3,88
1020dd40:	108037cc 	andi	r2,r2,223
1020dd44:	10fff026 	beq	r2,r3,1020dd08 <_strtoull_r+0x2d4>
1020dd48:	01c003c4 	movi	r7,15
1020dd4c:	043fffc4 	movi	r16,-1
1020dd50:	04840034 	movhi	r18,4096
1020dd54:	d9c00315 	stw	r7,12(sp)
1020dd58:	9425883a 	add	r18,r18,r16
1020dd5c:	df000015 	stw	fp,0(sp)
1020dd60:	0027883a 	mov	r19,zero
1020dd64:	003f7606 	br	1020db40 <_strtoull_r+0x10c>

1020dd68 <_sungetc_r>:
1020dd68:	00bfffc4 	movi	r2,-1
1020dd6c:	28803426 	beq	r5,r2,1020de40 <_sungetc_r+0xd8>
1020dd70:	3080030b 	ldhu	r2,12(r6)
1020dd74:	30c00c17 	ldw	r3,48(r6)
1020dd78:	defffd04 	addi	sp,sp,-12
1020dd7c:	10bff7cc 	andi	r2,r2,65503
1020dd80:	dc400115 	stw	r17,4(sp)
1020dd84:	dfc00215 	stw	ra,8(sp)
1020dd88:	dc000015 	stw	r16,0(sp)
1020dd8c:	3080030d 	sth	r2,12(r6)
1020dd90:	2c403fcc 	andi	r17,r5,255
1020dd94:	18001626 	beq	r3,zero,1020ddf0 <_sungetc_r+0x88>
1020dd98:	30c00117 	ldw	r3,4(r6)
1020dd9c:	30800d17 	ldw	r2,52(r6)
1020dda0:	3021883a 	mov	r16,r6
1020dda4:	18800d0e 	bge	r3,r2,1020dddc <_sungetc_r+0x74>
1020dda8:	80c00017 	ldw	r3,0(r16)
1020ddac:	8805883a 	mov	r2,r17
1020ddb0:	193fffc4 	addi	r4,r3,-1
1020ddb4:	81000015 	stw	r4,0(r16)
1020ddb8:	1c7fffc5 	stb	r17,-1(r3)
1020ddbc:	80c00117 	ldw	r3,4(r16)
1020ddc0:	18c00044 	addi	r3,r3,1
1020ddc4:	80c00115 	stw	r3,4(r16)
1020ddc8:	dfc00217 	ldw	ra,8(sp)
1020ddcc:	dc400117 	ldw	r17,4(sp)
1020ddd0:	dc000017 	ldw	r16,0(sp)
1020ddd4:	dec00304 	addi	sp,sp,12
1020ddd8:	f800283a 	ret
1020dddc:	300b883a 	mov	r5,r6
1020dde0:	0210fc00 	call	10210fc0 <__submore>
1020dde4:	103ff026 	beq	r2,zero,1020dda8 <_sungetc_r+0x40>
1020dde8:	00bfffc4 	movi	r2,-1
1020ddec:	003ff606 	br	1020ddc8 <_sungetc_r+0x60>
1020ddf0:	30800417 	ldw	r2,16(r6)
1020ddf4:	30c00017 	ldw	r3,0(r6)
1020ddf8:	10000326 	beq	r2,zero,1020de08 <_sungetc_r+0xa0>
1020ddfc:	10c0022e 	bgeu	r2,r3,1020de08 <_sungetc_r+0xa0>
1020de00:	18bfffc3 	ldbu	r2,-1(r3)
1020de04:	14401026 	beq	r2,r17,1020de48 <_sungetc_r+0xe0>
1020de08:	31400117 	ldw	r5,4(r6)
1020de0c:	30801084 	addi	r2,r6,66
1020de10:	31001004 	addi	r4,r6,64
1020de14:	30c00e15 	stw	r3,56(r6)
1020de18:	30800015 	stw	r2,0(r6)
1020de1c:	00c000c4 	movi	r3,3
1020de20:	00800044 	movi	r2,1
1020de24:	30800115 	stw	r2,4(r6)
1020de28:	31400f15 	stw	r5,60(r6)
1020de2c:	31000c15 	stw	r4,48(r6)
1020de30:	30c00d15 	stw	r3,52(r6)
1020de34:	34401085 	stb	r17,66(r6)
1020de38:	8805883a 	mov	r2,r17
1020de3c:	003fe206 	br	1020ddc8 <_sungetc_r+0x60>
1020de40:	00bfffc4 	movi	r2,-1
1020de44:	f800283a 	ret
1020de48:	31000117 	ldw	r4,4(r6)
1020de4c:	18ffffc4 	addi	r3,r3,-1
1020de50:	30c00015 	stw	r3,0(r6)
1020de54:	20c00044 	addi	r3,r4,1
1020de58:	30c00115 	stw	r3,4(r6)
1020de5c:	003fda06 	br	1020ddc8 <_sungetc_r+0x60>

1020de60 <__ssrefill_r>:
1020de60:	defffe04 	addi	sp,sp,-8
1020de64:	dc000015 	stw	r16,0(sp)
1020de68:	2821883a 	mov	r16,r5
1020de6c:	29400c17 	ldw	r5,48(r5)
1020de70:	dfc00115 	stw	ra,4(sp)
1020de74:	28000e26 	beq	r5,zero,1020deb0 <__ssrefill_r+0x50>
1020de78:	80801004 	addi	r2,r16,64
1020de7c:	28800126 	beq	r5,r2,1020de84 <__ssrefill_r+0x24>
1020de80:	0208d940 	call	10208d94 <_free_r>
1020de84:	80800f17 	ldw	r2,60(r16)
1020de88:	80000c15 	stw	zero,48(r16)
1020de8c:	80800115 	stw	r2,4(r16)
1020de90:	10000726 	beq	r2,zero,1020deb0 <__ssrefill_r+0x50>
1020de94:	80c00e17 	ldw	r3,56(r16)
1020de98:	0005883a 	mov	r2,zero
1020de9c:	80c00015 	stw	r3,0(r16)
1020dea0:	dfc00117 	ldw	ra,4(sp)
1020dea4:	dc000017 	ldw	r16,0(sp)
1020dea8:	dec00204 	addi	sp,sp,8
1020deac:	f800283a 	ret
1020deb0:	8080030b 	ldhu	r2,12(r16)
1020deb4:	80c00417 	ldw	r3,16(r16)
1020deb8:	80000115 	stw	zero,4(r16)
1020debc:	10800814 	ori	r2,r2,32
1020dec0:	8080030d 	sth	r2,12(r16)
1020dec4:	80c00015 	stw	r3,0(r16)
1020dec8:	00bfffc4 	movi	r2,-1
1020decc:	003ff406 	br	1020dea0 <__ssrefill_r+0x40>

1020ded0 <_sfread_r>:
1020ded0:	defff704 	addi	sp,sp,-36
1020ded4:	dd800615 	stw	r22,24(sp)
1020ded8:	39ad383a 	mul	r22,r7,r6
1020dedc:	ddc00715 	stw	r23,28(sp)
1020dee0:	dd400515 	stw	r21,20(sp)
1020dee4:	dc400115 	stw	r17,4(sp)
1020dee8:	dfc00815 	stw	ra,32(sp)
1020deec:	dd000415 	stw	r20,16(sp)
1020def0:	dcc00315 	stw	r19,12(sp)
1020def4:	dc800215 	stw	r18,8(sp)
1020def8:	dc000015 	stw	r16,0(sp)
1020defc:	302f883a 	mov	r23,r6
1020df00:	382b883a 	mov	r21,r7
1020df04:	dc400917 	ldw	r17,36(sp)
1020df08:	b0002826 	beq	r22,zero,1020dfac <_sfread_r+0xdc>
1020df0c:	2029883a 	mov	r20,r4
1020df10:	2827883a 	mov	r19,r5
1020df14:	b025883a 	mov	r18,r22
1020df18:	00000b06 	br	1020df48 <_sfread_r+0x78>
1020df1c:	0202dc80 	call	10202dc8 <memcpy>
1020df20:	88800017 	ldw	r2,0(r17)
1020df24:	9c27883a 	add	r19,r19,r16
1020df28:	9425c83a 	sub	r18,r18,r16
1020df2c:	1421883a 	add	r16,r2,r16
1020df30:	88000115 	stw	zero,4(r17)
1020df34:	a009883a 	mov	r4,r20
1020df38:	8c000015 	stw	r16,0(r17)
1020df3c:	880b883a 	mov	r5,r17
1020df40:	020de600 	call	1020de60 <__ssrefill_r>
1020df44:	10001b1e 	bne	r2,zero,1020dfb4 <_sfread_r+0xe4>
1020df48:	8c000117 	ldw	r16,4(r17)
1020df4c:	9809883a 	mov	r4,r19
1020df50:	89400017 	ldw	r5,0(r17)
1020df54:	800d883a 	mov	r6,r16
1020df58:	84bff036 	bltu	r16,r18,1020df1c <_sfread_r+0x4c>
1020df5c:	900d883a 	mov	r6,r18
1020df60:	0202dc80 	call	10202dc8 <memcpy>
1020df64:	88c00117 	ldw	r3,4(r17)
1020df68:	89000017 	ldw	r4,0(r17)
1020df6c:	a805883a 	mov	r2,r21
1020df70:	1c87c83a 	sub	r3,r3,r18
1020df74:	24a5883a 	add	r18,r4,r18
1020df78:	88c00115 	stw	r3,4(r17)
1020df7c:	8c800015 	stw	r18,0(r17)
1020df80:	dfc00817 	ldw	ra,32(sp)
1020df84:	ddc00717 	ldw	r23,28(sp)
1020df88:	dd800617 	ldw	r22,24(sp)
1020df8c:	dd400517 	ldw	r21,20(sp)
1020df90:	dd000417 	ldw	r20,16(sp)
1020df94:	dcc00317 	ldw	r19,12(sp)
1020df98:	dc800217 	ldw	r18,8(sp)
1020df9c:	dc400117 	ldw	r17,4(sp)
1020dfa0:	dc000017 	ldw	r16,0(sp)
1020dfa4:	dec00904 	addi	sp,sp,36
1020dfa8:	f800283a 	ret
1020dfac:	0005883a 	mov	r2,zero
1020dfb0:	003ff306 	br	1020df80 <_sfread_r+0xb0>
1020dfb4:	b489c83a 	sub	r4,r22,r18
1020dfb8:	b80b883a 	mov	r5,r23
1020dfbc:	02024740 	call	10202474 <__udivsi3>
1020dfc0:	003fef06 	br	1020df80 <_sfread_r+0xb0>

1020dfc4 <__ssvfiscanf_r>:
1020dfc4:	2880030b 	ldhu	r2,12(r5)
1020dfc8:	deff9a04 	addi	sp,sp,-408
1020dfcc:	df006415 	stw	fp,400(sp)
1020dfd0:	dc805e15 	stw	r18,376(sp)
1020dfd4:	dfc06515 	stw	ra,404(sp)
1020dfd8:	ddc06315 	stw	r23,396(sp)
1020dfdc:	dd806215 	stw	r22,392(sp)
1020dfe0:	dd406115 	stw	r21,388(sp)
1020dfe4:	dd006015 	stw	r20,384(sp)
1020dfe8:	dcc05f15 	stw	r19,380(sp)
1020dfec:	dc405d15 	stw	r17,372(sp)
1020dff0:	dc005c15 	stw	r16,368(sp)
1020dff4:	10c8000c 	andi	r3,r2,8192
1020dff8:	d9c04f15 	stw	r7,316(sp)
1020dffc:	2839883a 	mov	fp,r5
1020e000:	2025883a 	mov	r18,r4
1020e004:	1800061e 	bne	r3,zero,1020e020 <__ssvfiscanf_r+0x5c>
1020e008:	29001917 	ldw	r4,100(r5)
1020e00c:	00f7ffc4 	movi	r3,-8193
1020e010:	10880014 	ori	r2,r2,8192
1020e014:	20c6703a 	and	r3,r4,r3
1020e018:	2880030d 	sth	r2,12(r5)
1020e01c:	28c01915 	stw	r3,100(r5)
1020e020:	30800003 	ldbu	r2,0(r6)
1020e024:	da004104 	addi	r8,sp,260
1020e028:	0027883a 	mov	r19,zero
1020e02c:	050408b4 	movhi	r20,4130
1020e030:	d8005115 	stw	zero,324(sp)
1020e034:	d8005015 	stw	zero,320(sp)
1020e038:	d8005315 	stw	zero,332(sp)
1020e03c:	da004e15 	stw	r8,312(sp)
1020e040:	d8804d15 	stw	r2,308(sp)
1020e044:	e02b883a 	mov	r21,fp
1020e048:	a53d0904 	addi	r20,r20,-3036
1020e04c:	9839883a 	mov	fp,r19
1020e050:	34400044 	addi	r17,r6,1
1020e054:	10001e26 	beq	r2,zero,1020e0d0 <__ssvfiscanf_r+0x10c>
1020e058:	a1000017 	ldw	r4,0(r20)
1020e05c:	2087883a 	add	r3,r4,r2
1020e060:	18c00043 	ldbu	r3,1(r3)
1020e064:	18c0020c 	andi	r3,r3,8
1020e068:	18001b26 	beq	r3,zero,1020e0d8 <__ssvfiscanf_r+0x114>
1020e06c:	a8800117 	ldw	r2,4(r21)
1020e070:	00800e0e 	bge	zero,r2,1020e0ac <__ssvfiscanf_r+0xe8>
1020e074:	a8c00017 	ldw	r3,0(r21)
1020e078:	a1000017 	ldw	r4,0(r20)
1020e07c:	18800003 	ldbu	r2,0(r3)
1020e080:	2085883a 	add	r2,r4,r2
1020e084:	10800043 	ldbu	r2,1(r2)
1020e088:	1080020c 	andi	r2,r2,8
1020e08c:	10000b26 	beq	r2,zero,1020e0bc <__ssvfiscanf_r+0xf8>
1020e090:	a8800117 	ldw	r2,4(r21)
1020e094:	18c00044 	addi	r3,r3,1
1020e098:	a8c00015 	stw	r3,0(r21)
1020e09c:	10bfffc4 	addi	r2,r2,-1
1020e0a0:	a8800115 	stw	r2,4(r21)
1020e0a4:	e7000044 	addi	fp,fp,1
1020e0a8:	00bff216 	blt	zero,r2,1020e074 <__ssvfiscanf_r+0xb0>
1020e0ac:	9009883a 	mov	r4,r18
1020e0b0:	a80b883a 	mov	r5,r21
1020e0b4:	020de600 	call	1020de60 <__ssrefill_r>
1020e0b8:	103fee26 	beq	r2,zero,1020e074 <__ssvfiscanf_r+0xb0>
1020e0bc:	880d883a 	mov	r6,r17
1020e0c0:	30800003 	ldbu	r2,0(r6)
1020e0c4:	34400044 	addi	r17,r6,1
1020e0c8:	d8804d15 	stw	r2,308(sp)
1020e0cc:	103fe21e 	bne	r2,zero,1020e058 <__ssvfiscanf_r+0x94>
1020e0d0:	d8805317 	ldw	r2,332(sp)
1020e0d4:	0000c406 	br	1020e3e8 <__ssvfiscanf_r+0x424>
1020e0d8:	00c00944 	movi	r3,37
1020e0dc:	10c0cf1e 	bne	r2,r3,1020e41c <__ssvfiscanf_r+0x458>
1020e0e0:	30c00043 	ldbu	r3,1(r6)
1020e0e4:	0021883a 	mov	r16,zero
1020e0e8:	0027883a 	mov	r19,zero
1020e0ec:	01801e04 	movi	r6,120
1020e0f0:	01c01b04 	movi	r7,108
1020e0f4:	89400044 	addi	r5,r17,1
1020e0f8:	30c14636 	bltu	r6,r3,1020e614 <__ssvfiscanf_r+0x650>
1020e0fc:	180490ba 	slli	r2,r3,2
1020e100:	02c40874 	movhi	r11,4129
1020e104:	5af84504 	addi	r11,r11,-7916
1020e108:	12c5883a 	add	r2,r2,r11
1020e10c:	10800017 	ldw	r2,0(r2)
1020e110:	1000683a 	jmp	r2
1020e114:	1020e3e4 	muli	zero,r2,-31857
1020e118:	1020e614 	ori	zero,r2,33688
1020e11c:	1020e614 	ori	zero,r2,33688
1020e120:	1020e614 	ori	zero,r2,33688
1020e124:	1020e614 	ori	zero,r2,33688
1020e128:	1020e614 	ori	zero,r2,33688
1020e12c:	1020e614 	ori	zero,r2,33688
1020e130:	1020e614 	ori	zero,r2,33688
1020e134:	1020e614 	ori	zero,r2,33688
1020e138:	1020e614 	ori	zero,r2,33688
1020e13c:	1020e614 	ori	zero,r2,33688
1020e140:	1020e614 	ori	zero,r2,33688
1020e144:	1020e614 	ori	zero,r2,33688
1020e148:	1020e614 	ori	zero,r2,33688
1020e14c:	1020e614 	ori	zero,r2,33688
1020e150:	1020e614 	ori	zero,r2,33688
1020e154:	1020e614 	ori	zero,r2,33688
1020e158:	1020e614 	ori	zero,r2,33688
1020e15c:	1020e614 	ori	zero,r2,33688
1020e160:	1020e614 	ori	zero,r2,33688
1020e164:	1020e614 	ori	zero,r2,33688
1020e168:	1020e614 	ori	zero,r2,33688
1020e16c:	1020e614 	ori	zero,r2,33688
1020e170:	1020e614 	ori	zero,r2,33688
1020e174:	1020e614 	ori	zero,r2,33688
1020e178:	1020e614 	ori	zero,r2,33688
1020e17c:	1020e614 	ori	zero,r2,33688
1020e180:	1020e614 	ori	zero,r2,33688
1020e184:	1020e614 	ori	zero,r2,33688
1020e188:	1020e614 	ori	zero,r2,33688
1020e18c:	1020e614 	ori	zero,r2,33688
1020e190:	1020e614 	ori	zero,r2,33688
1020e194:	1020e614 	ori	zero,r2,33688
1020e198:	1020e614 	ori	zero,r2,33688
1020e19c:	1020e614 	ori	zero,r2,33688
1020e1a0:	1020e614 	ori	zero,r2,33688
1020e1a4:	1020e614 	ori	zero,r2,33688
1020e1a8:	1020e418 	cmpnei	zero,r2,-31856
1020e1ac:	1020e614 	ori	zero,r2,33688
1020e1b0:	1020e614 	ori	zero,r2,33688
1020e1b4:	1020e614 	ori	zero,r2,33688
1020e1b8:	1020e614 	ori	zero,r2,33688
1020e1bc:	1020e744 	addi	zero,r2,-31843
1020e1c0:	1020e614 	ori	zero,r2,33688
1020e1c4:	1020e614 	ori	zero,r2,33688
1020e1c8:	1020e614 	ori	zero,r2,33688
1020e1cc:	1020e614 	ori	zero,r2,33688
1020e1d0:	1020e614 	ori	zero,r2,33688
1020e1d4:	1020e728 	cmpgeui	zero,r2,33692
1020e1d8:	1020e728 	cmpgeui	zero,r2,33692
1020e1dc:	1020e728 	cmpgeui	zero,r2,33692
1020e1e0:	1020e728 	cmpgeui	zero,r2,33692
1020e1e4:	1020e728 	cmpgeui	zero,r2,33692
1020e1e8:	1020e728 	cmpgeui	zero,r2,33692
1020e1ec:	1020e728 	cmpgeui	zero,r2,33692
1020e1f0:	1020e728 	cmpgeui	zero,r2,33692
1020e1f4:	1020e728 	cmpgeui	zero,r2,33692
1020e1f8:	1020e728 	cmpgeui	zero,r2,33692
1020e1fc:	1020e614 	ori	zero,r2,33688
1020e200:	1020e614 	ori	zero,r2,33688
1020e204:	1020e614 	ori	zero,r2,33688
1020e208:	1020e614 	ori	zero,r2,33688
1020e20c:	1020e614 	ori	zero,r2,33688
1020e210:	1020e614 	ori	zero,r2,33688
1020e214:	1020e614 	ori	zero,r2,33688
1020e218:	1020e614 	ori	zero,r2,33688
1020e21c:	1020e614 	ori	zero,r2,33688
1020e220:	1020e614 	ori	zero,r2,33688
1020e224:	1020e700 	call	11020e70 <__ram_exceptions_end+0xc18c30>
1020e228:	1020e614 	ori	zero,r2,33688
1020e22c:	1020e614 	ori	zero,r2,33688
1020e230:	1020e614 	ori	zero,r2,33688
1020e234:	1020e614 	ori	zero,r2,33688
1020e238:	1020e614 	ori	zero,r2,33688
1020e23c:	1020e614 	ori	zero,r2,33688
1020e240:	1020e614 	ori	zero,r2,33688
1020e244:	1020e6ec 	andhi	zero,r2,33691
1020e248:	1020e614 	ori	zero,r2,33688
1020e24c:	1020e614 	ori	zero,r2,33688
1020e250:	1020e6e0 	cmpeqi	zero,r2,-31845
1020e254:	1020e614 	ori	zero,r2,33688
1020e258:	1020e614 	ori	zero,r2,33688
1020e25c:	1020e614 	ori	zero,r2,33688
1020e260:	1020e614 	ori	zero,r2,33688
1020e264:	1020e614 	ori	zero,r2,33688
1020e268:	1020e614 	ori	zero,r2,33688
1020e26c:	1020e614 	ori	zero,r2,33688
1020e270:	1020e614 	ori	zero,r2,33688
1020e274:	1020e6d4 	ori	zero,r2,33691
1020e278:	1020e614 	ori	zero,r2,33688
1020e27c:	1020e614 	ori	zero,r2,33688
1020e280:	1020e6b8 	rdprs	zero,r2,-31846
1020e284:	1020e614 	ori	zero,r2,33688
1020e288:	1020e614 	ori	zero,r2,33688
1020e28c:	1020e614 	ori	zero,r2,33688
1020e290:	1020e614 	ori	zero,r2,33688
1020e294:	1020e614 	ori	zero,r2,33688
1020e298:	1020e614 	ori	zero,r2,33688
1020e29c:	1020e614 	ori	zero,r2,33688
1020e2a0:	1020e6a4 	muli	zero,r2,-31846
1020e2a4:	1020e680 	call	11020e68 <__ram_exceptions_end+0xc18c28>
1020e2a8:	1020e614 	ori	zero,r2,33688
1020e2ac:	1020e614 	ori	zero,r2,33688
1020e2b0:	1020e614 	ori	zero,r2,33688
1020e2b4:	1020e66c 	andhi	zero,r2,33689
1020e2b8:	1020e64c 	andi	zero,r2,33689
1020e2bc:	1020e614 	ori	zero,r2,33688
1020e2c0:	1020e614 	ori	zero,r2,33688
1020e2c4:	1020e5fc 	xorhi	zero,r2,33687
1020e2c8:	1020e614 	ori	zero,r2,33688
1020e2cc:	1020e5a8 	cmpgeui	zero,r2,33686
1020e2d0:	1020e584 	addi	zero,r2,-31850
1020e2d4:	1020e5d4 	ori	zero,r2,33687
1020e2d8:	1020e614 	ori	zero,r2,33688
1020e2dc:	1020e614 	ori	zero,r2,33688
1020e2e0:	1020e55c 	xori	zero,r2,33685
1020e2e4:	1020e614 	ori	zero,r2,33688
1020e2e8:	1020e454 	ori	zero,r2,33681
1020e2ec:	1020e614 	ori	zero,r2,33688
1020e2f0:	1020e614 	ori	zero,r2,33688
1020e2f4:	1020e6d4 	ori	zero,r2,33691
1020e2f8:	dac04b04 	addi	r11,sp,300
1020e2fc:	8400040c 	andi	r16,r16,16
1020e300:	5809883a 	mov	r4,r11
1020e304:	000b883a 	mov	r5,zero
1020e308:	01800204 	movi	r6,8
1020e30c:	dac05215 	stw	r11,328(sp)
1020e310:	0209e580 	call	10209e58 <memset>
1020e314:	8002bb26 	beq	r16,zero,1020ee04 <__ssvfiscanf_r+0xe40>
1020e318:	dd804d04 	addi	r22,sp,308
1020e31c:	0007883a 	mov	r3,zero
1020e320:	1827883a 	mov	r19,r3
1020e324:	a8800017 	ldw	r2,0(r21)
1020e328:	a0c00017 	ldw	r3,0(r20)
1020e32c:	10800003 	ldbu	r2,0(r2)
1020e330:	1885883a 	add	r2,r3,r2
1020e334:	10800043 	ldbu	r2,1(r2)
1020e338:	1080020c 	andi	r2,r2,8
1020e33c:	1002cb1e 	bne	r2,zero,1020ee6c <__ssvfiscanf_r+0xea8>
1020e340:	b802ca26 	beq	r23,zero,1020ee6c <__ssvfiscanf_r+0xea8>
1020e344:	02097840 	call	10209784 <__locale_mb_cur_max>
1020e348:	14c02126 	beq	r2,r19,1020e3d0 <__ssvfiscanf_r+0x40c>
1020e34c:	a8800017 	ldw	r2,0(r21)
1020e350:	a9000117 	ldw	r4,4(r21)
1020e354:	dac04104 	addi	r11,sp,260
1020e358:	98c00044 	addi	r3,r19,1
1020e35c:	5ce7883a 	add	r19,r11,r19
1020e360:	dac05217 	ldw	r11,328(sp)
1020e364:	12000003 	ldbu	r8,0(r2)
1020e368:	213fffc4 	addi	r4,r4,-1
1020e36c:	10800044 	addi	r2,r2,1
1020e370:	a9000115 	stw	r4,4(r21)
1020e374:	a8800015 	stw	r2,0(r21)
1020e378:	dac00015 	stw	r11,0(sp)
1020e37c:	9009883a 	mov	r4,r18
1020e380:	180f883a 	mov	r7,r3
1020e384:	9a000005 	stb	r8,0(r19)
1020e388:	b00b883a 	mov	r5,r22
1020e38c:	d9804104 	addi	r6,sp,260
1020e390:	d8c05a15 	stw	r3,360(sp)
1020e394:	02099f00 	call	102099f0 <_mbrtowc_r>
1020e398:	013fffc4 	movi	r4,-1
1020e39c:	d8c05a17 	ldw	r3,360(sp)
1020e3a0:	11000b26 	beq	r2,r4,1020e3d0 <__ssvfiscanf_r+0x40c>
1020e3a4:	1002a126 	beq	r2,zero,1020ee2c <__ssvfiscanf_r+0xe68>
1020e3a8:	017fff84 	movi	r5,-2
1020e3ac:	1827883a 	mov	r19,r3
1020e3b0:	11431b1e 	bne	r2,r5,1020f020 <__ssvfiscanf_r+0x105c>
1020e3b4:	a8800117 	ldw	r2,4(r21)
1020e3b8:	00bfda16 	blt	zero,r2,1020e324 <__ssvfiscanf_r+0x360>
1020e3bc:	9009883a 	mov	r4,r18
1020e3c0:	a80b883a 	mov	r5,r21
1020e3c4:	020de600 	call	1020de60 <__ssrefill_r>
1020e3c8:	103fd626 	beq	r2,zero,1020e324 <__ssvfiscanf_r+0x360>
1020e3cc:	9802a726 	beq	r19,zero,1020ee6c <__ssvfiscanf_r+0xea8>
1020e3d0:	da005317 	ldw	r8,332(sp)
1020e3d4:	40000326 	beq	r8,zero,1020e3e4 <__ssvfiscanf_r+0x420>
1020e3d8:	a880030b 	ldhu	r2,12(r21)
1020e3dc:	1080100c 	andi	r2,r2,64
1020e3e0:	10027726 	beq	r2,zero,1020edc0 <__ssvfiscanf_r+0xdfc>
1020e3e4:	00bfffc4 	movi	r2,-1
1020e3e8:	dfc06517 	ldw	ra,404(sp)
1020e3ec:	df006417 	ldw	fp,400(sp)
1020e3f0:	ddc06317 	ldw	r23,396(sp)
1020e3f4:	dd806217 	ldw	r22,392(sp)
1020e3f8:	dd406117 	ldw	r21,388(sp)
1020e3fc:	dd006017 	ldw	r20,384(sp)
1020e400:	dcc05f17 	ldw	r19,380(sp)
1020e404:	dc805e17 	ldw	r18,376(sp)
1020e408:	dc405d17 	ldw	r17,372(sp)
1020e40c:	dc005c17 	ldw	r16,368(sp)
1020e410:	dec06604 	addi	sp,sp,408
1020e414:	f800283a 	ret
1020e418:	2823883a 	mov	r17,r5
1020e41c:	a8800117 	ldw	r2,4(r21)
1020e420:	0082bf0e 	bge	zero,r2,1020ef20 <__ssvfiscanf_r+0xf5c>
1020e424:	a8800017 	ldw	r2,0(r21)
1020e428:	88ffffc3 	ldbu	r3,-1(r17)
1020e42c:	11000003 	ldbu	r4,0(r2)
1020e430:	20ff271e 	bne	r4,r3,1020e0d0 <__ssvfiscanf_r+0x10c>
1020e434:	a8c00117 	ldw	r3,4(r21)
1020e438:	10800044 	addi	r2,r2,1
1020e43c:	a8800015 	stw	r2,0(r21)
1020e440:	18bfffc4 	addi	r2,r3,-1
1020e444:	a8800115 	stw	r2,4(r21)
1020e448:	e7000044 	addi	fp,fp,1
1020e44c:	880d883a 	mov	r6,r17
1020e450:	003f1b06 	br	1020e0c0 <__ssvfiscanf_r+0xfc>
1020e454:	02c40874 	movhi	r11,4129
1020e458:	5af5ea04 	addi	r11,r11,-10328
1020e45c:	02000284 	movi	r8,10
1020e460:	2823883a 	mov	r17,r5
1020e464:	982f883a 	mov	r23,r19
1020e468:	dac05115 	stw	r11,324(sp)
1020e46c:	da005015 	stw	r8,320(sp)
1020e470:	058000c4 	movi	r22,3
1020e474:	a8800117 	ldw	r2,4(r21)
1020e478:	00803d0e 	bge	zero,r2,1020e570 <__ssvfiscanf_r+0x5ac>
1020e47c:	8080100c 	andi	r2,r16,64
1020e480:	10002626 	beq	r2,zero,1020e51c <__ssvfiscanf_r+0x558>
1020e484:	00800084 	movi	r2,2
1020e488:	b0818f26 	beq	r22,r2,1020eac8 <__ssvfiscanf_r+0xb04>
1020e48c:	008000c4 	movi	r2,3
1020e490:	b080b126 	beq	r22,r2,1020e758 <__ssvfiscanf_r+0x794>
1020e494:	00800044 	movi	r2,1
1020e498:	b0817226 	beq	r22,r2,1020ea64 <__ssvfiscanf_r+0xaa0>
1020e49c:	9800011e 	bne	r19,zero,1020e4a4 <__ssvfiscanf_r+0x4e0>
1020e4a0:	102f883a 	mov	r23,r2
1020e4a4:	8080004c 	andi	r2,r16,1
1020e4a8:	10020f1e 	bne	r2,zero,1020ece8 <__ssvfiscanf_r+0xd24>
1020e4ac:	8400040c 	andi	r16,r16,16
1020e4b0:	80028226 	beq	r16,zero,1020eebc <__ssvfiscanf_r+0xef8>
1020e4b4:	0021883a 	mov	r16,zero
1020e4b8:	00000906 	br	1020e4e0 <__ssvfiscanf_r+0x51c>
1020e4bc:	a8c00017 	ldw	r3,0(r21)
1020e4c0:	9009883a 	mov	r4,r18
1020e4c4:	a80b883a 	mov	r5,r21
1020e4c8:	1887883a 	add	r3,r3,r2
1020e4cc:	a8c00015 	stw	r3,0(r21)
1020e4d0:	80a1883a 	add	r16,r16,r2
1020e4d4:	b8afc83a 	sub	r23,r23,r2
1020e4d8:	020de600 	call	1020de60 <__ssrefill_r>
1020e4dc:	1002731e 	bne	r2,zero,1020eeac <__ssvfiscanf_r+0xee8>
1020e4e0:	a8800117 	ldw	r2,4(r21)
1020e4e4:	15fff516 	blt	r2,r23,1020e4bc <__ssvfiscanf_r+0x4f8>
1020e4e8:	a9000017 	ldw	r4,0(r21)
1020e4ec:	15c5c83a 	sub	r2,r2,r23
1020e4f0:	85e1883a 	add	r16,r16,r23
1020e4f4:	25c7883a 	add	r3,r4,r23
1020e4f8:	a8800115 	stw	r2,4(r21)
1020e4fc:	a8c00015 	stw	r3,0(r21)
1020e500:	e439883a 	add	fp,fp,r16
1020e504:	880d883a 	mov	r6,r17
1020e508:	003eed06 	br	1020e0c0 <__ssvfiscanf_r+0xfc>
1020e50c:	9009883a 	mov	r4,r18
1020e510:	a80b883a 	mov	r5,r21
1020e514:	020de600 	call	1020de60 <__ssrefill_r>
1020e518:	103fad1e 	bne	r2,zero,1020e3d0 <__ssvfiscanf_r+0x40c>
1020e51c:	a1400017 	ldw	r5,0(r20)
1020e520:	a9000017 	ldw	r4,0(r21)
1020e524:	00000206 	br	1020e530 <__ssvfiscanf_r+0x56c>
1020e528:	21000044 	addi	r4,r4,1
1020e52c:	a9000015 	stw	r4,0(r21)
1020e530:	20800003 	ldbu	r2,0(r4)
1020e534:	2885883a 	add	r2,r5,r2
1020e538:	10800043 	ldbu	r2,1(r2)
1020e53c:	1080020c 	andi	r2,r2,8
1020e540:	103fd026 	beq	r2,zero,1020e484 <__ssvfiscanf_r+0x4c0>
1020e544:	a8800117 	ldw	r2,4(r21)
1020e548:	e7000044 	addi	fp,fp,1
1020e54c:	10bfffc4 	addi	r2,r2,-1
1020e550:	a8800115 	stw	r2,4(r21)
1020e554:	00bff416 	blt	zero,r2,1020e528 <__ssvfiscanf_r+0x564>
1020e558:	003fec06 	br	1020e50c <__ssvfiscanf_r+0x548>
1020e55c:	a8800117 	ldw	r2,4(r21)
1020e560:	2823883a 	mov	r17,r5
1020e564:	982f883a 	mov	r23,r19
1020e568:	05800084 	movi	r22,2
1020e56c:	00bfc316 	blt	zero,r2,1020e47c <__ssvfiscanf_r+0x4b8>
1020e570:	9009883a 	mov	r4,r18
1020e574:	a80b883a 	mov	r5,r21
1020e578:	020de600 	call	1020de60 <__ssrefill_r>
1020e57c:	103fbf26 	beq	r2,zero,1020e47c <__ssvfiscanf_r+0x4b8>
1020e580:	003f9306 	br	1020e3d0 <__ssvfiscanf_r+0x40c>
1020e584:	2823883a 	mov	r17,r5
1020e588:	02c40874 	movhi	r11,4129
1020e58c:	5af5ea04 	addi	r11,r11,-10328
1020e590:	02000204 	movi	r8,8
1020e594:	982f883a 	mov	r23,r19
1020e598:	dac05115 	stw	r11,324(sp)
1020e59c:	da005015 	stw	r8,320(sp)
1020e5a0:	058000c4 	movi	r22,3
1020e5a4:	003fb306 	br	1020e474 <__ssvfiscanf_r+0x4b0>
1020e5a8:	8080040c 	andi	r2,r16,16
1020e5ac:	2823883a 	mov	r17,r5
1020e5b0:	103ec21e 	bne	r2,zero,1020e0bc <__ssvfiscanf_r+0xf8>
1020e5b4:	8080010c 	andi	r2,r16,4
1020e5b8:	10026526 	beq	r2,zero,1020ef50 <__ssvfiscanf_r+0xf8c>
1020e5bc:	dac04f17 	ldw	r11,316(sp)
1020e5c0:	58800017 	ldw	r2,0(r11)
1020e5c4:	5ac00104 	addi	r11,r11,4
1020e5c8:	dac04f15 	stw	r11,316(sp)
1020e5cc:	1700000d 	sth	fp,0(r2)
1020e5d0:	003eba06 	br	1020e0bc <__ssvfiscanf_r+0xf8>
1020e5d4:	2823883a 	mov	r17,r5
1020e5d8:	84008814 	ori	r16,r16,544
1020e5dc:	02c40874 	movhi	r11,4129
1020e5e0:	5af5ea04 	addi	r11,r11,-10328
1020e5e4:	02000404 	movi	r8,16
1020e5e8:	982f883a 	mov	r23,r19
1020e5ec:	dac05115 	stw	r11,324(sp)
1020e5f0:	da005015 	stw	r8,320(sp)
1020e5f4:	058000c4 	movi	r22,3
1020e5f8:	003f9e06 	br	1020e474 <__ssvfiscanf_r+0x4b0>
1020e5fc:	88c00043 	ldbu	r3,1(r17)
1020e600:	19c24c26 	beq	r3,r7,1020ef34 <__ssvfiscanf_r+0xf70>
1020e604:	2823883a 	mov	r17,r5
1020e608:	84000054 	ori	r16,r16,1
1020e60c:	89400044 	addi	r5,r17,1
1020e610:	30feba2e 	bgeu	r6,r3,1020e0fc <__ssvfiscanf_r+0x138>
1020e614:	20c7883a 	add	r3,r4,r3
1020e618:	18800043 	ldbu	r2,1(r3)
1020e61c:	00c00044 	movi	r3,1
1020e620:	2823883a 	mov	r17,r5
1020e624:	108000cc 	andi	r2,r2,3
1020e628:	10c24726 	beq	r2,r3,1020ef48 <__ssvfiscanf_r+0xf84>
1020e62c:	00840874 	movhi	r2,4129
1020e630:	10b49404 	addi	r2,r2,-11696
1020e634:	02000284 	movi	r8,10
1020e638:	d8805115 	stw	r2,324(sp)
1020e63c:	982f883a 	mov	r23,r19
1020e640:	da005015 	stw	r8,320(sp)
1020e644:	058000c4 	movi	r22,3
1020e648:	003f8a06 	br	1020e474 <__ssvfiscanf_r+0x4b0>
1020e64c:	02c40874 	movhi	r11,4129
1020e650:	5af49404 	addi	r11,r11,-11696
1020e654:	982f883a 	mov	r23,r19
1020e658:	2823883a 	mov	r17,r5
1020e65c:	dac05115 	stw	r11,324(sp)
1020e660:	d8005015 	stw	zero,320(sp)
1020e664:	058000c4 	movi	r22,3
1020e668:	003f8206 	br	1020e474 <__ssvfiscanf_r+0x4b0>
1020e66c:	88800043 	ldbu	r2,1(r17)
1020e670:	84000114 	ori	r16,r16,4
1020e674:	2823883a 	mov	r17,r5
1020e678:	10c03fcc 	andi	r3,r2,255
1020e67c:	003e9d06 	br	1020e0f4 <__ssvfiscanf_r+0x130>
1020e680:	00840874 	movhi	r2,4129
1020e684:	10b49404 	addi	r2,r2,-11696
1020e688:	02000284 	movi	r8,10
1020e68c:	2823883a 	mov	r17,r5
1020e690:	982f883a 	mov	r23,r19
1020e694:	d8805115 	stw	r2,324(sp)
1020e698:	da005015 	stw	r8,320(sp)
1020e69c:	058000c4 	movi	r22,3
1020e6a0:	003f7406 	br	1020e474 <__ssvfiscanf_r+0x4b0>
1020e6a4:	2823883a 	mov	r17,r5
1020e6a8:	84001014 	ori	r16,r16,64
1020e6ac:	982f883a 	mov	r23,r19
1020e6b0:	002d883a 	mov	r22,zero
1020e6b4:	003f6f06 	br	1020e474 <__ssvfiscanf_r+0x4b0>
1020e6b8:	d9000104 	addi	r4,sp,4
1020e6bc:	020b8b00 	call	1020b8b0 <__sccl>
1020e6c0:	1023883a 	mov	r17,r2
1020e6c4:	84001014 	ori	r16,r16,64
1020e6c8:	982f883a 	mov	r23,r19
1020e6cc:	05800044 	movi	r22,1
1020e6d0:	003f6806 	br	1020e474 <__ssvfiscanf_r+0x4b0>
1020e6d4:	2823883a 	mov	r17,r5
1020e6d8:	84008014 	ori	r16,r16,512
1020e6dc:	003fbf06 	br	1020e5dc <__ssvfiscanf_r+0x618>
1020e6e0:	2823883a 	mov	r17,r5
1020e6e4:	84000054 	ori	r16,r16,1
1020e6e8:	003fa706 	br	1020e588 <__ssvfiscanf_r+0x5c4>
1020e6ec:	88800043 	ldbu	r2,1(r17)
1020e6f0:	84000094 	ori	r16,r16,2
1020e6f4:	2823883a 	mov	r17,r5
1020e6f8:	10c03fcc 	andi	r3,r2,255
1020e6fc:	003e7d06 	br	1020e0f4 <__ssvfiscanf_r+0x130>
1020e700:	2823883a 	mov	r17,r5
1020e704:	84000054 	ori	r16,r16,1
1020e708:	02c40874 	movhi	r11,4129
1020e70c:	5af49404 	addi	r11,r11,-11696
1020e710:	02000284 	movi	r8,10
1020e714:	982f883a 	mov	r23,r19
1020e718:	dac05115 	stw	r11,324(sp)
1020e71c:	da005015 	stw	r8,320(sp)
1020e720:	058000c4 	movi	r22,3
1020e724:	003f5306 	br	1020e474 <__ssvfiscanf_r+0x4b0>
1020e728:	9cc002a4 	muli	r19,r19,10
1020e72c:	88800043 	ldbu	r2,1(r17)
1020e730:	2823883a 	mov	r17,r5
1020e734:	98e7883a 	add	r19,r19,r3
1020e738:	9cfff404 	addi	r19,r19,-48
1020e73c:	10c03fcc 	andi	r3,r2,255
1020e740:	003e6c06 	br	1020e0f4 <__ssvfiscanf_r+0x130>
1020e744:	88800043 	ldbu	r2,1(r17)
1020e748:	84000414 	ori	r16,r16,16
1020e74c:	2823883a 	mov	r17,r5
1020e750:	10c03fcc 	andi	r3,r2,255
1020e754:	003e6706 	br	1020e0f4 <__ssvfiscanf_r+0x130>
1020e758:	98bfffc4 	addi	r2,r19,-1
1020e75c:	01000984 	movi	r4,38
1020e760:	2081012e 	bgeu	r4,r2,1020eb68 <__ssvfiscanf_r+0xba4>
1020e764:	99fff644 	addi	r7,r19,-39
1020e768:	05c009c4 	movi	r23,39
1020e76c:	82036014 	ori	r8,r16,3456
1020e770:	0021883a 	mov	r16,zero
1020e774:	8813883a 	mov	r9,r17
1020e778:	8023883a 	mov	r17,r16
1020e77c:	dc005017 	ldw	r16,320(sp)
1020e780:	dd804104 	addi	r22,sp,260
1020e784:	00c01344 	movi	r3,77
1020e788:	02808004 	movi	r10,512
1020e78c:	01bf7fc4 	movi	r6,-513
1020e790:	04ffdfc4 	movi	r19,-129
1020e794:	a9000017 	ldw	r4,0(r21)
1020e798:	21400003 	ldbu	r5,0(r4)
1020e79c:	28bff544 	addi	r2,r5,-43
1020e7a0:	10803fcc 	andi	r2,r2,255
1020e7a4:	18806336 	bltu	r3,r2,1020e934 <__ssvfiscanf_r+0x970>
1020e7a8:	100490ba 	slli	r2,r2,2
1020e7ac:	02c40874 	movhi	r11,4129
1020e7b0:	5af9f004 	addi	r11,r11,-6208
1020e7b4:	12c5883a 	add	r2,r2,r11
1020e7b8:	10800017 	ldw	r2,0(r2)
1020e7bc:	1000683a 	jmp	r2
1020e7c0:	1020ea54 	ori	zero,r2,33705
1020e7c4:	1020e934 	orhi	zero,r2,33700
1020e7c8:	1020ea54 	ori	zero,r2,33705
1020e7cc:	1020e934 	orhi	zero,r2,33700
1020e7d0:	1020e934 	orhi	zero,r2,33700
1020e7d4:	1020e9cc 	andi	zero,r2,33703
1020e7d8:	1020e9ac 	andhi	zero,r2,33702
1020e7dc:	1020e9ac 	andhi	zero,r2,33702
1020e7e0:	1020e9ac 	andhi	zero,r2,33702
1020e7e4:	1020e9ac 	andhi	zero,r2,33702
1020e7e8:	1020e9ac 	andhi	zero,r2,33702
1020e7ec:	1020e9ac 	andhi	zero,r2,33702
1020e7f0:	1020e9ac 	andhi	zero,r2,33702
1020e7f4:	1020e98c 	andi	zero,r2,33702
1020e7f8:	1020e98c 	andi	zero,r2,33702
1020e7fc:	1020e934 	orhi	zero,r2,33700
1020e800:	1020e934 	orhi	zero,r2,33700
1020e804:	1020e934 	orhi	zero,r2,33700
1020e808:	1020e934 	orhi	zero,r2,33700
1020e80c:	1020e934 	orhi	zero,r2,33700
1020e810:	1020e934 	orhi	zero,r2,33700
1020e814:	1020e934 	orhi	zero,r2,33700
1020e818:	1020e978 	rdprs	zero,r2,-31835
1020e81c:	1020e978 	rdprs	zero,r2,-31835
1020e820:	1020e978 	rdprs	zero,r2,-31835
1020e824:	1020e978 	rdprs	zero,r2,-31835
1020e828:	1020e978 	rdprs	zero,r2,-31835
1020e82c:	1020e978 	rdprs	zero,r2,-31835
1020e830:	1020e934 	orhi	zero,r2,33700
1020e834:	1020e934 	orhi	zero,r2,33700
1020e838:	1020e934 	orhi	zero,r2,33700
1020e83c:	1020e934 	orhi	zero,r2,33700
1020e840:	1020e934 	orhi	zero,r2,33700
1020e844:	1020e934 	orhi	zero,r2,33700
1020e848:	1020e934 	orhi	zero,r2,33700
1020e84c:	1020e934 	orhi	zero,r2,33700
1020e850:	1020e934 	orhi	zero,r2,33700
1020e854:	1020e934 	orhi	zero,r2,33700
1020e858:	1020e934 	orhi	zero,r2,33700
1020e85c:	1020e934 	orhi	zero,r2,33700
1020e860:	1020e934 	orhi	zero,r2,33700
1020e864:	1020e934 	orhi	zero,r2,33700
1020e868:	1020e934 	orhi	zero,r2,33700
1020e86c:	1020e934 	orhi	zero,r2,33700
1020e870:	1020e934 	orhi	zero,r2,33700
1020e874:	1020e8f8 	rdprs	zero,r2,-31837
1020e878:	1020e934 	orhi	zero,r2,33700
1020e87c:	1020e934 	orhi	zero,r2,33700
1020e880:	1020e934 	orhi	zero,r2,33700
1020e884:	1020e934 	orhi	zero,r2,33700
1020e888:	1020e934 	orhi	zero,r2,33700
1020e88c:	1020e934 	orhi	zero,r2,33700
1020e890:	1020e934 	orhi	zero,r2,33700
1020e894:	1020e934 	orhi	zero,r2,33700
1020e898:	1020e978 	rdprs	zero,r2,-31835
1020e89c:	1020e978 	rdprs	zero,r2,-31835
1020e8a0:	1020e978 	rdprs	zero,r2,-31835
1020e8a4:	1020e978 	rdprs	zero,r2,-31835
1020e8a8:	1020e978 	rdprs	zero,r2,-31835
1020e8ac:	1020e978 	rdprs	zero,r2,-31835
1020e8b0:	1020e934 	orhi	zero,r2,33700
1020e8b4:	1020e934 	orhi	zero,r2,33700
1020e8b8:	1020e934 	orhi	zero,r2,33700
1020e8bc:	1020e934 	orhi	zero,r2,33700
1020e8c0:	1020e934 	orhi	zero,r2,33700
1020e8c4:	1020e934 	orhi	zero,r2,33700
1020e8c8:	1020e934 	orhi	zero,r2,33700
1020e8cc:	1020e934 	orhi	zero,r2,33700
1020e8d0:	1020e934 	orhi	zero,r2,33700
1020e8d4:	1020e934 	orhi	zero,r2,33700
1020e8d8:	1020e934 	orhi	zero,r2,33700
1020e8dc:	1020e934 	orhi	zero,r2,33700
1020e8e0:	1020e934 	orhi	zero,r2,33700
1020e8e4:	1020e934 	orhi	zero,r2,33700
1020e8e8:	1020e934 	orhi	zero,r2,33700
1020e8ec:	1020e934 	orhi	zero,r2,33700
1020e8f0:	1020e934 	orhi	zero,r2,33700
1020e8f4:	1020e8f8 	rdprs	zero,r2,-31837
1020e8f8:	4081800c 	andi	r2,r8,1536
1020e8fc:	12800d1e 	bne	r2,r10,1020e934 <__ssvfiscanf_r+0x970>
1020e900:	4190703a 	and	r8,r8,r6
1020e904:	42014014 	ori	r8,r8,1280
1020e908:	04000404 	movi	r16,16
1020e90c:	a8800117 	ldw	r2,4(r21)
1020e910:	b1400005 	stb	r5,0(r22)
1020e914:	b5800044 	addi	r22,r22,1
1020e918:	10bfffc4 	addi	r2,r2,-1
1020e91c:	a8800115 	stw	r2,4(r21)
1020e920:	00803b0e 	bge	zero,r2,1020ea10 <__ssvfiscanf_r+0xa4c>
1020e924:	21000044 	addi	r4,r4,1
1020e928:	a9000015 	stw	r4,0(r21)
1020e92c:	bdffffc4 	addi	r23,r23,-1
1020e930:	b83f981e 	bne	r23,zero,1020e794 <__ssvfiscanf_r+0x7d0>
1020e934:	dc005015 	stw	r16,320(sp)
1020e938:	4080400c 	andi	r2,r8,256
1020e93c:	8821883a 	mov	r16,r17
1020e940:	4823883a 	mov	r17,r9
1020e944:	10000426 	beq	r2,zero,1020e958 <__ssvfiscanf_r+0x994>
1020e948:	dac04e17 	ldw	r11,312(sp)
1020e94c:	5d816c36 	bltu	r11,r22,1020ef00 <__ssvfiscanf_r+0xf3c>
1020e950:	dac04e17 	ldw	r11,312(sp)
1020e954:	b2fdde26 	beq	r22,r11,1020e0d0 <__ssvfiscanf_r+0x10c>
1020e958:	4080040c 	andi	r2,r8,16
1020e95c:	1000ce26 	beq	r2,zero,1020ec98 <__ssvfiscanf_r+0xcd4>
1020e960:	dac04e17 	ldw	r11,312(sp)
1020e964:	880d883a 	mov	r6,r17
1020e968:	b2edc83a 	sub	r22,r22,r11
1020e96c:	b42d883a 	add	r22,r22,r16
1020e970:	e5b9883a 	add	fp,fp,r22
1020e974:	003dd206 	br	1020e0c0 <__ssvfiscanf_r+0xfc>
1020e978:	00800284 	movi	r2,10
1020e97c:	143fed0e 	bge	r2,r16,1020e934 <__ssvfiscanf_r+0x970>
1020e980:	00bd1fc4 	movi	r2,-2945
1020e984:	4090703a 	and	r8,r8,r2
1020e988:	003fe006 	br	1020e90c <__ssvfiscanf_r+0x948>
1020e98c:	02c408b4 	movhi	r11,4130
1020e990:	8421883a 	add	r16,r16,r16
1020e994:	5af53104 	addi	r11,r11,-11068
1020e998:	5c05883a 	add	r2,r11,r16
1020e99c:	1400000f 	ldh	r16,0(r2)
1020e9a0:	00800204 	movi	r2,8
1020e9a4:	143ff616 	blt	r2,r16,1020e980 <__ssvfiscanf_r+0x9bc>
1020e9a8:	003fe206 	br	1020e934 <__ssvfiscanf_r+0x970>
1020e9ac:	02c408b4 	movhi	r11,4130
1020e9b0:	8421883a 	add	r16,r16,r16
1020e9b4:	5af53104 	addi	r11,r11,-11068
1020e9b8:	5c05883a 	add	r2,r11,r16
1020e9bc:	1400000f 	ldh	r16,0(r2)
1020e9c0:	00bd1fc4 	movi	r2,-2945
1020e9c4:	4090703a 	and	r8,r8,r2
1020e9c8:	003fd006 	br	1020e90c <__ssvfiscanf_r+0x948>
1020e9cc:	4082000c 	andi	r2,r8,2048
1020e9d0:	103fce26 	beq	r2,zero,1020e90c <__ssvfiscanf_r+0x948>
1020e9d4:	8000021e 	bne	r16,zero,1020e9e0 <__ssvfiscanf_r+0xa1c>
1020e9d8:	42008014 	ori	r8,r8,512
1020e9dc:	04000204 	movi	r16,8
1020e9e0:	4081000c 	andi	r2,r8,1024
1020e9e4:	1000f31e 	bne	r2,zero,1020edb4 <__ssvfiscanf_r+0xdf0>
1020e9e8:	00bf1fc4 	movi	r2,-897
1020e9ec:	4090703a 	and	r8,r8,r2
1020e9f0:	38000226 	beq	r7,zero,1020e9fc <__ssvfiscanf_r+0xa38>
1020e9f4:	39ffffc4 	addi	r7,r7,-1
1020e9f8:	bdc00044 	addi	r23,r23,1
1020e9fc:	a8800117 	ldw	r2,4(r21)
1020ea00:	8c400044 	addi	r17,r17,1
1020ea04:	10bfffc4 	addi	r2,r2,-1
1020ea08:	a8800115 	stw	r2,4(r21)
1020ea0c:	00bfc516 	blt	zero,r2,1020e924 <__ssvfiscanf_r+0x960>
1020ea10:	9009883a 	mov	r4,r18
1020ea14:	a80b883a 	mov	r5,r21
1020ea18:	d8c05a15 	stw	r3,360(sp)
1020ea1c:	d9805715 	stw	r6,348(sp)
1020ea20:	d9c05815 	stw	r7,352(sp)
1020ea24:	da005b15 	stw	r8,364(sp)
1020ea28:	da405915 	stw	r9,356(sp)
1020ea2c:	da805615 	stw	r10,344(sp)
1020ea30:	020de600 	call	1020de60 <__ssrefill_r>
1020ea34:	d8c05a17 	ldw	r3,360(sp)
1020ea38:	d9805717 	ldw	r6,348(sp)
1020ea3c:	d9c05817 	ldw	r7,352(sp)
1020ea40:	da005b17 	ldw	r8,364(sp)
1020ea44:	da405917 	ldw	r9,356(sp)
1020ea48:	da805617 	ldw	r10,344(sp)
1020ea4c:	103fb726 	beq	r2,zero,1020e92c <__ssvfiscanf_r+0x968>
1020ea50:	003fb806 	br	1020e934 <__ssvfiscanf_r+0x970>
1020ea54:	4080200c 	andi	r2,r8,128
1020ea58:	103fb626 	beq	r2,zero,1020e934 <__ssvfiscanf_r+0x970>
1020ea5c:	44d0703a 	and	r8,r8,r19
1020ea60:	003faa06 	br	1020e90c <__ssvfiscanf_r+0x948>
1020ea64:	9800011e 	bne	r19,zero,1020ea6c <__ssvfiscanf_r+0xaa8>
1020ea68:	05ffffc4 	movi	r23,-1
1020ea6c:	8400040c 	andi	r16,r16,16
1020ea70:	80003f26 	beq	r16,zero,1020eb70 <__ssvfiscanf_r+0xbac>
1020ea74:	a9000017 	ldw	r4,0(r21)
1020ea78:	0027883a 	mov	r19,zero
1020ea7c:	20800003 	ldbu	r2,0(r4)
1020ea80:	dac00104 	addi	r11,sp,4
1020ea84:	5885883a 	add	r2,r11,r2
1020ea88:	10800007 	ldb	r2,0(r2)
1020ea8c:	10010426 	beq	r2,zero,1020eea0 <__ssvfiscanf_r+0xedc>
1020ea90:	a8800117 	ldw	r2,4(r21)
1020ea94:	21000044 	addi	r4,r4,1
1020ea98:	9cc00044 	addi	r19,r19,1
1020ea9c:	10bfffc4 	addi	r2,r2,-1
1020eaa0:	a8800115 	stw	r2,4(r21)
1020eaa4:	a9000015 	stw	r4,0(r21)
1020eaa8:	bcc02c26 	beq	r23,r19,1020eb5c <__ssvfiscanf_r+0xb98>
1020eaac:	00bff316 	blt	zero,r2,1020ea7c <__ssvfiscanf_r+0xab8>
1020eab0:	9009883a 	mov	r4,r18
1020eab4:	a80b883a 	mov	r5,r21
1020eab8:	020de600 	call	1020de60 <__ssrefill_r>
1020eabc:	1000271e 	bne	r2,zero,1020eb5c <__ssvfiscanf_r+0xb98>
1020eac0:	a9000017 	ldw	r4,0(r21)
1020eac4:	003fed06 	br	1020ea7c <__ssvfiscanf_r+0xab8>
1020eac8:	9800011e 	bne	r19,zero,1020ead0 <__ssvfiscanf_r+0xb0c>
1020eacc:	05ffffc4 	movi	r23,-1
1020ead0:	8080004c 	andi	r2,r16,1
1020ead4:	103e081e 	bne	r2,zero,1020e2f8 <__ssvfiscanf_r+0x334>
1020ead8:	8400040c 	andi	r16,r16,16
1020eadc:	80004526 	beq	r16,zero,1020ebf4 <__ssvfiscanf_r+0xc30>
1020eae0:	a1400017 	ldw	r5,0(r20)
1020eae4:	a9000017 	ldw	r4,0(r21)
1020eae8:	0021883a 	mov	r16,zero
1020eaec:	20800003 	ldbu	r2,0(r4)
1020eaf0:	2885883a 	add	r2,r5,r2
1020eaf4:	10800043 	ldbu	r2,1(r2)
1020eaf8:	1080020c 	andi	r2,r2,8
1020eafc:	103e801e 	bne	r2,zero,1020e500 <__ssvfiscanf_r+0x53c>
1020eb00:	a8800117 	ldw	r2,4(r21)
1020eb04:	21000044 	addi	r4,r4,1
1020eb08:	84000044 	addi	r16,r16,1
1020eb0c:	10bfffc4 	addi	r2,r2,-1
1020eb10:	a8800115 	stw	r2,4(r21)
1020eb14:	a9000015 	stw	r4,0(r21)
1020eb18:	bc3e7926 	beq	r23,r16,1020e500 <__ssvfiscanf_r+0x53c>
1020eb1c:	00bff316 	blt	zero,r2,1020eaec <__ssvfiscanf_r+0xb28>
1020eb20:	9009883a 	mov	r4,r18
1020eb24:	a80b883a 	mov	r5,r21
1020eb28:	020de600 	call	1020de60 <__ssrefill_r>
1020eb2c:	103e741e 	bne	r2,zero,1020e500 <__ssvfiscanf_r+0x53c>
1020eb30:	a1400017 	ldw	r5,0(r20)
1020eb34:	a9000017 	ldw	r4,0(r21)
1020eb38:	003fec06 	br	1020eaec <__ssvfiscanf_r+0xb28>
1020eb3c:	2809883a 	mov	r4,r5
1020eb40:	24e7c83a 	sub	r19,r4,r19
1020eb44:	983d6226 	beq	r19,zero,1020e0d0 <__ssvfiscanf_r+0x10c>
1020eb48:	da005317 	ldw	r8,332(sp)
1020eb4c:	20000005 	stb	zero,0(r4)
1020eb50:	dc004f15 	stw	r16,316(sp)
1020eb54:	42000044 	addi	r8,r8,1
1020eb58:	da005315 	stw	r8,332(sp)
1020eb5c:	e4f9883a 	add	fp,fp,r19
1020eb60:	880d883a 	mov	r6,r17
1020eb64:	003d5606 	br	1020e0c0 <__ssvfiscanf_r+0xfc>
1020eb68:	000f883a 	mov	r7,zero
1020eb6c:	003eff06 	br	1020e76c <__ssvfiscanf_r+0x7a8>
1020eb70:	da004f17 	ldw	r8,316(sp)
1020eb74:	b8ffffc4 	addi	r3,r23,-1
1020eb78:	44c00017 	ldw	r19,0(r8)
1020eb7c:	44000104 	addi	r16,r8,4
1020eb80:	980b883a 	mov	r5,r19
1020eb84:	98ef883a 	add	r23,r19,r3
1020eb88:	00000106 	br	1020eb90 <__ssvfiscanf_r+0xbcc>
1020eb8c:	b00b883a 	mov	r5,r22
1020eb90:	a8c00017 	ldw	r3,0(r21)
1020eb94:	dac00104 	addi	r11,sp,4
1020eb98:	280d883a 	mov	r6,r5
1020eb9c:	18800003 	ldbu	r2,0(r3)
1020eba0:	5885883a 	add	r2,r11,r2
1020eba4:	10800007 	ldb	r2,0(r2)
1020eba8:	103fe426 	beq	r2,zero,1020eb3c <__ssvfiscanf_r+0xb78>
1020ebac:	a8800117 	ldw	r2,4(r21)
1020ebb0:	19c00044 	addi	r7,r3,1
1020ebb4:	a9c00015 	stw	r7,0(r21)
1020ebb8:	10bfffc4 	addi	r2,r2,-1
1020ebbc:	a8800115 	stw	r2,4(r21)
1020ebc0:	18800003 	ldbu	r2,0(r3)
1020ebc4:	35800044 	addi	r22,r6,1
1020ebc8:	28800005 	stb	r2,0(r5)
1020ebcc:	35c0b926 	beq	r6,r23,1020eeb4 <__ssvfiscanf_r+0xef0>
1020ebd0:	a8800117 	ldw	r2,4(r21)
1020ebd4:	00bfed16 	blt	zero,r2,1020eb8c <__ssvfiscanf_r+0xbc8>
1020ebd8:	9009883a 	mov	r4,r18
1020ebdc:	a80b883a 	mov	r5,r21
1020ebe0:	020de600 	call	1020de60 <__ssrefill_r>
1020ebe4:	103fe926 	beq	r2,zero,1020eb8c <__ssvfiscanf_r+0xbc8>
1020ebe8:	b009883a 	mov	r4,r22
1020ebec:	9dbfd41e 	bne	r19,r22,1020eb40 <__ssvfiscanf_r+0xb7c>
1020ebf0:	003df706 	br	1020e3d0 <__ssvfiscanf_r+0x40c>
1020ebf4:	da004f17 	ldw	r8,316(sp)
1020ebf8:	b8ffffc4 	addi	r3,r23,-1
1020ebfc:	44c00017 	ldw	r19,0(r8)
1020ec00:	44000104 	addi	r16,r8,4
1020ec04:	980d883a 	mov	r6,r19
1020ec08:	98ed883a 	add	r22,r19,r3
1020ec0c:	00000106 	br	1020ec14 <__ssvfiscanf_r+0xc50>
1020ec10:	b80d883a 	mov	r6,r23
1020ec14:	a8c00017 	ldw	r3,0(r21)
1020ec18:	a1c00017 	ldw	r7,0(r20)
1020ec1c:	300b883a 	mov	r5,r6
1020ec20:	18800003 	ldbu	r2,0(r3)
1020ec24:	3885883a 	add	r2,r7,r2
1020ec28:	10800043 	ldbu	r2,1(r2)
1020ec2c:	1080020c 	andi	r2,r2,8
1020ec30:	1000101e 	bne	r2,zero,1020ec74 <__ssvfiscanf_r+0xcb0>
1020ec34:	a8800117 	ldw	r2,4(r21)
1020ec38:	19c00044 	addi	r7,r3,1
1020ec3c:	a9c00015 	stw	r7,0(r21)
1020ec40:	10bfffc4 	addi	r2,r2,-1
1020ec44:	a8800115 	stw	r2,4(r21)
1020ec48:	18800003 	ldbu	r2,0(r3)
1020ec4c:	2dc00044 	addi	r23,r5,1
1020ec50:	30800005 	stb	r2,0(r6)
1020ec54:	2d800626 	beq	r5,r22,1020ec70 <__ssvfiscanf_r+0xcac>
1020ec58:	a8800117 	ldw	r2,4(r21)
1020ec5c:	00bfec16 	blt	zero,r2,1020ec10 <__ssvfiscanf_r+0xc4c>
1020ec60:	9009883a 	mov	r4,r18
1020ec64:	a80b883a 	mov	r5,r21
1020ec68:	020de600 	call	1020de60 <__ssrefill_r>
1020ec6c:	103fe826 	beq	r2,zero,1020ec10 <__ssvfiscanf_r+0xc4c>
1020ec70:	b80b883a 	mov	r5,r23
1020ec74:	dac05317 	ldw	r11,332(sp)
1020ec78:	2ce7c83a 	sub	r19,r5,r19
1020ec7c:	28000005 	stb	zero,0(r5)
1020ec80:	5ac00044 	addi	r11,r11,1
1020ec84:	e4f9883a 	add	fp,fp,r19
1020ec88:	dac05315 	stw	r11,332(sp)
1020ec8c:	dc004f15 	stw	r16,316(sp)
1020ec90:	880d883a 	mov	r6,r17
1020ec94:	003d0a06 	br	1020e0c0 <__ssvfiscanf_r+0xfc>
1020ec98:	d9c05017 	ldw	r7,320(sp)
1020ec9c:	dac05117 	ldw	r11,324(sp)
1020eca0:	b0000005 	stb	zero,0(r22)
1020eca4:	da005b15 	stw	r8,364(sp)
1020eca8:	9009883a 	mov	r4,r18
1020ecac:	d9404104 	addi	r5,sp,260
1020ecb0:	000d883a 	mov	r6,zero
1020ecb4:	583ee83a 	callr	r11
1020ecb8:	da005b17 	ldw	r8,364(sp)
1020ecbc:	40c0080c 	andi	r3,r8,32
1020ecc0:	18004126 	beq	r3,zero,1020edc8 <__ssvfiscanf_r+0xe04>
1020ecc4:	da004f17 	ldw	r8,316(sp)
1020ecc8:	40c00017 	ldw	r3,0(r8)
1020eccc:	42000104 	addi	r8,r8,4
1020ecd0:	da004f15 	stw	r8,316(sp)
1020ecd4:	18800015 	stw	r2,0(r3)
1020ecd8:	da005317 	ldw	r8,332(sp)
1020ecdc:	42000044 	addi	r8,r8,1
1020ece0:	da005315 	stw	r8,332(sp)
1020ece4:	003f1e06 	br	1020e960 <__ssvfiscanf_r+0x99c>
1020ece8:	dac04b04 	addi	r11,sp,300
1020ecec:	8400040c 	andi	r16,r16,16
1020ecf0:	5809883a 	mov	r4,r11
1020ecf4:	000b883a 	mov	r5,zero
1020ecf8:	01800204 	movi	r6,8
1020ecfc:	dc005415 	stw	r16,336(sp)
1020ed00:	dac05215 	stw	r11,328(sp)
1020ed04:	0209e580 	call	10209e58 <memset>
1020ed08:	dc005417 	ldw	r16,336(sp)
1020ed0c:	80004226 	beq	r16,zero,1020ee18 <__ssvfiscanf_r+0xe54>
1020ed10:	002d883a 	mov	r22,zero
1020ed14:	dc005417 	ldw	r16,336(sp)
1020ed18:	0027883a 	mov	r19,zero
1020ed1c:	dc405515 	stw	r17,340(sp)
1020ed20:	02097840 	call	10209784 <__locale_mb_cur_max>
1020ed24:	14fdaa26 	beq	r2,r19,1020e3d0 <__ssvfiscanf_r+0x40c>
1020ed28:	a8800017 	ldw	r2,0(r21)
1020ed2c:	a9000117 	ldw	r4,4(r21)
1020ed30:	d8c05217 	ldw	r3,328(sp)
1020ed34:	12400003 	ldbu	r9,0(r2)
1020ed38:	213fffc4 	addi	r4,r4,-1
1020ed3c:	10800044 	addi	r2,r2,1
1020ed40:	dac04104 	addi	r11,sp,260
1020ed44:	a9000115 	stw	r4,4(r21)
1020ed48:	a8800015 	stw	r2,0(r21)
1020ed4c:	9c400044 	addi	r17,r19,1
1020ed50:	d8c00015 	stw	r3,0(sp)
1020ed54:	5ce7883a 	add	r19,r11,r19
1020ed58:	9009883a 	mov	r4,r18
1020ed5c:	b00b883a 	mov	r5,r22
1020ed60:	580d883a 	mov	r6,r11
1020ed64:	880f883a 	mov	r7,r17
1020ed68:	9a400005 	stb	r9,0(r19)
1020ed6c:	02099f00 	call	102099f0 <_mbrtowc_r>
1020ed70:	013fffc4 	movi	r4,-1
1020ed74:	113d9626 	beq	r2,r4,1020e3d0 <__ssvfiscanf_r+0x40c>
1020ed78:	1000431e 	bne	r2,zero,1020ee88 <__ssvfiscanf_r+0xec4>
1020ed7c:	8000011e 	bne	r16,zero,1020ed84 <__ssvfiscanf_r+0xdc0>
1020ed80:	b0000015 	stw	zero,0(r22)
1020ed84:	e479883a 	add	fp,fp,r17
1020ed88:	bdffffc4 	addi	r23,r23,-1
1020ed8c:	8000421e 	bne	r16,zero,1020ee98 <__ssvfiscanf_r+0xed4>
1020ed90:	b5800104 	addi	r22,r22,4
1020ed94:	0027883a 	mov	r19,zero
1020ed98:	a8800117 	ldw	r2,4(r21)
1020ed9c:	0080120e 	bge	zero,r2,1020ede8 <__ssvfiscanf_r+0xe24>
1020eda0:	b83fdf1e 	bne	r23,zero,1020ed20 <__ssvfiscanf_r+0xd5c>
1020eda4:	dc405517 	ldw	r17,340(sp)
1020eda8:	da005417 	ldw	r8,336(sp)
1020edac:	40003126 	beq	r8,zero,1020ee74 <__ssvfiscanf_r+0xeb0>
1020edb0:	003cc206 	br	1020e0bc <__ssvfiscanf_r+0xf8>
1020edb4:	00be9fc4 	movi	r2,-1409
1020edb8:	4090703a 	and	r8,r8,r2
1020edbc:	003ed306 	br	1020e90c <__ssvfiscanf_r+0x948>
1020edc0:	4005883a 	mov	r2,r8
1020edc4:	003d8806 	br	1020e3e8 <__ssvfiscanf_r+0x424>
1020edc8:	40c0010c 	andi	r3,r8,4
1020edcc:	18007226 	beq	r3,zero,1020ef98 <__ssvfiscanf_r+0xfd4>
1020edd0:	dac04f17 	ldw	r11,316(sp)
1020edd4:	58c00017 	ldw	r3,0(r11)
1020edd8:	5ac00104 	addi	r11,r11,4
1020eddc:	dac04f15 	stw	r11,316(sp)
1020ede0:	1880000d 	sth	r2,0(r3)
1020ede4:	003fbc06 	br	1020ecd8 <__ssvfiscanf_r+0xd14>
1020ede8:	9009883a 	mov	r4,r18
1020edec:	a80b883a 	mov	r5,r21
1020edf0:	020de600 	call	1020de60 <__ssrefill_r>
1020edf4:	103fea26 	beq	r2,zero,1020eda0 <__ssvfiscanf_r+0xddc>
1020edf8:	dc405517 	ldw	r17,340(sp)
1020edfc:	983fea26 	beq	r19,zero,1020eda8 <__ssvfiscanf_r+0xde4>
1020ee00:	003d7306 	br	1020e3d0 <__ssvfiscanf_r+0x40c>
1020ee04:	da004f17 	ldw	r8,316(sp)
1020ee08:	45800017 	ldw	r22,0(r8)
1020ee0c:	42000104 	addi	r8,r8,4
1020ee10:	da004f15 	stw	r8,316(sp)
1020ee14:	003d4106 	br	1020e31c <__ssvfiscanf_r+0x358>
1020ee18:	da004f17 	ldw	r8,316(sp)
1020ee1c:	45800017 	ldw	r22,0(r8)
1020ee20:	42000104 	addi	r8,r8,4
1020ee24:	da004f15 	stw	r8,316(sp)
1020ee28:	003fba06 	br	1020ed14 <__ssvfiscanf_r+0xd50>
1020ee2c:	b0000015 	stw	zero,0(r22)
1020ee30:	0009883a 	mov	r4,zero
1020ee34:	d8c05a15 	stw	r3,360(sp)
1020ee38:	02096cc0 	call	102096cc <iswspace>
1020ee3c:	d8c05a17 	ldw	r3,360(sp)
1020ee40:	10006f26 	beq	r2,zero,1020f000 <__ssvfiscanf_r+0x103c>
1020ee44:	1827883a 	mov	r19,r3
1020ee48:	18000826 	beq	r3,zero,1020ee6c <__ssvfiscanf_r+0xea8>
1020ee4c:	9cffffc4 	addi	r19,r19,-1
1020ee50:	da004104 	addi	r8,sp,260
1020ee54:	44c5883a 	add	r2,r8,r19
1020ee58:	11400003 	ldbu	r5,0(r2)
1020ee5c:	9009883a 	mov	r4,r18
1020ee60:	a80d883a 	mov	r6,r21
1020ee64:	020dd680 	call	1020dd68 <_sungetc_r>
1020ee68:	983ff81e 	bne	r19,zero,1020ee4c <__ssvfiscanf_r+0xe88>
1020ee6c:	803c931e 	bne	r16,zero,1020e0bc <__ssvfiscanf_r+0xf8>
1020ee70:	b0000015 	stw	zero,0(r22)
1020ee74:	dac05317 	ldw	r11,332(sp)
1020ee78:	880d883a 	mov	r6,r17
1020ee7c:	5ac00044 	addi	r11,r11,1
1020ee80:	dac05315 	stw	r11,332(sp)
1020ee84:	003c8e06 	br	1020e0c0 <__ssvfiscanf_r+0xfc>
1020ee88:	017fff84 	movi	r5,-2
1020ee8c:	117fbd1e 	bne	r2,r5,1020ed84 <__ssvfiscanf_r+0xdc0>
1020ee90:	8827883a 	mov	r19,r17
1020ee94:	003fc006 	br	1020ed98 <__ssvfiscanf_r+0xdd4>
1020ee98:	0027883a 	mov	r19,zero
1020ee9c:	003fbe06 	br	1020ed98 <__ssvfiscanf_r+0xdd4>
1020eea0:	983c8b26 	beq	r19,zero,1020e0d0 <__ssvfiscanf_r+0x10c>
1020eea4:	e4f9883a 	add	fp,fp,r19
1020eea8:	003f2d06 	br	1020eb60 <__ssvfiscanf_r+0xb9c>
1020eeac:	803d941e 	bne	r16,zero,1020e500 <__ssvfiscanf_r+0x53c>
1020eeb0:	003d4706 	br	1020e3d0 <__ssvfiscanf_r+0x40c>
1020eeb4:	b009883a 	mov	r4,r22
1020eeb8:	003f2106 	br	1020eb40 <__ssvfiscanf_r+0xb7c>
1020eebc:	da004f17 	ldw	r8,316(sp)
1020eec0:	dd400015 	stw	r21,0(sp)
1020eec4:	9009883a 	mov	r4,r18
1020eec8:	41400017 	ldw	r5,0(r8)
1020eecc:	01800044 	movi	r6,1
1020eed0:	b80f883a 	mov	r7,r23
1020eed4:	020ded00 	call	1020ded0 <_sfread_r>
1020eed8:	dac04f17 	ldw	r11,316(sp)
1020eedc:	58c00104 	addi	r3,r11,4
1020eee0:	103d3b26 	beq	r2,zero,1020e3d0 <__ssvfiscanf_r+0x40c>
1020eee4:	da005317 	ldw	r8,332(sp)
1020eee8:	1739883a 	add	fp,r2,fp
1020eeec:	d8c04f15 	stw	r3,316(sp)
1020eef0:	42000044 	addi	r8,r8,1
1020eef4:	da005315 	stw	r8,332(sp)
1020eef8:	880d883a 	mov	r6,r17
1020eefc:	003c7006 	br	1020e0c0 <__ssvfiscanf_r+0xfc>
1020ef00:	b17fffc7 	ldb	r5,-1(r22)
1020ef04:	9009883a 	mov	r4,r18
1020ef08:	a80d883a 	mov	r6,r21
1020ef0c:	da005b15 	stw	r8,364(sp)
1020ef10:	020dd680 	call	1020dd68 <_sungetc_r>
1020ef14:	b5bfffc4 	addi	r22,r22,-1
1020ef18:	da005b17 	ldw	r8,364(sp)
1020ef1c:	003e8c06 	br	1020e950 <__ssvfiscanf_r+0x98c>
1020ef20:	9009883a 	mov	r4,r18
1020ef24:	a80b883a 	mov	r5,r21
1020ef28:	020de600 	call	1020de60 <__ssrefill_r>
1020ef2c:	103d3d26 	beq	r2,zero,1020e424 <__ssvfiscanf_r+0x460>
1020ef30:	003d2706 	br	1020e3d0 <__ssvfiscanf_r+0x40c>
1020ef34:	88800083 	ldbu	r2,2(r17)
1020ef38:	84000094 	ori	r16,r16,2
1020ef3c:	8c400084 	addi	r17,r17,2
1020ef40:	10c03fcc 	andi	r3,r2,255
1020ef44:	003c6b06 	br	1020e0f4 <__ssvfiscanf_r+0x130>
1020ef48:	80e0b03a 	or	r16,r16,r3
1020ef4c:	003dee06 	br	1020e708 <__ssvfiscanf_r+0x744>
1020ef50:	8080004c 	andi	r2,r16,1
1020ef54:	10000a1e 	bne	r2,zero,1020ef80 <__ssvfiscanf_r+0xfbc>
1020ef58:	8400008c 	andi	r16,r16,2
1020ef5c:	80000826 	beq	r16,zero,1020ef80 <__ssvfiscanf_r+0xfbc>
1020ef60:	dac04f17 	ldw	r11,316(sp)
1020ef64:	e007d7fa 	srai	r3,fp,31
1020ef68:	58800017 	ldw	r2,0(r11)
1020ef6c:	5ac00104 	addi	r11,r11,4
1020ef70:	dac04f15 	stw	r11,316(sp)
1020ef74:	17000015 	stw	fp,0(r2)
1020ef78:	10c00115 	stw	r3,4(r2)
1020ef7c:	003c4f06 	br	1020e0bc <__ssvfiscanf_r+0xf8>
1020ef80:	da004f17 	ldw	r8,316(sp)
1020ef84:	40800017 	ldw	r2,0(r8)
1020ef88:	42000104 	addi	r8,r8,4
1020ef8c:	da004f15 	stw	r8,316(sp)
1020ef90:	17000015 	stw	fp,0(r2)
1020ef94:	003c4906 	br	1020e0bc <__ssvfiscanf_r+0xf8>
1020ef98:	40c0004c 	andi	r3,r8,1
1020ef9c:	183f491e 	bne	r3,zero,1020ecc4 <__ssvfiscanf_r+0xd00>
1020efa0:	45c0008c 	andi	r23,r8,2
1020efa4:	b8001026 	beq	r23,zero,1020efe8 <__ssvfiscanf_r+0x1024>
1020efa8:	dac05117 	ldw	r11,324(sp)
1020efac:	00840874 	movhi	r2,4129
1020efb0:	10b5ea04 	addi	r2,r2,-10328
1020efb4:	9009883a 	mov	r4,r18
1020efb8:	d9404104 	addi	r5,sp,260
1020efbc:	000d883a 	mov	r6,zero
1020efc0:	d9c05017 	ldw	r7,320(sp)
1020efc4:	58801826 	beq	r11,r2,1020f028 <__ssvfiscanf_r+0x1064>
1020efc8:	020d4b40 	call	1020d4b4 <_strtoll_r>
1020efcc:	da004f17 	ldw	r8,316(sp)
1020efd0:	41000017 	ldw	r4,0(r8)
1020efd4:	42000104 	addi	r8,r8,4
1020efd8:	da004f15 	stw	r8,316(sp)
1020efdc:	20800015 	stw	r2,0(r4)
1020efe0:	20c00115 	stw	r3,4(r4)
1020efe4:	003f3c06 	br	1020ecd8 <__ssvfiscanf_r+0xd14>
1020efe8:	dac04f17 	ldw	r11,316(sp)
1020efec:	58c00017 	ldw	r3,0(r11)
1020eff0:	5ac00104 	addi	r11,r11,4
1020eff4:	dac04f15 	stw	r11,316(sp)
1020eff8:	18800015 	stw	r2,0(r3)
1020effc:	003f3606 	br	1020ecd8 <__ssvfiscanf_r+0xd14>
1020f000:	e0f9883a 	add	fp,fp,r3
1020f004:	bdffffc4 	addi	r23,r23,-1
1020f008:	8000031e 	bne	r16,zero,1020f018 <__ssvfiscanf_r+0x1054>
1020f00c:	b5800104 	addi	r22,r22,4
1020f010:	0027883a 	mov	r19,zero
1020f014:	003ce706 	br	1020e3b4 <__ssvfiscanf_r+0x3f0>
1020f018:	0027883a 	mov	r19,zero
1020f01c:	003ce506 	br	1020e3b4 <__ssvfiscanf_r+0x3f0>
1020f020:	b1000017 	ldw	r4,0(r22)
1020f024:	003f8306 	br	1020ee34 <__ssvfiscanf_r+0xe70>
1020f028:	020da340 	call	1020da34 <_strtoull_r>
1020f02c:	003fe706 	br	1020efcc <__ssvfiscanf_r+0x1008>

1020f030 <___svfprintf_internal_r>:
1020f030:	deffb504 	addi	sp,sp,-300
1020f034:	dfc04a15 	stw	ra,296(sp)
1020f038:	ddc04815 	stw	r23,288(sp)
1020f03c:	d9002f15 	stw	r4,188(sp)
1020f040:	282f883a 	mov	r23,r5
1020f044:	d9802915 	stw	r6,164(sp)
1020f048:	d9c02d15 	stw	r7,180(sp)
1020f04c:	df004915 	stw	fp,292(sp)
1020f050:	dd804715 	stw	r22,284(sp)
1020f054:	dd404615 	stw	r21,280(sp)
1020f058:	dd004515 	stw	r20,276(sp)
1020f05c:	dcc04415 	stw	r19,272(sp)
1020f060:	dc804315 	stw	r18,268(sp)
1020f064:	dc404215 	stw	r17,264(sp)
1020f068:	dc004115 	stw	r16,260(sp)
1020f06c:	02097a80 	call	102097a8 <_localeconv_r>
1020f070:	10800017 	ldw	r2,0(r2)
1020f074:	1009883a 	mov	r4,r2
1020f078:	d8803515 	stw	r2,212(sp)
1020f07c:	02033500 	call	10203350 <strlen>
1020f080:	d8803915 	stw	r2,228(sp)
1020f084:	b880030b 	ldhu	r2,12(r23)
1020f088:	1080200c 	andi	r2,r2,128
1020f08c:	10000226 	beq	r2,zero,1020f098 <___svfprintf_internal_r+0x68>
1020f090:	b8800417 	ldw	r2,16(r23)
1020f094:	10065f26 	beq	r2,zero,10210a14 <___svfprintf_internal_r+0x19e4>
1020f098:	db001dc4 	addi	r12,sp,119
1020f09c:	dd801e04 	addi	r22,sp,120
1020f0a0:	d8800404 	addi	r2,sp,16
1020f0a4:	050408b4 	movhi	r20,4130
1020f0a8:	b317c83a 	sub	r11,r22,r12
1020f0ac:	a5353984 	addi	r20,r20,-11034
1020f0b0:	db002815 	stw	r12,160(sp)
1020f0b4:	d8801e15 	stw	r2,120(sp)
1020f0b8:	d8002015 	stw	zero,128(sp)
1020f0bc:	d8001f15 	stw	zero,124(sp)
1020f0c0:	d8003315 	stw	zero,204(sp)
1020f0c4:	d8003715 	stw	zero,220(sp)
1020f0c8:	d8003815 	stw	zero,224(sp)
1020f0cc:	1011883a 	mov	r8,r2
1020f0d0:	d8003b15 	stw	zero,236(sp)
1020f0d4:	d8003a15 	stw	zero,232(sp)
1020f0d8:	d8003015 	stw	zero,192(sp)
1020f0dc:	dac03d15 	stw	r11,244(sp)
1020f0e0:	db002917 	ldw	r12,164(sp)
1020f0e4:	60800007 	ldb	r2,0(r12)
1020f0e8:	1000ab26 	beq	r2,zero,1020f398 <___svfprintf_internal_r+0x368>
1020f0ec:	00c00944 	movi	r3,37
1020f0f0:	10c0a926 	beq	r2,r3,1020f398 <___svfprintf_internal_r+0x368>
1020f0f4:	6021883a 	mov	r16,r12
1020f0f8:	00000106 	br	1020f100 <___svfprintf_internal_r+0xd0>
1020f0fc:	10c08426 	beq	r2,r3,1020f310 <___svfprintf_internal_r+0x2e0>
1020f100:	84000044 	addi	r16,r16,1
1020f104:	80800007 	ldb	r2,0(r16)
1020f108:	103ffc1e 	bne	r2,zero,1020f0fc <___svfprintf_internal_r+0xcc>
1020f10c:	dac02917 	ldw	r11,164(sp)
1020f110:	82e3c83a 	sub	r17,r16,r11
1020f114:	88000f26 	beq	r17,zero,1020f154 <___svfprintf_internal_r+0x124>
1020f118:	d8c02017 	ldw	r3,128(sp)
1020f11c:	d8801f17 	ldw	r2,124(sp)
1020f120:	dac02917 	ldw	r11,164(sp)
1020f124:	1c47883a 	add	r3,r3,r17
1020f128:	10800044 	addi	r2,r2,1
1020f12c:	d8c02015 	stw	r3,128(sp)
1020f130:	42c00015 	stw	r11,0(r8)
1020f134:	44400115 	stw	r17,4(r8)
1020f138:	d8801f15 	stw	r2,124(sp)
1020f13c:	00c001c4 	movi	r3,7
1020f140:	18807616 	blt	r3,r2,1020f31c <___svfprintf_internal_r+0x2ec>
1020f144:	42000204 	addi	r8,r8,8
1020f148:	db003017 	ldw	r12,192(sp)
1020f14c:	6459883a 	add	r12,r12,r17
1020f150:	db003015 	stw	r12,192(sp)
1020f154:	80800007 	ldb	r2,0(r16)
1020f158:	10007726 	beq	r2,zero,1020f338 <___svfprintf_internal_r+0x308>
1020f15c:	80800044 	addi	r2,r16,1
1020f160:	84000047 	ldb	r16,1(r16)
1020f164:	d8002785 	stb	zero,158(sp)
1020f168:	000d883a 	mov	r6,zero
1020f16c:	027fffc4 	movi	r9,-1
1020f170:	d8002e15 	stw	zero,184(sp)
1020f174:	0023883a 	mov	r17,zero
1020f178:	01001604 	movi	r4,88
1020f17c:	01400244 	movi	r5,9
1020f180:	02800a84 	movi	r10,42
1020f184:	01c01b04 	movi	r7,108
1020f188:	10c00044 	addi	r3,r2,1
1020f18c:	80bff804 	addi	r2,r16,-32
1020f190:	2082e636 	bltu	r4,r2,1020fd2c <___svfprintf_internal_r+0xcfc>
1020f194:	100490ba 	slli	r2,r2,2
1020f198:	02c40874 	movhi	r11,4129
1020f19c:	5afc6b04 	addi	r11,r11,-3668
1020f1a0:	12c5883a 	add	r2,r2,r11
1020f1a4:	10800017 	ldw	r2,0(r2)
1020f1a8:	1000683a 	jmp	r2
1020f1ac:	1020fb0c 	andi	zero,r2,33772
1020f1b0:	1020fd2c 	andhi	zero,r2,33780
1020f1b4:	1020fd2c 	andhi	zero,r2,33780
1020f1b8:	1020fb2c 	andhi	zero,r2,33772
1020f1bc:	1020fd2c 	andhi	zero,r2,33780
1020f1c0:	1020fd2c 	andhi	zero,r2,33780
1020f1c4:	1020fd2c 	andhi	zero,r2,33780
1020f1c8:	1020fd2c 	andhi	zero,r2,33780
1020f1cc:	1020fd2c 	andhi	zero,r2,33780
1020f1d0:	1020fd2c 	andhi	zero,r2,33780
1020f1d4:	1020fb3c 	xorhi	zero,r2,33772
1020f1d8:	1020fb68 	cmpgeui	zero,r2,33773
1020f1dc:	1020fd2c 	andhi	zero,r2,33780
1020f1e0:	1020f3a0 	cmpeqi	zero,r2,-31794
1020f1e4:	1020f3b0 	cmpltui	zero,r2,33742
1020f1e8:	1020fd2c 	andhi	zero,r2,33780
1020f1ec:	1020f3f0 	cmpltui	zero,r2,33743
1020f1f0:	1020f9d0 	cmplti	zero,r2,-31769
1020f1f4:	1020f9d0 	cmplti	zero,r2,-31769
1020f1f8:	1020f9d0 	cmplti	zero,r2,-31769
1020f1fc:	1020f9d0 	cmplti	zero,r2,-31769
1020f200:	1020f9d0 	cmplti	zero,r2,-31769
1020f204:	1020f9d0 	cmplti	zero,r2,-31769
1020f208:	1020f9d0 	cmplti	zero,r2,-31769
1020f20c:	1020f9d0 	cmplti	zero,r2,-31769
1020f210:	1020f9d0 	cmplti	zero,r2,-31769
1020f214:	1020fd2c 	andhi	zero,r2,33780
1020f218:	1020fd2c 	andhi	zero,r2,33780
1020f21c:	1020fd2c 	andhi	zero,r2,33780
1020f220:	1020fd2c 	andhi	zero,r2,33780
1020f224:	1020fd2c 	andhi	zero,r2,33780
1020f228:	1020fd2c 	andhi	zero,r2,33780
1020f22c:	1020fd2c 	andhi	zero,r2,33780
1020f230:	1020fd2c 	andhi	zero,r2,33780
1020f234:	1020fd2c 	andhi	zero,r2,33780
1020f238:	1020fd2c 	andhi	zero,r2,33780
1020f23c:	1020f400 	call	11020f40 <__ram_exceptions_end+0xc18d00>
1020f240:	1020f880 	call	11020f88 <__ram_exceptions_end+0xc18d48>
1020f244:	1020fd2c 	andhi	zero,r2,33780
1020f248:	1020f880 	call	11020f88 <__ram_exceptions_end+0xc18d48>
1020f24c:	1020fd2c 	andhi	zero,r2,33780
1020f250:	1020fd2c 	andhi	zero,r2,33780
1020f254:	1020fd2c 	andhi	zero,r2,33780
1020f258:	1020fd2c 	andhi	zero,r2,33780
1020f25c:	1020f924 	muli	zero,r2,-31772
1020f260:	1020fd2c 	andhi	zero,r2,33780
1020f264:	1020fd2c 	andhi	zero,r2,33780
1020f268:	1020fcc0 	call	11020fcc <__ram_exceptions_end+0xc18d8c>
1020f26c:	1020fd2c 	andhi	zero,r2,33780
1020f270:	1020fd2c 	andhi	zero,r2,33780
1020f274:	1020fd2c 	andhi	zero,r2,33780
1020f278:	1020fd2c 	andhi	zero,r2,33780
1020f27c:	1020fd2c 	andhi	zero,r2,33780
1020f280:	1020f934 	orhi	zero,r2,33764
1020f284:	1020fd2c 	andhi	zero,r2,33780
1020f288:	1020fd2c 	andhi	zero,r2,33780
1020f28c:	1020f974 	orhi	zero,r2,33765
1020f290:	1020fd2c 	andhi	zero,r2,33780
1020f294:	1020fd2c 	andhi	zero,r2,33780
1020f298:	1020fd2c 	andhi	zero,r2,33780
1020f29c:	1020fd2c 	andhi	zero,r2,33780
1020f2a0:	1020fd2c 	andhi	zero,r2,33780
1020f2a4:	1020fd2c 	andhi	zero,r2,33780
1020f2a8:	1020fd2c 	andhi	zero,r2,33780
1020f2ac:	1020fd2c 	andhi	zero,r2,33780
1020f2b0:	1020fd2c 	andhi	zero,r2,33780
1020f2b4:	1020fd2c 	andhi	zero,r2,33780
1020f2b8:	1020fc18 	cmpnei	zero,r2,-31760
1020f2bc:	1020fc58 	cmpnei	zero,r2,-31759
1020f2c0:	1020f880 	call	11020f88 <__ram_exceptions_end+0xc18d48>
1020f2c4:	1020f880 	call	11020f88 <__ram_exceptions_end+0xc18d48>
1020f2c8:	1020f880 	call	11020f88 <__ram_exceptions_end+0xc18d48>
1020f2cc:	1020fb78 	rdprs	zero,r2,-31763
1020f2d0:	1020fc58 	cmpnei	zero,r2,-31759
1020f2d4:	1020fd2c 	andhi	zero,r2,33780
1020f2d8:	1020fd2c 	andhi	zero,r2,33780
1020f2dc:	1020fb88 	cmpgei	zero,r2,-31762
1020f2e0:	1020fd2c 	andhi	zero,r2,33780
1020f2e4:	1020fb9c 	xori	zero,r2,33774
1020f2e8:	1020fcf0 	cmpltui	zero,r2,33779
1020f2ec:	1020fbd0 	cmplti	zero,r2,-31761
1020f2f0:	1020fa04 	addi	zero,r2,-31768
1020f2f4:	1020fd2c 	andhi	zero,r2,33780
1020f2f8:	1020fa14 	ori	zero,r2,33768
1020f2fc:	1020fd2c 	andhi	zero,r2,33780
1020f300:	1020fa8c 	andi	zero,r2,33770
1020f304:	1020fd2c 	andhi	zero,r2,33780
1020f308:	1020fd2c 	andhi	zero,r2,33780
1020f30c:	1020facc 	andi	zero,r2,33771
1020f310:	db002917 	ldw	r12,164(sp)
1020f314:	8323c83a 	sub	r17,r16,r12
1020f318:	003f7e06 	br	1020f114 <___svfprintf_internal_r+0xe4>
1020f31c:	d9002f17 	ldw	r4,188(sp)
1020f320:	b80b883a 	mov	r5,r23
1020f324:	b00d883a 	mov	r6,r22
1020f328:	02139040 	call	10213904 <__ssprint_r>
1020f32c:	1000081e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
1020f330:	da000404 	addi	r8,sp,16
1020f334:	003f8406 	br	1020f148 <___svfprintf_internal_r+0x118>
1020f338:	d8802017 	ldw	r2,128(sp)
1020f33c:	10000426 	beq	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
1020f340:	d9002f17 	ldw	r4,188(sp)
1020f344:	b80b883a 	mov	r5,r23
1020f348:	d9801e04 	addi	r6,sp,120
1020f34c:	02139040 	call	10213904 <__ssprint_r>
1020f350:	b880030b 	ldhu	r2,12(r23)
1020f354:	1080100c 	andi	r2,r2,64
1020f358:	10000d1e 	bne	r2,zero,1020f390 <___svfprintf_internal_r+0x360>
1020f35c:	d8803017 	ldw	r2,192(sp)
1020f360:	dfc04a17 	ldw	ra,296(sp)
1020f364:	df004917 	ldw	fp,292(sp)
1020f368:	ddc04817 	ldw	r23,288(sp)
1020f36c:	dd804717 	ldw	r22,284(sp)
1020f370:	dd404617 	ldw	r21,280(sp)
1020f374:	dd004517 	ldw	r20,276(sp)
1020f378:	dcc04417 	ldw	r19,272(sp)
1020f37c:	dc804317 	ldw	r18,268(sp)
1020f380:	dc404217 	ldw	r17,264(sp)
1020f384:	dc004117 	ldw	r16,260(sp)
1020f388:	dec04b04 	addi	sp,sp,300
1020f38c:	f800283a 	ret
1020f390:	00bfffc4 	movi	r2,-1
1020f394:	003ff206 	br	1020f360 <___svfprintf_internal_r+0x330>
1020f398:	dc002917 	ldw	r16,164(sp)
1020f39c:	003f6d06 	br	1020f154 <___svfprintf_internal_r+0x124>
1020f3a0:	1805883a 	mov	r2,r3
1020f3a4:	8c400114 	ori	r17,r17,4
1020f3a8:	1c000007 	ldb	r16,0(r3)
1020f3ac:	003f7606 	br	1020f188 <___svfprintf_internal_r+0x158>
1020f3b0:	1c000007 	ldb	r16,0(r3)
1020f3b4:	18800044 	addi	r2,r3,1
1020f3b8:	8286e726 	beq	r16,r10,10210f58 <___svfprintf_internal_r+0x1f28>
1020f3bc:	82fff404 	addi	r11,r16,-48
1020f3c0:	1007883a 	mov	r3,r2
1020f3c4:	0013883a 	mov	r9,zero
1020f3c8:	2aff7036 	bltu	r5,r11,1020f18c <___svfprintf_internal_r+0x15c>
1020f3cc:	1c000007 	ldb	r16,0(r3)
1020f3d0:	4a4002a4 	muli	r9,r9,10
1020f3d4:	18c00044 	addi	r3,r3,1
1020f3d8:	5a53883a 	add	r9,r11,r9
1020f3dc:	82fff404 	addi	r11,r16,-48
1020f3e0:	2afffa2e 	bgeu	r5,r11,1020f3cc <___svfprintf_internal_r+0x39c>
1020f3e4:	483f690e 	bge	r9,zero,1020f18c <___svfprintf_internal_r+0x15c>
1020f3e8:	027fffc4 	movi	r9,-1
1020f3ec:	003f6706 	br	1020f18c <___svfprintf_internal_r+0x15c>
1020f3f0:	8c402014 	ori	r17,r17,128
1020f3f4:	1805883a 	mov	r2,r3
1020f3f8:	1c000007 	ldb	r16,0(r3)
1020f3fc:	003f6206 	br	1020f188 <___svfprintf_internal_r+0x158>
1020f400:	8c400414 	ori	r17,r17,16
1020f404:	d8c02915 	stw	r3,164(sp)
1020f408:	d9802785 	stb	r6,158(sp)
1020f40c:	8880080c 	andi	r2,r17,32
1020f410:	d8c02d17 	ldw	r3,180(sp)
1020f414:	10021526 	beq	r2,zero,1020fc6c <___svfprintf_internal_r+0xc3c>
1020f418:	db002d17 	ldw	r12,180(sp)
1020f41c:	18800117 	ldw	r2,4(r3)
1020f420:	1cc00017 	ldw	r19,0(r3)
1020f424:	63000204 	addi	r12,r12,8
1020f428:	db002d15 	stw	r12,180(sp)
1020f42c:	1039883a 	mov	fp,r2
1020f430:	10021916 	blt	r2,zero,1020fc98 <___svfprintf_internal_r+0xc68>
1020f434:	dd402783 	ldbu	r21,158(sp)
1020f438:	da403215 	stw	r9,200(sp)
1020f43c:	00800044 	movi	r2,1
1020f440:	9f06b03a 	or	r3,r19,fp
1020f444:	48000216 	blt	r9,zero,1020f450 <___svfprintf_internal_r+0x420>
1020f448:	013fdfc4 	movi	r4,-129
1020f44c:	8922703a 	and	r17,r17,r4
1020f450:	1802461e 	bne	r3,zero,1020fd6c <___svfprintf_internal_r+0xd3c>
1020f454:	48035426 	beq	r9,zero,102101a8 <___svfprintf_internal_r+0x1178>
1020f458:	10803fcc 	andi	r2,r2,255
1020f45c:	00c00044 	movi	r3,1
1020f460:	10c26726 	beq	r2,r3,1020fe00 <___svfprintf_internal_r+0xdd0>
1020f464:	00c00084 	movi	r3,2
1020f468:	10c2ea26 	beq	r2,r3,10210014 <___svfprintf_internal_r+0xfe4>
1020f46c:	b007883a 	mov	r3,r22
1020f470:	9808d0fa 	srli	r4,r19,3
1020f474:	e00a977a 	slli	r5,fp,29
1020f478:	e038d0fa 	srli	fp,fp,3
1020f47c:	9cc001cc 	andi	r19,r19,7
1020f480:	98800c04 	addi	r2,r19,48
1020f484:	18ffffc4 	addi	r3,r3,-1
1020f488:	2926b03a 	or	r19,r5,r4
1020f48c:	18800005 	stb	r2,0(r3)
1020f490:	9f08b03a 	or	r4,r19,fp
1020f494:	203ff61e 	bne	r4,zero,1020f470 <___svfprintf_internal_r+0x440>
1020f498:	8900004c 	andi	r4,r17,1
1020f49c:	d8c03115 	stw	r3,196(sp)
1020f4a0:	2002ea26 	beq	r4,zero,1021004c <___svfprintf_internal_r+0x101c>
1020f4a4:	10803fcc 	andi	r2,r2,255
1020f4a8:	1080201c 	xori	r2,r2,128
1020f4ac:	10bfe004 	addi	r2,r2,-128
1020f4b0:	01000c04 	movi	r4,48
1020f4b4:	11057526 	beq	r2,r4,10210a8c <___svfprintf_internal_r+0x1a5c>
1020f4b8:	dac03117 	ldw	r11,196(sp)
1020f4bc:	193fffc5 	stb	r4,-1(r3)
1020f4c0:	5affffc4 	addi	r11,r11,-1
1020f4c4:	dac03115 	stw	r11,196(sp)
1020f4c8:	b2e5c83a 	sub	r18,r22,r11
1020f4cc:	9005883a 	mov	r2,r18
1020f4d0:	9240010e 	bge	r18,r9,1020f4d8 <___svfprintf_internal_r+0x4a8>
1020f4d4:	4805883a 	mov	r2,r9
1020f4d8:	d8802a15 	stw	r2,168(sp)
1020f4dc:	d8003415 	stw	zero,208(sp)
1020f4e0:	a8803fcc 	andi	r2,r21,255
1020f4e4:	1080201c 	xori	r2,r2,128
1020f4e8:	10bfe004 	addi	r2,r2,-128
1020f4ec:	10000326 	beq	r2,zero,1020f4fc <___svfprintf_internal_r+0x4cc>
1020f4f0:	d8c02a17 	ldw	r3,168(sp)
1020f4f4:	18c00044 	addi	r3,r3,1
1020f4f8:	d8c02a15 	stw	r3,168(sp)
1020f4fc:	8ac0008c 	andi	r11,r17,2
1020f500:	dac02b15 	stw	r11,172(sp)
1020f504:	58000326 	beq	r11,zero,1020f514 <___svfprintf_internal_r+0x4e4>
1020f508:	db002a17 	ldw	r12,168(sp)
1020f50c:	63000084 	addi	r12,r12,2
1020f510:	db002a15 	stw	r12,168(sp)
1020f514:	88c0210c 	andi	r3,r17,132
1020f518:	d8c02c15 	stw	r3,176(sp)
1020f51c:	1802111e 	bne	r3,zero,1020fd64 <___svfprintf_internal_r+0xd34>
1020f520:	dac02e17 	ldw	r11,184(sp)
1020f524:	db002a17 	ldw	r12,168(sp)
1020f528:	5b39c83a 	sub	fp,r11,r12
1020f52c:	07020d0e 	bge	zero,fp,1020fd64 <___svfprintf_internal_r+0xd34>
1020f530:	02400404 	movi	r9,16
1020f534:	d8c02017 	ldw	r3,128(sp)
1020f538:	d8801f17 	ldw	r2,124(sp)
1020f53c:	4f058c0e 	bge	r9,fp,10210b70 <___svfprintf_internal_r+0x1b40>
1020f540:	014408b4 	movhi	r5,4130
1020f544:	e009883a 	mov	r4,fp
1020f548:	29753d84 	addi	r5,r5,-11018
1020f54c:	dc003c15 	stw	r16,240(sp)
1020f550:	9039883a 	mov	fp,r18
1020f554:	d9403615 	stw	r5,216(sp)
1020f558:	8825883a 	mov	r18,r17
1020f55c:	482b883a 	mov	r21,r9
1020f560:	04c001c4 	movi	r19,7
1020f564:	dc002f17 	ldw	r16,188(sp)
1020f568:	2023883a 	mov	r17,r4
1020f56c:	00000306 	br	1020f57c <___svfprintf_internal_r+0x54c>
1020f570:	8c7ffc04 	addi	r17,r17,-16
1020f574:	42000204 	addi	r8,r8,8
1020f578:	ac40130e 	bge	r21,r17,1020f5c8 <___svfprintf_internal_r+0x598>
1020f57c:	02c408b4 	movhi	r11,4130
1020f580:	18c00404 	addi	r3,r3,16
1020f584:	10800044 	addi	r2,r2,1
1020f588:	5af53d84 	addi	r11,r11,-11018
1020f58c:	42c00015 	stw	r11,0(r8)
1020f590:	45400115 	stw	r21,4(r8)
1020f594:	d8c02015 	stw	r3,128(sp)
1020f598:	d8801f15 	stw	r2,124(sp)
1020f59c:	98bff40e 	bge	r19,r2,1020f570 <___svfprintf_internal_r+0x540>
1020f5a0:	8009883a 	mov	r4,r16
1020f5a4:	b80b883a 	mov	r5,r23
1020f5a8:	b00d883a 	mov	r6,r22
1020f5ac:	02139040 	call	10213904 <__ssprint_r>
1020f5b0:	103f671e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
1020f5b4:	8c7ffc04 	addi	r17,r17,-16
1020f5b8:	d8c02017 	ldw	r3,128(sp)
1020f5bc:	d8801f17 	ldw	r2,124(sp)
1020f5c0:	da000404 	addi	r8,sp,16
1020f5c4:	ac7fed16 	blt	r21,r17,1020f57c <___svfprintf_internal_r+0x54c>
1020f5c8:	dc003c17 	ldw	r16,240(sp)
1020f5cc:	8809883a 	mov	r4,r17
1020f5d0:	9023883a 	mov	r17,r18
1020f5d4:	e025883a 	mov	r18,fp
1020f5d8:	2039883a 	mov	fp,r4
1020f5dc:	db003617 	ldw	r12,216(sp)
1020f5e0:	e0c7883a 	add	r3,fp,r3
1020f5e4:	10800044 	addi	r2,r2,1
1020f5e8:	43000015 	stw	r12,0(r8)
1020f5ec:	47000115 	stw	fp,4(r8)
1020f5f0:	d8c02015 	stw	r3,128(sp)
1020f5f4:	d8801f15 	stw	r2,124(sp)
1020f5f8:	010001c4 	movi	r4,7
1020f5fc:	20834416 	blt	r4,r2,10210310 <___svfprintf_internal_r+0x12e0>
1020f600:	d8802787 	ldb	r2,158(sp)
1020f604:	42000204 	addi	r8,r8,8
1020f608:	10000c26 	beq	r2,zero,1020f63c <___svfprintf_internal_r+0x60c>
1020f60c:	d8801f17 	ldw	r2,124(sp)
1020f610:	d9002784 	addi	r4,sp,158
1020f614:	18c00044 	addi	r3,r3,1
1020f618:	10800044 	addi	r2,r2,1
1020f61c:	41000015 	stw	r4,0(r8)
1020f620:	01000044 	movi	r4,1
1020f624:	41000115 	stw	r4,4(r8)
1020f628:	d8c02015 	stw	r3,128(sp)
1020f62c:	d8801f15 	stw	r2,124(sp)
1020f630:	010001c4 	movi	r4,7
1020f634:	2082f616 	blt	r4,r2,10210210 <___svfprintf_internal_r+0x11e0>
1020f638:	42000204 	addi	r8,r8,8
1020f63c:	dac02b17 	ldw	r11,172(sp)
1020f640:	58000c26 	beq	r11,zero,1020f674 <___svfprintf_internal_r+0x644>
1020f644:	d8801f17 	ldw	r2,124(sp)
1020f648:	d9002704 	addi	r4,sp,156
1020f64c:	18c00084 	addi	r3,r3,2
1020f650:	10800044 	addi	r2,r2,1
1020f654:	41000015 	stw	r4,0(r8)
1020f658:	01000084 	movi	r4,2
1020f65c:	41000115 	stw	r4,4(r8)
1020f660:	d8c02015 	stw	r3,128(sp)
1020f664:	d8801f15 	stw	r2,124(sp)
1020f668:	010001c4 	movi	r4,7
1020f66c:	2082e016 	blt	r4,r2,102101f0 <___svfprintf_internal_r+0x11c0>
1020f670:	42000204 	addi	r8,r8,8
1020f674:	db002c17 	ldw	r12,176(sp)
1020f678:	00802004 	movi	r2,128
1020f67c:	60822f26 	beq	r12,r2,1020ff3c <___svfprintf_internal_r+0xf0c>
1020f680:	db003217 	ldw	r12,200(sp)
1020f684:	64abc83a 	sub	r21,r12,r18
1020f688:	0540310e 	bge	zero,r21,1020f750 <___svfprintf_internal_r+0x720>
1020f68c:	07000404 	movi	fp,16
1020f690:	d8801f17 	ldw	r2,124(sp)
1020f694:	e544270e 	bge	fp,r21,10210734 <___svfprintf_internal_r+0x1704>
1020f698:	014408b4 	movhi	r5,4130
1020f69c:	a809883a 	mov	r4,r21
1020f6a0:	29753984 	addi	r5,r5,-11034
1020f6a4:	dc002c15 	stw	r16,176(sp)
1020f6a8:	902b883a 	mov	r21,r18
1020f6ac:	d9402b15 	stw	r5,172(sp)
1020f6b0:	8825883a 	mov	r18,r17
1020f6b4:	04c001c4 	movi	r19,7
1020f6b8:	dc002f17 	ldw	r16,188(sp)
1020f6bc:	2023883a 	mov	r17,r4
1020f6c0:	00000306 	br	1020f6d0 <___svfprintf_internal_r+0x6a0>
1020f6c4:	8c7ffc04 	addi	r17,r17,-16
1020f6c8:	42000204 	addi	r8,r8,8
1020f6cc:	e440110e 	bge	fp,r17,1020f714 <___svfprintf_internal_r+0x6e4>
1020f6d0:	18c00404 	addi	r3,r3,16
1020f6d4:	10800044 	addi	r2,r2,1
1020f6d8:	45000015 	stw	r20,0(r8)
1020f6dc:	47000115 	stw	fp,4(r8)
1020f6e0:	d8c02015 	stw	r3,128(sp)
1020f6e4:	d8801f15 	stw	r2,124(sp)
1020f6e8:	98bff60e 	bge	r19,r2,1020f6c4 <___svfprintf_internal_r+0x694>
1020f6ec:	8009883a 	mov	r4,r16
1020f6f0:	b80b883a 	mov	r5,r23
1020f6f4:	b00d883a 	mov	r6,r22
1020f6f8:	02139040 	call	10213904 <__ssprint_r>
1020f6fc:	103f141e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
1020f700:	8c7ffc04 	addi	r17,r17,-16
1020f704:	d8c02017 	ldw	r3,128(sp)
1020f708:	d8801f17 	ldw	r2,124(sp)
1020f70c:	da000404 	addi	r8,sp,16
1020f710:	e47fef16 	blt	fp,r17,1020f6d0 <___svfprintf_internal_r+0x6a0>
1020f714:	dc002c17 	ldw	r16,176(sp)
1020f718:	8809883a 	mov	r4,r17
1020f71c:	9023883a 	mov	r17,r18
1020f720:	a825883a 	mov	r18,r21
1020f724:	202b883a 	mov	r21,r4
1020f728:	dac02b17 	ldw	r11,172(sp)
1020f72c:	1d47883a 	add	r3,r3,r21
1020f730:	10800044 	addi	r2,r2,1
1020f734:	42c00015 	stw	r11,0(r8)
1020f738:	45400115 	stw	r21,4(r8)
1020f73c:	d8c02015 	stw	r3,128(sp)
1020f740:	d8801f15 	stw	r2,124(sp)
1020f744:	010001c4 	movi	r4,7
1020f748:	2082a116 	blt	r4,r2,102101d0 <___svfprintf_internal_r+0x11a0>
1020f74c:	42000204 	addi	r8,r8,8
1020f750:	8880400c 	andi	r2,r17,256
1020f754:	1001b01e 	bne	r2,zero,1020fe18 <___svfprintf_internal_r+0xde8>
1020f758:	d8801f17 	ldw	r2,124(sp)
1020f75c:	db003117 	ldw	r12,196(sp)
1020f760:	1c87883a 	add	r3,r3,r18
1020f764:	10800044 	addi	r2,r2,1
1020f768:	43000015 	stw	r12,0(r8)
1020f76c:	44800115 	stw	r18,4(r8)
1020f770:	d8c02015 	stw	r3,128(sp)
1020f774:	d8801f15 	stw	r2,124(sp)
1020f778:	010001c4 	movi	r4,7
1020f77c:	20828216 	blt	r4,r2,10210188 <___svfprintf_internal_r+0x1158>
1020f780:	42000204 	addi	r8,r8,8
1020f784:	8c40010c 	andi	r17,r17,4
1020f788:	88003226 	beq	r17,zero,1020f854 <___svfprintf_internal_r+0x824>
1020f78c:	db002e17 	ldw	r12,184(sp)
1020f790:	dac02a17 	ldw	r11,168(sp)
1020f794:	62e1c83a 	sub	r16,r12,r11
1020f798:	04002e0e 	bge	zero,r16,1020f854 <___svfprintf_internal_r+0x824>
1020f79c:	04400404 	movi	r17,16
1020f7a0:	d8801f17 	ldw	r2,124(sp)
1020f7a4:	8c05330e 	bge	r17,r16,10210c74 <___svfprintf_internal_r+0x1c44>
1020f7a8:	010408b4 	movhi	r4,4130
1020f7ac:	21353d84 	addi	r4,r4,-11018
1020f7b0:	d9003615 	stw	r4,216(sp)
1020f7b4:	048001c4 	movi	r18,7
1020f7b8:	dcc02f17 	ldw	r19,188(sp)
1020f7bc:	00000306 	br	1020f7cc <___svfprintf_internal_r+0x79c>
1020f7c0:	843ffc04 	addi	r16,r16,-16
1020f7c4:	42000204 	addi	r8,r8,8
1020f7c8:	8c00130e 	bge	r17,r16,1020f818 <___svfprintf_internal_r+0x7e8>
1020f7cc:	014408b4 	movhi	r5,4130
1020f7d0:	18c00404 	addi	r3,r3,16
1020f7d4:	10800044 	addi	r2,r2,1
1020f7d8:	29753d84 	addi	r5,r5,-11018
1020f7dc:	41400015 	stw	r5,0(r8)
1020f7e0:	44400115 	stw	r17,4(r8)
1020f7e4:	d8c02015 	stw	r3,128(sp)
1020f7e8:	d8801f15 	stw	r2,124(sp)
1020f7ec:	90bff40e 	bge	r18,r2,1020f7c0 <___svfprintf_internal_r+0x790>
1020f7f0:	9809883a 	mov	r4,r19
1020f7f4:	b80b883a 	mov	r5,r23
1020f7f8:	b00d883a 	mov	r6,r22
1020f7fc:	02139040 	call	10213904 <__ssprint_r>
1020f800:	103ed31e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
1020f804:	843ffc04 	addi	r16,r16,-16
1020f808:	d8c02017 	ldw	r3,128(sp)
1020f80c:	d8801f17 	ldw	r2,124(sp)
1020f810:	da000404 	addi	r8,sp,16
1020f814:	8c3fed16 	blt	r17,r16,1020f7cc <___svfprintf_internal_r+0x79c>
1020f818:	dac03617 	ldw	r11,216(sp)
1020f81c:	1c07883a 	add	r3,r3,r16
1020f820:	10800044 	addi	r2,r2,1
1020f824:	42c00015 	stw	r11,0(r8)
1020f828:	44000115 	stw	r16,4(r8)
1020f82c:	d8c02015 	stw	r3,128(sp)
1020f830:	d8801f15 	stw	r2,124(sp)
1020f834:	010001c4 	movi	r4,7
1020f838:	2080060e 	bge	r4,r2,1020f854 <___svfprintf_internal_r+0x824>
1020f83c:	d9002f17 	ldw	r4,188(sp)
1020f840:	b80b883a 	mov	r5,r23
1020f844:	b00d883a 	mov	r6,r22
1020f848:	02139040 	call	10213904 <__ssprint_r>
1020f84c:	103ec01e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
1020f850:	d8c02017 	ldw	r3,128(sp)
1020f854:	d8802a17 	ldw	r2,168(sp)
1020f858:	db002e17 	ldw	r12,184(sp)
1020f85c:	1300010e 	bge	r2,r12,1020f864 <___svfprintf_internal_r+0x834>
1020f860:	6005883a 	mov	r2,r12
1020f864:	dac03017 	ldw	r11,192(sp)
1020f868:	5897883a 	add	r11,r11,r2
1020f86c:	dac03015 	stw	r11,192(sp)
1020f870:	1802331e 	bne	r3,zero,10210140 <___svfprintf_internal_r+0x1110>
1020f874:	d8001f15 	stw	zero,124(sp)
1020f878:	da000404 	addi	r8,sp,16
1020f87c:	003e1806 	br	1020f0e0 <___svfprintf_internal_r+0xb0>
1020f880:	db002d17 	ldw	r12,180(sp)
1020f884:	dac02d17 	ldw	r11,180(sp)
1020f888:	d8c02915 	stw	r3,164(sp)
1020f88c:	63000017 	ldw	r12,0(r12)
1020f890:	5ac00117 	ldw	r11,4(r11)
1020f894:	d9802785 	stb	r6,158(sp)
1020f898:	6009883a 	mov	r4,r12
1020f89c:	580b883a 	mov	r5,r11
1020f8a0:	db003715 	stw	r12,220(sp)
1020f8a4:	da004015 	stw	r8,256(sp)
1020f8a8:	da403f15 	stw	r9,252(sp)
1020f8ac:	dac03815 	stw	r11,224(sp)
1020f8b0:	020b83c0 	call	1020b83c <__fpclassifyd>
1020f8b4:	db002d17 	ldw	r12,180(sp)
1020f8b8:	04800044 	movi	r18,1
1020f8bc:	da004017 	ldw	r8,256(sp)
1020f8c0:	64c00204 	addi	r19,r12,8
1020f8c4:	da403f17 	ldw	r9,252(sp)
1020f8c8:	d9003717 	ldw	r4,220(sp)
1020f8cc:	d9403817 	ldw	r5,224(sp)
1020f8d0:	1483561e 	bne	r2,r18,1021062c <___svfprintf_internal_r+0x15fc>
1020f8d4:	000d883a 	mov	r6,zero
1020f8d8:	000f883a 	mov	r7,zero
1020f8dc:	0216dc40 	call	10216dc4 <__ledf2>
1020f8e0:	da004017 	ldw	r8,256(sp)
1020f8e4:	1004ee16 	blt	r2,zero,10210ca0 <___svfprintf_internal_r+0x1c70>
1020f8e8:	dd402783 	ldbu	r21,158(sp)
1020f8ec:	008011c4 	movi	r2,71
1020f8f0:	1404440e 	bge	r2,r16,10210a04 <___svfprintf_internal_r+0x19d4>
1020f8f4:	00c408b4 	movhi	r3,4130
1020f8f8:	18f41104 	addi	r3,r3,-12220
1020f8fc:	d8c03115 	stw	r3,196(sp)
1020f900:	02c000c4 	movi	r11,3
1020f904:	00bfdfc4 	movi	r2,-129
1020f908:	dac02a15 	stw	r11,168(sp)
1020f90c:	88a2703a 	and	r17,r17,r2
1020f910:	dcc02d15 	stw	r19,180(sp)
1020f914:	5825883a 	mov	r18,r11
1020f918:	d8003215 	stw	zero,200(sp)
1020f91c:	d8003415 	stw	zero,208(sp)
1020f920:	003eef06 	br	1020f4e0 <___svfprintf_internal_r+0x4b0>
1020f924:	8c400214 	ori	r17,r17,8
1020f928:	1805883a 	mov	r2,r3
1020f92c:	1c000007 	ldb	r16,0(r3)
1020f930:	003e1506 	br	1020f188 <___svfprintf_internal_r+0x158>
1020f934:	8c400414 	ori	r17,r17,16
1020f938:	d8c02915 	stw	r3,164(sp)
1020f93c:	88c0080c 	andi	r3,r17,32
1020f940:	d8802d17 	ldw	r2,180(sp)
1020f944:	18005526 	beq	r3,zero,1020fa9c <___svfprintf_internal_r+0xa6c>
1020f948:	dac02d17 	ldw	r11,180(sp)
1020f94c:	14c00017 	ldw	r19,0(r2)
1020f950:	17000117 	ldw	fp,4(r2)
1020f954:	5ac00204 	addi	r11,r11,8
1020f958:	dac02d15 	stw	r11,180(sp)
1020f95c:	00800044 	movi	r2,1
1020f960:	9f06b03a 	or	r3,r19,fp
1020f964:	d8002785 	stb	zero,158(sp)
1020f968:	da403215 	stw	r9,200(sp)
1020f96c:	002b883a 	mov	r21,zero
1020f970:	003eb406 	br	1020f444 <___svfprintf_internal_r+0x414>
1020f974:	030408b4 	movhi	r12,4130
1020f978:	63341404 	addi	r12,r12,-12208
1020f97c:	d8c02915 	stw	r3,164(sp)
1020f980:	d9802785 	stb	r6,158(sp)
1020f984:	db003b15 	stw	r12,236(sp)
1020f988:	88c0080c 	andi	r3,r17,32
1020f98c:	d8802d17 	ldw	r2,180(sp)
1020f990:	18005626 	beq	r3,zero,1020faec <___svfprintf_internal_r+0xabc>
1020f994:	dac02d17 	ldw	r11,180(sp)
1020f998:	14c00017 	ldw	r19,0(r2)
1020f99c:	17000117 	ldw	fp,4(r2)
1020f9a0:	5ac00204 	addi	r11,r11,8
1020f9a4:	dac02d15 	stw	r11,180(sp)
1020f9a8:	8880004c 	andi	r2,r17,1
1020f9ac:	10029326 	beq	r2,zero,102103fc <___svfprintf_internal_r+0x13cc>
1020f9b0:	9f06b03a 	or	r3,r19,fp
1020f9b4:	18033526 	beq	r3,zero,1021068c <___svfprintf_internal_r+0x165c>
1020f9b8:	00800c04 	movi	r2,48
1020f9bc:	d8802705 	stb	r2,156(sp)
1020f9c0:	dc002745 	stb	r16,157(sp)
1020f9c4:	8c400094 	ori	r17,r17,2
1020f9c8:	00800084 	movi	r2,2
1020f9cc:	003fe506 	br	1020f964 <___svfprintf_internal_r+0x934>
1020f9d0:	1805883a 	mov	r2,r3
1020f9d4:	d8002e15 	stw	zero,184(sp)
1020f9d8:	82fff404 	addi	r11,r16,-48
1020f9dc:	0019883a 	mov	r12,zero
1020f9e0:	14000007 	ldb	r16,0(r2)
1020f9e4:	630002a4 	muli	r12,r12,10
1020f9e8:	18c00044 	addi	r3,r3,1
1020f9ec:	1805883a 	mov	r2,r3
1020f9f0:	62d9883a 	add	r12,r12,r11
1020f9f4:	82fff404 	addi	r11,r16,-48
1020f9f8:	2afff92e 	bgeu	r5,r11,1020f9e0 <___svfprintf_internal_r+0x9b0>
1020f9fc:	db002e15 	stw	r12,184(sp)
1020fa00:	003de206 	br	1020f18c <___svfprintf_internal_r+0x15c>
1020fa04:	8c400814 	ori	r17,r17,32
1020fa08:	1805883a 	mov	r2,r3
1020fa0c:	1c000007 	ldb	r16,0(r3)
1020fa10:	003ddd06 	br	1020f188 <___svfprintf_internal_r+0x158>
1020fa14:	dac02d17 	ldw	r11,180(sp)
1020fa18:	db002d17 	ldw	r12,180(sp)
1020fa1c:	d8c02915 	stw	r3,164(sp)
1020fa20:	5ac00017 	ldw	r11,0(r11)
1020fa24:	d8002785 	stb	zero,158(sp)
1020fa28:	64c00104 	addi	r19,r12,4
1020fa2c:	dac03115 	stw	r11,196(sp)
1020fa30:	58048126 	beq	r11,zero,10210c38 <___svfprintf_internal_r+0x1c08>
1020fa34:	d9003117 	ldw	r4,196(sp)
1020fa38:	48041716 	blt	r9,zero,10210a98 <___svfprintf_internal_r+0x1a68>
1020fa3c:	480d883a 	mov	r6,r9
1020fa40:	000b883a 	mov	r5,zero
1020fa44:	da004015 	stw	r8,256(sp)
1020fa48:	da403f15 	stw	r9,252(sp)
1020fa4c:	0209c140 	call	10209c14 <memchr>
1020fa50:	da004017 	ldw	r8,256(sp)
1020fa54:	da403f17 	ldw	r9,252(sp)
1020fa58:	1004db26 	beq	r2,zero,10210dc8 <___svfprintf_internal_r+0x1d98>
1020fa5c:	d8c03117 	ldw	r3,196(sp)
1020fa60:	10e5c83a 	sub	r18,r2,r3
1020fa64:	4c80010e 	bge	r9,r18,1020fa6c <___svfprintf_internal_r+0xa3c>
1020fa68:	4825883a 	mov	r18,r9
1020fa6c:	9005883a 	mov	r2,r18
1020fa70:	90040e16 	blt	r18,zero,10210aac <___svfprintf_internal_r+0x1a7c>
1020fa74:	dd402783 	ldbu	r21,158(sp)
1020fa78:	d8802a15 	stw	r2,168(sp)
1020fa7c:	dcc02d15 	stw	r19,180(sp)
1020fa80:	d8003215 	stw	zero,200(sp)
1020fa84:	d8003415 	stw	zero,208(sp)
1020fa88:	003e9506 	br	1020f4e0 <___svfprintf_internal_r+0x4b0>
1020fa8c:	d8c02915 	stw	r3,164(sp)
1020fa90:	88c0080c 	andi	r3,r17,32
1020fa94:	d8802d17 	ldw	r2,180(sp)
1020fa98:	183fab1e 	bne	r3,zero,1020f948 <___svfprintf_internal_r+0x918>
1020fa9c:	88c0040c 	andi	r3,r17,16
1020faa0:	1802681e 	bne	r3,zero,10210444 <___svfprintf_internal_r+0x1414>
1020faa4:	88c0100c 	andi	r3,r17,64
1020faa8:	18026626 	beq	r3,zero,10210444 <___svfprintf_internal_r+0x1414>
1020faac:	dac02d17 	ldw	r11,180(sp)
1020fab0:	14c0000b 	ldhu	r19,0(r2)
1020fab4:	0039883a 	mov	fp,zero
1020fab8:	5ac00104 	addi	r11,r11,4
1020fabc:	dac02d15 	stw	r11,180(sp)
1020fac0:	00800044 	movi	r2,1
1020fac4:	9807883a 	mov	r3,r19
1020fac8:	003fa606 	br	1020f964 <___svfprintf_internal_r+0x934>
1020facc:	008408b4 	movhi	r2,4130
1020fad0:	10b41904 	addi	r2,r2,-12188
1020fad4:	d8c02915 	stw	r3,164(sp)
1020fad8:	d8803b15 	stw	r2,236(sp)
1020fadc:	d9802785 	stb	r6,158(sp)
1020fae0:	88c0080c 	andi	r3,r17,32
1020fae4:	d8802d17 	ldw	r2,180(sp)
1020fae8:	183faa1e 	bne	r3,zero,1020f994 <___svfprintf_internal_r+0x964>
1020faec:	88c0040c 	andi	r3,r17,16
1020faf0:	1802e826 	beq	r3,zero,10210694 <___svfprintf_internal_r+0x1664>
1020faf4:	db002d17 	ldw	r12,180(sp)
1020faf8:	14c00017 	ldw	r19,0(r2)
1020fafc:	0039883a 	mov	fp,zero
1020fb00:	63000104 	addi	r12,r12,4
1020fb04:	db002d15 	stw	r12,180(sp)
1020fb08:	003fa706 	br	1020f9a8 <___svfprintf_internal_r+0x978>
1020fb0c:	30803fcc 	andi	r2,r6,255
1020fb10:	1080201c 	xori	r2,r2,128
1020fb14:	10bfe004 	addi	r2,r2,-128
1020fb18:	1002d91e 	bne	r2,zero,10210680 <___svfprintf_internal_r+0x1650>
1020fb1c:	1805883a 	mov	r2,r3
1020fb20:	01800804 	movi	r6,32
1020fb24:	1c000007 	ldb	r16,0(r3)
1020fb28:	003d9706 	br	1020f188 <___svfprintf_internal_r+0x158>
1020fb2c:	8c400054 	ori	r17,r17,1
1020fb30:	1805883a 	mov	r2,r3
1020fb34:	1c000007 	ldb	r16,0(r3)
1020fb38:	003d9306 	br	1020f188 <___svfprintf_internal_r+0x158>
1020fb3c:	dac02d17 	ldw	r11,180(sp)
1020fb40:	db002d17 	ldw	r12,180(sp)
1020fb44:	5ac00017 	ldw	r11,0(r11)
1020fb48:	dac02e15 	stw	r11,184(sp)
1020fb4c:	62c00104 	addi	r11,r12,4
1020fb50:	db002e17 	ldw	r12,184(sp)
1020fb54:	60033e16 	blt	r12,zero,10210850 <___svfprintf_internal_r+0x1820>
1020fb58:	dac02d15 	stw	r11,180(sp)
1020fb5c:	1805883a 	mov	r2,r3
1020fb60:	1c000007 	ldb	r16,0(r3)
1020fb64:	003d8806 	br	1020f188 <___svfprintf_internal_r+0x158>
1020fb68:	1805883a 	mov	r2,r3
1020fb6c:	01800ac4 	movi	r6,43
1020fb70:	1c000007 	ldb	r16,0(r3)
1020fb74:	003d8406 	br	1020f188 <___svfprintf_internal_r+0x158>
1020fb78:	8c401014 	ori	r17,r17,64
1020fb7c:	1805883a 	mov	r2,r3
1020fb80:	1c000007 	ldb	r16,0(r3)
1020fb84:	003d8006 	br	1020f188 <___svfprintf_internal_r+0x158>
1020fb88:	1c000007 	ldb	r16,0(r3)
1020fb8c:	81c33626 	beq	r16,r7,10210868 <___svfprintf_internal_r+0x1838>
1020fb90:	8c400414 	ori	r17,r17,16
1020fb94:	1805883a 	mov	r2,r3
1020fb98:	003d7b06 	br	1020f188 <___svfprintf_internal_r+0x158>
1020fb9c:	d8c02915 	stw	r3,164(sp)
1020fba0:	d9802785 	stb	r6,158(sp)
1020fba4:	8880080c 	andi	r2,r17,32
1020fba8:	1002c226 	beq	r2,zero,102106b4 <___svfprintf_internal_r+0x1684>
1020fbac:	db002d17 	ldw	r12,180(sp)
1020fbb0:	dac03017 	ldw	r11,192(sp)
1020fbb4:	60800017 	ldw	r2,0(r12)
1020fbb8:	5807d7fa 	srai	r3,r11,31
1020fbbc:	63000104 	addi	r12,r12,4
1020fbc0:	db002d15 	stw	r12,180(sp)
1020fbc4:	12c00015 	stw	r11,0(r2)
1020fbc8:	10c00115 	stw	r3,4(r2)
1020fbcc:	003d4406 	br	1020f0e0 <___svfprintf_internal_r+0xb0>
1020fbd0:	db002d17 	ldw	r12,180(sp)
1020fbd4:	00800c04 	movi	r2,48
1020fbd8:	d8802705 	stb	r2,156(sp)
1020fbdc:	64c00017 	ldw	r19,0(r12)
1020fbe0:	00801e04 	movi	r2,120
1020fbe4:	d8802745 	stb	r2,157(sp)
1020fbe8:	008408b4 	movhi	r2,4130
1020fbec:	10b41904 	addi	r2,r2,-12188
1020fbf0:	63000104 	addi	r12,r12,4
1020fbf4:	d8c02915 	stw	r3,164(sp)
1020fbf8:	d8803b15 	stw	r2,236(sp)
1020fbfc:	0039883a 	mov	fp,zero
1020fc00:	8c400094 	ori	r17,r17,2
1020fc04:	db002d15 	stw	r12,180(sp)
1020fc08:	00800084 	movi	r2,2
1020fc0c:	04001e04 	movi	r16,120
1020fc10:	9807883a 	mov	r3,r19
1020fc14:	003f5306 	br	1020f964 <___svfprintf_internal_r+0x934>
1020fc18:	db002d17 	ldw	r12,180(sp)
1020fc1c:	d8c02915 	stw	r3,164(sp)
1020fc20:	dac01404 	addi	r11,sp,80
1020fc24:	60800017 	ldw	r2,0(r12)
1020fc28:	00c00044 	movi	r3,1
1020fc2c:	63000104 	addi	r12,r12,4
1020fc30:	d8801405 	stb	r2,80(sp)
1020fc34:	d8c02a15 	stw	r3,168(sp)
1020fc38:	d8002785 	stb	zero,158(sp)
1020fc3c:	db002d15 	stw	r12,180(sp)
1020fc40:	1825883a 	mov	r18,r3
1020fc44:	d8003215 	stw	zero,200(sp)
1020fc48:	d8003415 	stw	zero,208(sp)
1020fc4c:	dac03115 	stw	r11,196(sp)
1020fc50:	0005883a 	mov	r2,zero
1020fc54:	003e2906 	br	1020f4fc <___svfprintf_internal_r+0x4cc>
1020fc58:	d8c02915 	stw	r3,164(sp)
1020fc5c:	d9802785 	stb	r6,158(sp)
1020fc60:	8880080c 	andi	r2,r17,32
1020fc64:	d8c02d17 	ldw	r3,180(sp)
1020fc68:	103deb1e 	bne	r2,zero,1020f418 <___svfprintf_internal_r+0x3e8>
1020fc6c:	8880040c 	andi	r2,r17,16
1020fc70:	1001e51e 	bne	r2,zero,10210408 <___svfprintf_internal_r+0x13d8>
1020fc74:	8880100c 	andi	r2,r17,64
1020fc78:	1001e326 	beq	r2,zero,10210408 <___svfprintf_internal_r+0x13d8>
1020fc7c:	1cc0000f 	ldh	r19,0(r3)
1020fc80:	db002d17 	ldw	r12,180(sp)
1020fc84:	9839d7fa 	srai	fp,r19,31
1020fc88:	63000104 	addi	r12,r12,4
1020fc8c:	db002d15 	stw	r12,180(sp)
1020fc90:	e005883a 	mov	r2,fp
1020fc94:	103de70e 	bge	r2,zero,1020f434 <___svfprintf_internal_r+0x404>
1020fc98:	04e7c83a 	sub	r19,zero,r19
1020fc9c:	9804c03a 	cmpne	r2,r19,zero
1020fca0:	0739c83a 	sub	fp,zero,fp
1020fca4:	e0b9c83a 	sub	fp,fp,r2
1020fca8:	05400b44 	movi	r21,45
1020fcac:	dd402785 	stb	r21,158(sp)
1020fcb0:	da403215 	stw	r9,200(sp)
1020fcb4:	00800044 	movi	r2,1
1020fcb8:	9f06b03a 	or	r3,r19,fp
1020fcbc:	003de106 	br	1020f444 <___svfprintf_internal_r+0x414>
1020fcc0:	8c400414 	ori	r17,r17,16
1020fcc4:	d8c02915 	stw	r3,164(sp)
1020fcc8:	8880080c 	andi	r2,r17,32
1020fccc:	10000b26 	beq	r2,zero,1020fcfc <___svfprintf_internal_r+0xccc>
1020fcd0:	db002d17 	ldw	r12,180(sp)
1020fcd4:	0005883a 	mov	r2,zero
1020fcd8:	64c00017 	ldw	r19,0(r12)
1020fcdc:	67000117 	ldw	fp,4(r12)
1020fce0:	63000204 	addi	r12,r12,8
1020fce4:	db002d15 	stw	r12,180(sp)
1020fce8:	9f06b03a 	or	r3,r19,fp
1020fcec:	003f1d06 	br	1020f964 <___svfprintf_internal_r+0x934>
1020fcf0:	d8c02915 	stw	r3,164(sp)
1020fcf4:	8880080c 	andi	r2,r17,32
1020fcf8:	103ff51e 	bne	r2,zero,1020fcd0 <___svfprintf_internal_r+0xca0>
1020fcfc:	8880040c 	andi	r2,r17,16
1020fd00:	1001c81e 	bne	r2,zero,10210424 <___svfprintf_internal_r+0x13f4>
1020fd04:	8880100c 	andi	r2,r17,64
1020fd08:	1001c626 	beq	r2,zero,10210424 <___svfprintf_internal_r+0x13f4>
1020fd0c:	db002d17 	ldw	r12,180(sp)
1020fd10:	0039883a 	mov	fp,zero
1020fd14:	0005883a 	mov	r2,zero
1020fd18:	64c0000b 	ldhu	r19,0(r12)
1020fd1c:	63000104 	addi	r12,r12,4
1020fd20:	db002d15 	stw	r12,180(sp)
1020fd24:	9807883a 	mov	r3,r19
1020fd28:	003f0e06 	br	1020f964 <___svfprintf_internal_r+0x934>
1020fd2c:	d8c02915 	stw	r3,164(sp)
1020fd30:	d9802785 	stb	r6,158(sp)
1020fd34:	803d8026 	beq	r16,zero,1020f338 <___svfprintf_internal_r+0x308>
1020fd38:	02c00044 	movi	r11,1
1020fd3c:	db001404 	addi	r12,sp,80
1020fd40:	dac02a15 	stw	r11,168(sp)
1020fd44:	dc001405 	stb	r16,80(sp)
1020fd48:	d8002785 	stb	zero,158(sp)
1020fd4c:	5825883a 	mov	r18,r11
1020fd50:	d8003215 	stw	zero,200(sp)
1020fd54:	d8003415 	stw	zero,208(sp)
1020fd58:	db003115 	stw	r12,196(sp)
1020fd5c:	0005883a 	mov	r2,zero
1020fd60:	003de606 	br	1020f4fc <___svfprintf_internal_r+0x4cc>
1020fd64:	d8c02017 	ldw	r3,128(sp)
1020fd68:	003e2706 	br	1020f608 <___svfprintf_internal_r+0x5d8>
1020fd6c:	10803fcc 	andi	r2,r2,255
1020fd70:	00c00044 	movi	r3,1
1020fd74:	10fdbb1e 	bne	r2,r3,1020f464 <___svfprintf_internal_r+0x434>
1020fd78:	e000021e 	bne	fp,zero,1020fd84 <___svfprintf_internal_r+0xd54>
1020fd7c:	00800244 	movi	r2,9
1020fd80:	14c01f2e 	bgeu	r2,r19,1020fe00 <___svfprintf_internal_r+0xdd0>
1020fd84:	dc002a15 	stw	r16,168(sp)
1020fd88:	dc402b15 	stw	r17,172(sp)
1020fd8c:	9821883a 	mov	r16,r19
1020fd90:	e023883a 	mov	r17,fp
1020fd94:	b025883a 	mov	r18,r22
1020fd98:	4827883a 	mov	r19,r9
1020fd9c:	4039883a 	mov	fp,r8
1020fda0:	8009883a 	mov	r4,r16
1020fda4:	880b883a 	mov	r5,r17
1020fda8:	01800284 	movi	r6,10
1020fdac:	000f883a 	mov	r7,zero
1020fdb0:	02153840 	call	10215384 <__umoddi3>
1020fdb4:	10800c04 	addi	r2,r2,48
1020fdb8:	94bfffc4 	addi	r18,r18,-1
1020fdbc:	8009883a 	mov	r4,r16
1020fdc0:	880b883a 	mov	r5,r17
1020fdc4:	01800284 	movi	r6,10
1020fdc8:	000f883a 	mov	r7,zero
1020fdcc:	90800005 	stb	r2,0(r18)
1020fdd0:	0214dc40 	call	10214dc4 <__udivdi3>
1020fdd4:	1021883a 	mov	r16,r2
1020fdd8:	10c4b03a 	or	r2,r2,r3
1020fddc:	1823883a 	mov	r17,r3
1020fde0:	103fef1e 	bne	r2,zero,1020fda0 <___svfprintf_internal_r+0xd70>
1020fde4:	dc803115 	stw	r18,196(sp)
1020fde8:	dc002a17 	ldw	r16,168(sp)
1020fdec:	dc402b17 	ldw	r17,172(sp)
1020fdf0:	9813883a 	mov	r9,r19
1020fdf4:	e011883a 	mov	r8,fp
1020fdf8:	b4a5c83a 	sub	r18,r22,r18
1020fdfc:	003db306 	br	1020f4cc <___svfprintf_internal_r+0x49c>
1020fe00:	9cc00c04 	addi	r19,r19,48
1020fe04:	db001dc4 	addi	r12,sp,119
1020fe08:	dcc01dc5 	stb	r19,119(sp)
1020fe0c:	dc803d17 	ldw	r18,244(sp)
1020fe10:	db003115 	stw	r12,196(sp)
1020fe14:	003dad06 	br	1020f4cc <___svfprintf_internal_r+0x49c>
1020fe18:	00801944 	movi	r2,101
1020fe1c:	14008d0e 	bge	r2,r16,10210054 <___svfprintf_internal_r+0x1024>
1020fe20:	d9003717 	ldw	r4,220(sp)
1020fe24:	d9403817 	ldw	r5,224(sp)
1020fe28:	000d883a 	mov	r6,zero
1020fe2c:	000f883a 	mov	r7,zero
1020fe30:	d8c03e15 	stw	r3,248(sp)
1020fe34:	da004015 	stw	r8,256(sp)
1020fe38:	0216c600 	call	10216c60 <__eqdf2>
1020fe3c:	d8c03e17 	ldw	r3,248(sp)
1020fe40:	da004017 	ldw	r8,256(sp)
1020fe44:	1000fd1e 	bne	r2,zero,1021023c <___svfprintf_internal_r+0x120c>
1020fe48:	d8801f17 	ldw	r2,124(sp)
1020fe4c:	010408b4 	movhi	r4,4130
1020fe50:	21342004 	addi	r4,r4,-12160
1020fe54:	18c00044 	addi	r3,r3,1
1020fe58:	10800044 	addi	r2,r2,1
1020fe5c:	41000015 	stw	r4,0(r8)
1020fe60:	01000044 	movi	r4,1
1020fe64:	41000115 	stw	r4,4(r8)
1020fe68:	d8c02015 	stw	r3,128(sp)
1020fe6c:	d8801f15 	stw	r2,124(sp)
1020fe70:	010001c4 	movi	r4,7
1020fe74:	20823316 	blt	r4,r2,10210744 <___svfprintf_internal_r+0x1714>
1020fe78:	42000204 	addi	r8,r8,8
1020fe7c:	d8802617 	ldw	r2,152(sp)
1020fe80:	dac03317 	ldw	r11,204(sp)
1020fe84:	12c00216 	blt	r2,r11,1020fe90 <___svfprintf_internal_r+0xe60>
1020fe88:	8880004c 	andi	r2,r17,1
1020fe8c:	103e3d26 	beq	r2,zero,1020f784 <___svfprintf_internal_r+0x754>
1020fe90:	db003917 	ldw	r12,228(sp)
1020fe94:	d8801f17 	ldw	r2,124(sp)
1020fe98:	dac03517 	ldw	r11,212(sp)
1020fe9c:	1b07883a 	add	r3,r3,r12
1020fea0:	10800044 	addi	r2,r2,1
1020fea4:	42c00015 	stw	r11,0(r8)
1020fea8:	43000115 	stw	r12,4(r8)
1020feac:	d8c02015 	stw	r3,128(sp)
1020feb0:	d8801f15 	stw	r2,124(sp)
1020feb4:	010001c4 	movi	r4,7
1020feb8:	20826f16 	blt	r4,r2,10210878 <___svfprintf_internal_r+0x1848>
1020febc:	42000204 	addi	r8,r8,8
1020fec0:	db003317 	ldw	r12,204(sp)
1020fec4:	643fffc4 	addi	r16,r12,-1
1020fec8:	043e2e0e 	bge	zero,r16,1020f784 <___svfprintf_internal_r+0x754>
1020fecc:	04800404 	movi	r18,16
1020fed0:	d8801f17 	ldw	r2,124(sp)
1020fed4:	9400a00e 	bge	r18,r16,10210158 <___svfprintf_internal_r+0x1128>
1020fed8:	014408b4 	movhi	r5,4130
1020fedc:	29753984 	addi	r5,r5,-11034
1020fee0:	d9402b15 	stw	r5,172(sp)
1020fee4:	054001c4 	movi	r21,7
1020fee8:	dcc02f17 	ldw	r19,188(sp)
1020feec:	00000306 	br	1020fefc <___svfprintf_internal_r+0xecc>
1020fef0:	42000204 	addi	r8,r8,8
1020fef4:	843ffc04 	addi	r16,r16,-16
1020fef8:	94009a0e 	bge	r18,r16,10210164 <___svfprintf_internal_r+0x1134>
1020fefc:	18c00404 	addi	r3,r3,16
1020ff00:	10800044 	addi	r2,r2,1
1020ff04:	45000015 	stw	r20,0(r8)
1020ff08:	44800115 	stw	r18,4(r8)
1020ff0c:	d8c02015 	stw	r3,128(sp)
1020ff10:	d8801f15 	stw	r2,124(sp)
1020ff14:	a8bff60e 	bge	r21,r2,1020fef0 <___svfprintf_internal_r+0xec0>
1020ff18:	9809883a 	mov	r4,r19
1020ff1c:	b80b883a 	mov	r5,r23
1020ff20:	b00d883a 	mov	r6,r22
1020ff24:	02139040 	call	10213904 <__ssprint_r>
1020ff28:	103d091e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
1020ff2c:	d8c02017 	ldw	r3,128(sp)
1020ff30:	d8801f17 	ldw	r2,124(sp)
1020ff34:	da000404 	addi	r8,sp,16
1020ff38:	003fee06 	br	1020fef4 <___svfprintf_internal_r+0xec4>
1020ff3c:	dac02e17 	ldw	r11,184(sp)
1020ff40:	db002a17 	ldw	r12,168(sp)
1020ff44:	5b2bc83a 	sub	r21,r11,r12
1020ff48:	057dcd0e 	bge	zero,r21,1020f680 <___svfprintf_internal_r+0x650>
1020ff4c:	07000404 	movi	fp,16
1020ff50:	d8801f17 	ldw	r2,124(sp)
1020ff54:	e5435d0e 	bge	fp,r21,10210ccc <___svfprintf_internal_r+0x1c9c>
1020ff58:	014408b4 	movhi	r5,4130
1020ff5c:	a809883a 	mov	r4,r21
1020ff60:	29753984 	addi	r5,r5,-11034
1020ff64:	dc002c15 	stw	r16,176(sp)
1020ff68:	902b883a 	mov	r21,r18
1020ff6c:	d9402b15 	stw	r5,172(sp)
1020ff70:	8825883a 	mov	r18,r17
1020ff74:	04c001c4 	movi	r19,7
1020ff78:	dc002f17 	ldw	r16,188(sp)
1020ff7c:	2023883a 	mov	r17,r4
1020ff80:	00000306 	br	1020ff90 <___svfprintf_internal_r+0xf60>
1020ff84:	8c7ffc04 	addi	r17,r17,-16
1020ff88:	42000204 	addi	r8,r8,8
1020ff8c:	e440110e 	bge	fp,r17,1020ffd4 <___svfprintf_internal_r+0xfa4>
1020ff90:	18c00404 	addi	r3,r3,16
1020ff94:	10800044 	addi	r2,r2,1
1020ff98:	45000015 	stw	r20,0(r8)
1020ff9c:	47000115 	stw	fp,4(r8)
1020ffa0:	d8c02015 	stw	r3,128(sp)
1020ffa4:	d8801f15 	stw	r2,124(sp)
1020ffa8:	98bff60e 	bge	r19,r2,1020ff84 <___svfprintf_internal_r+0xf54>
1020ffac:	8009883a 	mov	r4,r16
1020ffb0:	b80b883a 	mov	r5,r23
1020ffb4:	b00d883a 	mov	r6,r22
1020ffb8:	02139040 	call	10213904 <__ssprint_r>
1020ffbc:	103ce41e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
1020ffc0:	8c7ffc04 	addi	r17,r17,-16
1020ffc4:	d8c02017 	ldw	r3,128(sp)
1020ffc8:	d8801f17 	ldw	r2,124(sp)
1020ffcc:	da000404 	addi	r8,sp,16
1020ffd0:	e47fef16 	blt	fp,r17,1020ff90 <___svfprintf_internal_r+0xf60>
1020ffd4:	dc002c17 	ldw	r16,176(sp)
1020ffd8:	8809883a 	mov	r4,r17
1020ffdc:	9023883a 	mov	r17,r18
1020ffe0:	a825883a 	mov	r18,r21
1020ffe4:	202b883a 	mov	r21,r4
1020ffe8:	dac02b17 	ldw	r11,172(sp)
1020ffec:	1d47883a 	add	r3,r3,r21
1020fff0:	10800044 	addi	r2,r2,1
1020fff4:	42c00015 	stw	r11,0(r8)
1020fff8:	45400115 	stw	r21,4(r8)
1020fffc:	d8c02015 	stw	r3,128(sp)
10210000:	d8801f15 	stw	r2,124(sp)
10210004:	010001c4 	movi	r4,7
10210008:	20818016 	blt	r4,r2,1021060c <___svfprintf_internal_r+0x15dc>
1021000c:	42000204 	addi	r8,r8,8
10210010:	003d9b06 	br	1020f680 <___svfprintf_internal_r+0x650>
10210014:	d9403b17 	ldw	r5,236(sp)
10210018:	b007883a 	mov	r3,r22
1021001c:	988003cc 	andi	r2,r19,15
10210020:	e008973a 	slli	r4,fp,28
10210024:	2885883a 	add	r2,r5,r2
10210028:	9826d13a 	srli	r19,r19,4
1021002c:	10800003 	ldbu	r2,0(r2)
10210030:	e038d13a 	srli	fp,fp,4
10210034:	18ffffc4 	addi	r3,r3,-1
10210038:	24e6b03a 	or	r19,r4,r19
1021003c:	18800005 	stb	r2,0(r3)
10210040:	9f04b03a 	or	r2,r19,fp
10210044:	103ff51e 	bne	r2,zero,1021001c <___svfprintf_internal_r+0xfec>
10210048:	d8c03115 	stw	r3,196(sp)
1021004c:	b0e5c83a 	sub	r18,r22,r3
10210050:	003d1e06 	br	1020f4cc <___svfprintf_internal_r+0x49c>
10210054:	db003317 	ldw	r12,204(sp)
10210058:	00800044 	movi	r2,1
1021005c:	18c00044 	addi	r3,r3,1
10210060:	13014b0e 	bge	r2,r12,10210590 <___svfprintf_internal_r+0x1560>
10210064:	dc001f17 	ldw	r16,124(sp)
10210068:	dac03117 	ldw	r11,196(sp)
1021006c:	00800044 	movi	r2,1
10210070:	84000044 	addi	r16,r16,1
10210074:	40800115 	stw	r2,4(r8)
10210078:	42c00015 	stw	r11,0(r8)
1021007c:	d8c02015 	stw	r3,128(sp)
10210080:	dc001f15 	stw	r16,124(sp)
10210084:	008001c4 	movi	r2,7
10210088:	14014e16 	blt	r2,r16,102105c4 <___svfprintf_internal_r+0x1594>
1021008c:	42000204 	addi	r8,r8,8
10210090:	db003917 	ldw	r12,228(sp)
10210094:	dac03517 	ldw	r11,212(sp)
10210098:	84000044 	addi	r16,r16,1
1021009c:	1b07883a 	add	r3,r3,r12
102100a0:	42c00015 	stw	r11,0(r8)
102100a4:	43000115 	stw	r12,4(r8)
102100a8:	d8c02015 	stw	r3,128(sp)
102100ac:	dc001f15 	stw	r16,124(sp)
102100b0:	008001c4 	movi	r2,7
102100b4:	14014c16 	blt	r2,r16,102105e8 <___svfprintf_internal_r+0x15b8>
102100b8:	44800204 	addi	r18,r8,8
102100bc:	d9003717 	ldw	r4,220(sp)
102100c0:	d9403817 	ldw	r5,224(sp)
102100c4:	000d883a 	mov	r6,zero
102100c8:	000f883a 	mov	r7,zero
102100cc:	d8c03e15 	stw	r3,248(sp)
102100d0:	0216c600 	call	10216c60 <__eqdf2>
102100d4:	d8c03e17 	ldw	r3,248(sp)
102100d8:	db003317 	ldw	r12,204(sp)
102100dc:	10009526 	beq	r2,zero,10210334 <___svfprintf_internal_r+0x1304>
102100e0:	dac03117 	ldw	r11,196(sp)
102100e4:	60bfffc4 	addi	r2,r12,-1
102100e8:	1887883a 	add	r3,r3,r2
102100ec:	59000044 	addi	r4,r11,1
102100f0:	84000044 	addi	r16,r16,1
102100f4:	90800115 	stw	r2,4(r18)
102100f8:	91000015 	stw	r4,0(r18)
102100fc:	d8c02015 	stw	r3,128(sp)
10210100:	dc001f15 	stw	r16,124(sp)
10210104:	008001c4 	movi	r2,7
10210108:	1400b316 	blt	r2,r16,102103d8 <___svfprintf_internal_r+0x13a8>
1021010c:	94800204 	addi	r18,r18,8
10210110:	dac03a17 	ldw	r11,232(sp)
10210114:	dd4022c4 	addi	r21,sp,139
10210118:	84000044 	addi	r16,r16,1
1021011c:	1ac7883a 	add	r3,r3,r11
10210120:	95400015 	stw	r21,0(r18)
10210124:	92c00115 	stw	r11,4(r18)
10210128:	d8c02015 	stw	r3,128(sp)
1021012c:	dc001f15 	stw	r16,124(sp)
10210130:	008001c4 	movi	r2,7
10210134:	14001416 	blt	r2,r16,10210188 <___svfprintf_internal_r+0x1158>
10210138:	92000204 	addi	r8,r18,8
1021013c:	003d9106 	br	1020f784 <___svfprintf_internal_r+0x754>
10210140:	d9002f17 	ldw	r4,188(sp)
10210144:	b80b883a 	mov	r5,r23
10210148:	b00d883a 	mov	r6,r22
1021014c:	02139040 	call	10213904 <__ssprint_r>
10210150:	103dc826 	beq	r2,zero,1020f874 <___svfprintf_internal_r+0x844>
10210154:	003c7e06 	br	1020f350 <___svfprintf_internal_r+0x320>
10210158:	010408b4 	movhi	r4,4130
1021015c:	21353984 	addi	r4,r4,-11034
10210160:	d9002b15 	stw	r4,172(sp)
10210164:	dac02b17 	ldw	r11,172(sp)
10210168:	1c07883a 	add	r3,r3,r16
1021016c:	44000115 	stw	r16,4(r8)
10210170:	42c00015 	stw	r11,0(r8)
10210174:	10800044 	addi	r2,r2,1
10210178:	d8c02015 	stw	r3,128(sp)
1021017c:	d8801f15 	stw	r2,124(sp)
10210180:	010001c4 	movi	r4,7
10210184:	20bd7e0e 	bge	r4,r2,1020f780 <___svfprintf_internal_r+0x750>
10210188:	d9002f17 	ldw	r4,188(sp)
1021018c:	b80b883a 	mov	r5,r23
10210190:	b00d883a 	mov	r6,r22
10210194:	02139040 	call	10213904 <__ssprint_r>
10210198:	103c6d1e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
1021019c:	d8c02017 	ldw	r3,128(sp)
102101a0:	da000404 	addi	r8,sp,16
102101a4:	003d7706 	br	1020f784 <___svfprintf_internal_r+0x754>
102101a8:	10803fcc 	andi	r2,r2,255
102101ac:	1000201e 	bne	r2,zero,10210230 <___svfprintf_internal_r+0x1200>
102101b0:	8880004c 	andi	r2,r17,1
102101b4:	10001e26 	beq	r2,zero,10210230 <___svfprintf_internal_r+0x1200>
102101b8:	00800c04 	movi	r2,48
102101bc:	d8c01dc4 	addi	r3,sp,119
102101c0:	d8801dc5 	stb	r2,119(sp)
102101c4:	dc803d17 	ldw	r18,244(sp)
102101c8:	d8c03115 	stw	r3,196(sp)
102101cc:	003cbf06 	br	1020f4cc <___svfprintf_internal_r+0x49c>
102101d0:	d9002f17 	ldw	r4,188(sp)
102101d4:	b80b883a 	mov	r5,r23
102101d8:	b00d883a 	mov	r6,r22
102101dc:	02139040 	call	10213904 <__ssprint_r>
102101e0:	103c5b1e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
102101e4:	d8c02017 	ldw	r3,128(sp)
102101e8:	da000404 	addi	r8,sp,16
102101ec:	003d5806 	br	1020f750 <___svfprintf_internal_r+0x720>
102101f0:	d9002f17 	ldw	r4,188(sp)
102101f4:	b80b883a 	mov	r5,r23
102101f8:	b00d883a 	mov	r6,r22
102101fc:	02139040 	call	10213904 <__ssprint_r>
10210200:	103c531e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
10210204:	d8c02017 	ldw	r3,128(sp)
10210208:	da000404 	addi	r8,sp,16
1021020c:	003d1906 	br	1020f674 <___svfprintf_internal_r+0x644>
10210210:	d9002f17 	ldw	r4,188(sp)
10210214:	b80b883a 	mov	r5,r23
10210218:	b00d883a 	mov	r6,r22
1021021c:	02139040 	call	10213904 <__ssprint_r>
10210220:	103c4b1e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
10210224:	d8c02017 	ldw	r3,128(sp)
10210228:	da000404 	addi	r8,sp,16
1021022c:	003d0306 	br	1020f63c <___svfprintf_internal_r+0x60c>
10210230:	0025883a 	mov	r18,zero
10210234:	dd803115 	stw	r22,196(sp)
10210238:	003ca406 	br	1020f4cc <___svfprintf_internal_r+0x49c>
1021023c:	dc002617 	ldw	r16,152(sp)
10210240:	0401480e 	bge	zero,r16,10210764 <___svfprintf_internal_r+0x1734>
10210244:	db003117 	ldw	r12,196(sp)
10210248:	dac03317 	ldw	r11,204(sp)
1021024c:	62e1883a 	add	r16,r12,r11
10210250:	db003417 	ldw	r12,208(sp)
10210254:	5825883a 	mov	r18,r11
10210258:	62c0010e 	bge	r12,r11,10210260 <___svfprintf_internal_r+0x1230>
1021025c:	6025883a 	mov	r18,r12
10210260:	04800b0e 	bge	zero,r18,10210290 <___svfprintf_internal_r+0x1260>
10210264:	d8801f17 	ldw	r2,124(sp)
10210268:	dac03117 	ldw	r11,196(sp)
1021026c:	1c87883a 	add	r3,r3,r18
10210270:	10800044 	addi	r2,r2,1
10210274:	42c00015 	stw	r11,0(r8)
10210278:	44800115 	stw	r18,4(r8)
1021027c:	d8c02015 	stw	r3,128(sp)
10210280:	d8801f15 	stw	r2,124(sp)
10210284:	010001c4 	movi	r4,7
10210288:	20823f16 	blt	r4,r2,10210b88 <___svfprintf_internal_r+0x1b58>
1021028c:	42000204 	addi	r8,r8,8
10210290:	90023b16 	blt	r18,zero,10210b80 <___svfprintf_internal_r+0x1b50>
10210294:	db003417 	ldw	r12,208(sp)
10210298:	64a5c83a 	sub	r18,r12,r18
1021029c:	0480780e 	bge	zero,r18,10210480 <___svfprintf_internal_r+0x1450>
102102a0:	05400404 	movi	r21,16
102102a4:	d8801f17 	ldw	r2,124(sp)
102102a8:	ac81140e 	bge	r21,r18,102106fc <___svfprintf_internal_r+0x16cc>
102102ac:	014408b4 	movhi	r5,4130
102102b0:	29753984 	addi	r5,r5,-11034
102102b4:	d9402b15 	stw	r5,172(sp)
102102b8:	070001c4 	movi	fp,7
102102bc:	dcc02f17 	ldw	r19,188(sp)
102102c0:	00000306 	br	102102d0 <___svfprintf_internal_r+0x12a0>
102102c4:	42000204 	addi	r8,r8,8
102102c8:	94bffc04 	addi	r18,r18,-16
102102cc:	ac810e0e 	bge	r21,r18,10210708 <___svfprintf_internal_r+0x16d8>
102102d0:	18c00404 	addi	r3,r3,16
102102d4:	10800044 	addi	r2,r2,1
102102d8:	45000015 	stw	r20,0(r8)
102102dc:	45400115 	stw	r21,4(r8)
102102e0:	d8c02015 	stw	r3,128(sp)
102102e4:	d8801f15 	stw	r2,124(sp)
102102e8:	e0bff60e 	bge	fp,r2,102102c4 <___svfprintf_internal_r+0x1294>
102102ec:	9809883a 	mov	r4,r19
102102f0:	b80b883a 	mov	r5,r23
102102f4:	b00d883a 	mov	r6,r22
102102f8:	02139040 	call	10213904 <__ssprint_r>
102102fc:	103c141e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
10210300:	d8c02017 	ldw	r3,128(sp)
10210304:	d8801f17 	ldw	r2,124(sp)
10210308:	da000404 	addi	r8,sp,16
1021030c:	003fee06 	br	102102c8 <___svfprintf_internal_r+0x1298>
10210310:	d9002f17 	ldw	r4,188(sp)
10210314:	b80b883a 	mov	r5,r23
10210318:	b00d883a 	mov	r6,r22
1021031c:	02139040 	call	10213904 <__ssprint_r>
10210320:	103c0b1e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
10210324:	d8c02017 	ldw	r3,128(sp)
10210328:	d8802787 	ldb	r2,158(sp)
1021032c:	da000404 	addi	r8,sp,16
10210330:	003cb506 	br	1020f608 <___svfprintf_internal_r+0x5d8>
10210334:	657fffc4 	addi	r21,r12,-1
10210338:	057f750e 	bge	zero,r21,10210110 <___svfprintf_internal_r+0x10e0>
1021033c:	07000404 	movi	fp,16
10210340:	e542ed0e 	bge	fp,r21,10210ef8 <___svfprintf_internal_r+0x1ec8>
10210344:	010408b4 	movhi	r4,4130
10210348:	21353984 	addi	r4,r4,-11034
1021034c:	d9002b15 	stw	r4,172(sp)
10210350:	01c001c4 	movi	r7,7
10210354:	dcc02f17 	ldw	r19,188(sp)
10210358:	00000306 	br	10210368 <___svfprintf_internal_r+0x1338>
1021035c:	ad7ffc04 	addi	r21,r21,-16
10210360:	94800204 	addi	r18,r18,8
10210364:	e540130e 	bge	fp,r21,102103b4 <___svfprintf_internal_r+0x1384>
10210368:	18c00404 	addi	r3,r3,16
1021036c:	84000044 	addi	r16,r16,1
10210370:	95000015 	stw	r20,0(r18)
10210374:	97000115 	stw	fp,4(r18)
10210378:	d8c02015 	stw	r3,128(sp)
1021037c:	dc001f15 	stw	r16,124(sp)
10210380:	3c3ff60e 	bge	r7,r16,1021035c <___svfprintf_internal_r+0x132c>
10210384:	9809883a 	mov	r4,r19
10210388:	b80b883a 	mov	r5,r23
1021038c:	b00d883a 	mov	r6,r22
10210390:	d9c03e15 	stw	r7,248(sp)
10210394:	02139040 	call	10213904 <__ssprint_r>
10210398:	d9c03e17 	ldw	r7,248(sp)
1021039c:	103bec1e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
102103a0:	ad7ffc04 	addi	r21,r21,-16
102103a4:	d8c02017 	ldw	r3,128(sp)
102103a8:	dc001f17 	ldw	r16,124(sp)
102103ac:	dc800404 	addi	r18,sp,16
102103b0:	e57fed16 	blt	fp,r21,10210368 <___svfprintf_internal_r+0x1338>
102103b4:	dac02b17 	ldw	r11,172(sp)
102103b8:	1d47883a 	add	r3,r3,r21
102103bc:	84000044 	addi	r16,r16,1
102103c0:	92c00015 	stw	r11,0(r18)
102103c4:	95400115 	stw	r21,4(r18)
102103c8:	d8c02015 	stw	r3,128(sp)
102103cc:	dc001f15 	stw	r16,124(sp)
102103d0:	008001c4 	movi	r2,7
102103d4:	143f4d0e 	bge	r2,r16,1021010c <___svfprintf_internal_r+0x10dc>
102103d8:	d9002f17 	ldw	r4,188(sp)
102103dc:	b80b883a 	mov	r5,r23
102103e0:	b00d883a 	mov	r6,r22
102103e4:	02139040 	call	10213904 <__ssprint_r>
102103e8:	103bd91e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
102103ec:	d8c02017 	ldw	r3,128(sp)
102103f0:	dc001f17 	ldw	r16,124(sp)
102103f4:	dc800404 	addi	r18,sp,16
102103f8:	003f4506 	br	10210110 <___svfprintf_internal_r+0x10e0>
102103fc:	00800084 	movi	r2,2
10210400:	9f06b03a 	or	r3,r19,fp
10210404:	003d5706 	br	1020f964 <___svfprintf_internal_r+0x934>
10210408:	1cc00017 	ldw	r19,0(r3)
1021040c:	dac02d17 	ldw	r11,180(sp)
10210410:	9839d7fa 	srai	fp,r19,31
10210414:	5ac00104 	addi	r11,r11,4
10210418:	dac02d15 	stw	r11,180(sp)
1021041c:	e005883a 	mov	r2,fp
10210420:	003c0306 	br	1020f430 <___svfprintf_internal_r+0x400>
10210424:	dac02d17 	ldw	r11,180(sp)
10210428:	0039883a 	mov	fp,zero
1021042c:	0005883a 	mov	r2,zero
10210430:	5cc00017 	ldw	r19,0(r11)
10210434:	5ac00104 	addi	r11,r11,4
10210438:	dac02d15 	stw	r11,180(sp)
1021043c:	9807883a 	mov	r3,r19
10210440:	003d4806 	br	1020f964 <___svfprintf_internal_r+0x934>
10210444:	db002d17 	ldw	r12,180(sp)
10210448:	14c00017 	ldw	r19,0(r2)
1021044c:	0039883a 	mov	fp,zero
10210450:	63000104 	addi	r12,r12,4
10210454:	db002d15 	stw	r12,180(sp)
10210458:	00800044 	movi	r2,1
1021045c:	9807883a 	mov	r3,r19
10210460:	003d4006 	br	1020f964 <___svfprintf_internal_r+0x934>
10210464:	d9002f17 	ldw	r4,188(sp)
10210468:	b80b883a 	mov	r5,r23
1021046c:	b00d883a 	mov	r6,r22
10210470:	02139040 	call	10213904 <__ssprint_r>
10210474:	103bb61e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
10210478:	d8c02017 	ldw	r3,128(sp)
1021047c:	da000404 	addi	r8,sp,16
10210480:	db003117 	ldw	r12,196(sp)
10210484:	dac03417 	ldw	r11,208(sp)
10210488:	d8802617 	ldw	r2,152(sp)
1021048c:	62e5883a 	add	r18,r12,r11
10210490:	db003317 	ldw	r12,204(sp)
10210494:	13000216 	blt	r2,r12,102104a0 <___svfprintf_internal_r+0x1470>
10210498:	8900004c 	andi	r4,r17,1
1021049c:	20000c26 	beq	r4,zero,102104d0 <___svfprintf_internal_r+0x14a0>
102104a0:	dac03917 	ldw	r11,228(sp)
102104a4:	d9001f17 	ldw	r4,124(sp)
102104a8:	db003517 	ldw	r12,212(sp)
102104ac:	1ac7883a 	add	r3,r3,r11
102104b0:	21000044 	addi	r4,r4,1
102104b4:	43000015 	stw	r12,0(r8)
102104b8:	42c00115 	stw	r11,4(r8)
102104bc:	d8c02015 	stw	r3,128(sp)
102104c0:	d9001f15 	stw	r4,124(sp)
102104c4:	014001c4 	movi	r5,7
102104c8:	2901b716 	blt	r5,r4,10210ba8 <___svfprintf_internal_r+0x1b78>
102104cc:	42000204 	addi	r8,r8,8
102104d0:	dac03317 	ldw	r11,204(sp)
102104d4:	8489c83a 	sub	r4,r16,r18
102104d8:	5885c83a 	sub	r2,r11,r2
102104dc:	1021883a 	mov	r16,r2
102104e0:	2080010e 	bge	r4,r2,102104e8 <___svfprintf_internal_r+0x14b8>
102104e4:	2021883a 	mov	r16,r4
102104e8:	04000a0e 	bge	zero,r16,10210514 <___svfprintf_internal_r+0x14e4>
102104ec:	d9001f17 	ldw	r4,124(sp)
102104f0:	1c07883a 	add	r3,r3,r16
102104f4:	44800015 	stw	r18,0(r8)
102104f8:	21000044 	addi	r4,r4,1
102104fc:	44000115 	stw	r16,4(r8)
10210500:	d8c02015 	stw	r3,128(sp)
10210504:	d9001f15 	stw	r4,124(sp)
10210508:	014001c4 	movi	r5,7
1021050c:	2901bf16 	blt	r5,r4,10210c0c <___svfprintf_internal_r+0x1bdc>
10210510:	42000204 	addi	r8,r8,8
10210514:	8001bb16 	blt	r16,zero,10210c04 <___svfprintf_internal_r+0x1bd4>
10210518:	1421c83a 	sub	r16,r2,r16
1021051c:	043c990e 	bge	zero,r16,1020f784 <___svfprintf_internal_r+0x754>
10210520:	04800404 	movi	r18,16
10210524:	d8801f17 	ldw	r2,124(sp)
10210528:	943f0b0e 	bge	r18,r16,10210158 <___svfprintf_internal_r+0x1128>
1021052c:	014408b4 	movhi	r5,4130
10210530:	29753984 	addi	r5,r5,-11034
10210534:	d9402b15 	stw	r5,172(sp)
10210538:	054001c4 	movi	r21,7
1021053c:	dcc02f17 	ldw	r19,188(sp)
10210540:	00000306 	br	10210550 <___svfprintf_internal_r+0x1520>
10210544:	42000204 	addi	r8,r8,8
10210548:	843ffc04 	addi	r16,r16,-16
1021054c:	943f050e 	bge	r18,r16,10210164 <___svfprintf_internal_r+0x1134>
10210550:	18c00404 	addi	r3,r3,16
10210554:	10800044 	addi	r2,r2,1
10210558:	45000015 	stw	r20,0(r8)
1021055c:	44800115 	stw	r18,4(r8)
10210560:	d8c02015 	stw	r3,128(sp)
10210564:	d8801f15 	stw	r2,124(sp)
10210568:	a8bff60e 	bge	r21,r2,10210544 <___svfprintf_internal_r+0x1514>
1021056c:	9809883a 	mov	r4,r19
10210570:	b80b883a 	mov	r5,r23
10210574:	b00d883a 	mov	r6,r22
10210578:	02139040 	call	10213904 <__ssprint_r>
1021057c:	103b741e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
10210580:	d8c02017 	ldw	r3,128(sp)
10210584:	d8801f17 	ldw	r2,124(sp)
10210588:	da000404 	addi	r8,sp,16
1021058c:	003fee06 	br	10210548 <___svfprintf_internal_r+0x1518>
10210590:	8888703a 	and	r4,r17,r2
10210594:	203eb31e 	bne	r4,zero,10210064 <___svfprintf_internal_r+0x1034>
10210598:	dc001f17 	ldw	r16,124(sp)
1021059c:	db003117 	ldw	r12,196(sp)
102105a0:	40800115 	stw	r2,4(r8)
102105a4:	84000044 	addi	r16,r16,1
102105a8:	43000015 	stw	r12,0(r8)
102105ac:	d8c02015 	stw	r3,128(sp)
102105b0:	dc001f15 	stw	r16,124(sp)
102105b4:	008001c4 	movi	r2,7
102105b8:	143f8716 	blt	r2,r16,102103d8 <___svfprintf_internal_r+0x13a8>
102105bc:	44800204 	addi	r18,r8,8
102105c0:	003ed306 	br	10210110 <___svfprintf_internal_r+0x10e0>
102105c4:	d9002f17 	ldw	r4,188(sp)
102105c8:	b80b883a 	mov	r5,r23
102105cc:	b00d883a 	mov	r6,r22
102105d0:	02139040 	call	10213904 <__ssprint_r>
102105d4:	103b5e1e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
102105d8:	d8c02017 	ldw	r3,128(sp)
102105dc:	dc001f17 	ldw	r16,124(sp)
102105e0:	da000404 	addi	r8,sp,16
102105e4:	003eaa06 	br	10210090 <___svfprintf_internal_r+0x1060>
102105e8:	d9002f17 	ldw	r4,188(sp)
102105ec:	b80b883a 	mov	r5,r23
102105f0:	b00d883a 	mov	r6,r22
102105f4:	02139040 	call	10213904 <__ssprint_r>
102105f8:	103b551e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
102105fc:	d8c02017 	ldw	r3,128(sp)
10210600:	dc001f17 	ldw	r16,124(sp)
10210604:	dc800404 	addi	r18,sp,16
10210608:	003eac06 	br	102100bc <___svfprintf_internal_r+0x108c>
1021060c:	d9002f17 	ldw	r4,188(sp)
10210610:	b80b883a 	mov	r5,r23
10210614:	b00d883a 	mov	r6,r22
10210618:	02139040 	call	10213904 <__ssprint_r>
1021061c:	103b4c1e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
10210620:	d8c02017 	ldw	r3,128(sp)
10210624:	da000404 	addi	r8,sp,16
10210628:	003c1506 	br	1020f680 <___svfprintf_internal_r+0x650>
1021062c:	da004015 	stw	r8,256(sp)
10210630:	da403f15 	stw	r9,252(sp)
10210634:	020b83c0 	call	1020b83c <__fpclassifyd>
10210638:	da004017 	ldw	r8,256(sp)
1021063c:	da403f17 	ldw	r9,252(sp)
10210640:	1000951e 	bne	r2,zero,10210898 <___svfprintf_internal_r+0x1868>
10210644:	008011c4 	movi	r2,71
10210648:	1400fb16 	blt	r2,r16,10210a38 <___svfprintf_internal_r+0x1a08>
1021064c:	030408b4 	movhi	r12,4130
10210650:	63341204 	addi	r12,r12,-12216
10210654:	db003115 	stw	r12,196(sp)
10210658:	00c000c4 	movi	r3,3
1021065c:	00bfdfc4 	movi	r2,-129
10210660:	d8c02a15 	stw	r3,168(sp)
10210664:	88a2703a 	and	r17,r17,r2
10210668:	dd402783 	ldbu	r21,158(sp)
1021066c:	dcc02d15 	stw	r19,180(sp)
10210670:	1825883a 	mov	r18,r3
10210674:	d8003215 	stw	zero,200(sp)
10210678:	d8003415 	stw	zero,208(sp)
1021067c:	003b9806 	br	1020f4e0 <___svfprintf_internal_r+0x4b0>
10210680:	1c000007 	ldb	r16,0(r3)
10210684:	1805883a 	mov	r2,r3
10210688:	003abf06 	br	1020f188 <___svfprintf_internal_r+0x158>
1021068c:	00800084 	movi	r2,2
10210690:	003cb406 	br	1020f964 <___svfprintf_internal_r+0x934>
10210694:	88c0100c 	andi	r3,r17,64
10210698:	1800f626 	beq	r3,zero,10210a74 <___svfprintf_internal_r+0x1a44>
1021069c:	dac02d17 	ldw	r11,180(sp)
102106a0:	14c0000b 	ldhu	r19,0(r2)
102106a4:	0039883a 	mov	fp,zero
102106a8:	5ac00104 	addi	r11,r11,4
102106ac:	dac02d15 	stw	r11,180(sp)
102106b0:	003cbd06 	br	1020f9a8 <___svfprintf_internal_r+0x978>
102106b4:	8880040c 	andi	r2,r17,16
102106b8:	1000091e 	bne	r2,zero,102106e0 <___svfprintf_internal_r+0x16b0>
102106bc:	8c40100c 	andi	r17,r17,64
102106c0:	88000726 	beq	r17,zero,102106e0 <___svfprintf_internal_r+0x16b0>
102106c4:	db002d17 	ldw	r12,180(sp)
102106c8:	dac03017 	ldw	r11,192(sp)
102106cc:	60800017 	ldw	r2,0(r12)
102106d0:	63000104 	addi	r12,r12,4
102106d4:	db002d15 	stw	r12,180(sp)
102106d8:	12c0000d 	sth	r11,0(r2)
102106dc:	003a8006 	br	1020f0e0 <___svfprintf_internal_r+0xb0>
102106e0:	db002d17 	ldw	r12,180(sp)
102106e4:	dac03017 	ldw	r11,192(sp)
102106e8:	60800017 	ldw	r2,0(r12)
102106ec:	63000104 	addi	r12,r12,4
102106f0:	db002d15 	stw	r12,180(sp)
102106f4:	12c00015 	stw	r11,0(r2)
102106f8:	003a7906 	br	1020f0e0 <___svfprintf_internal_r+0xb0>
102106fc:	010408b4 	movhi	r4,4130
10210700:	21353984 	addi	r4,r4,-11034
10210704:	d9002b15 	stw	r4,172(sp)
10210708:	dac02b17 	ldw	r11,172(sp)
1021070c:	1c87883a 	add	r3,r3,r18
10210710:	10800044 	addi	r2,r2,1
10210714:	42c00015 	stw	r11,0(r8)
10210718:	44800115 	stw	r18,4(r8)
1021071c:	d8c02015 	stw	r3,128(sp)
10210720:	d8801f15 	stw	r2,124(sp)
10210724:	010001c4 	movi	r4,7
10210728:	20bf4e16 	blt	r4,r2,10210464 <___svfprintf_internal_r+0x1434>
1021072c:	42000204 	addi	r8,r8,8
10210730:	003f5306 	br	10210480 <___svfprintf_internal_r+0x1450>
10210734:	010408b4 	movhi	r4,4130
10210738:	21353984 	addi	r4,r4,-11034
1021073c:	d9002b15 	stw	r4,172(sp)
10210740:	003bf906 	br	1020f728 <___svfprintf_internal_r+0x6f8>
10210744:	d9002f17 	ldw	r4,188(sp)
10210748:	b80b883a 	mov	r5,r23
1021074c:	b00d883a 	mov	r6,r22
10210750:	02139040 	call	10213904 <__ssprint_r>
10210754:	103afe1e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
10210758:	d8c02017 	ldw	r3,128(sp)
1021075c:	da000404 	addi	r8,sp,16
10210760:	003dc606 	br	1020fe7c <___svfprintf_internal_r+0xe4c>
10210764:	d8801f17 	ldw	r2,124(sp)
10210768:	030408b4 	movhi	r12,4130
1021076c:	01000044 	movi	r4,1
10210770:	18c00044 	addi	r3,r3,1
10210774:	10800044 	addi	r2,r2,1
10210778:	63342004 	addi	r12,r12,-12160
1021077c:	41000115 	stw	r4,4(r8)
10210780:	43000015 	stw	r12,0(r8)
10210784:	d8c02015 	stw	r3,128(sp)
10210788:	d8801f15 	stw	r2,124(sp)
1021078c:	010001c4 	movi	r4,7
10210790:	2080ad16 	blt	r4,r2,10210a48 <___svfprintf_internal_r+0x1a18>
10210794:	42000204 	addi	r8,r8,8
10210798:	8000041e 	bne	r16,zero,102107ac <___svfprintf_internal_r+0x177c>
1021079c:	dac03317 	ldw	r11,204(sp)
102107a0:	5800021e 	bne	r11,zero,102107ac <___svfprintf_internal_r+0x177c>
102107a4:	8880004c 	andi	r2,r17,1
102107a8:	103bf626 	beq	r2,zero,1020f784 <___svfprintf_internal_r+0x754>
102107ac:	db003917 	ldw	r12,228(sp)
102107b0:	d8801f17 	ldw	r2,124(sp)
102107b4:	dac03517 	ldw	r11,212(sp)
102107b8:	1b07883a 	add	r3,r3,r12
102107bc:	10800044 	addi	r2,r2,1
102107c0:	42c00015 	stw	r11,0(r8)
102107c4:	43000115 	stw	r12,4(r8)
102107c8:	d8c02015 	stw	r3,128(sp)
102107cc:	d8801f15 	stw	r2,124(sp)
102107d0:	010001c4 	movi	r4,7
102107d4:	20818616 	blt	r4,r2,10210df0 <___svfprintf_internal_r+0x1dc0>
102107d8:	42000204 	addi	r8,r8,8
102107dc:	0421c83a 	sub	r16,zero,r16
102107e0:	0400bc0e 	bge	zero,r16,10210ad4 <___svfprintf_internal_r+0x1aa4>
102107e4:	04800404 	movi	r18,16
102107e8:	9400f80e 	bge	r18,r16,10210bcc <___svfprintf_internal_r+0x1b9c>
102107ec:	010408b4 	movhi	r4,4130
102107f0:	21353984 	addi	r4,r4,-11034
102107f4:	d9002b15 	stw	r4,172(sp)
102107f8:	054001c4 	movi	r21,7
102107fc:	dcc02f17 	ldw	r19,188(sp)
10210800:	00000306 	br	10210810 <___svfprintf_internal_r+0x17e0>
10210804:	42000204 	addi	r8,r8,8
10210808:	843ffc04 	addi	r16,r16,-16
1021080c:	9400f20e 	bge	r18,r16,10210bd8 <___svfprintf_internal_r+0x1ba8>
10210810:	18c00404 	addi	r3,r3,16
10210814:	10800044 	addi	r2,r2,1
10210818:	45000015 	stw	r20,0(r8)
1021081c:	44800115 	stw	r18,4(r8)
10210820:	d8c02015 	stw	r3,128(sp)
10210824:	d8801f15 	stw	r2,124(sp)
10210828:	a8bff60e 	bge	r21,r2,10210804 <___svfprintf_internal_r+0x17d4>
1021082c:	9809883a 	mov	r4,r19
10210830:	b80b883a 	mov	r5,r23
10210834:	b00d883a 	mov	r6,r22
10210838:	02139040 	call	10213904 <__ssprint_r>
1021083c:	103ac41e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
10210840:	d8c02017 	ldw	r3,128(sp)
10210844:	d8801f17 	ldw	r2,124(sp)
10210848:	da000404 	addi	r8,sp,16
1021084c:	003fee06 	br	10210808 <___svfprintf_internal_r+0x17d8>
10210850:	db002e17 	ldw	r12,184(sp)
10210854:	1805883a 	mov	r2,r3
10210858:	dac02d15 	stw	r11,180(sp)
1021085c:	0319c83a 	sub	r12,zero,r12
10210860:	db002e15 	stw	r12,184(sp)
10210864:	003acf06 	br	1020f3a4 <___svfprintf_internal_r+0x374>
10210868:	18800044 	addi	r2,r3,1
1021086c:	8c400814 	ori	r17,r17,32
10210870:	1c000047 	ldb	r16,1(r3)
10210874:	003a4406 	br	1020f188 <___svfprintf_internal_r+0x158>
10210878:	d9002f17 	ldw	r4,188(sp)
1021087c:	b80b883a 	mov	r5,r23
10210880:	b00d883a 	mov	r6,r22
10210884:	02139040 	call	10213904 <__ssprint_r>
10210888:	103ab11e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
1021088c:	d8c02017 	ldw	r3,128(sp)
10210890:	da000404 	addi	r8,sp,16
10210894:	003d8a06 	br	1020fec0 <___svfprintf_internal_r+0xe90>
10210898:	057ff7c4 	movi	r21,-33
1021089c:	00bfffc4 	movi	r2,-1
102108a0:	856a703a 	and	r21,r16,r21
102108a4:	48807126 	beq	r9,r2,10210a6c <___svfprintf_internal_r+0x1a3c>
102108a8:	008011c4 	movi	r2,71
102108ac:	a8814d26 	beq	r21,r2,10210de4 <___svfprintf_internal_r+0x1db4>
102108b0:	db003817 	ldw	r12,224(sp)
102108b4:	8ac04014 	ori	r11,r17,256
102108b8:	dac02d15 	stw	r11,180(sp)
102108bc:	60015616 	blt	r12,zero,10210e18 <___svfprintf_internal_r+0x1de8>
102108c0:	dc803817 	ldw	r18,224(sp)
102108c4:	d8002a05 	stb	zero,168(sp)
102108c8:	00801984 	movi	r2,102
102108cc:	80808c26 	beq	r16,r2,10210b00 <___svfprintf_internal_r+0x1ad0>
102108d0:	00801184 	movi	r2,70
102108d4:	80808a26 	beq	r16,r2,10210b00 <___svfprintf_internal_r+0x1ad0>
102108d8:	00801144 	movi	r2,69
102108dc:	a8815226 	beq	r21,r2,10210e28 <___svfprintf_internal_r+0x1df8>
102108e0:	4839883a 	mov	fp,r9
102108e4:	d8802604 	addi	r2,sp,152
102108e8:	d8800115 	stw	r2,4(sp)
102108ec:	d9002f17 	ldw	r4,188(sp)
102108f0:	d8802504 	addi	r2,sp,148
102108f4:	d9403717 	ldw	r5,220(sp)
102108f8:	d8800215 	stw	r2,8(sp)
102108fc:	d8802104 	addi	r2,sp,132
10210900:	df000015 	stw	fp,0(sp)
10210904:	d8800315 	stw	r2,12(sp)
10210908:	900d883a 	mov	r6,r18
1021090c:	01c00084 	movi	r7,2
10210910:	da004015 	stw	r8,256(sp)
10210914:	da403f15 	stw	r9,252(sp)
10210918:	0206f140 	call	10206f14 <_dtoa_r>
1021091c:	d8803115 	stw	r2,196(sp)
10210920:	008019c4 	movi	r2,103
10210924:	da004017 	ldw	r8,256(sp)
10210928:	da403f17 	ldw	r9,252(sp)
1021092c:	80800226 	beq	r16,r2,10210938 <___svfprintf_internal_r+0x1908>
10210930:	008011c4 	movi	r2,71
10210934:	8080841e 	bne	r16,r2,10210b48 <___svfprintf_internal_r+0x1b18>
10210938:	8880004c 	andi	r2,r17,1
1021093c:	10014f26 	beq	r2,zero,10210e7c <___svfprintf_internal_r+0x1e4c>
10210940:	db003117 	ldw	r12,196(sp)
10210944:	6715883a 	add	r10,r12,fp
10210948:	d9003717 	ldw	r4,220(sp)
1021094c:	900b883a 	mov	r5,r18
10210950:	000d883a 	mov	r6,zero
10210954:	000f883a 	mov	r7,zero
10210958:	da004015 	stw	r8,256(sp)
1021095c:	da403f15 	stw	r9,252(sp)
10210960:	da803e15 	stw	r10,248(sp)
10210964:	0216c600 	call	10216c60 <__eqdf2>
10210968:	da004017 	ldw	r8,256(sp)
1021096c:	da403f17 	ldw	r9,252(sp)
10210970:	da803e17 	ldw	r10,248(sp)
10210974:	1000d926 	beq	r2,zero,10210cdc <___svfprintf_internal_r+0x1cac>
10210978:	d8802117 	ldw	r2,132(sp)
1021097c:	1280062e 	bgeu	r2,r10,10210998 <___svfprintf_internal_r+0x1968>
10210980:	01000c04 	movi	r4,48
10210984:	10c00044 	addi	r3,r2,1
10210988:	d8c02115 	stw	r3,132(sp)
1021098c:	11000005 	stb	r4,0(r2)
10210990:	d8802117 	ldw	r2,132(sp)
10210994:	12bffb36 	bltu	r2,r10,10210984 <___svfprintf_internal_r+0x1954>
10210998:	db003117 	ldw	r12,196(sp)
1021099c:	1305c83a 	sub	r2,r2,r12
102109a0:	d8803315 	stw	r2,204(sp)
102109a4:	008011c4 	movi	r2,71
102109a8:	a880b626 	beq	r21,r2,10210c84 <___svfprintf_internal_r+0x1c54>
102109ac:	00801944 	movi	r2,101
102109b0:	14017c0e 	bge	r2,r16,10210fa4 <___svfprintf_internal_r+0x1f74>
102109b4:	00801984 	movi	r2,102
102109b8:	80812626 	beq	r16,r2,10210e54 <___svfprintf_internal_r+0x1e24>
102109bc:	db002617 	ldw	r12,152(sp)
102109c0:	db003415 	stw	r12,208(sp)
102109c4:	db003417 	ldw	r12,208(sp)
102109c8:	dac03317 	ldw	r11,204(sp)
102109cc:	62c11816 	blt	r12,r11,10210e30 <___svfprintf_internal_r+0x1e00>
102109d0:	8c40004c 	andi	r17,r17,1
102109d4:	88013b1e 	bne	r17,zero,10210ec4 <___svfprintf_internal_r+0x1e94>
102109d8:	6005883a 	mov	r2,r12
102109dc:	60012516 	blt	r12,zero,10210e74 <___svfprintf_internal_r+0x1e44>
102109e0:	dc803417 	ldw	r18,208(sp)
102109e4:	df002a07 	ldb	fp,168(sp)
102109e8:	e000b01e 	bne	fp,zero,10210cac <___svfprintf_internal_r+0x1c7c>
102109ec:	dc402d17 	ldw	r17,180(sp)
102109f0:	dd402783 	ldbu	r21,158(sp)
102109f4:	d8802a15 	stw	r2,168(sp)
102109f8:	dcc02d15 	stw	r19,180(sp)
102109fc:	d8003215 	stw	zero,200(sp)
10210a00:	003ab706 	br	1020f4e0 <___svfprintf_internal_r+0x4b0>
10210a04:	008408b4 	movhi	r2,4130
10210a08:	10b41004 	addi	r2,r2,-12224
10210a0c:	d8803115 	stw	r2,196(sp)
10210a10:	003bbb06 	br	1020f900 <___svfprintf_internal_r+0x8d0>
10210a14:	d9002f17 	ldw	r4,188(sp)
10210a18:	04001004 	movi	r16,64
10210a1c:	800b883a 	mov	r5,r16
10210a20:	02025a40 	call	102025a4 <_malloc_r>
10210a24:	b8800015 	stw	r2,0(r23)
10210a28:	b8800415 	stw	r2,16(r23)
10210a2c:	10015f26 	beq	r2,zero,10210fac <___svfprintf_internal_r+0x1f7c>
10210a30:	bc000515 	stw	r16,20(r23)
10210a34:	00399806 	br	1020f098 <___svfprintf_internal_r+0x68>
10210a38:	008408b4 	movhi	r2,4130
10210a3c:	10b41304 	addi	r2,r2,-12212
10210a40:	d8803115 	stw	r2,196(sp)
10210a44:	003f0406 	br	10210658 <___svfprintf_internal_r+0x1628>
10210a48:	d9002f17 	ldw	r4,188(sp)
10210a4c:	b80b883a 	mov	r5,r23
10210a50:	b00d883a 	mov	r6,r22
10210a54:	02139040 	call	10213904 <__ssprint_r>
10210a58:	103a3d1e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
10210a5c:	dc002617 	ldw	r16,152(sp)
10210a60:	d8c02017 	ldw	r3,128(sp)
10210a64:	da000404 	addi	r8,sp,16
10210a68:	003f4b06 	br	10210798 <___svfprintf_internal_r+0x1768>
10210a6c:	02400184 	movi	r9,6
10210a70:	003f8f06 	br	102108b0 <___svfprintf_internal_r+0x1880>
10210a74:	db002d17 	ldw	r12,180(sp)
10210a78:	14c00017 	ldw	r19,0(r2)
10210a7c:	0039883a 	mov	fp,zero
10210a80:	63000104 	addi	r12,r12,4
10210a84:	db002d15 	stw	r12,180(sp)
10210a88:	003bc706 	br	1020f9a8 <___svfprintf_internal_r+0x978>
10210a8c:	d8c03117 	ldw	r3,196(sp)
10210a90:	b0e5c83a 	sub	r18,r22,r3
10210a94:	003a8d06 	br	1020f4cc <___svfprintf_internal_r+0x49c>
10210a98:	da004015 	stw	r8,256(sp)
10210a9c:	02033500 	call	10203350 <strlen>
10210aa0:	1025883a 	mov	r18,r2
10210aa4:	da004017 	ldw	r8,256(sp)
10210aa8:	903bf20e 	bge	r18,zero,1020fa74 <___svfprintf_internal_r+0xa44>
10210aac:	0005883a 	mov	r2,zero
10210ab0:	003bf006 	br	1020fa74 <___svfprintf_internal_r+0xa44>
10210ab4:	d9002f17 	ldw	r4,188(sp)
10210ab8:	b80b883a 	mov	r5,r23
10210abc:	b00d883a 	mov	r6,r22
10210ac0:	02139040 	call	10213904 <__ssprint_r>
10210ac4:	103a221e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
10210ac8:	d8c02017 	ldw	r3,128(sp)
10210acc:	d8801f17 	ldw	r2,124(sp)
10210ad0:	da000404 	addi	r8,sp,16
10210ad4:	db003317 	ldw	r12,204(sp)
10210ad8:	dac03117 	ldw	r11,196(sp)
10210adc:	10800044 	addi	r2,r2,1
10210ae0:	1b07883a 	add	r3,r3,r12
10210ae4:	42c00015 	stw	r11,0(r8)
10210ae8:	43000115 	stw	r12,4(r8)
10210aec:	d8c02015 	stw	r3,128(sp)
10210af0:	d8801f15 	stw	r2,124(sp)
10210af4:	010001c4 	movi	r4,7
10210af8:	20bb210e 	bge	r4,r2,1020f780 <___svfprintf_internal_r+0x750>
10210afc:	003da206 	br	10210188 <___svfprintf_internal_r+0x1158>
10210b00:	d8802604 	addi	r2,sp,152
10210b04:	d8800115 	stw	r2,4(sp)
10210b08:	d9002f17 	ldw	r4,188(sp)
10210b0c:	d8802504 	addi	r2,sp,148
10210b10:	d9403717 	ldw	r5,220(sp)
10210b14:	d8800215 	stw	r2,8(sp)
10210b18:	d8802104 	addi	r2,sp,132
10210b1c:	da400015 	stw	r9,0(sp)
10210b20:	d8800315 	stw	r2,12(sp)
10210b24:	900d883a 	mov	r6,r18
10210b28:	01c000c4 	movi	r7,3
10210b2c:	da004015 	stw	r8,256(sp)
10210b30:	da403f15 	stw	r9,252(sp)
10210b34:	0206f140 	call	10206f14 <_dtoa_r>
10210b38:	da403f17 	ldw	r9,252(sp)
10210b3c:	da004017 	ldw	r8,256(sp)
10210b40:	d8803115 	stw	r2,196(sp)
10210b44:	4839883a 	mov	fp,r9
10210b48:	dac03117 	ldw	r11,196(sp)
10210b4c:	00801184 	movi	r2,70
10210b50:	5f15883a 	add	r10,r11,fp
10210b54:	a8bf7c1e 	bne	r21,r2,10210948 <___svfprintf_internal_r+0x1918>
10210b58:	59000007 	ldb	r4,0(r11)
10210b5c:	00800c04 	movi	r2,48
10210b60:	2080c826 	beq	r4,r2,10210e84 <___svfprintf_internal_r+0x1e54>
10210b64:	d8c02617 	ldw	r3,152(sp)
10210b68:	50d5883a 	add	r10,r10,r3
10210b6c:	003f7606 	br	10210948 <___svfprintf_internal_r+0x1918>
10210b70:	010408b4 	movhi	r4,4130
10210b74:	21353d84 	addi	r4,r4,-11018
10210b78:	d9003615 	stw	r4,216(sp)
10210b7c:	003a9706 	br	1020f5dc <___svfprintf_internal_r+0x5ac>
10210b80:	0025883a 	mov	r18,zero
10210b84:	003dc306 	br	10210294 <___svfprintf_internal_r+0x1264>
10210b88:	d9002f17 	ldw	r4,188(sp)
10210b8c:	b80b883a 	mov	r5,r23
10210b90:	b00d883a 	mov	r6,r22
10210b94:	02139040 	call	10213904 <__ssprint_r>
10210b98:	1039ed1e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
10210b9c:	d8c02017 	ldw	r3,128(sp)
10210ba0:	da000404 	addi	r8,sp,16
10210ba4:	003dba06 	br	10210290 <___svfprintf_internal_r+0x1260>
10210ba8:	d9002f17 	ldw	r4,188(sp)
10210bac:	b80b883a 	mov	r5,r23
10210bb0:	b00d883a 	mov	r6,r22
10210bb4:	02139040 	call	10213904 <__ssprint_r>
10210bb8:	1039e51e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
10210bbc:	d8802617 	ldw	r2,152(sp)
10210bc0:	d8c02017 	ldw	r3,128(sp)
10210bc4:	da000404 	addi	r8,sp,16
10210bc8:	003e4106 	br	102104d0 <___svfprintf_internal_r+0x14a0>
10210bcc:	030408b4 	movhi	r12,4130
10210bd0:	63353984 	addi	r12,r12,-11034
10210bd4:	db002b15 	stw	r12,172(sp)
10210bd8:	dac02b17 	ldw	r11,172(sp)
10210bdc:	1c07883a 	add	r3,r3,r16
10210be0:	10800044 	addi	r2,r2,1
10210be4:	42c00015 	stw	r11,0(r8)
10210be8:	44000115 	stw	r16,4(r8)
10210bec:	d8c02015 	stw	r3,128(sp)
10210bf0:	d8801f15 	stw	r2,124(sp)
10210bf4:	010001c4 	movi	r4,7
10210bf8:	20bfae16 	blt	r4,r2,10210ab4 <___svfprintf_internal_r+0x1a84>
10210bfc:	42000204 	addi	r8,r8,8
10210c00:	003fb406 	br	10210ad4 <___svfprintf_internal_r+0x1aa4>
10210c04:	0021883a 	mov	r16,zero
10210c08:	003e4306 	br	10210518 <___svfprintf_internal_r+0x14e8>
10210c0c:	d9002f17 	ldw	r4,188(sp)
10210c10:	b80b883a 	mov	r5,r23
10210c14:	b00d883a 	mov	r6,r22
10210c18:	02139040 	call	10213904 <__ssprint_r>
10210c1c:	1039cc1e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
10210c20:	d8802617 	ldw	r2,152(sp)
10210c24:	db003317 	ldw	r12,204(sp)
10210c28:	d8c02017 	ldw	r3,128(sp)
10210c2c:	da000404 	addi	r8,sp,16
10210c30:	6085c83a 	sub	r2,r12,r2
10210c34:	003e3706 	br	10210514 <___svfprintf_internal_r+0x14e4>
10210c38:	00800184 	movi	r2,6
10210c3c:	1240012e 	bgeu	r2,r9,10210c44 <___svfprintf_internal_r+0x1c14>
10210c40:	1013883a 	mov	r9,r2
10210c44:	4825883a 	mov	r18,r9
10210c48:	4805883a 	mov	r2,r9
10210c4c:	4800a216 	blt	r9,zero,10210ed8 <___svfprintf_internal_r+0x1ea8>
10210c50:	d8802a15 	stw	r2,168(sp)
10210c54:	008408b4 	movhi	r2,4130
10210c58:	10b41e04 	addi	r2,r2,-12168
10210c5c:	d8803115 	stw	r2,196(sp)
10210c60:	dcc02d15 	stw	r19,180(sp)
10210c64:	d8003215 	stw	zero,200(sp)
10210c68:	d8003415 	stw	zero,208(sp)
10210c6c:	0005883a 	mov	r2,zero
10210c70:	003a2206 	br	1020f4fc <___svfprintf_internal_r+0x4cc>
10210c74:	030408b4 	movhi	r12,4130
10210c78:	63353d84 	addi	r12,r12,-11018
10210c7c:	db003615 	stw	r12,216(sp)
10210c80:	003ae506 	br	1020f818 <___svfprintf_internal_r+0x7e8>
10210c84:	d8c02617 	ldw	r3,152(sp)
10210c88:	00bfff44 	movi	r2,-3
10210c8c:	18801516 	blt	r3,r2,10210ce4 <___svfprintf_internal_r+0x1cb4>
10210c90:	48c01416 	blt	r9,r3,10210ce4 <___svfprintf_internal_r+0x1cb4>
10210c94:	d8c03415 	stw	r3,208(sp)
10210c98:	040019c4 	movi	r16,103
10210c9c:	003f4906 	br	102109c4 <___svfprintf_internal_r+0x1994>
10210ca0:	05400b44 	movi	r21,45
10210ca4:	dd402785 	stb	r21,158(sp)
10210ca8:	003b1006 	br	1020f8ec <___svfprintf_internal_r+0x8bc>
10210cac:	00c00b44 	movi	r3,45
10210cb0:	d8802a15 	stw	r2,168(sp)
10210cb4:	dc402d17 	ldw	r17,180(sp)
10210cb8:	d8c02785 	stb	r3,158(sp)
10210cbc:	dcc02d15 	stw	r19,180(sp)
10210cc0:	d8003215 	stw	zero,200(sp)
10210cc4:	00800b44 	movi	r2,45
10210cc8:	003a0906 	br	1020f4f0 <___svfprintf_internal_r+0x4c0>
10210ccc:	010408b4 	movhi	r4,4130
10210cd0:	21353984 	addi	r4,r4,-11034
10210cd4:	d9002b15 	stw	r4,172(sp)
10210cd8:	003cc306 	br	1020ffe8 <___svfprintf_internal_r+0xfb8>
10210cdc:	5005883a 	mov	r2,r10
10210ce0:	003f2d06 	br	10210998 <___svfprintf_internal_r+0x1968>
10210ce4:	843fff84 	addi	r16,r16,-2
10210ce8:	1f3fffc4 	addi	fp,r3,-1
10210cec:	df002615 	stw	fp,152(sp)
10210cf0:	dc0022c5 	stb	r16,139(sp)
10210cf4:	e000a016 	blt	fp,zero,10210f78 <___svfprintf_internal_r+0x1f48>
10210cf8:	00800ac4 	movi	r2,43
10210cfc:	d8802305 	stb	r2,140(sp)
10210d00:	00800244 	movi	r2,9
10210d04:	1700800e 	bge	r2,fp,10210f08 <___svfprintf_internal_r+0x1ed8>
10210d08:	dd4022c4 	addi	r21,sp,139
10210d0c:	dc002b15 	stw	r16,172(sp)
10210d10:	4025883a 	mov	r18,r8
10210d14:	a821883a 	mov	r16,r21
10210d18:	e009883a 	mov	r4,fp
10210d1c:	01400284 	movi	r5,10
10210d20:	02024180 	call	10202418 <__modsi3>
10210d24:	10800c04 	addi	r2,r2,48
10210d28:	843fffc4 	addi	r16,r16,-1
10210d2c:	e009883a 	mov	r4,fp
10210d30:	01400284 	movi	r5,10
10210d34:	80800005 	stb	r2,0(r16)
10210d38:	02023c40 	call	102023c4 <__divsi3>
10210d3c:	1039883a 	mov	fp,r2
10210d40:	00800244 	movi	r2,9
10210d44:	173ff416 	blt	r2,fp,10210d18 <___svfprintf_internal_r+0x1ce8>
10210d48:	9011883a 	mov	r8,r18
10210d4c:	e0800c04 	addi	r2,fp,48
10210d50:	8025883a 	mov	r18,r16
10210d54:	913fffc4 	addi	r4,r18,-1
10210d58:	90bfffc5 	stb	r2,-1(r18)
10210d5c:	dc002b17 	ldw	r16,172(sp)
10210d60:	25408e2e 	bgeu	r4,r21,10210f9c <___svfprintf_internal_r+0x1f6c>
10210d64:	d9402384 	addi	r5,sp,142
10210d68:	2c8bc83a 	sub	r5,r5,r18
10210d6c:	d8c02344 	addi	r3,sp,141
10210d70:	a94b883a 	add	r5,r21,r5
10210d74:	00000106 	br	10210d7c <___svfprintf_internal_r+0x1d4c>
10210d78:	20800003 	ldbu	r2,0(r4)
10210d7c:	18800005 	stb	r2,0(r3)
10210d80:	18c00044 	addi	r3,r3,1
10210d84:	21000044 	addi	r4,r4,1
10210d88:	197ffb1e 	bne	r3,r5,10210d78 <___svfprintf_internal_r+0x1d48>
10210d8c:	d8802304 	addi	r2,sp,140
10210d90:	1485c83a 	sub	r2,r2,r18
10210d94:	d8c02344 	addi	r3,sp,141
10210d98:	1885883a 	add	r2,r3,r2
10210d9c:	dac03317 	ldw	r11,204(sp)
10210da0:	156bc83a 	sub	r21,r2,r21
10210da4:	dd403a15 	stw	r21,232(sp)
10210da8:	00800044 	movi	r2,1
10210dac:	5d65883a 	add	r18,r11,r21
10210db0:	12c0770e 	bge	r2,r11,10210f90 <___svfprintf_internal_r+0x1f60>
10210db4:	94800044 	addi	r18,r18,1
10210db8:	9005883a 	mov	r2,r18
10210dbc:	90007216 	blt	r18,zero,10210f88 <___svfprintf_internal_r+0x1f58>
10210dc0:	d8003415 	stw	zero,208(sp)
10210dc4:	003f0706 	br	102109e4 <___svfprintf_internal_r+0x19b4>
10210dc8:	da402a15 	stw	r9,168(sp)
10210dcc:	dd402783 	ldbu	r21,158(sp)
10210dd0:	4825883a 	mov	r18,r9
10210dd4:	dcc02d15 	stw	r19,180(sp)
10210dd8:	d8003215 	stw	zero,200(sp)
10210ddc:	d8003415 	stw	zero,208(sp)
10210de0:	0039bf06 	br	1020f4e0 <___svfprintf_internal_r+0x4b0>
10210de4:	483eb21e 	bne	r9,zero,102108b0 <___svfprintf_internal_r+0x1880>
10210de8:	9013883a 	mov	r9,r18
10210dec:	003eb006 	br	102108b0 <___svfprintf_internal_r+0x1880>
10210df0:	d9002f17 	ldw	r4,188(sp)
10210df4:	b80b883a 	mov	r5,r23
10210df8:	b00d883a 	mov	r6,r22
10210dfc:	02139040 	call	10213904 <__ssprint_r>
10210e00:	1039531e 	bne	r2,zero,1020f350 <___svfprintf_internal_r+0x320>
10210e04:	dc002617 	ldw	r16,152(sp)
10210e08:	d8c02017 	ldw	r3,128(sp)
10210e0c:	d8801f17 	ldw	r2,124(sp)
10210e10:	da000404 	addi	r8,sp,16
10210e14:	003e7106 	br	102107dc <___svfprintf_internal_r+0x17ac>
10210e18:	00c00b44 	movi	r3,45
10210e1c:	64a0003c 	xorhi	r18,r12,32768
10210e20:	d8c02a05 	stb	r3,168(sp)
10210e24:	003ea806 	br	102108c8 <___svfprintf_internal_r+0x1898>
10210e28:	4f000044 	addi	fp,r9,1
10210e2c:	003ead06 	br	102108e4 <___svfprintf_internal_r+0x18b4>
10210e30:	d8c03417 	ldw	r3,208(sp)
10210e34:	00c0410e 	bge	zero,r3,10210f3c <___svfprintf_internal_r+0x1f0c>
10210e38:	04800044 	movi	r18,1
10210e3c:	dac03317 	ldw	r11,204(sp)
10210e40:	92e5883a 	add	r18,r18,r11
10210e44:	9005883a 	mov	r2,r18
10210e48:	903ee60e 	bge	r18,zero,102109e4 <___svfprintf_internal_r+0x19b4>
10210e4c:	0005883a 	mov	r2,zero
10210e50:	003ee406 	br	102109e4 <___svfprintf_internal_r+0x19b4>
10210e54:	d8c02617 	ldw	r3,152(sp)
10210e58:	d8c03415 	stw	r3,208(sp)
10210e5c:	00c0310e 	bge	zero,r3,10210f24 <___svfprintf_internal_r+0x1ef4>
10210e60:	48001f1e 	bne	r9,zero,10210ee0 <___svfprintf_internal_r+0x1eb0>
10210e64:	8c40004c 	andi	r17,r17,1
10210e68:	88001d1e 	bne	r17,zero,10210ee0 <___svfprintf_internal_r+0x1eb0>
10210e6c:	1805883a 	mov	r2,r3
10210e70:	183edb0e 	bge	r3,zero,102109e0 <___svfprintf_internal_r+0x19b0>
10210e74:	0005883a 	mov	r2,zero
10210e78:	003ed906 	br	102109e0 <___svfprintf_internal_r+0x19b0>
10210e7c:	d8802117 	ldw	r2,132(sp)
10210e80:	003ec506 	br	10210998 <___svfprintf_internal_r+0x1968>
10210e84:	d9003717 	ldw	r4,220(sp)
10210e88:	900b883a 	mov	r5,r18
10210e8c:	000d883a 	mov	r6,zero
10210e90:	000f883a 	mov	r7,zero
10210e94:	da004015 	stw	r8,256(sp)
10210e98:	da403f15 	stw	r9,252(sp)
10210e9c:	da803e15 	stw	r10,248(sp)
10210ea0:	0216c600 	call	10216c60 <__eqdf2>
10210ea4:	da004017 	ldw	r8,256(sp)
10210ea8:	da403f17 	ldw	r9,252(sp)
10210eac:	da803e17 	ldw	r10,248(sp)
10210eb0:	103f2c26 	beq	r2,zero,10210b64 <___svfprintf_internal_r+0x1b34>
10210eb4:	00800044 	movi	r2,1
10210eb8:	1707c83a 	sub	r3,r2,fp
10210ebc:	d8c02615 	stw	r3,152(sp)
10210ec0:	003f2906 	br	10210b68 <___svfprintf_internal_r+0x1b38>
10210ec4:	db003417 	ldw	r12,208(sp)
10210ec8:	64800044 	addi	r18,r12,1
10210ecc:	9005883a 	mov	r2,r18
10210ed0:	903ec40e 	bge	r18,zero,102109e4 <___svfprintf_internal_r+0x19b4>
10210ed4:	003fdd06 	br	10210e4c <___svfprintf_internal_r+0x1e1c>
10210ed8:	0005883a 	mov	r2,zero
10210edc:	003f5c06 	br	10210c50 <___svfprintf_internal_r+0x1c20>
10210ee0:	dac03417 	ldw	r11,208(sp)
10210ee4:	4a400044 	addi	r9,r9,1
10210ee8:	5a65883a 	add	r18,r11,r9
10210eec:	9005883a 	mov	r2,r18
10210ef0:	903ebc0e 	bge	r18,zero,102109e4 <___svfprintf_internal_r+0x19b4>
10210ef4:	003fd506 	br	10210e4c <___svfprintf_internal_r+0x1e1c>
10210ef8:	008408b4 	movhi	r2,4130
10210efc:	10b53984 	addi	r2,r2,-11034
10210f00:	d8802b15 	stw	r2,172(sp)
10210f04:	003d2b06 	br	102103b4 <___svfprintf_internal_r+0x1384>
10210f08:	00800c04 	movi	r2,48
10210f0c:	e0c00c04 	addi	r3,fp,48
10210f10:	d8802345 	stb	r2,141(sp)
10210f14:	d8c02385 	stb	r3,142(sp)
10210f18:	d88023c4 	addi	r2,sp,143
10210f1c:	dd4022c4 	addi	r21,sp,139
10210f20:	003f9e06 	br	10210d9c <___svfprintf_internal_r+0x1d6c>
10210f24:	4800081e 	bne	r9,zero,10210f48 <___svfprintf_internal_r+0x1f18>
10210f28:	8c40004c 	andi	r17,r17,1
10210f2c:	8800061e 	bne	r17,zero,10210f48 <___svfprintf_internal_r+0x1f18>
10210f30:	00800044 	movi	r2,1
10210f34:	1025883a 	mov	r18,r2
10210f38:	003eaa06 	br	102109e4 <___svfprintf_internal_r+0x19b4>
10210f3c:	04800084 	movi	r18,2
10210f40:	90e5c83a 	sub	r18,r18,r3
10210f44:	003fbd06 	br	10210e3c <___svfprintf_internal_r+0x1e0c>
10210f48:	4c800084 	addi	r18,r9,2
10210f4c:	9005883a 	mov	r2,r18
10210f50:	903ea40e 	bge	r18,zero,102109e4 <___svfprintf_internal_r+0x19b4>
10210f54:	003fbd06 	br	10210e4c <___svfprintf_internal_r+0x1e1c>
10210f58:	dac02d17 	ldw	r11,180(sp)
10210f5c:	5a400017 	ldw	r9,0(r11)
10210f60:	5ac00104 	addi	r11,r11,4
10210f64:	dac02d15 	stw	r11,180(sp)
10210f68:	483e410e 	bge	r9,zero,10210870 <___svfprintf_internal_r+0x1840>
10210f6c:	027fffc4 	movi	r9,-1
10210f70:	1c000047 	ldb	r16,1(r3)
10210f74:	00388406 	br	1020f188 <___svfprintf_internal_r+0x158>
10210f78:	00800b44 	movi	r2,45
10210f7c:	0739c83a 	sub	fp,zero,fp
10210f80:	d8802305 	stb	r2,140(sp)
10210f84:	003f5e06 	br	10210d00 <___svfprintf_internal_r+0x1cd0>
10210f88:	0005883a 	mov	r2,zero
10210f8c:	003f8c06 	br	10210dc0 <___svfprintf_internal_r+0x1d90>
10210f90:	88a2703a 	and	r17,r17,r2
10210f94:	883f8826 	beq	r17,zero,10210db8 <___svfprintf_internal_r+0x1d88>
10210f98:	003f8606 	br	10210db4 <___svfprintf_internal_r+0x1d84>
10210f9c:	d8802344 	addi	r2,sp,141
10210fa0:	003f7e06 	br	10210d9c <___svfprintf_internal_r+0x1d6c>
10210fa4:	d8c02617 	ldw	r3,152(sp)
10210fa8:	003f4f06 	br	10210ce8 <___svfprintf_internal_r+0x1cb8>
10210fac:	dac02f17 	ldw	r11,188(sp)
10210fb0:	00800304 	movi	r2,12
10210fb4:	58800015 	stw	r2,0(r11)
10210fb8:	00bfffc4 	movi	r2,-1
10210fbc:	0038e806 	br	1020f360 <___svfprintf_internal_r+0x330>

10210fc0 <__submore>:
10210fc0:	defffa04 	addi	sp,sp,-24
10210fc4:	dc000015 	stw	r16,0(sp)
10210fc8:	2821883a 	mov	r16,r5
10210fcc:	29400c17 	ldw	r5,48(r5)
10210fd0:	dfc00515 	stw	ra,20(sp)
10210fd4:	dd000415 	stw	r20,16(sp)
10210fd8:	dcc00315 	stw	r19,12(sp)
10210fdc:	dc800215 	stw	r18,8(sp)
10210fe0:	dc400115 	stw	r17,4(sp)
10210fe4:	80801004 	addi	r2,r16,64
10210fe8:	28801726 	beq	r5,r2,10211048 <__submore+0x88>
10210fec:	84400d17 	ldw	r17,52(r16)
10210ff0:	8c67883a 	add	r19,r17,r17
10210ff4:	980d883a 	mov	r6,r19
10210ff8:	020b0e40 	call	1020b0e4 <_realloc_r>
10210ffc:	1025883a 	mov	r18,r2
10211000:	10002226 	beq	r2,zero,1021108c <__submore+0xcc>
10211004:	1469883a 	add	r20,r2,r17
10211008:	a009883a 	mov	r4,r20
1021100c:	100b883a 	mov	r5,r2
10211010:	880d883a 	mov	r6,r17
10211014:	0202dc80 	call	10202dc8 <memcpy>
10211018:	0005883a 	mov	r2,zero
1021101c:	85000015 	stw	r20,0(r16)
10211020:	84800c15 	stw	r18,48(r16)
10211024:	84c00d15 	stw	r19,52(r16)
10211028:	dfc00517 	ldw	ra,20(sp)
1021102c:	dd000417 	ldw	r20,16(sp)
10211030:	dcc00317 	ldw	r19,12(sp)
10211034:	dc800217 	ldw	r18,8(sp)
10211038:	dc400117 	ldw	r17,4(sp)
1021103c:	dc000017 	ldw	r16,0(sp)
10211040:	dec00604 	addi	sp,sp,24
10211044:	f800283a 	ret
10211048:	04410004 	movi	r17,1024
1021104c:	880b883a 	mov	r5,r17
10211050:	02025a40 	call	102025a4 <_malloc_r>
10211054:	1007883a 	mov	r3,r2
10211058:	10000c26 	beq	r2,zero,1021108c <__submore+0xcc>
1021105c:	80801083 	ldbu	r2,66(r16)
10211060:	80c00c15 	stw	r3,48(r16)
10211064:	84400d15 	stw	r17,52(r16)
10211068:	1880ffc5 	stb	r2,1023(r3)
1021106c:	81401043 	ldbu	r5,65(r16)
10211070:	1900ff44 	addi	r4,r3,1021
10211074:	0005883a 	mov	r2,zero
10211078:	1940ff85 	stb	r5,1022(r3)
1021107c:	81401003 	ldbu	r5,64(r16)
10211080:	1940ff45 	stb	r5,1021(r3)
10211084:	81000015 	stw	r4,0(r16)
10211088:	003fe706 	br	10211028 <__submore+0x68>
1021108c:	00bfffc4 	movi	r2,-1
10211090:	003fe506 	br	10211028 <__submore+0x68>

10211094 <_ungetc_r>:
10211094:	00bfffc4 	movi	r2,-1
10211098:	28805e26 	beq	r5,r2,10211214 <_ungetc_r+0x180>
1021109c:	defffc04 	addi	sp,sp,-16
102110a0:	dc800215 	stw	r18,8(sp)
102110a4:	dc400115 	stw	r17,4(sp)
102110a8:	dc000015 	stw	r16,0(sp)
102110ac:	dfc00315 	stw	ra,12(sp)
102110b0:	2025883a 	mov	r18,r4
102110b4:	3021883a 	mov	r16,r6
102110b8:	2823883a 	mov	r17,r5
102110bc:	20000226 	beq	r4,zero,102110c8 <_ungetc_r+0x34>
102110c0:	20800e17 	ldw	r2,56(r4)
102110c4:	10002d26 	beq	r2,zero,1021117c <_ungetc_r+0xe8>
102110c8:	80c0030b 	ldhu	r3,12(r16)
102110cc:	1888000c 	andi	r2,r3,8192
102110d0:	1000051e 	bne	r2,zero,102110e8 <_ungetc_r+0x54>
102110d4:	81001917 	ldw	r4,100(r16)
102110d8:	00b7ffc4 	movi	r2,-8193
102110dc:	18c80014 	ori	r3,r3,8192
102110e0:	2084703a 	and	r2,r4,r2
102110e4:	80801915 	stw	r2,100(r16)
102110e8:	00bff7c4 	movi	r2,-33
102110ec:	1884703a 	and	r2,r3,r2
102110f0:	8080030d 	sth	r2,12(r16)
102110f4:	1900010c 	andi	r4,r3,4
102110f8:	2000061e 	bne	r4,zero,10211114 <_ungetc_r+0x80>
102110fc:	1900040c 	andi	r4,r3,16
10211100:	20001c26 	beq	r4,zero,10211174 <_ungetc_r+0xe0>
10211104:	18c0020c 	andi	r3,r3,8
10211108:	1800321e 	bne	r3,zero,102111d4 <_ungetc_r+0x140>
1021110c:	10800114 	ori	r2,r2,4
10211110:	8080030d 	sth	r2,12(r16)
10211114:	80800c17 	ldw	r2,48(r16)
10211118:	8c403fcc 	andi	r17,r17,255
1021111c:	10001926 	beq	r2,zero,10211184 <_ungetc_r+0xf0>
10211120:	80c00117 	ldw	r3,4(r16)
10211124:	80800d17 	ldw	r2,52(r16)
10211128:	18800e0e 	bge	r3,r2,10211164 <_ungetc_r+0xd0>
1021112c:	80c00017 	ldw	r3,0(r16)
10211130:	8805883a 	mov	r2,r17
10211134:	193fffc4 	addi	r4,r3,-1
10211138:	81000015 	stw	r4,0(r16)
1021113c:	1c7fffc5 	stb	r17,-1(r3)
10211140:	80c00117 	ldw	r3,4(r16)
10211144:	18c00044 	addi	r3,r3,1
10211148:	80c00115 	stw	r3,4(r16)
1021114c:	dfc00317 	ldw	ra,12(sp)
10211150:	dc800217 	ldw	r18,8(sp)
10211154:	dc400117 	ldw	r17,4(sp)
10211158:	dc000017 	ldw	r16,0(sp)
1021115c:	dec00404 	addi	sp,sp,16
10211160:	f800283a 	ret
10211164:	9009883a 	mov	r4,r18
10211168:	800b883a 	mov	r5,r16
1021116c:	0210fc00 	call	10210fc0 <__submore>
10211170:	103fee26 	beq	r2,zero,1021112c <_ungetc_r+0x98>
10211174:	00bfffc4 	movi	r2,-1
10211178:	003ff406 	br	1021114c <_ungetc_r+0xb8>
1021117c:	0208c200 	call	10208c20 <__sinit>
10211180:	003fd106 	br	102110c8 <_ungetc_r+0x34>
10211184:	80800417 	ldw	r2,16(r16)
10211188:	80c00017 	ldw	r3,0(r16)
1021118c:	10000326 	beq	r2,zero,1021119c <_ungetc_r+0x108>
10211190:	10c0022e 	bgeu	r2,r3,1021119c <_ungetc_r+0x108>
10211194:	18bfffc3 	ldbu	r2,-1(r3)
10211198:	14401826 	beq	r2,r17,102111fc <_ungetc_r+0x168>
1021119c:	81400117 	ldw	r5,4(r16)
102111a0:	80801084 	addi	r2,r16,66
102111a4:	81001004 	addi	r4,r16,64
102111a8:	80c00e15 	stw	r3,56(r16)
102111ac:	80800015 	stw	r2,0(r16)
102111b0:	00c000c4 	movi	r3,3
102111b4:	00800044 	movi	r2,1
102111b8:	80800115 	stw	r2,4(r16)
102111bc:	81400f15 	stw	r5,60(r16)
102111c0:	81000c15 	stw	r4,48(r16)
102111c4:	80c00d15 	stw	r3,52(r16)
102111c8:	84401085 	stb	r17,66(r16)
102111cc:	8805883a 	mov	r2,r17
102111d0:	003fde06 	br	1021114c <_ungetc_r+0xb8>
102111d4:	9009883a 	mov	r4,r18
102111d8:	800b883a 	mov	r5,r16
102111dc:	02088440 	call	10208844 <_fflush_r>
102111e0:	103fe41e 	bne	r2,zero,10211174 <_ungetc_r+0xe0>
102111e4:	8080030b 	ldhu	r2,12(r16)
102111e8:	00fffdc4 	movi	r3,-9
102111ec:	80000215 	stw	zero,8(r16)
102111f0:	1884703a 	and	r2,r3,r2
102111f4:	80000615 	stw	zero,24(r16)
102111f8:	003fc406 	br	1021110c <_ungetc_r+0x78>
102111fc:	81000117 	ldw	r4,4(r16)
10211200:	18ffffc4 	addi	r3,r3,-1
10211204:	80c00015 	stw	r3,0(r16)
10211208:	20c00044 	addi	r3,r4,1
1021120c:	80c00115 	stw	r3,4(r16)
10211210:	003fce06 	br	1021114c <_ungetc_r+0xb8>
10211214:	00bfffc4 	movi	r2,-1
10211218:	f800283a 	ret

1021121c <ungetc>:
1021121c:	00c408b4 	movhi	r3,4130
10211220:	18fd0604 	addi	r3,r3,-3048
10211224:	2005883a 	mov	r2,r4
10211228:	19000017 	ldw	r4,0(r3)
1021122c:	280d883a 	mov	r6,r5
10211230:	100b883a 	mov	r5,r2
10211234:	02110941 	jmpi	10211094 <_ungetc_r>

10211238 <__sprint_r.part.0>:
10211238:	28801917 	ldw	r2,100(r5)
1021123c:	defff604 	addi	sp,sp,-40
10211240:	dd400515 	stw	r21,20(sp)
10211244:	dcc00315 	stw	r19,12(sp)
10211248:	dfc00915 	stw	ra,36(sp)
1021124c:	df000815 	stw	fp,32(sp)
10211250:	ddc00715 	stw	r23,28(sp)
10211254:	dd800615 	stw	r22,24(sp)
10211258:	dd000415 	stw	r20,16(sp)
1021125c:	dc800215 	stw	r18,8(sp)
10211260:	dc400115 	stw	r17,4(sp)
10211264:	dc000015 	stw	r16,0(sp)
10211268:	1088000c 	andi	r2,r2,8192
1021126c:	2827883a 	mov	r19,r5
10211270:	302b883a 	mov	r21,r6
10211274:	10002d26 	beq	r2,zero,1021132c <__sprint_r.part.0+0xf4>
10211278:	30800217 	ldw	r2,8(r6)
1021127c:	35800017 	ldw	r22,0(r6)
10211280:	10002826 	beq	r2,zero,10211324 <__sprint_r.part.0+0xec>
10211284:	2029883a 	mov	r20,r4
10211288:	b5c00104 	addi	r23,r22,4
1021128c:	04bfffc4 	movi	r18,-1
10211290:	bc400017 	ldw	r17,0(r23)
10211294:	b4000017 	ldw	r16,0(r22)
10211298:	0039883a 	mov	fp,zero
1021129c:	8822d0ba 	srli	r17,r17,2
102112a0:	04400316 	blt	zero,r17,102112b0 <__sprint_r.part.0+0x78>
102112a4:	00001806 	br	10211308 <__sprint_r.part.0+0xd0>
102112a8:	84000104 	addi	r16,r16,4
102112ac:	8f001526 	beq	r17,fp,10211304 <__sprint_r.part.0+0xcc>
102112b0:	81400017 	ldw	r5,0(r16)
102112b4:	a009883a 	mov	r4,r20
102112b8:	980d883a 	mov	r6,r19
102112bc:	0212a180 	call	10212a18 <_fputwc_r>
102112c0:	e7000044 	addi	fp,fp,1
102112c4:	14bff81e 	bne	r2,r18,102112a8 <__sprint_r.part.0+0x70>
102112c8:	9005883a 	mov	r2,r18
102112cc:	a8000215 	stw	zero,8(r21)
102112d0:	a8000115 	stw	zero,4(r21)
102112d4:	dfc00917 	ldw	ra,36(sp)
102112d8:	df000817 	ldw	fp,32(sp)
102112dc:	ddc00717 	ldw	r23,28(sp)
102112e0:	dd800617 	ldw	r22,24(sp)
102112e4:	dd400517 	ldw	r21,20(sp)
102112e8:	dd000417 	ldw	r20,16(sp)
102112ec:	dcc00317 	ldw	r19,12(sp)
102112f0:	dc800217 	ldw	r18,8(sp)
102112f4:	dc400117 	ldw	r17,4(sp)
102112f8:	dc000017 	ldw	r16,0(sp)
102112fc:	dec00a04 	addi	sp,sp,40
10211300:	f800283a 	ret
10211304:	a8800217 	ldw	r2,8(r21)
10211308:	8c63883a 	add	r17,r17,r17
1021130c:	8c63883a 	add	r17,r17,r17
10211310:	1445c83a 	sub	r2,r2,r17
10211314:	a8800215 	stw	r2,8(r21)
10211318:	b5800204 	addi	r22,r22,8
1021131c:	bdc00204 	addi	r23,r23,8
10211320:	103fdb1e 	bne	r2,zero,10211290 <__sprint_r.part.0+0x58>
10211324:	0005883a 	mov	r2,zero
10211328:	003fe806 	br	102112cc <__sprint_r.part.0+0x94>
1021132c:	02090840 	call	10209084 <__sfvwrite_r>
10211330:	003fe606 	br	102112cc <__sprint_r.part.0+0x94>

10211334 <__sprint_r>:
10211334:	30c00217 	ldw	r3,8(r6)
10211338:	18000126 	beq	r3,zero,10211340 <__sprint_r+0xc>
1021133c:	02112381 	jmpi	10211238 <__sprint_r.part.0>
10211340:	30000115 	stw	zero,4(r6)
10211344:	0005883a 	mov	r2,zero
10211348:	f800283a 	ret

1021134c <___vfiprintf_internal_r>:
1021134c:	deffca04 	addi	sp,sp,-216
10211350:	dd803215 	stw	r22,200(sp)
10211354:	dd403115 	stw	r21,196(sp)
10211358:	dfc03515 	stw	ra,212(sp)
1021135c:	df003415 	stw	fp,208(sp)
10211360:	ddc03315 	stw	r23,204(sp)
10211364:	dd003015 	stw	r20,192(sp)
10211368:	dcc02f15 	stw	r19,188(sp)
1021136c:	dc802e15 	stw	r18,184(sp)
10211370:	dc402d15 	stw	r17,180(sp)
10211374:	dc002c15 	stw	r16,176(sp)
10211378:	d9002015 	stw	r4,128(sp)
1021137c:	d9c02215 	stw	r7,136(sp)
10211380:	282b883a 	mov	r21,r5
10211384:	302d883a 	mov	r22,r6
10211388:	20000226 	beq	r4,zero,10211394 <___vfiprintf_internal_r+0x48>
1021138c:	20800e17 	ldw	r2,56(r4)
10211390:	1001b126 	beq	r2,zero,10211a58 <___vfiprintf_internal_r+0x70c>
10211394:	a880030b 	ldhu	r2,12(r21)
10211398:	10c8000c 	andi	r3,r2,8192
1021139c:	1800061e 	bne	r3,zero,102113b8 <___vfiprintf_internal_r+0x6c>
102113a0:	a9001917 	ldw	r4,100(r21)
102113a4:	00f7ffc4 	movi	r3,-8193
102113a8:	10880014 	ori	r2,r2,8192
102113ac:	20c6703a 	and	r3,r4,r3
102113b0:	a880030d 	sth	r2,12(r21)
102113b4:	a8c01915 	stw	r3,100(r21)
102113b8:	10c0020c 	andi	r3,r2,8
102113bc:	18018926 	beq	r3,zero,102119e4 <___vfiprintf_internal_r+0x698>
102113c0:	a8c00417 	ldw	r3,16(r21)
102113c4:	18018726 	beq	r3,zero,102119e4 <___vfiprintf_internal_r+0x698>
102113c8:	1080068c 	andi	r2,r2,26
102113cc:	00c00284 	movi	r3,10
102113d0:	10c18c26 	beq	r2,r3,10211a04 <___vfiprintf_internal_r+0x6b8>
102113d4:	d8801a04 	addi	r2,sp,104
102113d8:	d8c019c4 	addi	r3,sp,103
102113dc:	070408b4 	movhi	fp,4130
102113e0:	05c408b4 	movhi	r23,4130
102113e4:	10c9c83a 	sub	r4,r2,r3
102113e8:	e7354584 	addi	fp,fp,-10986
102113ec:	bdf54184 	addi	r23,r23,-11002
102113f0:	d8801e15 	stw	r2,120(sp)
102113f4:	d8c01f15 	stw	r3,124(sp)
102113f8:	dec01a15 	stw	sp,104(sp)
102113fc:	d8001c15 	stw	zero,112(sp)
10211400:	d8001b15 	stw	zero,108(sp)
10211404:	d8002615 	stw	zero,152(sp)
10211408:	d8002315 	stw	zero,140(sp)
1021140c:	d9002715 	stw	r4,156(sp)
10211410:	d811883a 	mov	r8,sp
10211414:	dd402115 	stw	r21,132(sp)
10211418:	b021883a 	mov	r16,r22
1021141c:	80800007 	ldb	r2,0(r16)
10211420:	10037226 	beq	r2,zero,102121ec <___vfiprintf_internal_r+0xea0>
10211424:	01000944 	movi	r4,37
10211428:	11037026 	beq	r2,r4,102121ec <___vfiprintf_internal_r+0xea0>
1021142c:	8005883a 	mov	r2,r16
10211430:	00000106 	br	10211438 <___vfiprintf_internal_r+0xec>
10211434:	19000326 	beq	r3,r4,10211444 <___vfiprintf_internal_r+0xf8>
10211438:	10800044 	addi	r2,r2,1
1021143c:	10c00007 	ldb	r3,0(r2)
10211440:	183ffc1e 	bne	r3,zero,10211434 <___vfiprintf_internal_r+0xe8>
10211444:	1425c83a 	sub	r18,r2,r16
10211448:	1023883a 	mov	r17,r2
1021144c:	90001026 	beq	r18,zero,10211490 <___vfiprintf_internal_r+0x144>
10211450:	d8c01c17 	ldw	r3,112(sp)
10211454:	d8801b17 	ldw	r2,108(sp)
10211458:	44000015 	stw	r16,0(r8)
1021145c:	90c7883a 	add	r3,r18,r3
10211460:	10800044 	addi	r2,r2,1
10211464:	44800115 	stw	r18,4(r8)
10211468:	d8c01c15 	stw	r3,112(sp)
1021146c:	d8801b15 	stw	r2,108(sp)
10211470:	010001c4 	movi	r4,7
10211474:	2080750e 	bge	r4,r2,1021164c <___vfiprintf_internal_r+0x300>
10211478:	18036f1e 	bne	r3,zero,10212238 <___vfiprintf_internal_r+0xeec>
1021147c:	d8802317 	ldw	r2,140(sp)
10211480:	d8001b15 	stw	zero,108(sp)
10211484:	d811883a 	mov	r8,sp
10211488:	1485883a 	add	r2,r2,r18
1021148c:	d8802315 	stw	r2,140(sp)
10211490:	88800007 	ldb	r2,0(r17)
10211494:	10041026 	beq	r2,zero,102124d8 <___vfiprintf_internal_r+0x118c>
10211498:	88c00047 	ldb	r3,1(r17)
1021149c:	88800044 	addi	r2,r17,1
102114a0:	d8001d85 	stb	zero,118(sp)
102114a4:	000f883a 	mov	r7,zero
102114a8:	027fffc4 	movi	r9,-1
102114ac:	0025883a 	mov	r18,zero
102114b0:	002b883a 	mov	r21,zero
102114b4:	01401604 	movi	r5,88
102114b8:	01800244 	movi	r6,9
102114bc:	03400a84 	movi	r13,42
102114c0:	03001b04 	movi	r12,108
102114c4:	14000044 	addi	r16,r2,1
102114c8:	18bff804 	addi	r2,r3,-32
102114cc:	28825536 	bltu	r5,r2,10211e24 <___vfiprintf_internal_r+0xad8>
102114d0:	100490ba 	slli	r2,r2,2
102114d4:	01040874 	movhi	r4,4129
102114d8:	21053a04 	addi	r4,r4,5352
102114dc:	1105883a 	add	r2,r2,r4
102114e0:	10800017 	ldw	r2,0(r2)
102114e4:	1000683a 	jmp	r2
102114e8:	10211be8 	cmpgeui	zero,r2,33903
102114ec:	10211e24 	muli	zero,r2,-31624
102114f0:	10211e24 	muli	zero,r2,-31624
102114f4:	10211c08 	cmpgei	zero,r2,-31632
102114f8:	10211e24 	muli	zero,r2,-31624
102114fc:	10211e24 	muli	zero,r2,-31624
10211500:	10211e24 	muli	zero,r2,-31624
10211504:	10211e24 	muli	zero,r2,-31624
10211508:	10211e24 	muli	zero,r2,-31624
1021150c:	10211e24 	muli	zero,r2,-31624
10211510:	10211c18 	cmpnei	zero,r2,-31632
10211514:	10211c38 	rdprs	zero,r2,-31632
10211518:	10211e24 	muli	zero,r2,-31624
1021151c:	10211a60 	cmpeqi	zero,r2,-31639
10211520:	10211b4c 	andi	zero,r2,33901
10211524:	10211e24 	muli	zero,r2,-31624
10211528:	10211acc 	andi	zero,r2,33899
1021152c:	10211adc 	xori	zero,r2,33899
10211530:	10211adc 	xori	zero,r2,33899
10211534:	10211adc 	xori	zero,r2,33899
10211538:	10211adc 	xori	zero,r2,33899
1021153c:	10211adc 	xori	zero,r2,33899
10211540:	10211adc 	xori	zero,r2,33899
10211544:	10211adc 	xori	zero,r2,33899
10211548:	10211adc 	xori	zero,r2,33899
1021154c:	10211adc 	xori	zero,r2,33899
10211550:	10211e24 	muli	zero,r2,-31624
10211554:	10211e24 	muli	zero,r2,-31624
10211558:	10211e24 	muli	zero,r2,-31624
1021155c:	10211e24 	muli	zero,r2,-31624
10211560:	10211e24 	muli	zero,r2,-31624
10211564:	10211e24 	muli	zero,r2,-31624
10211568:	10211e24 	muli	zero,r2,-31624
1021156c:	10211e24 	muli	zero,r2,-31624
10211570:	10211e24 	muli	zero,r2,-31624
10211574:	10211e24 	muli	zero,r2,-31624
10211578:	10211b08 	cmpgei	zero,r2,-31636
1021157c:	10211e24 	muli	zero,r2,-31624
10211580:	10211e24 	muli	zero,r2,-31624
10211584:	10211e24 	muli	zero,r2,-31624
10211588:	10211e24 	muli	zero,r2,-31624
1021158c:	10211e24 	muli	zero,r2,-31624
10211590:	10211e24 	muli	zero,r2,-31624
10211594:	10211e24 	muli	zero,r2,-31624
10211598:	10211e24 	muli	zero,r2,-31624
1021159c:	10211e24 	muli	zero,r2,-31624
102115a0:	10211e24 	muli	zero,r2,-31624
102115a4:	10211694 	ori	zero,r2,33882
102115a8:	10211e24 	muli	zero,r2,-31624
102115ac:	10211e24 	muli	zero,r2,-31624
102115b0:	10211e24 	muli	zero,r2,-31624
102115b4:	10211e24 	muli	zero,r2,-31624
102115b8:	10211e24 	muli	zero,r2,-31624
102115bc:	10211660 	cmpeqi	zero,r2,-31655
102115c0:	10211e24 	muli	zero,r2,-31624
102115c4:	10211e24 	muli	zero,r2,-31624
102115c8:	10211ca8 	cmpgeui	zero,r2,33906
102115cc:	10211e24 	muli	zero,r2,-31624
102115d0:	10211e24 	muli	zero,r2,-31624
102115d4:	10211e24 	muli	zero,r2,-31624
102115d8:	10211e24 	muli	zero,r2,-31624
102115dc:	10211e24 	muli	zero,r2,-31624
102115e0:	10211e24 	muli	zero,r2,-31624
102115e4:	10211e24 	muli	zero,r2,-31624
102115e8:	10211e24 	muli	zero,r2,-31624
102115ec:	10211e24 	muli	zero,r2,-31624
102115f0:	10211e24 	muli	zero,r2,-31624
102115f4:	10211c48 	cmpgei	zero,r2,-31631
102115f8:	10211c74 	orhi	zero,r2,33905
102115fc:	10211e24 	muli	zero,r2,-31624
10211600:	10211e24 	muli	zero,r2,-31624
10211604:	10211e24 	muli	zero,r2,-31624
10211608:	10211d50 	cmplti	zero,r2,-31627
1021160c:	10211c74 	orhi	zero,r2,33905
10211610:	10211e24 	muli	zero,r2,-31624
10211614:	10211e24 	muli	zero,r2,-31624
10211618:	10211d60 	cmpeqi	zero,r2,-31627
1021161c:	10211e24 	muli	zero,r2,-31624
10211620:	10211b8c 	andi	zero,r2,33902
10211624:	10211698 	cmpnei	zero,r2,-31654
10211628:	10211d74 	orhi	zero,r2,33909
1021162c:	10211db4 	orhi	zero,r2,33910
10211630:	10211e24 	muli	zero,r2,-31624
10211634:	10211cfc 	xorhi	zero,r2,33907
10211638:	10211e24 	muli	zero,r2,-31624
1021163c:	10211664 	muli	zero,r2,-31655
10211640:	10211e24 	muli	zero,r2,-31624
10211644:	10211e24 	muli	zero,r2,-31624
10211648:	10211dc4 	addi	zero,r2,-31625
1021164c:	42000204 	addi	r8,r8,8
10211650:	d8802317 	ldw	r2,140(sp)
10211654:	1485883a 	add	r2,r2,r18
10211658:	d8802315 	stw	r2,140(sp)
1021165c:	003f8c06 	br	10211490 <___vfiprintf_internal_r+0x144>
10211660:	ad400414 	ori	r21,r21,16
10211664:	a880080c 	andi	r2,r21,32
10211668:	1001e61e 	bne	r2,zero,10211e04 <___vfiprintf_internal_r+0xab8>
1021166c:	a880040c 	andi	r2,r21,16
10211670:	10034726 	beq	r2,zero,10212390 <___vfiprintf_internal_r+0x1044>
10211674:	d8802217 	ldw	r2,136(sp)
10211678:	001b883a 	mov	r13,zero
1021167c:	15800017 	ldw	r22,0(r2)
10211680:	10800104 	addi	r2,r2,4
10211684:	d8802215 	stw	r2,136(sp)
10211688:	b009883a 	mov	r4,r22
1021168c:	00800044 	movi	r2,1
10211690:	00000c06 	br	102116c4 <___vfiprintf_internal_r+0x378>
10211694:	ad400414 	ori	r21,r21,16
10211698:	a880080c 	andi	r2,r21,32
1021169c:	1001491e 	bne	r2,zero,10211bc4 <___vfiprintf_internal_r+0x878>
102116a0:	a880040c 	andi	r2,r21,16
102116a4:	10032d26 	beq	r2,zero,1021235c <___vfiprintf_internal_r+0x1010>
102116a8:	d9002217 	ldw	r4,136(sp)
102116ac:	001b883a 	mov	r13,zero
102116b0:	0005883a 	mov	r2,zero
102116b4:	25800017 	ldw	r22,0(r4)
102116b8:	21000104 	addi	r4,r4,4
102116bc:	d9002215 	stw	r4,136(sp)
102116c0:	b009883a 	mov	r4,r22
102116c4:	d8001d85 	stb	zero,118(sp)
102116c8:	4827883a 	mov	r19,r9
102116cc:	001d883a 	mov	r14,zero
102116d0:	48000216 	blt	r9,zero,102116dc <___vfiprintf_internal_r+0x390>
102116d4:	00ffdfc4 	movi	r3,-129
102116d8:	a8ea703a 	and	r21,r21,r3
102116dc:	2002071e 	bne	r4,zero,10211efc <___vfiprintf_internal_r+0xbb0>
102116e0:	4802ad26 	beq	r9,zero,10212198 <___vfiprintf_internal_r+0xe4c>
102116e4:	10803fcc 	andi	r2,r2,255
102116e8:	00c00044 	movi	r3,1
102116ec:	10c22b26 	beq	r2,r3,10211f9c <___vfiprintf_internal_r+0xc50>
102116f0:	00c00084 	movi	r3,2
102116f4:	dd001a04 	addi	r20,sp,104
102116f8:	10c0dd1e 	bne	r2,r3,10211a70 <___vfiprintf_internal_r+0x724>
102116fc:	d9002617 	ldw	r4,152(sp)
10211700:	b08003cc 	andi	r2,r22,15
10211704:	6806973a 	slli	r3,r13,28
10211708:	2085883a 	add	r2,r4,r2
1021170c:	b02cd13a 	srli	r22,r22,4
10211710:	10800003 	ldbu	r2,0(r2)
10211714:	681ad13a 	srli	r13,r13,4
10211718:	a53fffc4 	addi	r20,r20,-1
1021171c:	1dacb03a 	or	r22,r3,r22
10211720:	a0800005 	stb	r2,0(r20)
10211724:	b344b03a 	or	r2,r22,r13
10211728:	103ff51e 	bne	r2,zero,10211700 <___vfiprintf_internal_r+0x3b4>
1021172c:	d9001e17 	ldw	r4,120(sp)
10211730:	2527c83a 	sub	r19,r4,r20
10211734:	9823883a 	mov	r17,r19
10211738:	9a40010e 	bge	r19,r9,10211740 <___vfiprintf_internal_r+0x3f4>
1021173c:	4823883a 	mov	r17,r9
10211740:	73803fcc 	andi	r14,r14,255
10211744:	7380201c 	xori	r14,r14,128
10211748:	73bfe004 	addi	r14,r14,-128
1021174c:	70000126 	beq	r14,zero,10211754 <___vfiprintf_internal_r+0x408>
10211750:	8c400044 	addi	r17,r17,1
10211754:	ab40008c 	andi	r13,r21,2
10211758:	68000126 	beq	r13,zero,10211760 <___vfiprintf_internal_r+0x414>
1021175c:	8c400084 	addi	r17,r17,2
10211760:	ad80210c 	andi	r22,r21,132
10211764:	b001c51e 	bne	r22,zero,10211e7c <___vfiprintf_internal_r+0xb30>
10211768:	9447c83a 	sub	r3,r18,r17
1021176c:	00c1c30e 	bge	zero,r3,10211e7c <___vfiprintf_internal_r+0xb30>
10211770:	01c00404 	movi	r7,16
10211774:	d8801c17 	ldw	r2,112(sp)
10211778:	38c37b0e 	bge	r7,r3,10212568 <___vfiprintf_internal_r+0x121c>
1021177c:	010408b4 	movhi	r4,4130
10211780:	21354584 	addi	r4,r4,-10986
10211784:	dc002915 	stw	r16,164(sp)
10211788:	d9801b17 	ldw	r6,108(sp)
1021178c:	d9002415 	stw	r4,144(sp)
10211790:	03c001c4 	movi	r15,7
10211794:	da402515 	stw	r9,148(sp)
10211798:	db402815 	stw	r13,160(sp)
1021179c:	1821883a 	mov	r16,r3
102117a0:	00000506 	br	102117b8 <___vfiprintf_internal_r+0x46c>
102117a4:	31400084 	addi	r5,r6,2
102117a8:	42000204 	addi	r8,r8,8
102117ac:	200d883a 	mov	r6,r4
102117b0:	843ffc04 	addi	r16,r16,-16
102117b4:	3c000d0e 	bge	r7,r16,102117ec <___vfiprintf_internal_r+0x4a0>
102117b8:	10800404 	addi	r2,r2,16
102117bc:	31000044 	addi	r4,r6,1
102117c0:	47000015 	stw	fp,0(r8)
102117c4:	41c00115 	stw	r7,4(r8)
102117c8:	d8801c15 	stw	r2,112(sp)
102117cc:	d9001b15 	stw	r4,108(sp)
102117d0:	793ff40e 	bge	r15,r4,102117a4 <___vfiprintf_internal_r+0x458>
102117d4:	10019b1e 	bne	r2,zero,10211e44 <___vfiprintf_internal_r+0xaf8>
102117d8:	843ffc04 	addi	r16,r16,-16
102117dc:	000d883a 	mov	r6,zero
102117e0:	01400044 	movi	r5,1
102117e4:	d811883a 	mov	r8,sp
102117e8:	3c3ff316 	blt	r7,r16,102117b8 <___vfiprintf_internal_r+0x46c>
102117ec:	8007883a 	mov	r3,r16
102117f0:	da402517 	ldw	r9,148(sp)
102117f4:	db402817 	ldw	r13,160(sp)
102117f8:	dc002917 	ldw	r16,164(sp)
102117fc:	d9002417 	ldw	r4,144(sp)
10211800:	1885883a 	add	r2,r3,r2
10211804:	40c00115 	stw	r3,4(r8)
10211808:	41000015 	stw	r4,0(r8)
1021180c:	d8801c15 	stw	r2,112(sp)
10211810:	d9401b15 	stw	r5,108(sp)
10211814:	00c001c4 	movi	r3,7
10211818:	19426a16 	blt	r3,r5,102121c4 <___vfiprintf_internal_r+0xe78>
1021181c:	d8c01d87 	ldb	r3,118(sp)
10211820:	42000204 	addi	r8,r8,8
10211824:	29000044 	addi	r4,r5,1
10211828:	1801991e 	bne	r3,zero,10211e90 <___vfiprintf_internal_r+0xb44>
1021182c:	68000c26 	beq	r13,zero,10211860 <___vfiprintf_internal_r+0x514>
10211830:	d8c01d04 	addi	r3,sp,116
10211834:	10800084 	addi	r2,r2,2
10211838:	40c00015 	stw	r3,0(r8)
1021183c:	00c00084 	movi	r3,2
10211840:	40c00115 	stw	r3,4(r8)
10211844:	d8801c15 	stw	r2,112(sp)
10211848:	d9001b15 	stw	r4,108(sp)
1021184c:	00c001c4 	movi	r3,7
10211850:	19024c16 	blt	r3,r4,10212184 <___vfiprintf_internal_r+0xe38>
10211854:	200b883a 	mov	r5,r4
10211858:	42000204 	addi	r8,r8,8
1021185c:	21000044 	addi	r4,r4,1
10211860:	00c02004 	movi	r3,128
10211864:	b0c20126 	beq	r22,r3,1021206c <___vfiprintf_internal_r+0xd20>
10211868:	4cedc83a 	sub	r22,r9,r19
1021186c:	0580230e 	bge	zero,r22,102118fc <___vfiprintf_internal_r+0x5b0>
10211870:	01c00404 	movi	r7,16
10211874:	3d83140e 	bge	r7,r22,102124c8 <___vfiprintf_internal_r+0x117c>
10211878:	010408b4 	movhi	r4,4130
1021187c:	21354184 	addi	r4,r4,-11002
10211880:	d9002415 	stw	r4,144(sp)
10211884:	034001c4 	movi	r13,7
10211888:	00000506 	br	102118a0 <___vfiprintf_internal_r+0x554>
1021188c:	29000084 	addi	r4,r5,2
10211890:	42000204 	addi	r8,r8,8
10211894:	180b883a 	mov	r5,r3
10211898:	b5bffc04 	addi	r22,r22,-16
1021189c:	3d800d0e 	bge	r7,r22,102118d4 <___vfiprintf_internal_r+0x588>
102118a0:	10800404 	addi	r2,r2,16
102118a4:	28c00044 	addi	r3,r5,1
102118a8:	45c00015 	stw	r23,0(r8)
102118ac:	41c00115 	stw	r7,4(r8)
102118b0:	d8801c15 	stw	r2,112(sp)
102118b4:	d8c01b15 	stw	r3,108(sp)
102118b8:	68fff40e 	bge	r13,r3,1021188c <___vfiprintf_internal_r+0x540>
102118bc:	1001811e 	bne	r2,zero,10211ec4 <___vfiprintf_internal_r+0xb78>
102118c0:	b5bffc04 	addi	r22,r22,-16
102118c4:	01000044 	movi	r4,1
102118c8:	000b883a 	mov	r5,zero
102118cc:	d811883a 	mov	r8,sp
102118d0:	3dbff316 	blt	r7,r22,102118a0 <___vfiprintf_internal_r+0x554>
102118d4:	d8c02417 	ldw	r3,144(sp)
102118d8:	1585883a 	add	r2,r2,r22
102118dc:	45800115 	stw	r22,4(r8)
102118e0:	40c00015 	stw	r3,0(r8)
102118e4:	d8801c15 	stw	r2,112(sp)
102118e8:	d9001b15 	stw	r4,108(sp)
102118ec:	00c001c4 	movi	r3,7
102118f0:	1901d016 	blt	r3,r4,10212034 <___vfiprintf_internal_r+0xce8>
102118f4:	42000204 	addi	r8,r8,8
102118f8:	21000044 	addi	r4,r4,1
102118fc:	14c5883a 	add	r2,r2,r19
10211900:	45000015 	stw	r20,0(r8)
10211904:	44c00115 	stw	r19,4(r8)
10211908:	d8801c15 	stw	r2,112(sp)
1021190c:	d9001b15 	stw	r4,108(sp)
10211910:	00c001c4 	movi	r3,7
10211914:	1901cf0e 	bge	r3,r4,10212054 <___vfiprintf_internal_r+0xd08>
10211918:	1002361e 	bne	r2,zero,102121f4 <___vfiprintf_internal_r+0xea8>
1021191c:	d8001b15 	stw	zero,108(sp)
10211920:	aac0010c 	andi	r11,r21,4
10211924:	58002826 	beq	r11,zero,102119c8 <___vfiprintf_internal_r+0x67c>
10211928:	9467c83a 	sub	r19,r18,r17
1021192c:	d811883a 	mov	r8,sp
10211930:	04c3340e 	bge	zero,r19,10212604 <___vfiprintf_internal_r+0x12b8>
10211934:	01c00404 	movi	r7,16
10211938:	3cc31b0e 	bge	r7,r19,102125a8 <___vfiprintf_internal_r+0x125c>
1021193c:	00c408b4 	movhi	r3,4130
10211940:	18f54584 	addi	r3,r3,-10986
10211944:	d9001b17 	ldw	r4,108(sp)
10211948:	d8c02415 	stw	r3,144(sp)
1021194c:	382b883a 	mov	r21,r7
10211950:	050001c4 	movi	r20,7
10211954:	dd802017 	ldw	r22,128(sp)
10211958:	00000506 	br	10211970 <___vfiprintf_internal_r+0x624>
1021195c:	21400084 	addi	r5,r4,2
10211960:	42000204 	addi	r8,r8,8
10211964:	1809883a 	mov	r4,r3
10211968:	9cfffc04 	addi	r19,r19,-16
1021196c:	acc00d0e 	bge	r21,r19,102119a4 <___vfiprintf_internal_r+0x658>
10211970:	10800404 	addi	r2,r2,16
10211974:	20c00044 	addi	r3,r4,1
10211978:	47000015 	stw	fp,0(r8)
1021197c:	45400115 	stw	r21,4(r8)
10211980:	d8801c15 	stw	r2,112(sp)
10211984:	d8c01b15 	stw	r3,108(sp)
10211988:	a0fff40e 	bge	r20,r3,1021195c <___vfiprintf_internal_r+0x610>
1021198c:	10019f1e 	bne	r2,zero,1021200c <___vfiprintf_internal_r+0xcc0>
10211990:	9cfffc04 	addi	r19,r19,-16
10211994:	01400044 	movi	r5,1
10211998:	0009883a 	mov	r4,zero
1021199c:	d811883a 	mov	r8,sp
102119a0:	acfff316 	blt	r21,r19,10211970 <___vfiprintf_internal_r+0x624>
102119a4:	d8c02417 	ldw	r3,144(sp)
102119a8:	14c5883a 	add	r2,r2,r19
102119ac:	44c00115 	stw	r19,4(r8)
102119b0:	40c00015 	stw	r3,0(r8)
102119b4:	d8801c15 	stw	r2,112(sp)
102119b8:	d9401b15 	stw	r5,108(sp)
102119bc:	00c001c4 	movi	r3,7
102119c0:	1941810e 	bge	r3,r5,10211fc8 <___vfiprintf_internal_r+0xc7c>
102119c4:	10017a1e 	bne	r2,zero,10211fb0 <___vfiprintf_internal_r+0xc64>
102119c8:	8c82a416 	blt	r17,r18,1021245c <___vfiprintf_internal_r+0x1110>
102119cc:	d9002317 	ldw	r4,140(sp)
102119d0:	2449883a 	add	r4,r4,r17
102119d4:	d9002315 	stw	r4,140(sp)
102119d8:	d8001b15 	stw	zero,108(sp)
102119dc:	d811883a 	mov	r8,sp
102119e0:	003e8e06 	br	1021141c <___vfiprintf_internal_r+0xd0>
102119e4:	d9002017 	ldw	r4,128(sp)
102119e8:	a80b883a 	mov	r5,r21
102119ec:	0206b6c0 	call	10206b6c <__swsetup_r>
102119f0:	10000c1e 	bne	r2,zero,10211a24 <___vfiprintf_internal_r+0x6d8>
102119f4:	a880030b 	ldhu	r2,12(r21)
102119f8:	00c00284 	movi	r3,10
102119fc:	1080068c 	andi	r2,r2,26
10211a00:	10fe741e 	bne	r2,r3,102113d4 <___vfiprintf_internal_r+0x88>
10211a04:	a880038f 	ldh	r2,14(r21)
10211a08:	103e7216 	blt	r2,zero,102113d4 <___vfiprintf_internal_r+0x88>
10211a0c:	d9002017 	ldw	r4,128(sp)
10211a10:	d9c02217 	ldw	r7,136(sp)
10211a14:	a80b883a 	mov	r5,r21
10211a18:	b00d883a 	mov	r6,r22
10211a1c:	02126400 	call	10212640 <__sbprintf>
10211a20:	00000106 	br	10211a28 <___vfiprintf_internal_r+0x6dc>
10211a24:	00bfffc4 	movi	r2,-1
10211a28:	dfc03517 	ldw	ra,212(sp)
10211a2c:	df003417 	ldw	fp,208(sp)
10211a30:	ddc03317 	ldw	r23,204(sp)
10211a34:	dd803217 	ldw	r22,200(sp)
10211a38:	dd403117 	ldw	r21,196(sp)
10211a3c:	dd003017 	ldw	r20,192(sp)
10211a40:	dcc02f17 	ldw	r19,188(sp)
10211a44:	dc802e17 	ldw	r18,184(sp)
10211a48:	dc402d17 	ldw	r17,180(sp)
10211a4c:	dc002c17 	ldw	r16,176(sp)
10211a50:	dec03604 	addi	sp,sp,216
10211a54:	f800283a 	ret
10211a58:	0208c200 	call	10208c20 <__sinit>
10211a5c:	003e4d06 	br	10211394 <___vfiprintf_internal_r+0x48>
10211a60:	8005883a 	mov	r2,r16
10211a64:	ad400114 	ori	r21,r21,4
10211a68:	80c00007 	ldb	r3,0(r16)
10211a6c:	003e9506 	br	102114c4 <___vfiprintf_internal_r+0x178>
10211a70:	b006d0fa 	srli	r3,r22,3
10211a74:	6808977a 	slli	r4,r13,29
10211a78:	681ad0fa 	srli	r13,r13,3
10211a7c:	b58001cc 	andi	r22,r22,7
10211a80:	b0800c04 	addi	r2,r22,48
10211a84:	a53fffc4 	addi	r20,r20,-1
10211a88:	20ecb03a 	or	r22,r4,r3
10211a8c:	a0800005 	stb	r2,0(r20)
10211a90:	b346b03a 	or	r3,r22,r13
10211a94:	183ff61e 	bne	r3,zero,10211a70 <___vfiprintf_internal_r+0x724>
10211a98:	a8c0004c 	andi	r3,r21,1
10211a9c:	a009883a 	mov	r4,r20
10211aa0:	18013b26 	beq	r3,zero,10211f90 <___vfiprintf_internal_r+0xc44>
10211aa4:	10803fcc 	andi	r2,r2,255
10211aa8:	1080201c 	xori	r2,r2,128
10211aac:	10bfe004 	addi	r2,r2,-128
10211ab0:	00c00c04 	movi	r3,48
10211ab4:	10ff1d26 	beq	r2,r3,1021172c <___vfiprintf_internal_r+0x3e0>
10211ab8:	d8801e17 	ldw	r2,120(sp)
10211abc:	a53fffc4 	addi	r20,r20,-1
10211ac0:	20ffffc5 	stb	r3,-1(r4)
10211ac4:	1527c83a 	sub	r19,r2,r20
10211ac8:	003f1a06 	br	10211734 <___vfiprintf_internal_r+0x3e8>
10211acc:	ad402014 	ori	r21,r21,128
10211ad0:	8005883a 	mov	r2,r16
10211ad4:	80c00007 	ldb	r3,0(r16)
10211ad8:	003e7a06 	br	102114c4 <___vfiprintf_internal_r+0x178>
10211adc:	8005883a 	mov	r2,r16
10211ae0:	0025883a 	mov	r18,zero
10211ae4:	193ff404 	addi	r4,r3,-48
10211ae8:	10c00007 	ldb	r3,0(r2)
10211aec:	948002a4 	muli	r18,r18,10
10211af0:	84000044 	addi	r16,r16,1
10211af4:	8005883a 	mov	r2,r16
10211af8:	9125883a 	add	r18,r18,r4
10211afc:	193ff404 	addi	r4,r3,-48
10211b00:	313ff92e 	bgeu	r6,r4,10211ae8 <___vfiprintf_internal_r+0x79c>
10211b04:	003e7006 	br	102114c8 <___vfiprintf_internal_r+0x17c>
10211b08:	ad400414 	ori	r21,r21,16
10211b0c:	d9c01d85 	stb	r7,118(sp)
10211b10:	a880080c 	andi	r2,r21,32
10211b14:	d8c02217 	ldw	r3,136(sp)
10211b18:	10005a26 	beq	r2,zero,10211c84 <___vfiprintf_internal_r+0x938>
10211b1c:	d9002217 	ldw	r4,136(sp)
10211b20:	18800117 	ldw	r2,4(r3)
10211b24:	1d800017 	ldw	r22,0(r3)
10211b28:	21000204 	addi	r4,r4,8
10211b2c:	d9002215 	stw	r4,136(sp)
10211b30:	101b883a 	mov	r13,r2
10211b34:	1001f416 	blt	r2,zero,10212308 <___vfiprintf_internal_r+0xfbc>
10211b38:	db801d83 	ldbu	r14,118(sp)
10211b3c:	4827883a 	mov	r19,r9
10211b40:	00800044 	movi	r2,1
10211b44:	b348b03a 	or	r4,r22,r13
10211b48:	003ee106 	br	102116d0 <___vfiprintf_internal_r+0x384>
10211b4c:	80c00007 	ldb	r3,0(r16)
10211b50:	80800044 	addi	r2,r16,1
10211b54:	1b42a326 	beq	r3,r13,102125e4 <___vfiprintf_internal_r+0x1298>
10211b58:	193ff404 	addi	r4,r3,-48
10211b5c:	1021883a 	mov	r16,r2
10211b60:	0013883a 	mov	r9,zero
10211b64:	313e5836 	bltu	r6,r4,102114c8 <___vfiprintf_internal_r+0x17c>
10211b68:	80c00007 	ldb	r3,0(r16)
10211b6c:	4a4002a4 	muli	r9,r9,10
10211b70:	84000044 	addi	r16,r16,1
10211b74:	2253883a 	add	r9,r4,r9
10211b78:	193ff404 	addi	r4,r3,-48
10211b7c:	313ffa2e 	bgeu	r6,r4,10211b68 <___vfiprintf_internal_r+0x81c>
10211b80:	483e510e 	bge	r9,zero,102114c8 <___vfiprintf_internal_r+0x17c>
10211b84:	027fffc4 	movi	r9,-1
10211b88:	003e4f06 	br	102114c8 <___vfiprintf_internal_r+0x17c>
10211b8c:	d9c01d85 	stb	r7,118(sp)
10211b90:	a880080c 	andi	r2,r21,32
10211b94:	10020826 	beq	r2,zero,102123b8 <___vfiprintf_internal_r+0x106c>
10211b98:	d8c02217 	ldw	r3,136(sp)
10211b9c:	d9002317 	ldw	r4,140(sp)
10211ba0:	18800017 	ldw	r2,0(r3)
10211ba4:	2007d7fa 	srai	r3,r4,31
10211ba8:	d9002217 	ldw	r4,136(sp)
10211bac:	10c00115 	stw	r3,4(r2)
10211bb0:	21000104 	addi	r4,r4,4
10211bb4:	d9002215 	stw	r4,136(sp)
10211bb8:	d9002317 	ldw	r4,140(sp)
10211bbc:	11000015 	stw	r4,0(r2)
10211bc0:	003e1606 	br	1021141c <___vfiprintf_internal_r+0xd0>
10211bc4:	d8802217 	ldw	r2,136(sp)
10211bc8:	d8c02217 	ldw	r3,136(sp)
10211bcc:	15800017 	ldw	r22,0(r2)
10211bd0:	13400117 	ldw	r13,4(r2)
10211bd4:	18c00204 	addi	r3,r3,8
10211bd8:	0005883a 	mov	r2,zero
10211bdc:	d8c02215 	stw	r3,136(sp)
10211be0:	b348b03a 	or	r4,r22,r13
10211be4:	003eb706 	br	102116c4 <___vfiprintf_internal_r+0x378>
10211be8:	38803fcc 	andi	r2,r7,255
10211bec:	1080201c 	xori	r2,r2,128
10211bf0:	10bfe004 	addi	r2,r2,-128
10211bf4:	1001e31e 	bne	r2,zero,10212384 <___vfiprintf_internal_r+0x1038>
10211bf8:	8005883a 	mov	r2,r16
10211bfc:	01c00804 	movi	r7,32
10211c00:	80c00007 	ldb	r3,0(r16)
10211c04:	003e2f06 	br	102114c4 <___vfiprintf_internal_r+0x178>
10211c08:	ad400054 	ori	r21,r21,1
10211c0c:	8005883a 	mov	r2,r16
10211c10:	80c00007 	ldb	r3,0(r16)
10211c14:	003e2b06 	br	102114c4 <___vfiprintf_internal_r+0x178>
10211c18:	d8c02217 	ldw	r3,136(sp)
10211c1c:	1c800017 	ldw	r18,0(r3)
10211c20:	18c00104 	addi	r3,r3,4
10211c24:	90023816 	blt	r18,zero,10212508 <___vfiprintf_internal_r+0x11bc>
10211c28:	d8c02215 	stw	r3,136(sp)
10211c2c:	8005883a 	mov	r2,r16
10211c30:	80c00007 	ldb	r3,0(r16)
10211c34:	003e2306 	br	102114c4 <___vfiprintf_internal_r+0x178>
10211c38:	8005883a 	mov	r2,r16
10211c3c:	01c00ac4 	movi	r7,43
10211c40:	80c00007 	ldb	r3,0(r16)
10211c44:	003e1f06 	br	102114c4 <___vfiprintf_internal_r+0x178>
10211c48:	d8c02217 	ldw	r3,136(sp)
10211c4c:	04400044 	movi	r17,1
10211c50:	d8001d85 	stb	zero,118(sp)
10211c54:	18800017 	ldw	r2,0(r3)
10211c58:	18c00104 	addi	r3,r3,4
10211c5c:	d8c02215 	stw	r3,136(sp)
10211c60:	d8801005 	stb	r2,64(sp)
10211c64:	8827883a 	mov	r19,r17
10211c68:	dd001004 	addi	r20,sp,64
10211c6c:	0013883a 	mov	r9,zero
10211c70:	003eb806 	br	10211754 <___vfiprintf_internal_r+0x408>
10211c74:	d9c01d85 	stb	r7,118(sp)
10211c78:	a880080c 	andi	r2,r21,32
10211c7c:	d8c02217 	ldw	r3,136(sp)
10211c80:	103fa61e 	bne	r2,zero,10211b1c <___vfiprintf_internal_r+0x7d0>
10211c84:	a880040c 	andi	r2,r21,16
10211c88:	1001dd26 	beq	r2,zero,10212400 <___vfiprintf_internal_r+0x10b4>
10211c8c:	1d800017 	ldw	r22,0(r3)
10211c90:	d8802217 	ldw	r2,136(sp)
10211c94:	b01bd7fa 	srai	r13,r22,31
10211c98:	10800104 	addi	r2,r2,4
10211c9c:	d8802215 	stw	r2,136(sp)
10211ca0:	6805883a 	mov	r2,r13
10211ca4:	003fa306 	br	10211b34 <___vfiprintf_internal_r+0x7e8>
10211ca8:	008408b4 	movhi	r2,4130
10211cac:	10b41404 	addi	r2,r2,-12208
10211cb0:	d8802615 	stw	r2,152(sp)
10211cb4:	d9c01d85 	stb	r7,118(sp)
10211cb8:	a880080c 	andi	r2,r21,32
10211cbc:	10004726 	beq	r2,zero,10211ddc <___vfiprintf_internal_r+0xa90>
10211cc0:	d9002217 	ldw	r4,136(sp)
10211cc4:	25800017 	ldw	r22,0(r4)
10211cc8:	23400117 	ldw	r13,4(r4)
10211ccc:	21000204 	addi	r4,r4,8
10211cd0:	d9002215 	stw	r4,136(sp)
10211cd4:	a880004c 	andi	r2,r21,1
10211cd8:	10014e26 	beq	r2,zero,10212214 <___vfiprintf_internal_r+0xec8>
10211cdc:	b348b03a 	or	r4,r22,r13
10211ce0:	20019c26 	beq	r4,zero,10212354 <___vfiprintf_internal_r+0x1008>
10211ce4:	00800c04 	movi	r2,48
10211ce8:	d8801d05 	stb	r2,116(sp)
10211cec:	d8c01d45 	stb	r3,117(sp)
10211cf0:	ad400094 	ori	r21,r21,2
10211cf4:	00800084 	movi	r2,2
10211cf8:	003e7206 	br	102116c4 <___vfiprintf_internal_r+0x378>
10211cfc:	d8c02217 	ldw	r3,136(sp)
10211d00:	d8001d85 	stb	zero,118(sp)
10211d04:	1d000017 	ldw	r20,0(r3)
10211d08:	1d800104 	addi	r22,r3,4
10211d0c:	a0021c26 	beq	r20,zero,10212580 <___vfiprintf_internal_r+0x1234>
10211d10:	a009883a 	mov	r4,r20
10211d14:	48020016 	blt	r9,zero,10212518 <___vfiprintf_internal_r+0x11cc>
10211d18:	480d883a 	mov	r6,r9
10211d1c:	000b883a 	mov	r5,zero
10211d20:	da002a15 	stw	r8,168(sp)
10211d24:	da402b15 	stw	r9,172(sp)
10211d28:	0209c140 	call	10209c14 <memchr>
10211d2c:	da002a17 	ldw	r8,168(sp)
10211d30:	da402b17 	ldw	r9,172(sp)
10211d34:	10022226 	beq	r2,zero,102125c0 <___vfiprintf_internal_r+0x1274>
10211d38:	1527c83a 	sub	r19,r2,r20
10211d3c:	4cc1c916 	blt	r9,r19,10212464 <___vfiprintf_internal_r+0x1118>
10211d40:	db801d83 	ldbu	r14,118(sp)
10211d44:	dd802215 	stw	r22,136(sp)
10211d48:	0013883a 	mov	r9,zero
10211d4c:	003e7906 	br	10211734 <___vfiprintf_internal_r+0x3e8>
10211d50:	ad401014 	ori	r21,r21,64
10211d54:	8005883a 	mov	r2,r16
10211d58:	80c00007 	ldb	r3,0(r16)
10211d5c:	003dd906 	br	102114c4 <___vfiprintf_internal_r+0x178>
10211d60:	80c00007 	ldb	r3,0(r16)
10211d64:	8005883a 	mov	r2,r16
10211d68:	1b01e326 	beq	r3,r12,102124f8 <___vfiprintf_internal_r+0x11ac>
10211d6c:	ad400414 	ori	r21,r21,16
10211d70:	003dd406 	br	102114c4 <___vfiprintf_internal_r+0x178>
10211d74:	d9002217 	ldw	r4,136(sp)
10211d78:	00800c04 	movi	r2,48
10211d7c:	d8801d05 	stb	r2,116(sp)
10211d80:	25800017 	ldw	r22,0(r4)
10211d84:	00801e04 	movi	r2,120
10211d88:	d8801d45 	stb	r2,117(sp)
10211d8c:	008408b4 	movhi	r2,4130
10211d90:	21000104 	addi	r4,r4,4
10211d94:	10b41904 	addi	r2,r2,-12188
10211d98:	d9002215 	stw	r4,136(sp)
10211d9c:	d8802615 	stw	r2,152(sp)
10211da0:	001b883a 	mov	r13,zero
10211da4:	ad400094 	ori	r21,r21,2
10211da8:	00800084 	movi	r2,2
10211dac:	b009883a 	mov	r4,r22
10211db0:	003e4406 	br	102116c4 <___vfiprintf_internal_r+0x378>
10211db4:	ad400814 	ori	r21,r21,32
10211db8:	8005883a 	mov	r2,r16
10211dbc:	80c00007 	ldb	r3,0(r16)
10211dc0:	003dc006 	br	102114c4 <___vfiprintf_internal_r+0x178>
10211dc4:	008408b4 	movhi	r2,4130
10211dc8:	10b41904 	addi	r2,r2,-12188
10211dcc:	d8802615 	stw	r2,152(sp)
10211dd0:	d9c01d85 	stb	r7,118(sp)
10211dd4:	a880080c 	andi	r2,r21,32
10211dd8:	103fb91e 	bne	r2,zero,10211cc0 <___vfiprintf_internal_r+0x974>
10211ddc:	a880040c 	andi	r2,r21,16
10211de0:	10010f1e 	bne	r2,zero,10212220 <___vfiprintf_internal_r+0xed4>
10211de4:	a880100c 	andi	r2,r21,64
10211de8:	10010d26 	beq	r2,zero,10212220 <___vfiprintf_internal_r+0xed4>
10211dec:	d9002217 	ldw	r4,136(sp)
10211df0:	001b883a 	mov	r13,zero
10211df4:	2580000b 	ldhu	r22,0(r4)
10211df8:	21000104 	addi	r4,r4,4
10211dfc:	d9002215 	stw	r4,136(sp)
10211e00:	003fb406 	br	10211cd4 <___vfiprintf_internal_r+0x988>
10211e04:	d9002217 	ldw	r4,136(sp)
10211e08:	00800044 	movi	r2,1
10211e0c:	25800017 	ldw	r22,0(r4)
10211e10:	23400117 	ldw	r13,4(r4)
10211e14:	21000204 	addi	r4,r4,8
10211e18:	d9002215 	stw	r4,136(sp)
10211e1c:	b348b03a 	or	r4,r22,r13
10211e20:	003e2806 	br	102116c4 <___vfiprintf_internal_r+0x378>
10211e24:	d9c01d85 	stb	r7,118(sp)
10211e28:	1801ab26 	beq	r3,zero,102124d8 <___vfiprintf_internal_r+0x118c>
10211e2c:	04400044 	movi	r17,1
10211e30:	d8c01005 	stb	r3,64(sp)
10211e34:	d8001d85 	stb	zero,118(sp)
10211e38:	8827883a 	mov	r19,r17
10211e3c:	dd001004 	addi	r20,sp,64
10211e40:	003f8a06 	br	10211c6c <___vfiprintf_internal_r+0x920>
10211e44:	d9002017 	ldw	r4,128(sp)
10211e48:	d9402117 	ldw	r5,132(sp)
10211e4c:	d9801a04 	addi	r6,sp,104
10211e50:	d9c02b15 	stw	r7,172(sp)
10211e54:	dbc02a15 	stw	r15,168(sp)
10211e58:	02112380 	call	10211238 <__sprint_r.part.0>
10211e5c:	d9c02b17 	ldw	r7,172(sp)
10211e60:	dbc02a17 	ldw	r15,168(sp)
10211e64:	1000631e 	bne	r2,zero,10211ff4 <___vfiprintf_internal_r+0xca8>
10211e68:	d9801b17 	ldw	r6,108(sp)
10211e6c:	d8801c17 	ldw	r2,112(sp)
10211e70:	d811883a 	mov	r8,sp
10211e74:	31400044 	addi	r5,r6,1
10211e78:	003e4d06 	br	102117b0 <___vfiprintf_internal_r+0x464>
10211e7c:	d9401b17 	ldw	r5,108(sp)
10211e80:	d8801c17 	ldw	r2,112(sp)
10211e84:	29000044 	addi	r4,r5,1
10211e88:	d8c01d87 	ldb	r3,118(sp)
10211e8c:	183e6726 	beq	r3,zero,1021182c <___vfiprintf_internal_r+0x4e0>
10211e90:	00c00044 	movi	r3,1
10211e94:	d9401d84 	addi	r5,sp,118
10211e98:	10c5883a 	add	r2,r2,r3
10211e9c:	41400015 	stw	r5,0(r8)
10211ea0:	40c00115 	stw	r3,4(r8)
10211ea4:	d8801c15 	stw	r2,112(sp)
10211ea8:	d9001b15 	stw	r4,108(sp)
10211eac:	014001c4 	movi	r5,7
10211eb0:	2900ab16 	blt	r5,r4,10212160 <___vfiprintf_internal_r+0xe14>
10211eb4:	200b883a 	mov	r5,r4
10211eb8:	42000204 	addi	r8,r8,8
10211ebc:	21000044 	addi	r4,r4,1
10211ec0:	003e5a06 	br	1021182c <___vfiprintf_internal_r+0x4e0>
10211ec4:	d9002017 	ldw	r4,128(sp)
10211ec8:	d9402117 	ldw	r5,132(sp)
10211ecc:	d9801a04 	addi	r6,sp,104
10211ed0:	d9c02b15 	stw	r7,172(sp)
10211ed4:	db402a15 	stw	r13,168(sp)
10211ed8:	02112380 	call	10211238 <__sprint_r.part.0>
10211edc:	d9c02b17 	ldw	r7,172(sp)
10211ee0:	db402a17 	ldw	r13,168(sp)
10211ee4:	1000431e 	bne	r2,zero,10211ff4 <___vfiprintf_internal_r+0xca8>
10211ee8:	d9401b17 	ldw	r5,108(sp)
10211eec:	d8801c17 	ldw	r2,112(sp)
10211ef0:	d811883a 	mov	r8,sp
10211ef4:	29000044 	addi	r4,r5,1
10211ef8:	003e6706 	br	10211898 <___vfiprintf_internal_r+0x54c>
10211efc:	10803fcc 	andi	r2,r2,255
10211f00:	00c00044 	movi	r3,1
10211f04:	10fdfa1e 	bne	r2,r3,102116f0 <___vfiprintf_internal_r+0x3a4>
10211f08:	6800021e 	bne	r13,zero,10211f14 <___vfiprintf_internal_r+0xbc8>
10211f0c:	00800244 	movi	r2,9
10211f10:	1580222e 	bgeu	r2,r22,10211f9c <___vfiprintf_internal_r+0xc50>
10211f14:	dc802415 	stw	r18,144(sp)
10211f18:	dc002515 	stw	r16,148(sp)
10211f1c:	dc401a04 	addi	r17,sp,104
10211f20:	b021883a 	mov	r16,r22
10211f24:	4827883a 	mov	r19,r9
10211f28:	4029883a 	mov	r20,r8
10211f2c:	702d883a 	mov	r22,r14
10211f30:	6825883a 	mov	r18,r13
10211f34:	8009883a 	mov	r4,r16
10211f38:	900b883a 	mov	r5,r18
10211f3c:	01800284 	movi	r6,10
10211f40:	000f883a 	mov	r7,zero
10211f44:	02153840 	call	10215384 <__umoddi3>
10211f48:	10800c04 	addi	r2,r2,48
10211f4c:	8c7fffc4 	addi	r17,r17,-1
10211f50:	8009883a 	mov	r4,r16
10211f54:	900b883a 	mov	r5,r18
10211f58:	01800284 	movi	r6,10
10211f5c:	000f883a 	mov	r7,zero
10211f60:	88800005 	stb	r2,0(r17)
10211f64:	0214dc40 	call	10214dc4 <__udivdi3>
10211f68:	1021883a 	mov	r16,r2
10211f6c:	10c4b03a 	or	r2,r2,r3
10211f70:	1825883a 	mov	r18,r3
10211f74:	103fef1e 	bne	r2,zero,10211f34 <___vfiprintf_internal_r+0xbe8>
10211f78:	dc802417 	ldw	r18,144(sp)
10211f7c:	dc002517 	ldw	r16,148(sp)
10211f80:	a011883a 	mov	r8,r20
10211f84:	9813883a 	mov	r9,r19
10211f88:	b01d883a 	mov	r14,r22
10211f8c:	8829883a 	mov	r20,r17
10211f90:	d8c01e17 	ldw	r3,120(sp)
10211f94:	1d27c83a 	sub	r19,r3,r20
10211f98:	003de606 	br	10211734 <___vfiprintf_internal_r+0x3e8>
10211f9c:	b5800c04 	addi	r22,r22,48
10211fa0:	dd8019c5 	stb	r22,103(sp)
10211fa4:	dcc02717 	ldw	r19,156(sp)
10211fa8:	dd0019c4 	addi	r20,sp,103
10211fac:	003de106 	br	10211734 <___vfiprintf_internal_r+0x3e8>
10211fb0:	d9002017 	ldw	r4,128(sp)
10211fb4:	d9402117 	ldw	r5,132(sp)
10211fb8:	d9801a04 	addi	r6,sp,104
10211fbc:	02112380 	call	10211238 <__sprint_r.part.0>
10211fc0:	10000c1e 	bne	r2,zero,10211ff4 <___vfiprintf_internal_r+0xca8>
10211fc4:	d8801c17 	ldw	r2,112(sp)
10211fc8:	8c80010e 	bge	r17,r18,10211fd0 <___vfiprintf_internal_r+0xc84>
10211fcc:	9023883a 	mov	r17,r18
10211fd0:	d8c02317 	ldw	r3,140(sp)
10211fd4:	1c47883a 	add	r3,r3,r17
10211fd8:	d8c02315 	stw	r3,140(sp)
10211fdc:	103e7e26 	beq	r2,zero,102119d8 <___vfiprintf_internal_r+0x68c>
10211fe0:	d9002017 	ldw	r4,128(sp)
10211fe4:	d9402117 	ldw	r5,132(sp)
10211fe8:	d9801a04 	addi	r6,sp,104
10211fec:	02112380 	call	10211238 <__sprint_r.part.0>
10211ff0:	103e7926 	beq	r2,zero,102119d8 <___vfiprintf_internal_r+0x68c>
10211ff4:	dd402117 	ldw	r21,132(sp)
10211ff8:	a880030b 	ldhu	r2,12(r21)
10211ffc:	1080100c 	andi	r2,r2,64
10212000:	103e881e 	bne	r2,zero,10211a24 <___vfiprintf_internal_r+0x6d8>
10212004:	d8802317 	ldw	r2,140(sp)
10212008:	003e8706 	br	10211a28 <___vfiprintf_internal_r+0x6dc>
1021200c:	d9402117 	ldw	r5,132(sp)
10212010:	b009883a 	mov	r4,r22
10212014:	d9801a04 	addi	r6,sp,104
10212018:	02112380 	call	10211238 <__sprint_r.part.0>
1021201c:	103ff51e 	bne	r2,zero,10211ff4 <___vfiprintf_internal_r+0xca8>
10212020:	d9001b17 	ldw	r4,108(sp)
10212024:	d8801c17 	ldw	r2,112(sp)
10212028:	d811883a 	mov	r8,sp
1021202c:	21400044 	addi	r5,r4,1
10212030:	003e4d06 	br	10211968 <___vfiprintf_internal_r+0x61c>
10212034:	1000aa1e 	bne	r2,zero,102122e0 <___vfiprintf_internal_r+0xf94>
10212038:	00c00044 	movi	r3,1
1021203c:	9805883a 	mov	r2,r19
10212040:	dd000015 	stw	r20,0(sp)
10212044:	dcc00115 	stw	r19,4(sp)
10212048:	dcc01c15 	stw	r19,112(sp)
1021204c:	d8c01b15 	stw	r3,108(sp)
10212050:	d811883a 	mov	r8,sp
10212054:	42000204 	addi	r8,r8,8
10212058:	aac0010c 	andi	r11,r21,4
1021205c:	583fda26 	beq	r11,zero,10211fc8 <___vfiprintf_internal_r+0xc7c>
10212060:	9467c83a 	sub	r19,r18,r17
10212064:	04fe3316 	blt	zero,r19,10211934 <___vfiprintf_internal_r+0x5e8>
10212068:	003fd706 	br	10211fc8 <___vfiprintf_internal_r+0xc7c>
1021206c:	946dc83a 	sub	r22,r18,r17
10212070:	05bdfd0e 	bge	zero,r22,10211868 <___vfiprintf_internal_r+0x51c>
10212074:	00c408b4 	movhi	r3,4130
10212078:	18f54184 	addi	r3,r3,-11002
1021207c:	01c00404 	movi	r7,16
10212080:	d8c02415 	stw	r3,144(sp)
10212084:	3d81530e 	bge	r7,r22,102125d4 <___vfiprintf_internal_r+0x1288>
10212088:	8007883a 	mov	r3,r16
1021208c:	034001c4 	movi	r13,7
10212090:	b021883a 	mov	r16,r22
10212094:	da402515 	stw	r9,148(sp)
10212098:	182d883a 	mov	r22,r3
1021209c:	00000506 	br	102120b4 <___vfiprintf_internal_r+0xd68>
102120a0:	29800084 	addi	r6,r5,2
102120a4:	42000204 	addi	r8,r8,8
102120a8:	180b883a 	mov	r5,r3
102120ac:	843ffc04 	addi	r16,r16,-16
102120b0:	3c000d0e 	bge	r7,r16,102120e8 <___vfiprintf_internal_r+0xd9c>
102120b4:	10800404 	addi	r2,r2,16
102120b8:	28c00044 	addi	r3,r5,1
102120bc:	45c00015 	stw	r23,0(r8)
102120c0:	41c00115 	stw	r7,4(r8)
102120c4:	d8801c15 	stw	r2,112(sp)
102120c8:	d8c01b15 	stw	r3,108(sp)
102120cc:	68fff40e 	bge	r13,r3,102120a0 <___vfiprintf_internal_r+0xd54>
102120d0:	1000151e 	bne	r2,zero,10212128 <___vfiprintf_internal_r+0xddc>
102120d4:	843ffc04 	addi	r16,r16,-16
102120d8:	01800044 	movi	r6,1
102120dc:	000b883a 	mov	r5,zero
102120e0:	d811883a 	mov	r8,sp
102120e4:	3c3ff316 	blt	r7,r16,102120b4 <___vfiprintf_internal_r+0xd68>
102120e8:	da402517 	ldw	r9,148(sp)
102120ec:	b007883a 	mov	r3,r22
102120f0:	802d883a 	mov	r22,r16
102120f4:	1821883a 	mov	r16,r3
102120f8:	d8c02417 	ldw	r3,144(sp)
102120fc:	1585883a 	add	r2,r2,r22
10212100:	45800115 	stw	r22,4(r8)
10212104:	40c00015 	stw	r3,0(r8)
10212108:	d8801c15 	stw	r2,112(sp)
1021210c:	d9801b15 	stw	r6,108(sp)
10212110:	00c001c4 	movi	r3,7
10212114:	19806d16 	blt	r3,r6,102122cc <___vfiprintf_internal_r+0xf80>
10212118:	42000204 	addi	r8,r8,8
1021211c:	31000044 	addi	r4,r6,1
10212120:	300b883a 	mov	r5,r6
10212124:	003dd006 	br	10211868 <___vfiprintf_internal_r+0x51c>
10212128:	d9002017 	ldw	r4,128(sp)
1021212c:	d9402117 	ldw	r5,132(sp)
10212130:	d9801a04 	addi	r6,sp,104
10212134:	d9c02b15 	stw	r7,172(sp)
10212138:	db402a15 	stw	r13,168(sp)
1021213c:	02112380 	call	10211238 <__sprint_r.part.0>
10212140:	d9c02b17 	ldw	r7,172(sp)
10212144:	db402a17 	ldw	r13,168(sp)
10212148:	103faa1e 	bne	r2,zero,10211ff4 <___vfiprintf_internal_r+0xca8>
1021214c:	d9401b17 	ldw	r5,108(sp)
10212150:	d8801c17 	ldw	r2,112(sp)
10212154:	d811883a 	mov	r8,sp
10212158:	29800044 	addi	r6,r5,1
1021215c:	003fd306 	br	102120ac <___vfiprintf_internal_r+0xd60>
10212160:	1000401e 	bne	r2,zero,10212264 <___vfiprintf_internal_r+0xf18>
10212164:	68003b26 	beq	r13,zero,10212254 <___vfiprintf_internal_r+0xf08>
10212168:	d9001d04 	addi	r4,sp,116
1021216c:	00800084 	movi	r2,2
10212170:	d9000015 	stw	r4,0(sp)
10212174:	d8800115 	stw	r2,4(sp)
10212178:	1809883a 	mov	r4,r3
1021217c:	d811883a 	mov	r8,sp
10212180:	003db406 	br	10211854 <___vfiprintf_internal_r+0x508>
10212184:	1000451e 	bne	r2,zero,1021229c <___vfiprintf_internal_r+0xf50>
10212188:	01000044 	movi	r4,1
1021218c:	000b883a 	mov	r5,zero
10212190:	d811883a 	mov	r8,sp
10212194:	003db206 	br	10211860 <___vfiprintf_internal_r+0x514>
10212198:	10803fcc 	andi	r2,r2,255
1021219c:	1000071e 	bne	r2,zero,102121bc <___vfiprintf_internal_r+0xe70>
102121a0:	a880004c 	andi	r2,r21,1
102121a4:	10000526 	beq	r2,zero,102121bc <___vfiprintf_internal_r+0xe70>
102121a8:	00800c04 	movi	r2,48
102121ac:	d88019c5 	stb	r2,103(sp)
102121b0:	dcc02717 	ldw	r19,156(sp)
102121b4:	dd0019c4 	addi	r20,sp,103
102121b8:	003d5e06 	br	10211734 <___vfiprintf_internal_r+0x3e8>
102121bc:	dd001a04 	addi	r20,sp,104
102121c0:	003d5c06 	br	10211734 <___vfiprintf_internal_r+0x3e8>
102121c4:	1000971e 	bne	r2,zero,10212424 <___vfiprintf_internal_r+0x10d8>
102121c8:	d8c01d87 	ldb	r3,118(sp)
102121cc:	18005826 	beq	r3,zero,10212330 <___vfiprintf_internal_r+0xfe4>
102121d0:	00800044 	movi	r2,1
102121d4:	d8c01d84 	addi	r3,sp,118
102121d8:	1009883a 	mov	r4,r2
102121dc:	d8c00015 	stw	r3,0(sp)
102121e0:	d8800115 	stw	r2,4(sp)
102121e4:	d811883a 	mov	r8,sp
102121e8:	003f3206 	br	10211eb4 <___vfiprintf_internal_r+0xb68>
102121ec:	8023883a 	mov	r17,r16
102121f0:	003ca706 	br	10211490 <___vfiprintf_internal_r+0x144>
102121f4:	d9002017 	ldw	r4,128(sp)
102121f8:	d9402117 	ldw	r5,132(sp)
102121fc:	d9801a04 	addi	r6,sp,104
10212200:	02112380 	call	10211238 <__sprint_r.part.0>
10212204:	103f7b1e 	bne	r2,zero,10211ff4 <___vfiprintf_internal_r+0xca8>
10212208:	d8801c17 	ldw	r2,112(sp)
1021220c:	d811883a 	mov	r8,sp
10212210:	003f9106 	br	10212058 <___vfiprintf_internal_r+0xd0c>
10212214:	00800084 	movi	r2,2
10212218:	b348b03a 	or	r4,r22,r13
1021221c:	003d2906 	br	102116c4 <___vfiprintf_internal_r+0x378>
10212220:	d8802217 	ldw	r2,136(sp)
10212224:	001b883a 	mov	r13,zero
10212228:	15800017 	ldw	r22,0(r2)
1021222c:	10800104 	addi	r2,r2,4
10212230:	d8802215 	stw	r2,136(sp)
10212234:	003ea706 	br	10211cd4 <___vfiprintf_internal_r+0x988>
10212238:	d9002017 	ldw	r4,128(sp)
1021223c:	d9402117 	ldw	r5,132(sp)
10212240:	d9801a04 	addi	r6,sp,104
10212244:	02112380 	call	10211238 <__sprint_r.part.0>
10212248:	103f6a1e 	bne	r2,zero,10211ff4 <___vfiprintf_internal_r+0xca8>
1021224c:	d811883a 	mov	r8,sp
10212250:	003cff06 	br	10211650 <___vfiprintf_internal_r+0x304>
10212254:	000b883a 	mov	r5,zero
10212258:	1809883a 	mov	r4,r3
1021225c:	d811883a 	mov	r8,sp
10212260:	003d7f06 	br	10211860 <___vfiprintf_internal_r+0x514>
10212264:	d9002017 	ldw	r4,128(sp)
10212268:	d9402117 	ldw	r5,132(sp)
1021226c:	d9801a04 	addi	r6,sp,104
10212270:	da402b15 	stw	r9,172(sp)
10212274:	db402a15 	stw	r13,168(sp)
10212278:	02112380 	call	10211238 <__sprint_r.part.0>
1021227c:	da402b17 	ldw	r9,172(sp)
10212280:	db402a17 	ldw	r13,168(sp)
10212284:	103f5b1e 	bne	r2,zero,10211ff4 <___vfiprintf_internal_r+0xca8>
10212288:	d9401b17 	ldw	r5,108(sp)
1021228c:	d8801c17 	ldw	r2,112(sp)
10212290:	d811883a 	mov	r8,sp
10212294:	29000044 	addi	r4,r5,1
10212298:	003d6406 	br	1021182c <___vfiprintf_internal_r+0x4e0>
1021229c:	d9002017 	ldw	r4,128(sp)
102122a0:	d9402117 	ldw	r5,132(sp)
102122a4:	d9801a04 	addi	r6,sp,104
102122a8:	da402b15 	stw	r9,172(sp)
102122ac:	02112380 	call	10211238 <__sprint_r.part.0>
102122b0:	da402b17 	ldw	r9,172(sp)
102122b4:	103f4f1e 	bne	r2,zero,10211ff4 <___vfiprintf_internal_r+0xca8>
102122b8:	d9401b17 	ldw	r5,108(sp)
102122bc:	d8801c17 	ldw	r2,112(sp)
102122c0:	d811883a 	mov	r8,sp
102122c4:	29000044 	addi	r4,r5,1
102122c8:	003d6506 	br	10211860 <___vfiprintf_internal_r+0x514>
102122cc:	10009a1e 	bne	r2,zero,10212538 <___vfiprintf_internal_r+0x11ec>
102122d0:	01000044 	movi	r4,1
102122d4:	000b883a 	mov	r5,zero
102122d8:	d811883a 	mov	r8,sp
102122dc:	003d6206 	br	10211868 <___vfiprintf_internal_r+0x51c>
102122e0:	d9002017 	ldw	r4,128(sp)
102122e4:	d9402117 	ldw	r5,132(sp)
102122e8:	d9801a04 	addi	r6,sp,104
102122ec:	02112380 	call	10211238 <__sprint_r.part.0>
102122f0:	103f401e 	bne	r2,zero,10211ff4 <___vfiprintf_internal_r+0xca8>
102122f4:	d9001b17 	ldw	r4,108(sp)
102122f8:	d8801c17 	ldw	r2,112(sp)
102122fc:	d811883a 	mov	r8,sp
10212300:	21000044 	addi	r4,r4,1
10212304:	003d7d06 	br	102118fc <___vfiprintf_internal_r+0x5b0>
10212308:	05adc83a 	sub	r22,zero,r22
1021230c:	b004c03a 	cmpne	r2,r22,zero
10212310:	035bc83a 	sub	r13,zero,r13
10212314:	689bc83a 	sub	r13,r13,r2
10212318:	03800b44 	movi	r14,45
1021231c:	db801d85 	stb	r14,118(sp)
10212320:	4827883a 	mov	r19,r9
10212324:	00800044 	movi	r2,1
10212328:	b348b03a 	or	r4,r22,r13
1021232c:	003ce806 	br	102116d0 <___vfiprintf_internal_r+0x384>
10212330:	000b883a 	mov	r5,zero
10212334:	01000044 	movi	r4,1
10212338:	d811883a 	mov	r8,sp
1021233c:	683d4826 	beq	r13,zero,10211860 <___vfiprintf_internal_r+0x514>
10212340:	00800084 	movi	r2,2
10212344:	d8c01d04 	addi	r3,sp,116
10212348:	d8c00015 	stw	r3,0(sp)
1021234c:	d8800115 	stw	r2,4(sp)
10212350:	003d4006 	br	10211854 <___vfiprintf_internal_r+0x508>
10212354:	00800084 	movi	r2,2
10212358:	003cda06 	br	102116c4 <___vfiprintf_internal_r+0x378>
1021235c:	a880100c 	andi	r2,r21,64
10212360:	10004226 	beq	r2,zero,1021246c <___vfiprintf_internal_r+0x1120>
10212364:	d8802217 	ldw	r2,136(sp)
10212368:	001b883a 	mov	r13,zero
1021236c:	1580000b 	ldhu	r22,0(r2)
10212370:	10800104 	addi	r2,r2,4
10212374:	d8802215 	stw	r2,136(sp)
10212378:	b009883a 	mov	r4,r22
1021237c:	0005883a 	mov	r2,zero
10212380:	003cd006 	br	102116c4 <___vfiprintf_internal_r+0x378>
10212384:	80c00007 	ldb	r3,0(r16)
10212388:	8005883a 	mov	r2,r16
1021238c:	003c4d06 	br	102114c4 <___vfiprintf_internal_r+0x178>
10212390:	a880100c 	andi	r2,r21,64
10212394:	10004426 	beq	r2,zero,102124a8 <___vfiprintf_internal_r+0x115c>
10212398:	d8c02217 	ldw	r3,136(sp)
1021239c:	001b883a 	mov	r13,zero
102123a0:	00800044 	movi	r2,1
102123a4:	1d80000b 	ldhu	r22,0(r3)
102123a8:	18c00104 	addi	r3,r3,4
102123ac:	d8c02215 	stw	r3,136(sp)
102123b0:	b009883a 	mov	r4,r22
102123b4:	003cc306 	br	102116c4 <___vfiprintf_internal_r+0x378>
102123b8:	a880040c 	andi	r2,r21,16
102123bc:	1000091e 	bne	r2,zero,102123e4 <___vfiprintf_internal_r+0x1098>
102123c0:	aac0100c 	andi	r11,r21,64
102123c4:	58000726 	beq	r11,zero,102123e4 <___vfiprintf_internal_r+0x1098>
102123c8:	d8c02217 	ldw	r3,136(sp)
102123cc:	d9002317 	ldw	r4,140(sp)
102123d0:	18800017 	ldw	r2,0(r3)
102123d4:	18c00104 	addi	r3,r3,4
102123d8:	d8c02215 	stw	r3,136(sp)
102123dc:	1100000d 	sth	r4,0(r2)
102123e0:	003c0e06 	br	1021141c <___vfiprintf_internal_r+0xd0>
102123e4:	d8c02217 	ldw	r3,136(sp)
102123e8:	d9002317 	ldw	r4,140(sp)
102123ec:	18800017 	ldw	r2,0(r3)
102123f0:	18c00104 	addi	r3,r3,4
102123f4:	d8c02215 	stw	r3,136(sp)
102123f8:	11000015 	stw	r4,0(r2)
102123fc:	003c0706 	br	1021141c <___vfiprintf_internal_r+0xd0>
10212400:	a880100c 	andi	r2,r21,64
10212404:	10002126 	beq	r2,zero,1021248c <___vfiprintf_internal_r+0x1140>
10212408:	1d80000f 	ldh	r22,0(r3)
1021240c:	d8c02217 	ldw	r3,136(sp)
10212410:	b01bd7fa 	srai	r13,r22,31
10212414:	18c00104 	addi	r3,r3,4
10212418:	d8c02215 	stw	r3,136(sp)
1021241c:	6805883a 	mov	r2,r13
10212420:	003dc406 	br	10211b34 <___vfiprintf_internal_r+0x7e8>
10212424:	d9002017 	ldw	r4,128(sp)
10212428:	d9402117 	ldw	r5,132(sp)
1021242c:	d9801a04 	addi	r6,sp,104
10212430:	da402b15 	stw	r9,172(sp)
10212434:	db402a15 	stw	r13,168(sp)
10212438:	02112380 	call	10211238 <__sprint_r.part.0>
1021243c:	da402b17 	ldw	r9,172(sp)
10212440:	db402a17 	ldw	r13,168(sp)
10212444:	103eeb1e 	bne	r2,zero,10211ff4 <___vfiprintf_internal_r+0xca8>
10212448:	d9401b17 	ldw	r5,108(sp)
1021244c:	d8801c17 	ldw	r2,112(sp)
10212450:	d811883a 	mov	r8,sp
10212454:	29000044 	addi	r4,r5,1
10212458:	003e8b06 	br	10211e88 <___vfiprintf_internal_r+0xb3c>
1021245c:	9023883a 	mov	r17,r18
10212460:	003d5a06 	br	102119cc <___vfiprintf_internal_r+0x680>
10212464:	4827883a 	mov	r19,r9
10212468:	003e3506 	br	10211d40 <___vfiprintf_internal_r+0x9f4>
1021246c:	d8c02217 	ldw	r3,136(sp)
10212470:	001b883a 	mov	r13,zero
10212474:	0005883a 	mov	r2,zero
10212478:	1d800017 	ldw	r22,0(r3)
1021247c:	18c00104 	addi	r3,r3,4
10212480:	d8c02215 	stw	r3,136(sp)
10212484:	b009883a 	mov	r4,r22
10212488:	003c8e06 	br	102116c4 <___vfiprintf_internal_r+0x378>
1021248c:	1d800017 	ldw	r22,0(r3)
10212490:	d9002217 	ldw	r4,136(sp)
10212494:	b01bd7fa 	srai	r13,r22,31
10212498:	21000104 	addi	r4,r4,4
1021249c:	d9002215 	stw	r4,136(sp)
102124a0:	6805883a 	mov	r2,r13
102124a4:	003da306 	br	10211b34 <___vfiprintf_internal_r+0x7e8>
102124a8:	d9002217 	ldw	r4,136(sp)
102124ac:	001b883a 	mov	r13,zero
102124b0:	00800044 	movi	r2,1
102124b4:	25800017 	ldw	r22,0(r4)
102124b8:	21000104 	addi	r4,r4,4
102124bc:	d9002215 	stw	r4,136(sp)
102124c0:	b009883a 	mov	r4,r22
102124c4:	003c7f06 	br	102116c4 <___vfiprintf_internal_r+0x378>
102124c8:	00c408b4 	movhi	r3,4130
102124cc:	18f54184 	addi	r3,r3,-11002
102124d0:	d8c02415 	stw	r3,144(sp)
102124d4:	003cff06 	br	102118d4 <___vfiprintf_internal_r+0x588>
102124d8:	d8801c17 	ldw	r2,112(sp)
102124dc:	dd402117 	ldw	r21,132(sp)
102124e0:	103ec526 	beq	r2,zero,10211ff8 <___vfiprintf_internal_r+0xcac>
102124e4:	d9002017 	ldw	r4,128(sp)
102124e8:	a80b883a 	mov	r5,r21
102124ec:	d9801a04 	addi	r6,sp,104
102124f0:	02112380 	call	10211238 <__sprint_r.part.0>
102124f4:	003ec006 	br	10211ff8 <___vfiprintf_internal_r+0xcac>
102124f8:	80800044 	addi	r2,r16,1
102124fc:	ad400814 	ori	r21,r21,32
10212500:	80c00047 	ldb	r3,1(r16)
10212504:	003bef06 	br	102114c4 <___vfiprintf_internal_r+0x178>
10212508:	04a5c83a 	sub	r18,zero,r18
1021250c:	8005883a 	mov	r2,r16
10212510:	d8c02215 	stw	r3,136(sp)
10212514:	003d5306 	br	10211a64 <___vfiprintf_internal_r+0x718>
10212518:	da002a15 	stw	r8,168(sp)
1021251c:	02033500 	call	10203350 <strlen>
10212520:	1027883a 	mov	r19,r2
10212524:	db801d83 	ldbu	r14,118(sp)
10212528:	dd802215 	stw	r22,136(sp)
1021252c:	0013883a 	mov	r9,zero
10212530:	da002a17 	ldw	r8,168(sp)
10212534:	003c7f06 	br	10211734 <___vfiprintf_internal_r+0x3e8>
10212538:	d9002017 	ldw	r4,128(sp)
1021253c:	d9402117 	ldw	r5,132(sp)
10212540:	d9801a04 	addi	r6,sp,104
10212544:	da402b15 	stw	r9,172(sp)
10212548:	02112380 	call	10211238 <__sprint_r.part.0>
1021254c:	da402b17 	ldw	r9,172(sp)
10212550:	103ea81e 	bne	r2,zero,10211ff4 <___vfiprintf_internal_r+0xca8>
10212554:	d9401b17 	ldw	r5,108(sp)
10212558:	d8801c17 	ldw	r2,112(sp)
1021255c:	d811883a 	mov	r8,sp
10212560:	29000044 	addi	r4,r5,1
10212564:	003cc006 	br	10211868 <___vfiprintf_internal_r+0x51c>
10212568:	d9401b17 	ldw	r5,108(sp)
1021256c:	010408b4 	movhi	r4,4130
10212570:	21354584 	addi	r4,r4,-10986
10212574:	d9002415 	stw	r4,144(sp)
10212578:	29400044 	addi	r5,r5,1
1021257c:	003c9f06 	br	102117fc <___vfiprintf_internal_r+0x4b0>
10212580:	00800184 	movi	r2,6
10212584:	1240012e 	bgeu	r2,r9,1021258c <___vfiprintf_internal_r+0x1240>
10212588:	1013883a 	mov	r9,r2
1021258c:	4827883a 	mov	r19,r9
10212590:	4823883a 	mov	r17,r9
10212594:	48001116 	blt	r9,zero,102125dc <___vfiprintf_internal_r+0x1290>
10212598:	050408b4 	movhi	r20,4130
1021259c:	dd802215 	stw	r22,136(sp)
102125a0:	a5341e04 	addi	r20,r20,-12168
102125a4:	003db106 	br	10211c6c <___vfiprintf_internal_r+0x920>
102125a8:	d9401b17 	ldw	r5,108(sp)
102125ac:	010408b4 	movhi	r4,4130
102125b0:	21354584 	addi	r4,r4,-10986
102125b4:	d9002415 	stw	r4,144(sp)
102125b8:	29400044 	addi	r5,r5,1
102125bc:	003cf906 	br	102119a4 <___vfiprintf_internal_r+0x658>
102125c0:	4827883a 	mov	r19,r9
102125c4:	db801d83 	ldbu	r14,118(sp)
102125c8:	dd802215 	stw	r22,136(sp)
102125cc:	0013883a 	mov	r9,zero
102125d0:	003c5806 	br	10211734 <___vfiprintf_internal_r+0x3e8>
102125d4:	200d883a 	mov	r6,r4
102125d8:	003ec706 	br	102120f8 <___vfiprintf_internal_r+0xdac>
102125dc:	0023883a 	mov	r17,zero
102125e0:	003fed06 	br	10212598 <___vfiprintf_internal_r+0x124c>
102125e4:	d9002217 	ldw	r4,136(sp)
102125e8:	22400017 	ldw	r9,0(r4)
102125ec:	20c00104 	addi	r3,r4,4
102125f0:	d8c02215 	stw	r3,136(sp)
102125f4:	483fc20e 	bge	r9,zero,10212500 <___vfiprintf_internal_r+0x11b4>
102125f8:	027fffc4 	movi	r9,-1
102125fc:	80c00047 	ldb	r3,1(r16)
10212600:	003bb006 	br	102114c4 <___vfiprintf_internal_r+0x178>
10212604:	8c80010e 	bge	r17,r18,1021260c <___vfiprintf_internal_r+0x12c0>
10212608:	9023883a 	mov	r17,r18
1021260c:	d8802317 	ldw	r2,140(sp)
10212610:	1445883a 	add	r2,r2,r17
10212614:	d8802315 	stw	r2,140(sp)
10212618:	003cef06 	br	102119d8 <___vfiprintf_internal_r+0x68c>

1021261c <__vfiprintf_internal>:
1021261c:	2007883a 	mov	r3,r4
10212620:	010408b4 	movhi	r4,4130
10212624:	213d0604 	addi	r4,r4,-3048
10212628:	21000017 	ldw	r4,0(r4)
1021262c:	2805883a 	mov	r2,r5
10212630:	300f883a 	mov	r7,r6
10212634:	180b883a 	mov	r5,r3
10212638:	100d883a 	mov	r6,r2
1021263c:	021134c1 	jmpi	1021134c <___vfiprintf_internal_r>

10212640 <__sbprintf>:
10212640:	2880030b 	ldhu	r2,12(r5)
10212644:	2ac01917 	ldw	r11,100(r5)
10212648:	2a80038b 	ldhu	r10,14(r5)
1021264c:	2a400717 	ldw	r9,28(r5)
10212650:	2a000917 	ldw	r8,36(r5)
10212654:	defee204 	addi	sp,sp,-1144
10212658:	00c10004 	movi	r3,1024
1021265c:	dc011a15 	stw	r16,1128(sp)
10212660:	10bfff4c 	andi	r2,r2,65533
10212664:	2821883a 	mov	r16,r5
10212668:	d8cb883a 	add	r5,sp,r3
1021266c:	dc811c15 	stw	r18,1136(sp)
10212670:	dc411b15 	stw	r17,1132(sp)
10212674:	dfc11d15 	stw	ra,1140(sp)
10212678:	2025883a 	mov	r18,r4
1021267c:	d881030d 	sth	r2,1036(sp)
10212680:	dac11915 	stw	r11,1124(sp)
10212684:	da81038d 	sth	r10,1038(sp)
10212688:	da410715 	stw	r9,1052(sp)
1021268c:	da010915 	stw	r8,1060(sp)
10212690:	dec10015 	stw	sp,1024(sp)
10212694:	dec10415 	stw	sp,1040(sp)
10212698:	d8c10215 	stw	r3,1032(sp)
1021269c:	d8c10515 	stw	r3,1044(sp)
102126a0:	d8010615 	stw	zero,1048(sp)
102126a4:	021134c0 	call	1021134c <___vfiprintf_internal_r>
102126a8:	1023883a 	mov	r17,r2
102126ac:	10000416 	blt	r2,zero,102126c0 <__sbprintf+0x80>
102126b0:	9009883a 	mov	r4,r18
102126b4:	d9410004 	addi	r5,sp,1024
102126b8:	02088440 	call	10208844 <_fflush_r>
102126bc:	10000d1e 	bne	r2,zero,102126f4 <__sbprintf+0xb4>
102126c0:	d8c1030b 	ldhu	r3,1036(sp)
102126c4:	18c0100c 	andi	r3,r3,64
102126c8:	18000326 	beq	r3,zero,102126d8 <__sbprintf+0x98>
102126cc:	8080030b 	ldhu	r2,12(r16)
102126d0:	10801014 	ori	r2,r2,64
102126d4:	8080030d 	sth	r2,12(r16)
102126d8:	8805883a 	mov	r2,r17
102126dc:	dfc11d17 	ldw	ra,1140(sp)
102126e0:	dc811c17 	ldw	r18,1136(sp)
102126e4:	dc411b17 	ldw	r17,1132(sp)
102126e8:	dc011a17 	ldw	r16,1128(sp)
102126ec:	dec11e04 	addi	sp,sp,1144
102126f0:	f800283a 	ret
102126f4:	047fffc4 	movi	r17,-1
102126f8:	003ff106 	br	102126c0 <__sbprintf+0x80>

102126fc <__swbuf_r>:
102126fc:	defffc04 	addi	sp,sp,-16
10212700:	dc800215 	stw	r18,8(sp)
10212704:	dc400115 	stw	r17,4(sp)
10212708:	dc000015 	stw	r16,0(sp)
1021270c:	dfc00315 	stw	ra,12(sp)
10212710:	2025883a 	mov	r18,r4
10212714:	2823883a 	mov	r17,r5
10212718:	3021883a 	mov	r16,r6
1021271c:	20000226 	beq	r4,zero,10212728 <__swbuf_r+0x2c>
10212720:	20800e17 	ldw	r2,56(r4)
10212724:	10004126 	beq	r2,zero,1021282c <__swbuf_r+0x130>
10212728:	80c00617 	ldw	r3,24(r16)
1021272c:	8180030b 	ldhu	r6,12(r16)
10212730:	80c00215 	stw	r3,8(r16)
10212734:	30c0020c 	andi	r3,r6,8
10212738:	18003526 	beq	r3,zero,10212810 <__swbuf_r+0x114>
1021273c:	80c00417 	ldw	r3,16(r16)
10212740:	18003326 	beq	r3,zero,10212810 <__swbuf_r+0x114>
10212744:	3088000c 	andi	r2,r6,8192
10212748:	8c403fcc 	andi	r17,r17,255
1021274c:	10001726 	beq	r2,zero,102127ac <__swbuf_r+0xb0>
10212750:	80800017 	ldw	r2,0(r16)
10212754:	81000517 	ldw	r4,20(r16)
10212758:	10c7c83a 	sub	r3,r2,r3
1021275c:	19001d0e 	bge	r3,r4,102127d4 <__swbuf_r+0xd8>
10212760:	18c00044 	addi	r3,r3,1
10212764:	81400217 	ldw	r5,8(r16)
10212768:	11000044 	addi	r4,r2,1
1021276c:	81000015 	stw	r4,0(r16)
10212770:	297fffc4 	addi	r5,r5,-1
10212774:	81400215 	stw	r5,8(r16)
10212778:	14400005 	stb	r17,0(r2)
1021277c:	80800517 	ldw	r2,20(r16)
10212780:	10c01d26 	beq	r2,r3,102127f8 <__swbuf_r+0xfc>
10212784:	8080030b 	ldhu	r2,12(r16)
10212788:	1080004c 	andi	r2,r2,1
1021278c:	1000181e 	bne	r2,zero,102127f0 <__swbuf_r+0xf4>
10212790:	8805883a 	mov	r2,r17
10212794:	dfc00317 	ldw	ra,12(sp)
10212798:	dc800217 	ldw	r18,8(sp)
1021279c:	dc400117 	ldw	r17,4(sp)
102127a0:	dc000017 	ldw	r16,0(sp)
102127a4:	dec00404 	addi	sp,sp,16
102127a8:	f800283a 	ret
102127ac:	81001917 	ldw	r4,100(r16)
102127b0:	00b7ffc4 	movi	r2,-8193
102127b4:	31880014 	ori	r6,r6,8192
102127b8:	2084703a 	and	r2,r4,r2
102127bc:	80801915 	stw	r2,100(r16)
102127c0:	80800017 	ldw	r2,0(r16)
102127c4:	81000517 	ldw	r4,20(r16)
102127c8:	8180030d 	sth	r6,12(r16)
102127cc:	10c7c83a 	sub	r3,r2,r3
102127d0:	193fe316 	blt	r3,r4,10212760 <__swbuf_r+0x64>
102127d4:	9009883a 	mov	r4,r18
102127d8:	800b883a 	mov	r5,r16
102127dc:	02088440 	call	10208844 <_fflush_r>
102127e0:	1000091e 	bne	r2,zero,10212808 <__swbuf_r+0x10c>
102127e4:	80800017 	ldw	r2,0(r16)
102127e8:	00c00044 	movi	r3,1
102127ec:	003fdd06 	br	10212764 <__swbuf_r+0x68>
102127f0:	00800284 	movi	r2,10
102127f4:	88bfe61e 	bne	r17,r2,10212790 <__swbuf_r+0x94>
102127f8:	9009883a 	mov	r4,r18
102127fc:	800b883a 	mov	r5,r16
10212800:	02088440 	call	10208844 <_fflush_r>
10212804:	103fe226 	beq	r2,zero,10212790 <__swbuf_r+0x94>
10212808:	00bfffc4 	movi	r2,-1
1021280c:	003fe106 	br	10212794 <__swbuf_r+0x98>
10212810:	9009883a 	mov	r4,r18
10212814:	800b883a 	mov	r5,r16
10212818:	0206b6c0 	call	10206b6c <__swsetup_r>
1021281c:	103ffa1e 	bne	r2,zero,10212808 <__swbuf_r+0x10c>
10212820:	8180030b 	ldhu	r6,12(r16)
10212824:	80c00417 	ldw	r3,16(r16)
10212828:	003fc606 	br	10212744 <__swbuf_r+0x48>
1021282c:	0208c200 	call	10208c20 <__sinit>
10212830:	003fbd06 	br	10212728 <__swbuf_r+0x2c>

10212834 <__swbuf>:
10212834:	00c408b4 	movhi	r3,4130
10212838:	18fd0604 	addi	r3,r3,-3048
1021283c:	2005883a 	mov	r2,r4
10212840:	19000017 	ldw	r4,0(r3)
10212844:	280d883a 	mov	r6,r5
10212848:	100b883a 	mov	r5,r2
1021284c:	02126fc1 	jmpi	102126fc <__swbuf_r>

10212850 <_calloc_r>:
10212850:	298b383a 	mul	r5,r5,r6
10212854:	defffe04 	addi	sp,sp,-8
10212858:	dc000015 	stw	r16,0(sp)
1021285c:	dfc00115 	stw	ra,4(sp)
10212860:	02025a40 	call	102025a4 <_malloc_r>
10212864:	1021883a 	mov	r16,r2
10212868:	10002826 	beq	r2,zero,1021290c <_calloc_r+0xbc>
1021286c:	11bfff17 	ldw	r6,-4(r2)
10212870:	00bfff04 	movi	r2,-4
10212874:	00c00904 	movi	r3,36
10212878:	308c703a 	and	r6,r6,r2
1021287c:	308d883a 	add	r6,r6,r2
10212880:	19801436 	bltu	r3,r6,102128d4 <_calloc_r+0x84>
10212884:	008004c4 	movi	r2,19
10212888:	11800936 	bltu	r2,r6,102128b0 <_calloc_r+0x60>
1021288c:	8005883a 	mov	r2,r16
10212890:	10000015 	stw	zero,0(r2)
10212894:	10000115 	stw	zero,4(r2)
10212898:	10000215 	stw	zero,8(r2)
1021289c:	8005883a 	mov	r2,r16
102128a0:	dfc00117 	ldw	ra,4(sp)
102128a4:	dc000017 	ldw	r16,0(sp)
102128a8:	dec00204 	addi	sp,sp,8
102128ac:	f800283a 	ret
102128b0:	80000015 	stw	zero,0(r16)
102128b4:	80000115 	stw	zero,4(r16)
102128b8:	008006c4 	movi	r2,27
102128bc:	11800d2e 	bgeu	r2,r6,102128f4 <_calloc_r+0xa4>
102128c0:	80000215 	stw	zero,8(r16)
102128c4:	80000315 	stw	zero,12(r16)
102128c8:	30c00c26 	beq	r6,r3,102128fc <_calloc_r+0xac>
102128cc:	80800404 	addi	r2,r16,16
102128d0:	003fef06 	br	10212890 <_calloc_r+0x40>
102128d4:	8009883a 	mov	r4,r16
102128d8:	000b883a 	mov	r5,zero
102128dc:	0209e580 	call	10209e58 <memset>
102128e0:	8005883a 	mov	r2,r16
102128e4:	dfc00117 	ldw	ra,4(sp)
102128e8:	dc000017 	ldw	r16,0(sp)
102128ec:	dec00204 	addi	sp,sp,8
102128f0:	f800283a 	ret
102128f4:	80800204 	addi	r2,r16,8
102128f8:	003fe506 	br	10212890 <_calloc_r+0x40>
102128fc:	80000415 	stw	zero,16(r16)
10212900:	80800604 	addi	r2,r16,24
10212904:	80000515 	stw	zero,20(r16)
10212908:	003fe106 	br	10212890 <_calloc_r+0x40>
1021290c:	0005883a 	mov	r2,zero
10212910:	003fe306 	br	102128a0 <_calloc_r+0x50>

10212914 <_fclose_r>:
10212914:	28003926 	beq	r5,zero,102129fc <_fclose_r+0xe8>
10212918:	defffc04 	addi	sp,sp,-16
1021291c:	dc400115 	stw	r17,4(sp)
10212920:	dc000015 	stw	r16,0(sp)
10212924:	dfc00315 	stw	ra,12(sp)
10212928:	dc800215 	stw	r18,8(sp)
1021292c:	2023883a 	mov	r17,r4
10212930:	2821883a 	mov	r16,r5
10212934:	20000226 	beq	r4,zero,10212940 <_fclose_r+0x2c>
10212938:	20800e17 	ldw	r2,56(r4)
1021293c:	10002726 	beq	r2,zero,102129dc <_fclose_r+0xc8>
10212940:	8080030f 	ldh	r2,12(r16)
10212944:	1000071e 	bne	r2,zero,10212964 <_fclose_r+0x50>
10212948:	0005883a 	mov	r2,zero
1021294c:	dfc00317 	ldw	ra,12(sp)
10212950:	dc800217 	ldw	r18,8(sp)
10212954:	dc400117 	ldw	r17,4(sp)
10212958:	dc000017 	ldw	r16,0(sp)
1021295c:	dec00404 	addi	sp,sp,16
10212960:	f800283a 	ret
10212964:	8809883a 	mov	r4,r17
10212968:	800b883a 	mov	r5,r16
1021296c:	020863c0 	call	1020863c <__sflush_r>
10212970:	1025883a 	mov	r18,r2
10212974:	80800b17 	ldw	r2,44(r16)
10212978:	10000426 	beq	r2,zero,1021298c <_fclose_r+0x78>
1021297c:	81400717 	ldw	r5,28(r16)
10212980:	8809883a 	mov	r4,r17
10212984:	103ee83a 	callr	r2
10212988:	10001616 	blt	r2,zero,102129e4 <_fclose_r+0xd0>
1021298c:	8080030b 	ldhu	r2,12(r16)
10212990:	1080200c 	andi	r2,r2,128
10212994:	1000151e 	bne	r2,zero,102129ec <_fclose_r+0xd8>
10212998:	81400c17 	ldw	r5,48(r16)
1021299c:	28000526 	beq	r5,zero,102129b4 <_fclose_r+0xa0>
102129a0:	80801004 	addi	r2,r16,64
102129a4:	28800226 	beq	r5,r2,102129b0 <_fclose_r+0x9c>
102129a8:	8809883a 	mov	r4,r17
102129ac:	0208d940 	call	10208d94 <_free_r>
102129b0:	80000c15 	stw	zero,48(r16)
102129b4:	81401117 	ldw	r5,68(r16)
102129b8:	28000326 	beq	r5,zero,102129c8 <_fclose_r+0xb4>
102129bc:	8809883a 	mov	r4,r17
102129c0:	0208d940 	call	10208d94 <_free_r>
102129c4:	80001115 	stw	zero,68(r16)
102129c8:	0208c300 	call	10208c30 <__sfp_lock_acquire>
102129cc:	8000030d 	sth	zero,12(r16)
102129d0:	0208c340 	call	10208c34 <__sfp_lock_release>
102129d4:	9005883a 	mov	r2,r18
102129d8:	003fdc06 	br	1021294c <_fclose_r+0x38>
102129dc:	0208c200 	call	10208c20 <__sinit>
102129e0:	003fd706 	br	10212940 <_fclose_r+0x2c>
102129e4:	04bfffc4 	movi	r18,-1
102129e8:	003fe806 	br	1021298c <_fclose_r+0x78>
102129ec:	81400417 	ldw	r5,16(r16)
102129f0:	8809883a 	mov	r4,r17
102129f4:	0208d940 	call	10208d94 <_free_r>
102129f8:	003fe706 	br	10212998 <_fclose_r+0x84>
102129fc:	0005883a 	mov	r2,zero
10212a00:	f800283a 	ret

10212a04 <fclose>:
10212a04:	008408b4 	movhi	r2,4130
10212a08:	10bd0604 	addi	r2,r2,-3048
10212a0c:	200b883a 	mov	r5,r4
10212a10:	11000017 	ldw	r4,0(r2)
10212a14:	02129141 	jmpi	10212914 <_fclose_r>

10212a18 <_fputwc_r>:
10212a18:	3080030b 	ldhu	r2,12(r6)
10212a1c:	defff804 	addi	sp,sp,-32
10212a20:	dcc00415 	stw	r19,16(sp)
10212a24:	dc800315 	stw	r18,12(sp)
10212a28:	dc000115 	stw	r16,4(sp)
10212a2c:	dfc00715 	stw	ra,28(sp)
10212a30:	dd400615 	stw	r21,24(sp)
10212a34:	dd000515 	stw	r20,20(sp)
10212a38:	dc400215 	stw	r17,8(sp)
10212a3c:	10c8000c 	andi	r3,r2,8192
10212a40:	3021883a 	mov	r16,r6
10212a44:	2027883a 	mov	r19,r4
10212a48:	2825883a 	mov	r18,r5
10212a4c:	1800051e 	bne	r3,zero,10212a64 <_fputwc_r+0x4c>
10212a50:	30c01917 	ldw	r3,100(r6)
10212a54:	10880014 	ori	r2,r2,8192
10212a58:	3080030d 	sth	r2,12(r6)
10212a5c:	18880014 	ori	r2,r3,8192
10212a60:	30801915 	stw	r2,100(r6)
10212a64:	02097840 	call	10209784 <__locale_mb_cur_max>
10212a68:	00c00044 	movi	r3,1
10212a6c:	10c03e26 	beq	r2,r3,10212b68 <_fputwc_r+0x150>
10212a70:	9809883a 	mov	r4,r19
10212a74:	d80b883a 	mov	r5,sp
10212a78:	900d883a 	mov	r6,r18
10212a7c:	81c01704 	addi	r7,r16,92
10212a80:	0214b080 	call	10214b08 <_wcrtomb_r>
10212a84:	1029883a 	mov	r20,r2
10212a88:	00bfffc4 	movi	r2,-1
10212a8c:	a0802026 	beq	r20,r2,10212b10 <_fputwc_r+0xf8>
10212a90:	d9400003 	ldbu	r5,0(sp)
10212a94:	a0001c26 	beq	r20,zero,10212b08 <_fputwc_r+0xf0>
10212a98:	0023883a 	mov	r17,zero
10212a9c:	05400284 	movi	r21,10
10212aa0:	00000906 	br	10212ac8 <_fputwc_r+0xb0>
10212aa4:	80800017 	ldw	r2,0(r16)
10212aa8:	11400005 	stb	r5,0(r2)
10212aac:	80c00017 	ldw	r3,0(r16)
10212ab0:	18c00044 	addi	r3,r3,1
10212ab4:	80c00015 	stw	r3,0(r16)
10212ab8:	8c400044 	addi	r17,r17,1
10212abc:	dc45883a 	add	r2,sp,r17
10212ac0:	8d00112e 	bgeu	r17,r20,10212b08 <_fputwc_r+0xf0>
10212ac4:	11400003 	ldbu	r5,0(r2)
10212ac8:	80c00217 	ldw	r3,8(r16)
10212acc:	18ffffc4 	addi	r3,r3,-1
10212ad0:	80c00215 	stw	r3,8(r16)
10212ad4:	183ff30e 	bge	r3,zero,10212aa4 <_fputwc_r+0x8c>
10212ad8:	80800617 	ldw	r2,24(r16)
10212adc:	18801916 	blt	r3,r2,10212b44 <_fputwc_r+0x12c>
10212ae0:	80800017 	ldw	r2,0(r16)
10212ae4:	11400005 	stb	r5,0(r2)
10212ae8:	80800017 	ldw	r2,0(r16)
10212aec:	10c00003 	ldbu	r3,0(r2)
10212af0:	10800044 	addi	r2,r2,1
10212af4:	1d402326 	beq	r3,r21,10212b84 <_fputwc_r+0x16c>
10212af8:	80800015 	stw	r2,0(r16)
10212afc:	8c400044 	addi	r17,r17,1
10212b00:	dc45883a 	add	r2,sp,r17
10212b04:	8d3fef36 	bltu	r17,r20,10212ac4 <_fputwc_r+0xac>
10212b08:	9005883a 	mov	r2,r18
10212b0c:	00000406 	br	10212b20 <_fputwc_r+0x108>
10212b10:	80c0030b 	ldhu	r3,12(r16)
10212b14:	a005883a 	mov	r2,r20
10212b18:	18c01014 	ori	r3,r3,64
10212b1c:	80c0030d 	sth	r3,12(r16)
10212b20:	dfc00717 	ldw	ra,28(sp)
10212b24:	dd400617 	ldw	r21,24(sp)
10212b28:	dd000517 	ldw	r20,20(sp)
10212b2c:	dcc00417 	ldw	r19,16(sp)
10212b30:	dc800317 	ldw	r18,12(sp)
10212b34:	dc400217 	ldw	r17,8(sp)
10212b38:	dc000117 	ldw	r16,4(sp)
10212b3c:	dec00804 	addi	sp,sp,32
10212b40:	f800283a 	ret
10212b44:	9809883a 	mov	r4,r19
10212b48:	29403fcc 	andi	r5,r5,255
10212b4c:	800d883a 	mov	r6,r16
10212b50:	02126fc0 	call	102126fc <__swbuf_r>
10212b54:	10bfffe0 	cmpeqi	r2,r2,-1
10212b58:	10803fcc 	andi	r2,r2,255
10212b5c:	103fd626 	beq	r2,zero,10212ab8 <_fputwc_r+0xa0>
10212b60:	00bfffc4 	movi	r2,-1
10212b64:	003fee06 	br	10212b20 <_fputwc_r+0x108>
10212b68:	90ffffc4 	addi	r3,r18,-1
10212b6c:	01003f84 	movi	r4,254
10212b70:	20ffbf36 	bltu	r4,r3,10212a70 <_fputwc_r+0x58>
10212b74:	900b883a 	mov	r5,r18
10212b78:	dc800005 	stb	r18,0(sp)
10212b7c:	1029883a 	mov	r20,r2
10212b80:	003fc506 	br	10212a98 <_fputwc_r+0x80>
10212b84:	9809883a 	mov	r4,r19
10212b88:	a80b883a 	mov	r5,r21
10212b8c:	800d883a 	mov	r6,r16
10212b90:	02126fc0 	call	102126fc <__swbuf_r>
10212b94:	10bfffe0 	cmpeqi	r2,r2,-1
10212b98:	003fef06 	br	10212b58 <_fputwc_r+0x140>

10212b9c <fputwc>:
10212b9c:	008408b4 	movhi	r2,4130
10212ba0:	defffc04 	addi	sp,sp,-16
10212ba4:	10bd0604 	addi	r2,r2,-3048
10212ba8:	dc000115 	stw	r16,4(sp)
10212bac:	14000017 	ldw	r16,0(r2)
10212bb0:	dc400215 	stw	r17,8(sp)
10212bb4:	dfc00315 	stw	ra,12(sp)
10212bb8:	2023883a 	mov	r17,r4
10212bbc:	280d883a 	mov	r6,r5
10212bc0:	80000626 	beq	r16,zero,10212bdc <fputwc+0x40>
10212bc4:	80800e17 	ldw	r2,56(r16)
10212bc8:	1000041e 	bne	r2,zero,10212bdc <fputwc+0x40>
10212bcc:	8009883a 	mov	r4,r16
10212bd0:	d9400015 	stw	r5,0(sp)
10212bd4:	0208c200 	call	10208c20 <__sinit>
10212bd8:	d9800017 	ldw	r6,0(sp)
10212bdc:	8009883a 	mov	r4,r16
10212be0:	880b883a 	mov	r5,r17
10212be4:	dfc00317 	ldw	ra,12(sp)
10212be8:	dc400217 	ldw	r17,8(sp)
10212bec:	dc000117 	ldw	r16,4(sp)
10212bf0:	dec00404 	addi	sp,sp,16
10212bf4:	0212a181 	jmpi	10212a18 <_fputwc_r>

10212bf8 <_fstat_r>:
10212bf8:	defffd04 	addi	sp,sp,-12
10212bfc:	dc000015 	stw	r16,0(sp)
10212c00:	040408b4 	movhi	r16,4130
10212c04:	dc400115 	stw	r17,4(sp)
10212c08:	84045804 	addi	r16,r16,4448
10212c0c:	2023883a 	mov	r17,r4
10212c10:	2809883a 	mov	r4,r5
10212c14:	300b883a 	mov	r5,r6
10212c18:	dfc00215 	stw	ra,8(sp)
10212c1c:	80000015 	stw	zero,0(r16)
10212c20:	02185580 	call	10218558 <fstat>
10212c24:	00ffffc4 	movi	r3,-1
10212c28:	10c00526 	beq	r2,r3,10212c40 <_fstat_r+0x48>
10212c2c:	dfc00217 	ldw	ra,8(sp)
10212c30:	dc400117 	ldw	r17,4(sp)
10212c34:	dc000017 	ldw	r16,0(sp)
10212c38:	dec00304 	addi	sp,sp,12
10212c3c:	f800283a 	ret
10212c40:	80c00017 	ldw	r3,0(r16)
10212c44:	183ff926 	beq	r3,zero,10212c2c <_fstat_r+0x34>
10212c48:	88c00015 	stw	r3,0(r17)
10212c4c:	003ff706 	br	10212c2c <_fstat_r+0x34>

10212c50 <rshift>:
10212c50:	2807d17a 	srai	r3,r5,5
10212c54:	20800417 	ldw	r2,16(r4)
10212c58:	22400504 	addi	r9,r4,20
10212c5c:	1880250e 	bge	r3,r2,10212cf4 <rshift+0xa4>
10212c60:	1085883a 	add	r2,r2,r2
10212c64:	18c7883a 	add	r3,r3,r3
10212c68:	1085883a 	add	r2,r2,r2
10212c6c:	18c7883a 	add	r3,r3,r3
10212c70:	294007cc 	andi	r5,r5,31
10212c74:	4885883a 	add	r2,r9,r2
10212c78:	48c7883a 	add	r3,r9,r3
10212c7c:	28002026 	beq	r5,zero,10212d00 <rshift+0xb0>
10212c80:	19800017 	ldw	r6,0(r3)
10212c84:	02c00804 	movi	r11,32
10212c88:	19c00104 	addi	r7,r3,4
10212c8c:	5957c83a 	sub	r11,r11,r5
10212c90:	3150d83a 	srl	r8,r6,r5
10212c94:	38802c2e 	bgeu	r7,r2,10212d48 <rshift+0xf8>
10212c98:	4815883a 	mov	r10,r9
10212c9c:	39800017 	ldw	r6,0(r7)
10212ca0:	52800104 	addi	r10,r10,4
10212ca4:	39c00104 	addi	r7,r7,4
10212ca8:	32cc983a 	sll	r6,r6,r11
10212cac:	418cb03a 	or	r6,r8,r6
10212cb0:	51bfff15 	stw	r6,-4(r10)
10212cb4:	39bfff17 	ldw	r6,-4(r7)
10212cb8:	3150d83a 	srl	r8,r6,r5
10212cbc:	38bff736 	bltu	r7,r2,10212c9c <rshift+0x4c>
10212cc0:	10c7c83a 	sub	r3,r2,r3
10212cc4:	18fffec4 	addi	r3,r3,-5
10212cc8:	1806d0ba 	srli	r3,r3,2
10212ccc:	18c00044 	addi	r3,r3,1
10212cd0:	18c7883a 	add	r3,r3,r3
10212cd4:	18c7883a 	add	r3,r3,r3
10212cd8:	48c7883a 	add	r3,r9,r3
10212cdc:	1a000015 	stw	r8,0(r3)
10212ce0:	40000126 	beq	r8,zero,10212ce8 <rshift+0x98>
10212ce4:	18c00104 	addi	r3,r3,4
10212ce8:	1a45c83a 	sub	r2,r3,r9
10212cec:	1005d0ba 	srai	r2,r2,2
10212cf0:	00001206 	br	10212d3c <rshift+0xec>
10212cf4:	20000415 	stw	zero,16(r4)
10212cf8:	20000515 	stw	zero,20(r4)
10212cfc:	f800283a 	ret
10212d00:	18bffc2e 	bgeu	r3,r2,10212cf4 <rshift+0xa4>
10212d04:	180d883a 	mov	r6,r3
10212d08:	480b883a 	mov	r5,r9
10212d0c:	31c00017 	ldw	r7,0(r6)
10212d10:	29400104 	addi	r5,r5,4
10212d14:	31800104 	addi	r6,r6,4
10212d18:	29ffff15 	stw	r7,-4(r5)
10212d1c:	30bffb36 	bltu	r6,r2,10212d0c <rshift+0xbc>
10212d20:	00c6303a 	nor	r3,zero,r3
10212d24:	1885883a 	add	r2,r3,r2
10212d28:	1004d0ba 	srli	r2,r2,2
10212d2c:	10800044 	addi	r2,r2,1
10212d30:	1085883a 	add	r2,r2,r2
10212d34:	1085883a 	add	r2,r2,r2
10212d38:	1005d0ba 	srai	r2,r2,2
10212d3c:	20800415 	stw	r2,16(r4)
10212d40:	103fed26 	beq	r2,zero,10212cf8 <rshift+0xa8>
10212d44:	f800283a 	ret
10212d48:	4807883a 	mov	r3,r9
10212d4c:	003fe306 	br	10212cdc <rshift+0x8c>

10212d50 <__gethex>:
10212d50:	deffeb04 	addi	sp,sp,-84
10212d54:	d9c00415 	stw	r7,16(sp)
10212d58:	dfc01415 	stw	ra,80(sp)
10212d5c:	dd801115 	stw	r22,68(sp)
10212d60:	dcc00e15 	stw	r19,56(sp)
10212d64:	dc800d15 	stw	r18,52(sp)
10212d68:	2827883a 	mov	r19,r5
10212d6c:	d9000115 	stw	r4,4(sp)
10212d70:	d9800015 	stw	r6,0(sp)
10212d74:	df001315 	stw	fp,76(sp)
10212d78:	ddc01215 	stw	r23,72(sp)
10212d7c:	dd401015 	stw	r21,64(sp)
10212d80:	dd000f15 	stw	r20,60(sp)
10212d84:	dc400c15 	stw	r17,48(sp)
10212d88:	dc000b15 	stw	r16,44(sp)
10212d8c:	02097a80 	call	102097a8 <_localeconv_r>
10212d90:	14800017 	ldw	r18,0(r2)
10212d94:	9009883a 	mov	r4,r18
10212d98:	02033500 	call	10203350 <strlen>
10212d9c:	99c00017 	ldw	r7,0(r19)
10212da0:	9087883a 	add	r3,r18,r2
10212da4:	18ffffc3 	ldbu	r3,-1(r3)
10212da8:	102d883a 	mov	r22,r2
10212dac:	38800083 	ldbu	r2,2(r7)
10212db0:	d8c00305 	stb	r3,12(sp)
10212db4:	00c00c04 	movi	r3,48
10212db8:	10c14c1e 	bne	r2,r3,102132ec <__gethex+0x59c>
10212dbc:	013fff84 	movi	r4,-2
10212dc0:	38c000c4 	addi	r3,r7,3
10212dc4:	21c9c83a 	sub	r4,r4,r7
10212dc8:	100b883a 	mov	r5,r2
10212dcc:	20e3883a 	add	r17,r4,r3
10212dd0:	182b883a 	mov	r21,r3
10212dd4:	18c00044 	addi	r3,r3,1
10212dd8:	18bfffc3 	ldbu	r2,-1(r3)
10212ddc:	117ffb26 	beq	r2,r5,10212dcc <__gethex+0x7c>
10212de0:	050408b4 	movhi	r20,4130
10212de4:	a5354984 	addi	r20,r20,-10970
10212de8:	a085883a 	add	r2,r20,r2
10212dec:	10800003 	ldbu	r2,0(r2)
10212df0:	1000c526 	beq	r2,zero,10213108 <__gethex+0x3b8>
10212df4:	a8800003 	ldbu	r2,0(r21)
10212df8:	0017883a 	mov	r11,zero
10212dfc:	002f883a 	mov	r23,zero
10212e00:	a085883a 	add	r2,r20,r2
10212e04:	10800003 	ldbu	r2,0(r2)
10212e08:	a821883a 	mov	r16,r21
10212e0c:	10000526 	beq	r2,zero,10212e24 <__gethex+0xd4>
10212e10:	84000044 	addi	r16,r16,1
10212e14:	80c00003 	ldbu	r3,0(r16)
10212e18:	a0c7883a 	add	r3,r20,r3
10212e1c:	18800003 	ldbu	r2,0(r3)
10212e20:	103ffb1e 	bne	r2,zero,10212e10 <__gethex+0xc0>
10212e24:	8009883a 	mov	r4,r16
10212e28:	900b883a 	mov	r5,r18
10212e2c:	b00d883a 	mov	r6,r22
10212e30:	dac00a15 	stw	r11,40(sp)
10212e34:	02138440 	call	10213844 <strncmp>
10212e38:	dac00a17 	ldw	r11,40(sp)
10212e3c:	1000031e 	bne	r2,zero,10212e4c <__gethex+0xfc>
10212e40:	b8014c26 	beq	r23,zero,10213374 <__gethex+0x624>
10212e44:	80800003 	ldbu	r2,0(r16)
10212e48:	00000206 	br	10212e54 <__gethex+0x104>
10212e4c:	80800003 	ldbu	r2,0(r16)
10212e50:	b8011926 	beq	r23,zero,102132b8 <__gethex+0x568>
10212e54:	85efc83a 	sub	r23,r16,r23
10212e58:	bdef883a 	add	r23,r23,r23
10212e5c:	bdef883a 	add	r23,r23,r23
10212e60:	05efc83a 	sub	r23,zero,r23
10212e64:	10803fcc 	andi	r2,r2,255
10212e68:	00c01404 	movi	r3,80
10212e6c:	10c07926 	beq	r2,r3,10213054 <__gethex+0x304>
10212e70:	00c01c04 	movi	r3,112
10212e74:	10c07726 	beq	r2,r3,10213054 <__gethex+0x304>
10212e78:	8039883a 	mov	fp,r16
10212e7c:	9c000015 	stw	r16,0(r19)
10212e80:	58000e26 	beq	r11,zero,10212ebc <__gethex+0x16c>
10212e84:	8800ae1e 	bne	r17,zero,10213140 <__gethex+0x3f0>
10212e88:	00800184 	movi	r2,6
10212e8c:	dfc01417 	ldw	ra,80(sp)
10212e90:	df001317 	ldw	fp,76(sp)
10212e94:	ddc01217 	ldw	r23,72(sp)
10212e98:	dd801117 	ldw	r22,68(sp)
10212e9c:	dd401017 	ldw	r21,64(sp)
10212ea0:	dd000f17 	ldw	r20,60(sp)
10212ea4:	dcc00e17 	ldw	r19,56(sp)
10212ea8:	dc800d17 	ldw	r18,52(sp)
10212eac:	dc400c17 	ldw	r17,48(sp)
10212eb0:	dc000b17 	ldw	r16,44(sp)
10212eb4:	dec01504 	addi	sp,sp,84
10212eb8:	f800283a 	ret
10212ebc:	e545c83a 	sub	r2,fp,r21
10212ec0:	10bfffc4 	addi	r2,r2,-1
10212ec4:	00c001c4 	movi	r3,7
10212ec8:	000b883a 	mov	r5,zero
10212ecc:	1880030e 	bge	r3,r2,10212edc <__gethex+0x18c>
10212ed0:	1005d07a 	srai	r2,r2,1
10212ed4:	29400044 	addi	r5,r5,1
10212ed8:	18bffd16 	blt	r3,r2,10212ed0 <__gethex+0x180>
10212edc:	d9000117 	ldw	r4,4(sp)
10212ee0:	0209f7c0 	call	10209f7c <_Balloc>
10212ee4:	10c00504 	addi	r3,r2,20
10212ee8:	d8c00215 	stw	r3,8(sp)
10212eec:	1021883a 	mov	r16,r2
10212ef0:	af01612e 	bgeu	r21,fp,10213478 <__gethex+0x728>
10212ef4:	dc400303 	ldbu	r17,12(sp)
10212ef8:	03800044 	movi	r14,1
10212efc:	1817883a 	mov	r11,r3
10212f00:	0015883a 	mov	r10,zero
10212f04:	0027883a 	mov	r19,zero
10212f08:	759dc83a 	sub	r14,r14,r22
10212f0c:	03000804 	movi	r12,32
10212f10:	e0bfffc3 	ldbu	r2,-1(fp)
10212f14:	e3ffffc4 	addi	r15,fp,-1
10212f18:	14403026 	beq	r2,r17,10212fdc <__gethex+0x28c>
10212f1c:	9b004526 	beq	r19,r12,10213034 <__gethex+0x2e4>
10212f20:	9809883a 	mov	r4,r19
10212f24:	9cc00104 	addi	r19,r19,4
10212f28:	e0bfffc3 	ldbu	r2,-1(fp)
10212f2c:	7839883a 	mov	fp,r15
10212f30:	a085883a 	add	r2,r20,r2
10212f34:	10c00003 	ldbu	r3,0(r2)
10212f38:	18c003cc 	andi	r3,r3,15
10212f3c:	1906983a 	sll	r3,r3,r4
10212f40:	50d4b03a 	or	r10,r10,r3
10212f44:	af3ff236 	bltu	r21,fp,10212f10 <__gethex+0x1c0>
10212f48:	d8c00217 	ldw	r3,8(sp)
10212f4c:	58800104 	addi	r2,r11,4
10212f50:	5a800015 	stw	r10,0(r11)
10212f54:	10c5c83a 	sub	r2,r2,r3
10212f58:	1005d0ba 	srai	r2,r2,2
10212f5c:	5009883a 	mov	r4,r10
10212f60:	80800415 	stw	r2,16(r16)
10212f64:	1022917a 	slli	r17,r2,5
10212f68:	020a2700 	call	1020a270 <__hi0bits>
10212f6c:	d8c00017 	ldw	r3,0(sp)
10212f70:	8885c83a 	sub	r2,r17,r2
10212f74:	1c800017 	ldw	r18,0(r3)
10212f78:	9080b316 	blt	r18,r2,10213248 <__gethex+0x4f8>
10212f7c:	1480d016 	blt	r2,r18,102132c0 <__gethex+0x570>
10212f80:	0027883a 	mov	r19,zero
10212f84:	d8c00017 	ldw	r3,0(sp)
10212f88:	18800217 	ldw	r2,8(r3)
10212f8c:	15c07b16 	blt	r2,r23,1021317c <__gethex+0x42c>
10212f90:	d8c00017 	ldw	r3,0(sp)
10212f94:	18800117 	ldw	r2,4(r3)
10212f98:	b880980e 	bge	r23,r2,102131fc <__gethex+0x4ac>
10212f9c:	15efc83a 	sub	r23,r2,r23
10212fa0:	bc80d916 	blt	r23,r18,10213308 <__gethex+0x5b8>
10212fa4:	18c00317 	ldw	r3,12(r3)
10212fa8:	01000084 	movi	r4,2
10212fac:	19014026 	beq	r3,r4,102134b0 <__gethex+0x760>
10212fb0:	010000c4 	movi	r4,3
10212fb4:	19011c26 	beq	r3,r4,10213428 <__gethex+0x6d8>
10212fb8:	01000044 	movi	r4,1
10212fbc:	19013326 	beq	r3,r4,1021348c <__gethex+0x73c>
10212fc0:	d9000117 	ldw	r4,4(sp)
10212fc4:	800b883a 	mov	r5,r16
10212fc8:	020a0240 	call	1020a024 <_Bfree>
10212fcc:	d8801517 	ldw	r2,84(sp)
10212fd0:	10000015 	stw	zero,0(r2)
10212fd4:	00801404 	movi	r2,80
10212fd8:	003fac06 	br	10212e8c <__gethex+0x13c>
10212fdc:	7b87883a 	add	r3,r15,r14
10212fe0:	1d7fce36 	bltu	r3,r21,10212f1c <__gethex+0x1cc>
10212fe4:	1809883a 	mov	r4,r3
10212fe8:	900b883a 	mov	r5,r18
10212fec:	b00d883a 	mov	r6,r22
10212ff0:	d8c00615 	stw	r3,24(sp)
10212ff4:	da800715 	stw	r10,28(sp)
10212ff8:	dac00a15 	stw	r11,40(sp)
10212ffc:	db000915 	stw	r12,36(sp)
10213000:	db800815 	stw	r14,32(sp)
10213004:	dbc00515 	stw	r15,20(sp)
10213008:	02138440 	call	10213844 <strncmp>
1021300c:	d8c00617 	ldw	r3,24(sp)
10213010:	da800717 	ldw	r10,28(sp)
10213014:	dac00a17 	ldw	r11,40(sp)
10213018:	db000917 	ldw	r12,36(sp)
1021301c:	db800817 	ldw	r14,32(sp)
10213020:	dbc00517 	ldw	r15,20(sp)
10213024:	103fbd1e 	bne	r2,zero,10212f1c <__gethex+0x1cc>
10213028:	1839883a 	mov	fp,r3
1021302c:	af3fb836 	bltu	r21,fp,10212f10 <__gethex+0x1c0>
10213030:	003fc506 	br	10212f48 <__gethex+0x1f8>
10213034:	04c00104 	movi	r19,4
10213038:	5a800015 	stw	r10,0(r11)
1021303c:	0009883a 	mov	r4,zero
10213040:	5cd7883a 	add	r11,r11,r19
10213044:	0015883a 	mov	r10,zero
10213048:	003fb706 	br	10212f28 <__gethex+0x1d8>
1021304c:	002f883a 	mov	r23,zero
10213050:	02c00044 	movi	r11,1
10213054:	80800043 	ldbu	r2,1(r16)
10213058:	01000ac4 	movi	r4,43
1021305c:	10c03fcc 	andi	r3,r2,255
10213060:	19007726 	beq	r3,r4,10213240 <__gethex+0x4f0>
10213064:	01000b44 	movi	r4,45
10213068:	19004b26 	beq	r3,r4,10213198 <__gethex+0x448>
1021306c:	81000044 	addi	r4,r16,1
10213070:	000b883a 	mov	r5,zero
10213074:	10803fcc 	andi	r2,r2,255
10213078:	a085883a 	add	r2,r20,r2
1021307c:	10c00003 	ldbu	r3,0(r2)
10213080:	03000604 	movi	r12,24
10213084:	18bfffc4 	addi	r2,r3,-1
10213088:	10803fcc 	andi	r2,r2,255
1021308c:	60bf7a36 	bltu	r12,r2,10212e78 <__gethex+0x128>
10213090:	21800043 	ldbu	r6,1(r4)
10213094:	18803fcc 	andi	r2,r3,255
10213098:	00c408b4 	movhi	r3,4130
1021309c:	18f54984 	addi	r3,r3,-10970
102130a0:	1987883a 	add	r3,r3,r6
102130a4:	1b400003 	ldbu	r13,0(r3)
102130a8:	10bffc04 	addi	r2,r2,-16
102130ac:	21000044 	addi	r4,r4,1
102130b0:	68ffffc4 	addi	r3,r13,-1
102130b4:	18c03fcc 	andi	r3,r3,255
102130b8:	6b403fcc 	andi	r13,r13,255
102130bc:	60c00b36 	bltu	r12,r3,102130ec <__gethex+0x39c>
102130c0:	21000044 	addi	r4,r4,1
102130c4:	20c00003 	ldbu	r3,0(r4)
102130c8:	108002a4 	muli	r2,r2,10
102130cc:	a0c7883a 	add	r3,r20,r3
102130d0:	19800003 	ldbu	r6,0(r3)
102130d4:	1345883a 	add	r2,r2,r13
102130d8:	10bffc04 	addi	r2,r2,-16
102130dc:	30ffffc4 	addi	r3,r6,-1
102130e0:	18c03fcc 	andi	r3,r3,255
102130e4:	33403fcc 	andi	r13,r6,255
102130e8:	60fff52e 	bgeu	r12,r3,102130c0 <__gethex+0x370>
102130ec:	0147c83a 	sub	r3,zero,r5
102130f0:	10c4f03a 	xor	r2,r2,r3
102130f4:	114b883a 	add	r5,r2,r5
102130f8:	8039883a 	mov	fp,r16
102130fc:	b96f883a 	add	r23,r23,r5
10213100:	2021883a 	mov	r16,r4
10213104:	003f5d06 	br	10212e7c <__gethex+0x12c>
10213108:	a809883a 	mov	r4,r21
1021310c:	900b883a 	mov	r5,r18
10213110:	b00d883a 	mov	r6,r22
10213114:	02138440 	call	10213844 <strncmp>
10213118:	10002326 	beq	r2,zero,102131a8 <__gethex+0x458>
1021311c:	a8800003 	ldbu	r2,0(r21)
10213120:	a821883a 	mov	r16,r21
10213124:	10803fcc 	andi	r2,r2,255
10213128:	00c01404 	movi	r3,80
1021312c:	10ffc726 	beq	r2,r3,1021304c <__gethex+0x2fc>
10213130:	00c01c04 	movi	r3,112
10213134:	10ffc526 	beq	r2,r3,1021304c <__gethex+0x2fc>
10213138:	9c000015 	stw	r16,0(r19)
1021313c:	883f5226 	beq	r17,zero,10212e88 <__gethex+0x138>
10213140:	0005883a 	mov	r2,zero
10213144:	003f5106 	br	10212e8c <__gethex+0x13c>
10213148:	2ce7883a 	add	r19,r5,r19
1021314c:	993fff17 	ldw	r4,-4(r19)
10213150:	020a2700 	call	1020a270 <__hi0bits>
10213154:	00c00804 	movi	r3,32
10213158:	1c63c83a 	sub	r17,r3,r17
1021315c:	1440ae0e 	bge	r2,r17,10213418 <__gethex+0x6c8>
10213160:	8009883a 	mov	r4,r16
10213164:	01400044 	movi	r5,1
10213168:	0212c500 	call	10212c50 <rshift>
1021316c:	d8c00017 	ldw	r3,0(sp)
10213170:	bdc00044 	addi	r23,r23,1
10213174:	18800217 	ldw	r2,8(r3)
10213178:	15c0a70e 	bge	r2,r23,10213418 <__gethex+0x6c8>
1021317c:	d9000117 	ldw	r4,4(sp)
10213180:	800b883a 	mov	r5,r16
10213184:	020a0240 	call	1020a024 <_Bfree>
10213188:	d9001517 	ldw	r4,84(sp)
1021318c:	008028c4 	movi	r2,163
10213190:	20000015 	stw	zero,0(r4)
10213194:	003f3d06 	br	10212e8c <__gethex+0x13c>
10213198:	01400044 	movi	r5,1
1021319c:	80800083 	ldbu	r2,2(r16)
102131a0:	81000084 	addi	r4,r16,2
102131a4:	003fb306 	br	10213074 <__gethex+0x324>
102131a8:	ada1883a 	add	r16,r21,r22
102131ac:	80c00003 	ldbu	r3,0(r16)
102131b0:	19003fcc 	andi	r4,r3,255
102131b4:	a105883a 	add	r2,r20,r4
102131b8:	10800003 	ldbu	r2,0(r2)
102131bc:	11403fcc 	andi	r5,r2,255
102131c0:	28004f26 	beq	r5,zero,10213300 <__gethex+0x5b0>
102131c4:	00c00c04 	movi	r3,48
102131c8:	802b883a 	mov	r21,r16
102131cc:	20c0061e 	bne	r4,r3,102131e8 <__gethex+0x498>
102131d0:	2007883a 	mov	r3,r4
102131d4:	ad400044 	addi	r21,r21,1
102131d8:	a8800003 	ldbu	r2,0(r21)
102131dc:	10fffd26 	beq	r2,r3,102131d4 <__gethex+0x484>
102131e0:	a085883a 	add	r2,r20,r2
102131e4:	10800003 	ldbu	r2,0(r2)
102131e8:	10803fcc 	andi	r2,r2,255
102131ec:	1017003a 	cmpeq	r11,r2,zero
102131f0:	802f883a 	mov	r23,r16
102131f4:	04400044 	movi	r17,1
102131f8:	003f0306 	br	10212e08 <__gethex+0xb8>
102131fc:	04400044 	movi	r17,1
10213200:	98000926 	beq	r19,zero,10213228 <__gethex+0x4d8>
10213204:	d8c00017 	ldw	r3,0(sp)
10213208:	18800317 	ldw	r2,12(r3)
1021320c:	00c00084 	movi	r3,2
10213210:	10c06626 	beq	r2,r3,102133ac <__gethex+0x65c>
10213214:	00c000c4 	movi	r3,3
10213218:	10c06826 	beq	r2,r3,102133bc <__gethex+0x66c>
1021321c:	00c00044 	movi	r3,1
10213220:	10c08d26 	beq	r2,r3,10213458 <__gethex+0x708>
10213224:	8c400414 	ori	r17,r17,16
10213228:	d9001517 	ldw	r4,84(sp)
1021322c:	d8c00417 	ldw	r3,16(sp)
10213230:	8805883a 	mov	r2,r17
10213234:	24000015 	stw	r16,0(r4)
10213238:	1dc00015 	stw	r23,0(r3)
1021323c:	003f1306 	br	10212e8c <__gethex+0x13c>
10213240:	000b883a 	mov	r5,zero
10213244:	003fd506 	br	1021319c <__gethex+0x44c>
10213248:	14a3c83a 	sub	r17,r2,r18
1021324c:	8009883a 	mov	r4,r16
10213250:	880b883a 	mov	r5,r17
10213254:	020ae900 	call	1020ae90 <__any_on>
10213258:	10002726 	beq	r2,zero,102132f8 <__gethex+0x5a8>
1021325c:	897fffc4 	addi	r5,r17,-1
10213260:	2807d17a 	srai	r3,r5,5
10213264:	d8800217 	ldw	r2,8(sp)
10213268:	290007cc 	andi	r4,r5,31
1021326c:	18c7883a 	add	r3,r3,r3
10213270:	18c7883a 	add	r3,r3,r3
10213274:	04c00044 	movi	r19,1
10213278:	10c7883a 	add	r3,r2,r3
1021327c:	9908983a 	sll	r4,r19,r4
10213280:	18c00017 	ldw	r3,0(r3)
10213284:	20c6703a 	and	r3,r4,r3
10213288:	18000626 	beq	r3,zero,102132a4 <__gethex+0x554>
1021328c:	99407d0e 	bge	r19,r5,10213484 <__gethex+0x734>
10213290:	8009883a 	mov	r4,r16
10213294:	897fff84 	addi	r5,r17,-2
10213298:	020ae900 	call	1020ae90 <__any_on>
1021329c:	10007926 	beq	r2,zero,10213484 <__gethex+0x734>
102132a0:	04c000c4 	movi	r19,3
102132a4:	8009883a 	mov	r4,r16
102132a8:	880b883a 	mov	r5,r17
102132ac:	0212c500 	call	10212c50 <rshift>
102132b0:	bc6f883a 	add	r23,r23,r17
102132b4:	003f3306 	br	10212f84 <__gethex+0x234>
102132b8:	002f883a 	mov	r23,zero
102132bc:	003ee906 	br	10212e64 <__gethex+0x114>
102132c0:	d9000117 	ldw	r4,4(sp)
102132c4:	90a3c83a 	sub	r17,r18,r2
102132c8:	800b883a 	mov	r5,r16
102132cc:	880d883a 	mov	r6,r17
102132d0:	020a7000 	call	1020a700 <__lshift>
102132d4:	10c00504 	addi	r3,r2,20
102132d8:	1021883a 	mov	r16,r2
102132dc:	bc6fc83a 	sub	r23,r23,r17
102132e0:	d8c00215 	stw	r3,8(sp)
102132e4:	0027883a 	mov	r19,zero
102132e8:	003f2606 	br	10212f84 <__gethex+0x234>
102132ec:	3d400084 	addi	r21,r7,2
102132f0:	0023883a 	mov	r17,zero
102132f4:	003eba06 	br	10212de0 <__gethex+0x90>
102132f8:	0027883a 	mov	r19,zero
102132fc:	003fe906 	br	102132a4 <__gethex+0x554>
10213300:	1805883a 	mov	r2,r3
10213304:	003f8706 	br	10213124 <__gethex+0x3d4>
10213308:	bc7fffc4 	addi	r17,r23,-1
1021330c:	9800441e 	bne	r19,zero,10213420 <__gethex+0x6d0>
10213310:	0440040e 	bge	zero,r17,10213324 <__gethex+0x5d4>
10213314:	8009883a 	mov	r4,r16
10213318:	880b883a 	mov	r5,r17
1021331c:	020ae900 	call	1020ae90 <__any_on>
10213320:	1027883a 	mov	r19,r2
10213324:	8805d17a 	srai	r2,r17,5
10213328:	d8c00217 	ldw	r3,8(sp)
1021332c:	8c4007cc 	andi	r17,r17,31
10213330:	1085883a 	add	r2,r2,r2
10213334:	1085883a 	add	r2,r2,r2
10213338:	1885883a 	add	r2,r3,r2
1021333c:	00c00044 	movi	r3,1
10213340:	1c62983a 	sll	r17,r3,r17
10213344:	10800017 	ldw	r2,0(r2)
10213348:	8884703a 	and	r2,r17,r2
1021334c:	10000126 	beq	r2,zero,10213354 <__gethex+0x604>
10213350:	9cc00094 	ori	r19,r19,2
10213354:	b80b883a 	mov	r5,r23
10213358:	8009883a 	mov	r4,r16
1021335c:	0212c500 	call	10212c50 <rshift>
10213360:	d8c00017 	ldw	r3,0(sp)
10213364:	95e5c83a 	sub	r18,r18,r23
10213368:	04400084 	movi	r17,2
1021336c:	1dc00117 	ldw	r23,4(r3)
10213370:	003fa306 	br	10213200 <__gethex+0x4b0>
10213374:	85af883a 	add	r23,r16,r22
10213378:	b8800003 	ldbu	r2,0(r23)
1021337c:	b821883a 	mov	r16,r23
10213380:	10c03fcc 	andi	r3,r2,255
10213384:	a0c7883a 	add	r3,r20,r3
10213388:	18c00003 	ldbu	r3,0(r3)
1021338c:	183eb026 	beq	r3,zero,10212e50 <__gethex+0x100>
10213390:	84000044 	addi	r16,r16,1
10213394:	80800003 	ldbu	r2,0(r16)
10213398:	10c03fcc 	andi	r3,r2,255
1021339c:	a0c7883a 	add	r3,r20,r3
102133a0:	18c00003 	ldbu	r3,0(r3)
102133a4:	183ffa1e 	bne	r3,zero,10213390 <__gethex+0x640>
102133a8:	003ea906 	br	10212e50 <__gethex+0x100>
102133ac:	d9001617 	ldw	r4,88(sp)
102133b0:	00800044 	movi	r2,1
102133b4:	1109c83a 	sub	r4,r2,r4
102133b8:	d9001615 	stw	r4,88(sp)
102133bc:	d8801617 	ldw	r2,88(sp)
102133c0:	103f9826 	beq	r2,zero,10213224 <__gethex+0x4d4>
102133c4:	87000417 	ldw	fp,16(r16)
102133c8:	d8800217 	ldw	r2,8(sp)
102133cc:	013fffc4 	movi	r4,-1
102133d0:	e727883a 	add	r19,fp,fp
102133d4:	9ce7883a 	add	r19,r19,r19
102133d8:	14cb883a 	add	r5,r2,r19
102133dc:	00000306 	br	102133ec <__gethex+0x69c>
102133e0:	10000015 	stw	zero,0(r2)
102133e4:	10800104 	addi	r2,r2,4
102133e8:	1140342e 	bgeu	r2,r5,102134bc <__gethex+0x76c>
102133ec:	10c00017 	ldw	r3,0(r2)
102133f0:	193ffb26 	beq	r3,r4,102133e0 <__gethex+0x690>
102133f4:	d9400217 	ldw	r5,8(sp)
102133f8:	18c00044 	addi	r3,r3,1
102133fc:	10c00015 	stw	r3,0(r2)
10213400:	00800084 	movi	r2,2
10213404:	88803a26 	beq	r17,r2,102134f0 <__gethex+0x7a0>
10213408:	80800417 	ldw	r2,16(r16)
1021340c:	e0bf5416 	blt	fp,r2,10213160 <__gethex+0x410>
10213410:	944007cc 	andi	r17,r18,31
10213414:	883f4c1e 	bne	r17,zero,10213148 <__gethex+0x3f8>
10213418:	04400844 	movi	r17,33
1021341c:	003f8206 	br	10213228 <__gethex+0x4d8>
10213420:	04c00044 	movi	r19,1
10213424:	003fbf06 	br	10213324 <__gethex+0x5d4>
10213428:	d8c01617 	ldw	r3,88(sp)
1021342c:	183ee426 	beq	r3,zero,10212fc0 <__gethex+0x270>
10213430:	d8c00417 	ldw	r3,16(sp)
10213434:	d9001517 	ldw	r4,84(sp)
10213438:	18800015 	stw	r2,0(r3)
1021343c:	d8c00217 	ldw	r3,8(sp)
10213440:	00800044 	movi	r2,1
10213444:	80800415 	stw	r2,16(r16)
10213448:	18800015 	stw	r2,0(r3)
1021344c:	24000015 	stw	r16,0(r4)
10213450:	00801884 	movi	r2,98
10213454:	003e8d06 	br	10212e8c <__gethex+0x13c>
10213458:	9880008c 	andi	r2,r19,2
1021345c:	103f7126 	beq	r2,zero,10213224 <__gethex+0x4d4>
10213460:	d8c00217 	ldw	r3,8(sp)
10213464:	18800017 	ldw	r2,0(r3)
10213468:	9884b03a 	or	r2,r19,r2
1021346c:	1080004c 	andi	r2,r2,1
10213470:	103fd41e 	bne	r2,zero,102133c4 <__gethex+0x674>
10213474:	003f6b06 	br	10213224 <__gethex+0x4d4>
10213478:	dac00217 	ldw	r11,8(sp)
1021347c:	0015883a 	mov	r10,zero
10213480:	003eb106 	br	10212f48 <__gethex+0x1f8>
10213484:	04c00084 	movi	r19,2
10213488:	003f8606 	br	102132a4 <__gethex+0x554>
1021348c:	bcbecc1e 	bne	r23,r18,10212fc0 <__gethex+0x270>
10213490:	1cbfe70e 	bge	r3,r18,10213430 <__gethex+0x6e0>
10213494:	8009883a 	mov	r4,r16
10213498:	917fffc4 	addi	r5,r18,-1
1021349c:	020ae900 	call	1020ae90 <__any_on>
102134a0:	103ec726 	beq	r2,zero,10212fc0 <__gethex+0x270>
102134a4:	d8c00017 	ldw	r3,0(sp)
102134a8:	18800117 	ldw	r2,4(r3)
102134ac:	003fe006 	br	10213430 <__gethex+0x6e0>
102134b0:	d9001617 	ldw	r4,88(sp)
102134b4:	203fde26 	beq	r4,zero,10213430 <__gethex+0x6e0>
102134b8:	003ec106 	br	10212fc0 <__gethex+0x270>
102134bc:	80800217 	ldw	r2,8(r16)
102134c0:	e080110e 	bge	fp,r2,10213508 <__gethex+0x7b8>
102134c4:	d9400217 	ldw	r5,8(sp)
102134c8:	e009883a 	mov	r4,fp
102134cc:	20c00144 	addi	r3,r4,5
102134d0:	18c7883a 	add	r3,r3,r3
102134d4:	21000044 	addi	r4,r4,1
102134d8:	18c7883a 	add	r3,r3,r3
102134dc:	81000415 	stw	r4,16(r16)
102134e0:	80c7883a 	add	r3,r16,r3
102134e4:	00800044 	movi	r2,1
102134e8:	18800015 	stw	r2,0(r3)
102134ec:	003fc406 	br	10213400 <__gethex+0x6b0>
102134f0:	d8c00017 	ldw	r3,0(sp)
102134f4:	18800017 	ldw	r2,0(r3)
102134f8:	10bfffc4 	addi	r2,r2,-1
102134fc:	14801526 	beq	r2,r18,10213554 <__gethex+0x804>
10213500:	04400884 	movi	r17,34
10213504:	003f4806 	br	10213228 <__gethex+0x4d8>
10213508:	81400117 	ldw	r5,4(r16)
1021350c:	d9000117 	ldw	r4,4(sp)
10213510:	29400044 	addi	r5,r5,1
10213514:	0209f7c0 	call	10209f7c <_Balloc>
10213518:	81800417 	ldw	r6,16(r16)
1021351c:	81400304 	addi	r5,r16,12
10213520:	11000304 	addi	r4,r2,12
10213524:	31800084 	addi	r6,r6,2
10213528:	318d883a 	add	r6,r6,r6
1021352c:	318d883a 	add	r6,r6,r6
10213530:	1029883a 	mov	r20,r2
10213534:	0202dc80 	call	10202dc8 <memcpy>
10213538:	d9000117 	ldw	r4,4(sp)
1021353c:	800b883a 	mov	r5,r16
10213540:	a021883a 	mov	r16,r20
10213544:	020a0240 	call	1020a024 <_Bfree>
10213548:	a1000417 	ldw	r4,16(r20)
1021354c:	a1400504 	addi	r5,r20,20
10213550:	003fde06 	br	102134cc <__gethex+0x77c>
10213554:	9005d17a 	srai	r2,r18,5
10213558:	944007cc 	andi	r17,r18,31
1021355c:	00c00044 	movi	r3,1
10213560:	1085883a 	add	r2,r2,r2
10213564:	1085883a 	add	r2,r2,r2
10213568:	2885883a 	add	r2,r5,r2
1021356c:	1c62983a 	sll	r17,r3,r17
10213570:	10800017 	ldw	r2,0(r2)
10213574:	8884703a 	and	r2,r17,r2
10213578:	1023003a 	cmpeq	r17,r2,zero
1021357c:	8c400844 	addi	r17,r17,33
10213580:	003f2906 	br	10213228 <__gethex+0x4d8>

10213584 <__hexnan>:
10213584:	defff904 	addi	sp,sp,-28
10213588:	dcc00315 	stw	r19,12(sp)
1021358c:	2cc00017 	ldw	r19,0(r5)
10213590:	dd800615 	stw	r22,24(sp)
10213594:	dd400515 	stw	r21,20(sp)
10213598:	981fd17a 	srai	r15,r19,5
1021359c:	dd000415 	stw	r20,16(sp)
102135a0:	dc800215 	stw	r18,8(sp)
102135a4:	7bdf883a 	add	r15,r15,r15
102135a8:	7bdf883a 	add	r15,r15,r15
102135ac:	dc400115 	stw	r17,4(sp)
102135b0:	dc000015 	stw	r16,0(sp)
102135b4:	9cc007cc 	andi	r19,r19,31
102135b8:	33df883a 	add	r15,r6,r15
102135bc:	98000126 	beq	r19,zero,102135c4 <__hexnan+0x40>
102135c0:	7bc00104 	addi	r15,r15,4
102135c4:	21c00017 	ldw	r7,0(r4)
102135c8:	7affff04 	addi	r11,r15,-4
102135cc:	038408b4 	movhi	r14,4130
102135d0:	783fff15 	stw	zero,-4(r15)
102135d4:	581b883a 	mov	r13,r11
102135d8:	5813883a 	mov	r9,r11
102135dc:	000b883a 	mov	r5,zero
102135e0:	0021883a 	mov	r16,zero
102135e4:	0019883a 	mov	r12,zero
102135e8:	73b54984 	addi	r14,r14,-10970
102135ec:	04800204 	movi	r18,8
102135f0:	04400804 	movi	r17,32
102135f4:	050001c4 	movi	r20,7
102135f8:	39c00044 	addi	r7,r7,1
102135fc:	38c00003 	ldbu	r3,0(r7)
10213600:	18001d26 	beq	r3,zero,10213678 <__hexnan+0xf4>
10213604:	70c5883a 	add	r2,r14,r3
10213608:	10800003 	ldbu	r2,0(r2)
1021360c:	12003fcc 	andi	r8,r2,255
10213610:	4000441e 	bne	r8,zero,10213724 <__hexnan+0x1a0>
10213614:	88c05836 	bltu	r17,r3,10213778 <__hexnan+0x1f4>
10213618:	833ff70e 	bge	r16,r12,102135f8 <__hexnan+0x74>
1021361c:	4b40112e 	bgeu	r9,r13,10213664 <__hexnan+0xe0>
10213620:	a1401016 	blt	r20,r5,10213664 <__hexnan+0xe0>
10213624:	914bc83a 	sub	r5,r18,r5
10213628:	294b883a 	add	r5,r5,r5
1021362c:	4a800017 	ldw	r10,0(r9)
10213630:	294b883a 	add	r5,r5,r5
10213634:	896dc83a 	sub	r22,r17,r5
10213638:	48c00104 	addi	r3,r9,4
1021363c:	4805883a 	mov	r2,r9
10213640:	1d400017 	ldw	r21,0(r3)
10213644:	10800104 	addi	r2,r2,4
10213648:	18c00104 	addi	r3,r3,4
1021364c:	ad90983a 	sll	r8,r21,r22
10213650:	5210b03a 	or	r8,r10,r8
10213654:	a954d83a 	srl	r10,r21,r5
10213658:	123fff15 	stw	r8,-4(r2)
1021365c:	1abfff15 	stw	r10,-4(r3)
10213660:	137ff736 	bltu	r2,r13,10213640 <__hexnan+0xbc>
10213664:	32403e36 	bltu	r6,r9,10213760 <__hexnan+0x1dc>
10213668:	39c00044 	addi	r7,r7,1
1021366c:	38c00003 	ldbu	r3,0(r7)
10213670:	01400204 	movi	r5,8
10213674:	183fe31e 	bne	r3,zero,10213604 <__hexnan+0x80>
10213678:	4807883a 	mov	r3,r9
1021367c:	60004026 	beq	r12,zero,10213780 <__hexnan+0x1fc>
10213680:	4b40162e 	bgeu	r9,r13,102136dc <__hexnan+0x158>
10213684:	008001c4 	movi	r2,7
10213688:	11401416 	blt	r2,r5,102136dc <__hexnan+0x158>
1021368c:	02800204 	movi	r10,8
10213690:	5155c83a 	sub	r10,r10,r5
10213694:	5295883a 	add	r10,r10,r10
10213698:	5295883a 	add	r10,r10,r10
1021369c:	49400104 	addi	r5,r9,4
102136a0:	03000804 	movi	r12,32
102136a4:	49c00017 	ldw	r7,0(r9)
102136a8:	6299c83a 	sub	r12,r12,r10
102136ac:	2805883a 	mov	r2,r5
102136b0:	00000106 	br	102136b8 <__hexnan+0x134>
102136b4:	29400104 	addi	r5,r5,4
102136b8:	12000017 	ldw	r8,0(r2)
102136bc:	10800104 	addi	r2,r2,4
102136c0:	4308983a 	sll	r4,r8,r12
102136c4:	3908b03a 	or	r4,r7,r4
102136c8:	428ed83a 	srl	r7,r8,r10
102136cc:	49000015 	stw	r4,0(r9)
102136d0:	2813883a 	mov	r9,r5
102136d4:	11ffff15 	stw	r7,-4(r2)
102136d8:	2b7ff636 	bltu	r5,r13,102136b4 <__hexnan+0x130>
102136dc:	30c0322e 	bgeu	r6,r3,102137a8 <__hexnan+0x224>
102136e0:	3005883a 	mov	r2,r6
102136e4:	19000017 	ldw	r4,0(r3)
102136e8:	10800104 	addi	r2,r2,4
102136ec:	18c00104 	addi	r3,r3,4
102136f0:	113fff15 	stw	r4,-4(r2)
102136f4:	58fffb2e 	bgeu	r11,r3,102136e4 <__hexnan+0x160>
102136f8:	10000015 	stw	zero,0(r2)
102136fc:	10800104 	addi	r2,r2,4
10213700:	58bffd2e 	bgeu	r11,r2,102136f8 <__hexnan+0x174>
10213704:	78bfff17 	ldw	r2,-4(r15)
10213708:	1000041e 	bne	r2,zero,1021371c <__hexnan+0x198>
1021370c:	32c02f26 	beq	r6,r11,102137cc <__hexnan+0x248>
10213710:	5affff04 	addi	r11,r11,-4
10213714:	58800017 	ldw	r2,0(r11)
10213718:	103ffc26 	beq	r2,zero,1021370c <__hexnan+0x188>
1021371c:	00800144 	movi	r2,5
10213720:	00001806 	br	10213784 <__hexnan+0x200>
10213724:	29400044 	addi	r5,r5,1
10213728:	63000044 	addi	r12,r12,1
1021372c:	91400616 	blt	r18,r5,10213748 <__hexnan+0x1c4>
10213730:	48c00017 	ldw	r3,0(r9)
10213734:	1806913a 	slli	r3,r3,4
10213738:	108003cc 	andi	r2,r2,15
1021373c:	1884b03a 	or	r2,r3,r2
10213740:	48800015 	stw	r2,0(r9)
10213744:	003fac06 	br	102135f8 <__hexnan+0x74>
10213748:	327fab2e 	bgeu	r6,r9,102135f8 <__hexnan+0x74>
1021374c:	483fff15 	stw	zero,-4(r9)
10213750:	0007883a 	mov	r3,zero
10213754:	4a7fff04 	addi	r9,r9,-4
10213758:	01400044 	movi	r5,1
1021375c:	003ff606 	br	10213738 <__hexnan+0x1b4>
10213760:	4b7fff04 	addi	r13,r9,-4
10213764:	483fff15 	stw	zero,-4(r9)
10213768:	6021883a 	mov	r16,r12
1021376c:	6813883a 	mov	r9,r13
10213770:	000b883a 	mov	r5,zero
10213774:	003fa006 	br	102135f8 <__hexnan+0x74>
10213778:	00800a44 	movi	r2,41
1021377c:	18801726 	beq	r3,r2,102137dc <__hexnan+0x258>
10213780:	00800104 	movi	r2,4
10213784:	dd800617 	ldw	r22,24(sp)
10213788:	dd400517 	ldw	r21,20(sp)
1021378c:	dd000417 	ldw	r20,16(sp)
10213790:	dcc00317 	ldw	r19,12(sp)
10213794:	dc800217 	ldw	r18,8(sp)
10213798:	dc400117 	ldw	r17,4(sp)
1021379c:	dc000017 	ldw	r16,0(sp)
102137a0:	dec00704 	addi	sp,sp,28
102137a4:	f800283a 	ret
102137a8:	983fd626 	beq	r19,zero,10213704 <__hexnan+0x180>
102137ac:	00c00804 	movi	r3,32
102137b0:	1ce7c83a 	sub	r19,r3,r19
102137b4:	00ffffc4 	movi	r3,-1
102137b8:	78bfff17 	ldw	r2,-4(r15)
102137bc:	1cc6d83a 	srl	r3,r3,r19
102137c0:	1884703a 	and	r2,r3,r2
102137c4:	78bfff15 	stw	r2,-4(r15)
102137c8:	003fcf06 	br	10213708 <__hexnan+0x184>
102137cc:	00800044 	movi	r2,1
102137d0:	58800015 	stw	r2,0(r11)
102137d4:	00800144 	movi	r2,5
102137d8:	003fea06 	br	10213784 <__hexnan+0x200>
102137dc:	39c00044 	addi	r7,r7,1
102137e0:	21c00015 	stw	r7,0(r4)
102137e4:	4807883a 	mov	r3,r9
102137e8:	603fa51e 	bne	r12,zero,10213680 <__hexnan+0xfc>
102137ec:	003fe406 	br	10213780 <__hexnan+0x1fc>

102137f0 <_isatty_r>:
102137f0:	defffd04 	addi	sp,sp,-12
102137f4:	dc000015 	stw	r16,0(sp)
102137f8:	040408b4 	movhi	r16,4130
102137fc:	dc400115 	stw	r17,4(sp)
10213800:	84045804 	addi	r16,r16,4448
10213804:	2023883a 	mov	r17,r4
10213808:	2809883a 	mov	r4,r5
1021380c:	dfc00215 	stw	ra,8(sp)
10213810:	80000015 	stw	zero,0(r16)
10213814:	02186580 	call	10218658 <isatty>
10213818:	00ffffc4 	movi	r3,-1
1021381c:	10c00526 	beq	r2,r3,10213834 <_isatty_r+0x44>
10213820:	dfc00217 	ldw	ra,8(sp)
10213824:	dc400117 	ldw	r17,4(sp)
10213828:	dc000017 	ldw	r16,0(sp)
1021382c:	dec00304 	addi	sp,sp,12
10213830:	f800283a 	ret
10213834:	80c00017 	ldw	r3,0(r16)
10213838:	183ff926 	beq	r3,zero,10213820 <_isatty_r+0x30>
1021383c:	88c00015 	stw	r3,0(r17)
10213840:	003ff706 	br	10213820 <_isatty_r+0x30>

10213844 <strncmp>:
10213844:	30002126 	beq	r6,zero,102138cc <strncmp+0x88>
10213848:	2144b03a 	or	r2,r4,r5
1021384c:	108000cc 	andi	r2,r2,3
10213850:	1000241e 	bne	r2,zero,102138e4 <strncmp+0xa0>
10213854:	024000c4 	movi	r9,3
10213858:	4980222e 	bgeu	r9,r6,102138e4 <strncmp+0xa0>
1021385c:	20800017 	ldw	r2,0(r4)
10213860:	28c00017 	ldw	r3,0(r5)
10213864:	10c01f1e 	bne	r2,r3,102138e4 <strncmp+0xa0>
10213868:	31bfff04 	addi	r6,r6,-4
1021386c:	30001726 	beq	r6,zero,102138cc <strncmp+0x88>
10213870:	02ffbff4 	movhi	r11,65279
10213874:	5affbfc4 	addi	r11,r11,-257
10213878:	0086303a 	nor	r3,zero,r2
1021387c:	02a02074 	movhi	r10,32897
10213880:	12c5883a 	add	r2,r2,r11
10213884:	52a02004 	addi	r10,r10,-32640
10213888:	10c4703a 	and	r2,r2,r3
1021388c:	1284703a 	and	r2,r2,r10
10213890:	10000226 	beq	r2,zero,1021389c <strncmp+0x58>
10213894:	00000d06 	br	102138cc <strncmp+0x88>
10213898:	10000c1e 	bne	r2,zero,102138cc <strncmp+0x88>
1021389c:	21000104 	addi	r4,r4,4
102138a0:	29400104 	addi	r5,r5,4
102138a4:	49800f2e 	bgeu	r9,r6,102138e4 <strncmp+0xa0>
102138a8:	20c00017 	ldw	r3,0(r4)
102138ac:	29c00017 	ldw	r7,0(r5)
102138b0:	1ad1883a 	add	r8,r3,r11
102138b4:	00c4303a 	nor	r2,zero,r3
102138b8:	4084703a 	and	r2,r8,r2
102138bc:	1284703a 	and	r2,r2,r10
102138c0:	19c0081e 	bne	r3,r7,102138e4 <strncmp+0xa0>
102138c4:	31bfff04 	addi	r6,r6,-4
102138c8:	303ff31e 	bne	r6,zero,10213898 <strncmp+0x54>
102138cc:	0005883a 	mov	r2,zero
102138d0:	f800283a 	ret
102138d4:	303ffd26 	beq	r6,zero,102138cc <strncmp+0x88>
102138d8:	103ffc26 	beq	r2,zero,102138cc <strncmp+0x88>
102138dc:	21000044 	addi	r4,r4,1
102138e0:	29400044 	addi	r5,r5,1
102138e4:	20800007 	ldb	r2,0(r4)
102138e8:	28c00007 	ldb	r3,0(r5)
102138ec:	31bfffc4 	addi	r6,r6,-1
102138f0:	10fff826 	beq	r2,r3,102138d4 <strncmp+0x90>
102138f4:	20800003 	ldbu	r2,0(r4)
102138f8:	28c00003 	ldbu	r3,0(r5)
102138fc:	10c5c83a 	sub	r2,r2,r3
10213900:	f800283a 	ret

10213904 <__ssprint_r>:
10213904:	30800217 	ldw	r2,8(r6)
10213908:	defff604 	addi	sp,sp,-40
1021390c:	ddc00715 	stw	r23,28(sp)
10213910:	dc800215 	stw	r18,8(sp)
10213914:	dfc00915 	stw	ra,36(sp)
10213918:	df000815 	stw	fp,32(sp)
1021391c:	dd800615 	stw	r22,24(sp)
10213920:	dd400515 	stw	r21,20(sp)
10213924:	dd000415 	stw	r20,16(sp)
10213928:	dcc00315 	stw	r19,12(sp)
1021392c:	dc400115 	stw	r17,4(sp)
10213930:	dc000015 	stw	r16,0(sp)
10213934:	3025883a 	mov	r18,r6
10213938:	35c00017 	ldw	r23,0(r6)
1021393c:	10005626 	beq	r2,zero,10213a98 <__ssprint_r+0x194>
10213940:	2027883a 	mov	r19,r4
10213944:	28800217 	ldw	r2,8(r5)
10213948:	29000017 	ldw	r4,0(r5)
1021394c:	2823883a 	mov	r17,r5
10213950:	0039883a 	mov	fp,zero
10213954:	0021883a 	mov	r16,zero
10213958:	80003926 	beq	r16,zero,10213a40 <__ssprint_r+0x13c>
1021395c:	102b883a 	mov	r21,r2
10213960:	102d883a 	mov	r22,r2
10213964:	80803a36 	bltu	r16,r2,10213a50 <__ssprint_r+0x14c>
10213968:	88c0030b 	ldhu	r3,12(r17)
1021396c:	1881200c 	andi	r2,r3,1152
10213970:	10002626 	beq	r2,zero,10213a0c <__ssprint_r+0x108>
10213974:	88800517 	ldw	r2,20(r17)
10213978:	89400417 	ldw	r5,16(r17)
1021397c:	81c00044 	addi	r7,r16,1
10213980:	108d883a 	add	r6,r2,r2
10213984:	3085883a 	add	r2,r6,r2
10213988:	100cd7fa 	srli	r6,r2,31
1021398c:	216dc83a 	sub	r22,r4,r5
10213990:	3d89883a 	add	r4,r7,r22
10213994:	3085883a 	add	r2,r6,r2
10213998:	102bd07a 	srai	r21,r2,1
1021399c:	a80d883a 	mov	r6,r21
102139a0:	a900022e 	bgeu	r21,r4,102139ac <__ssprint_r+0xa8>
102139a4:	202b883a 	mov	r21,r4
102139a8:	200d883a 	mov	r6,r4
102139ac:	18c1000c 	andi	r3,r3,1024
102139b0:	9809883a 	mov	r4,r19
102139b4:	18002926 	beq	r3,zero,10213a5c <__ssprint_r+0x158>
102139b8:	300b883a 	mov	r5,r6
102139bc:	02025a40 	call	102025a4 <_malloc_r>
102139c0:	1029883a 	mov	r20,r2
102139c4:	10002b26 	beq	r2,zero,10213a74 <__ssprint_r+0x170>
102139c8:	89400417 	ldw	r5,16(r17)
102139cc:	1009883a 	mov	r4,r2
102139d0:	b00d883a 	mov	r6,r22
102139d4:	0202dc80 	call	10202dc8 <memcpy>
102139d8:	8880030b 	ldhu	r2,12(r17)
102139dc:	00fedfc4 	movi	r3,-1153
102139e0:	10c4703a 	and	r2,r2,r3
102139e4:	10802014 	ori	r2,r2,128
102139e8:	8880030d 	sth	r2,12(r17)
102139ec:	a589883a 	add	r4,r20,r22
102139f0:	adadc83a 	sub	r22,r21,r22
102139f4:	8d400515 	stw	r21,20(r17)
102139f8:	8d800215 	stw	r22,8(r17)
102139fc:	8d000415 	stw	r20,16(r17)
10213a00:	89000015 	stw	r4,0(r17)
10213a04:	802b883a 	mov	r21,r16
10213a08:	802d883a 	mov	r22,r16
10213a0c:	e00b883a 	mov	r5,fp
10213a10:	b00d883a 	mov	r6,r22
10213a14:	0209cfc0 	call	10209cfc <memmove>
10213a18:	88800217 	ldw	r2,8(r17)
10213a1c:	89000017 	ldw	r4,0(r17)
10213a20:	90c00217 	ldw	r3,8(r18)
10213a24:	1545c83a 	sub	r2,r2,r21
10213a28:	2589883a 	add	r4,r4,r22
10213a2c:	88800215 	stw	r2,8(r17)
10213a30:	89000015 	stw	r4,0(r17)
10213a34:	1c21c83a 	sub	r16,r3,r16
10213a38:	94000215 	stw	r16,8(r18)
10213a3c:	80001626 	beq	r16,zero,10213a98 <__ssprint_r+0x194>
10213a40:	bf000017 	ldw	fp,0(r23)
10213a44:	bc000117 	ldw	r16,4(r23)
10213a48:	bdc00204 	addi	r23,r23,8
10213a4c:	003fc206 	br	10213958 <__ssprint_r+0x54>
10213a50:	802b883a 	mov	r21,r16
10213a54:	802d883a 	mov	r22,r16
10213a58:	003fec06 	br	10213a0c <__ssprint_r+0x108>
10213a5c:	020b0e40 	call	1020b0e4 <_realloc_r>
10213a60:	1029883a 	mov	r20,r2
10213a64:	103fe11e 	bne	r2,zero,102139ec <__ssprint_r+0xe8>
10213a68:	89400417 	ldw	r5,16(r17)
10213a6c:	9809883a 	mov	r4,r19
10213a70:	0208d940 	call	10208d94 <_free_r>
10213a74:	88c0030b 	ldhu	r3,12(r17)
10213a78:	00800304 	movi	r2,12
10213a7c:	98800015 	stw	r2,0(r19)
10213a80:	18c01014 	ori	r3,r3,64
10213a84:	88c0030d 	sth	r3,12(r17)
10213a88:	00bfffc4 	movi	r2,-1
10213a8c:	90000215 	stw	zero,8(r18)
10213a90:	90000115 	stw	zero,4(r18)
10213a94:	00000206 	br	10213aa0 <__ssprint_r+0x19c>
10213a98:	90000115 	stw	zero,4(r18)
10213a9c:	0005883a 	mov	r2,zero
10213aa0:	dfc00917 	ldw	ra,36(sp)
10213aa4:	df000817 	ldw	fp,32(sp)
10213aa8:	ddc00717 	ldw	r23,28(sp)
10213aac:	dd800617 	ldw	r22,24(sp)
10213ab0:	dd400517 	ldw	r21,20(sp)
10213ab4:	dd000417 	ldw	r20,16(sp)
10213ab8:	dcc00317 	ldw	r19,12(sp)
10213abc:	dc800217 	ldw	r18,8(sp)
10213ac0:	dc400117 	ldw	r17,4(sp)
10213ac4:	dc000017 	ldw	r16,0(sp)
10213ac8:	dec00a04 	addi	sp,sp,40
10213acc:	f800283a 	ret

10213ad0 <___svfiprintf_internal_r>:
10213ad0:	2880030b 	ldhu	r2,12(r5)
10213ad4:	deffc904 	addi	sp,sp,-220
10213ad8:	dd403215 	stw	r21,200(sp)
10213adc:	dfc03615 	stw	ra,216(sp)
10213ae0:	df003515 	stw	fp,212(sp)
10213ae4:	ddc03415 	stw	r23,208(sp)
10213ae8:	dd803315 	stw	r22,204(sp)
10213aec:	dd003115 	stw	r20,196(sp)
10213af0:	dcc03015 	stw	r19,192(sp)
10213af4:	dc802f15 	stw	r18,188(sp)
10213af8:	dc402e15 	stw	r17,184(sp)
10213afc:	dc002d15 	stw	r16,180(sp)
10213b00:	d9402715 	stw	r5,156(sp)
10213b04:	d9002915 	stw	r4,164(sp)
10213b08:	1080200c 	andi	r2,r2,128
10213b0c:	d9c02315 	stw	r7,140(sp)
10213b10:	302b883a 	mov	r21,r6
10213b14:	10000226 	beq	r2,zero,10213b20 <___svfiprintf_internal_r+0x50>
10213b18:	28800417 	ldw	r2,16(r5)
10213b1c:	1003ce26 	beq	r2,zero,10214a58 <___svfiprintf_internal_r+0xf88>
10213b20:	dac01a04 	addi	r11,sp,104
10213b24:	da8019c4 	addi	r10,sp,103
10213b28:	dc802917 	ldw	r18,164(sp)
10213b2c:	dd002717 	ldw	r20,156(sp)
10213b30:	04c408b4 	movhi	r19,4130
10213b34:	dac01e15 	stw	r11,120(sp)
10213b38:	5a97c83a 	sub	r11,r11,r10
10213b3c:	9cf58984 	addi	r19,r19,-10714
10213b40:	da801f15 	stw	r10,124(sp)
10213b44:	dec01a15 	stw	sp,104(sp)
10213b48:	d8001c15 	stw	zero,112(sp)
10213b4c:	d8001b15 	stw	zero,108(sp)
10213b50:	d811883a 	mov	r8,sp
10213b54:	d8002a15 	stw	zero,168(sp)
10213b58:	d8002415 	stw	zero,144(sp)
10213b5c:	dac02b15 	stw	r11,172(sp)
10213b60:	a8800007 	ldb	r2,0(r21)
10213b64:	10026a26 	beq	r2,zero,10214510 <___svfiprintf_internal_r+0xa40>
10213b68:	01000944 	movi	r4,37
10213b6c:	11026826 	beq	r2,r4,10214510 <___svfiprintf_internal_r+0xa40>
10213b70:	a805883a 	mov	r2,r21
10213b74:	00000106 	br	10213b7c <___svfiprintf_internal_r+0xac>
10213b78:	19000326 	beq	r3,r4,10213b88 <___svfiprintf_internal_r+0xb8>
10213b7c:	10800044 	addi	r2,r2,1
10213b80:	10c00007 	ldb	r3,0(r2)
10213b84:	183ffc1e 	bne	r3,zero,10213b78 <___svfiprintf_internal_r+0xa8>
10213b88:	1561c83a 	sub	r16,r2,r21
10213b8c:	102d883a 	mov	r22,r2
10213b90:	80000e26 	beq	r16,zero,10213bcc <___svfiprintf_internal_r+0xfc>
10213b94:	d8c01c17 	ldw	r3,112(sp)
10213b98:	d8801b17 	ldw	r2,108(sp)
10213b9c:	45400015 	stw	r21,0(r8)
10213ba0:	1c07883a 	add	r3,r3,r16
10213ba4:	10800044 	addi	r2,r2,1
10213ba8:	d8c01c15 	stw	r3,112(sp)
10213bac:	44000115 	stw	r16,4(r8)
10213bb0:	d8801b15 	stw	r2,108(sp)
10213bb4:	00c001c4 	movi	r3,7
10213bb8:	1882d816 	blt	r3,r2,1021471c <___svfiprintf_internal_r+0xc4c>
10213bbc:	42000204 	addi	r8,r8,8
10213bc0:	da802417 	ldw	r10,144(sp)
10213bc4:	5415883a 	add	r10,r10,r16
10213bc8:	da802415 	stw	r10,144(sp)
10213bcc:	b0800007 	ldb	r2,0(r22)
10213bd0:	10027526 	beq	r2,zero,102145a8 <___svfiprintf_internal_r+0xad8>
10213bd4:	b1000047 	ldb	r4,1(r22)
10213bd8:	b5400044 	addi	r21,r22,1
10213bdc:	d8001d85 	stb	zero,118(sp)
10213be0:	000d883a 	mov	r6,zero
10213be4:	043fffc4 	movi	r16,-1
10213be8:	d8002115 	stw	zero,132(sp)
10213bec:	0023883a 	mov	r17,zero
10213bf0:	00c01604 	movi	r3,88
10213bf4:	01400244 	movi	r5,9
10213bf8:	02400a84 	movi	r9,42
10213bfc:	01c01b04 	movi	r7,108
10213c00:	ad400044 	addi	r21,r21,1
10213c04:	20bff804 	addi	r2,r4,-32
10213c08:	18819736 	bltu	r3,r2,10214268 <___svfiprintf_internal_r+0x798>
10213c0c:	100490ba 	slli	r2,r2,2
10213c10:	02c40874 	movhi	r11,4129
10213c14:	5acf0904 	addi	r11,r11,15396
10213c18:	12c5883a 	add	r2,r2,r11
10213c1c:	10800017 	ldw	r2,0(r2)
10213c20:	1000683a 	jmp	r2
10213c24:	10214160 	cmpeqi	zero,r2,-31483
10213c28:	10214268 	cmpgeui	zero,r2,34057
10213c2c:	10214268 	cmpgeui	zero,r2,34057
10213c30:	10214154 	ori	zero,r2,34053
10213c34:	10214268 	cmpgeui	zero,r2,34057
10213c38:	10214268 	cmpgeui	zero,r2,34057
10213c3c:	10214268 	cmpgeui	zero,r2,34057
10213c40:	10214268 	cmpgeui	zero,r2,34057
10213c44:	10214268 	cmpgeui	zero,r2,34057
10213c48:	10214268 	cmpgeui	zero,r2,34057
10213c4c:	10213e80 	call	110213e8 <__ram_exceptions_end+0xc191a8>
10213c50:	1021429c 	xori	zero,r2,34058
10213c54:	10214268 	cmpgeui	zero,r2,34057
10213c58:	10213ea8 	cmpgeui	zero,r2,34042
10213c5c:	102142a8 	cmpgeui	zero,r2,34058
10213c60:	10214268 	cmpgeui	zero,r2,34057
10213c64:	10214290 	cmplti	zero,r2,-31478
10213c68:	10214230 	cmpltui	zero,r2,34056
10213c6c:	10214230 	cmpltui	zero,r2,34056
10213c70:	10214230 	cmpltui	zero,r2,34056
10213c74:	10214230 	cmpltui	zero,r2,34056
10213c78:	10214230 	cmpltui	zero,r2,34056
10213c7c:	10214230 	cmpltui	zero,r2,34056
10213c80:	10214230 	cmpltui	zero,r2,34056
10213c84:	10214230 	cmpltui	zero,r2,34056
10213c88:	10214230 	cmpltui	zero,r2,34056
10213c8c:	10214268 	cmpgeui	zero,r2,34057
10213c90:	10214268 	cmpgeui	zero,r2,34057
10213c94:	10214268 	cmpgeui	zero,r2,34057
10213c98:	10214268 	cmpgeui	zero,r2,34057
10213c9c:	10214268 	cmpgeui	zero,r2,34057
10213ca0:	10214268 	cmpgeui	zero,r2,34057
10213ca4:	10214268 	cmpgeui	zero,r2,34057
10213ca8:	10214268 	cmpgeui	zero,r2,34057
10213cac:	10214268 	cmpgeui	zero,r2,34057
10213cb0:	10214268 	cmpgeui	zero,r2,34057
10213cb4:	102141c8 	cmpgei	zero,r2,-31481
10213cb8:	10214268 	cmpgeui	zero,r2,34057
10213cbc:	10214268 	cmpgeui	zero,r2,34057
10213cc0:	10214268 	cmpgeui	zero,r2,34057
10213cc4:	10214268 	cmpgeui	zero,r2,34057
10213cc8:	10214268 	cmpgeui	zero,r2,34057
10213ccc:	10214268 	cmpgeui	zero,r2,34057
10213cd0:	10214268 	cmpgeui	zero,r2,34057
10213cd4:	10214268 	cmpgeui	zero,r2,34057
10213cd8:	10214268 	cmpgeui	zero,r2,34057
10213cdc:	10214268 	cmpgeui	zero,r2,34057
10213ce0:	10213e54 	ori	zero,r2,34041
10213ce4:	10214268 	cmpgeui	zero,r2,34057
10213ce8:	10214268 	cmpgeui	zero,r2,34057
10213cec:	10214268 	cmpgeui	zero,r2,34057
10213cf0:	10214268 	cmpgeui	zero,r2,34057
10213cf4:	10214268 	cmpgeui	zero,r2,34057
10213cf8:	10213d88 	cmpgei	zero,r2,-31498
10213cfc:	10214268 	cmpgeui	zero,r2,34057
10213d00:	10214268 	cmpgeui	zero,r2,34057
10213d04:	102140b4 	orhi	zero,r2,34050
10213d08:	10214268 	cmpgeui	zero,r2,34057
10213d0c:	10214268 	cmpgeui	zero,r2,34057
10213d10:	10214268 	cmpgeui	zero,r2,34057
10213d14:	10214268 	cmpgeui	zero,r2,34057
10213d18:	10214268 	cmpgeui	zero,r2,34057
10213d1c:	10214268 	cmpgeui	zero,r2,34057
10213d20:	10214268 	cmpgeui	zero,r2,34057
10213d24:	10214268 	cmpgeui	zero,r2,34057
10213d28:	10214268 	cmpgeui	zero,r2,34057
10213d2c:	10214268 	cmpgeui	zero,r2,34057
10213d30:	10213fa0 	cmpeqi	zero,r2,-31490
10213d34:	10213f60 	cmpeqi	zero,r2,-31491
10213d38:	10214268 	cmpgeui	zero,r2,34057
10213d3c:	10214268 	cmpgeui	zero,r2,34057
10213d40:	10214268 	cmpgeui	zero,r2,34057
10213d44:	10214110 	cmplti	zero,r2,-31484
10213d48:	10213f60 	cmpeqi	zero,r2,-31491
10213d4c:	10214268 	cmpgeui	zero,r2,34057
10213d50:	10214268 	cmpgeui	zero,r2,34057
10213d54:	102140fc 	xorhi	zero,r2,34051
10213d58:	10214268 	cmpgeui	zero,r2,34057
10213d5c:	1021411c 	xori	zero,r2,34052
10213d60:	10213e58 	cmpnei	zero,r2,-31495
10213d64:	10213f1c 	xori	zero,r2,34044
10213d68:	10213f10 	cmplti	zero,r2,-31492
10213d6c:	10214268 	cmpgeui	zero,r2,34057
10213d70:	10213eb4 	orhi	zero,r2,34042
10213d74:	10214268 	cmpgeui	zero,r2,34057
10213d78:	10213d8c 	andi	zero,r2,34038
10213d7c:	10214268 	cmpgeui	zero,r2,34057
10213d80:	10214268 	cmpgeui	zero,r2,34057
10213d84:	1021417c 	xorhi	zero,r2,34053
10213d88:	8c400414 	ori	r17,r17,16
10213d8c:	8880080c 	andi	r2,r17,32
10213d90:	10029626 	beq	r2,zero,102147ec <___svfiprintf_internal_r+0xd1c>
10213d94:	da802317 	ldw	r10,140(sp)
10213d98:	dac02317 	ldw	r11,140(sp)
10213d9c:	00800044 	movi	r2,1
10213da0:	52400017 	ldw	r9,0(r10)
10213da4:	52800117 	ldw	r10,4(r10)
10213da8:	5ac00204 	addi	r11,r11,8
10213dac:	dac02315 	stw	r11,140(sp)
10213db0:	4a86b03a 	or	r3,r9,r10
10213db4:	d8001d85 	stb	zero,118(sp)
10213db8:	8039883a 	mov	fp,r16
10213dbc:	0017883a 	mov	r11,zero
10213dc0:	80000216 	blt	r16,zero,10213dcc <___svfiprintf_internal_r+0x2fc>
10213dc4:	013fdfc4 	movi	r4,-129
10213dc8:	8922703a 	and	r17,r17,r4
10213dcc:	1801d21e 	bne	r3,zero,10214518 <___svfiprintf_internal_r+0xa48>
10213dd0:	80024626 	beq	r16,zero,102146ec <___svfiprintf_internal_r+0xc1c>
10213dd4:	10803fcc 	andi	r2,r2,255
10213dd8:	00c00044 	movi	r3,1
10213ddc:	10c2b426 	beq	r2,r3,102148b0 <___svfiprintf_internal_r+0xde0>
10213de0:	00c00084 	movi	r3,2
10213de4:	10c25d26 	beq	r2,r3,1021475c <___svfiprintf_internal_r+0xc8c>
10213de8:	d8c01a04 	addi	r3,sp,104
10213dec:	4808d0fa 	srli	r4,r9,3
10213df0:	500a977a 	slli	r5,r10,29
10213df4:	5014d0fa 	srli	r10,r10,3
10213df8:	4a4001cc 	andi	r9,r9,7
10213dfc:	48800c04 	addi	r2,r9,48
10213e00:	18ffffc4 	addi	r3,r3,-1
10213e04:	2912b03a 	or	r9,r5,r4
10213e08:	18800005 	stb	r2,0(r3)
10213e0c:	4a88b03a 	or	r4,r9,r10
10213e10:	203ff61e 	bne	r4,zero,10213dec <___svfiprintf_internal_r+0x31c>
10213e14:	8900004c 	andi	r4,r17,1
10213e18:	d8c02615 	stw	r3,152(sp)
10213e1c:	2002961e 	bne	r4,zero,10214878 <___svfiprintf_internal_r+0xda8>
10213e20:	da801e17 	ldw	r10,120(sp)
10213e24:	50f9c83a 	sub	fp,r10,r3
10213e28:	df002015 	stw	fp,128(sp)
10213e2c:	e400010e 	bge	fp,r16,10213e34 <___svfiprintf_internal_r+0x364>
10213e30:	dc002015 	stw	r16,128(sp)
10213e34:	5ac03fcc 	andi	r11,r11,255
10213e38:	5ac0201c 	xori	r11,r11,128
10213e3c:	5affe004 	addi	r11,r11,-128
10213e40:	58006326 	beq	r11,zero,10213fd0 <___svfiprintf_internal_r+0x500>
10213e44:	d8c02017 	ldw	r3,128(sp)
10213e48:	18c00044 	addi	r3,r3,1
10213e4c:	d8c02015 	stw	r3,128(sp)
10213e50:	00005f06 	br	10213fd0 <___svfiprintf_internal_r+0x500>
10213e54:	8c400414 	ori	r17,r17,16
10213e58:	8880080c 	andi	r2,r17,32
10213e5c:	10027926 	beq	r2,zero,10214844 <___svfiprintf_internal_r+0xd74>
10213e60:	dac02317 	ldw	r11,140(sp)
10213e64:	0005883a 	mov	r2,zero
10213e68:	5a400017 	ldw	r9,0(r11)
10213e6c:	5a800117 	ldw	r10,4(r11)
10213e70:	5ac00204 	addi	r11,r11,8
10213e74:	dac02315 	stw	r11,140(sp)
10213e78:	4a86b03a 	or	r3,r9,r10
10213e7c:	003fcd06 	br	10213db4 <___svfiprintf_internal_r+0x2e4>
10213e80:	da802317 	ldw	r10,140(sp)
10213e84:	dac02317 	ldw	r11,140(sp)
10213e88:	52800017 	ldw	r10,0(r10)
10213e8c:	58800104 	addi	r2,r11,4
10213e90:	da802115 	stw	r10,132(sp)
10213e94:	50028c0e 	bge	r10,zero,102148c8 <___svfiprintf_internal_r+0xdf8>
10213e98:	da802117 	ldw	r10,132(sp)
10213e9c:	d8802315 	stw	r2,140(sp)
10213ea0:	0295c83a 	sub	r10,zero,r10
10213ea4:	da802115 	stw	r10,132(sp)
10213ea8:	8c400114 	ori	r17,r17,4
10213eac:	a9000007 	ldb	r4,0(r21)
10213eb0:	003f5306 	br	10213c00 <___svfiprintf_internal_r+0x130>
10213eb4:	da802317 	ldw	r10,140(sp)
10213eb8:	dac02317 	ldw	r11,140(sp)
10213ebc:	d8001d85 	stb	zero,118(sp)
10213ec0:	52800017 	ldw	r10,0(r10)
10213ec4:	5dc00104 	addi	r23,r11,4
10213ec8:	da802615 	stw	r10,152(sp)
10213ecc:	5002d626 	beq	r10,zero,10214a28 <___svfiprintf_internal_r+0xf58>
10213ed0:	d9002617 	ldw	r4,152(sp)
10213ed4:	8002cc16 	blt	r16,zero,10214a08 <___svfiprintf_internal_r+0xf38>
10213ed8:	000b883a 	mov	r5,zero
10213edc:	800d883a 	mov	r6,r16
10213ee0:	da002c15 	stw	r8,176(sp)
10213ee4:	0209c140 	call	10209c14 <memchr>
10213ee8:	da002c17 	ldw	r8,176(sp)
10213eec:	1002f026 	beq	r2,zero,10214ab0 <___svfiprintf_internal_r+0xfe0>
10213ef0:	d8c02617 	ldw	r3,152(sp)
10213ef4:	10f9c83a 	sub	fp,r2,r3
10213ef8:	8700010e 	bge	r16,fp,10213f00 <___svfiprintf_internal_r+0x430>
10213efc:	8039883a 	mov	fp,r16
10213f00:	dac01d83 	ldbu	r11,118(sp)
10213f04:	ddc02315 	stw	r23,140(sp)
10213f08:	0021883a 	mov	r16,zero
10213f0c:	003fc606 	br	10213e28 <___svfiprintf_internal_r+0x358>
10213f10:	8c400814 	ori	r17,r17,32
10213f14:	a9000007 	ldb	r4,0(r21)
10213f18:	003f3906 	br	10213c00 <___svfiprintf_internal_r+0x130>
10213f1c:	da802317 	ldw	r10,140(sp)
10213f20:	00800c04 	movi	r2,48
10213f24:	dac02317 	ldw	r11,140(sp)
10213f28:	52400017 	ldw	r9,0(r10)
10213f2c:	d8801d05 	stb	r2,116(sp)
10213f30:	00801e04 	movi	r2,120
10213f34:	d8801d45 	stb	r2,117(sp)
10213f38:	008408b4 	movhi	r2,4130
10213f3c:	10b41904 	addi	r2,r2,-12188
10213f40:	5ac00104 	addi	r11,r11,4
10213f44:	d8802a15 	stw	r2,168(sp)
10213f48:	0015883a 	mov	r10,zero
10213f4c:	8c400094 	ori	r17,r17,2
10213f50:	dac02315 	stw	r11,140(sp)
10213f54:	00800084 	movi	r2,2
10213f58:	4807883a 	mov	r3,r9
10213f5c:	003f9506 	br	10213db4 <___svfiprintf_internal_r+0x2e4>
10213f60:	d9801d85 	stb	r6,118(sp)
10213f64:	8880080c 	andi	r2,r17,32
10213f68:	d8c02317 	ldw	r3,140(sp)
10213f6c:	10009b26 	beq	r2,zero,102141dc <___svfiprintf_internal_r+0x70c>
10213f70:	dac02317 	ldw	r11,140(sp)
10213f74:	18800117 	ldw	r2,4(r3)
10213f78:	1a400017 	ldw	r9,0(r3)
10213f7c:	5ac00204 	addi	r11,r11,8
10213f80:	dac02315 	stw	r11,140(sp)
10213f84:	1015883a 	mov	r10,r2
10213f88:	10009f16 	blt	r2,zero,10214208 <___svfiprintf_internal_r+0x738>
10213f8c:	dac01d83 	ldbu	r11,118(sp)
10213f90:	8039883a 	mov	fp,r16
10213f94:	00800044 	movi	r2,1
10213f98:	4a86b03a 	or	r3,r9,r10
10213f9c:	003f8806 	br	10213dc0 <___svfiprintf_internal_r+0x2f0>
10213fa0:	dac02317 	ldw	r11,140(sp)
10213fa4:	00c00044 	movi	r3,1
10213fa8:	da801004 	addi	r10,sp,64
10213fac:	58800017 	ldw	r2,0(r11)
10213fb0:	5ac00104 	addi	r11,r11,4
10213fb4:	d8c02015 	stw	r3,128(sp)
10213fb8:	d8001d85 	stb	zero,118(sp)
10213fbc:	d8801005 	stb	r2,64(sp)
10213fc0:	dac02315 	stw	r11,140(sp)
10213fc4:	1839883a 	mov	fp,r3
10213fc8:	da802615 	stw	r10,152(sp)
10213fcc:	0021883a 	mov	r16,zero
10213fd0:	8a80008c 	andi	r10,r17,2
10213fd4:	da802215 	stw	r10,136(sp)
10213fd8:	50000326 	beq	r10,zero,10213fe8 <___svfiprintf_internal_r+0x518>
10213fdc:	dac02017 	ldw	r11,128(sp)
10213fe0:	5ac00084 	addi	r11,r11,2
10213fe4:	dac02015 	stw	r11,128(sp)
10213fe8:	88c0210c 	andi	r3,r17,132
10213fec:	d8c02515 	stw	r3,148(sp)
10213ff0:	1800bd1e 	bne	r3,zero,102142e8 <___svfiprintf_internal_r+0x818>
10213ff4:	da802117 	ldw	r10,132(sp)
10213ff8:	dac02017 	ldw	r11,128(sp)
10213ffc:	52edc83a 	sub	r22,r10,r11
10214000:	0580b90e 	bge	zero,r22,102142e8 <___svfiprintf_internal_r+0x818>
10214004:	02400404 	movi	r9,16
10214008:	d8c01c17 	ldw	r3,112(sp)
1021400c:	d8801b17 	ldw	r2,108(sp)
10214010:	4d829b0e 	bge	r9,r22,10214a80 <___svfiprintf_internal_r+0xfb0>
10214014:	014408b4 	movhi	r5,4130
10214018:	29758d84 	addi	r5,r5,-10698
1021401c:	d9402815 	stw	r5,160(sp)
10214020:	05c001c4 	movi	r23,7
10214024:	00000306 	br	10214034 <___svfiprintf_internal_r+0x564>
10214028:	b5bffc04 	addi	r22,r22,-16
1021402c:	42000204 	addi	r8,r8,8
10214030:	4d80150e 	bge	r9,r22,10214088 <___svfiprintf_internal_r+0x5b8>
10214034:	028408b4 	movhi	r10,4130
10214038:	18c00404 	addi	r3,r3,16
1021403c:	10800044 	addi	r2,r2,1
10214040:	52b58d84 	addi	r10,r10,-10698
10214044:	42800015 	stw	r10,0(r8)
10214048:	42400115 	stw	r9,4(r8)
1021404c:	d8c01c15 	stw	r3,112(sp)
10214050:	d8801b15 	stw	r2,108(sp)
10214054:	b8bff40e 	bge	r23,r2,10214028 <___svfiprintf_internal_r+0x558>
10214058:	9009883a 	mov	r4,r18
1021405c:	a00b883a 	mov	r5,r20
10214060:	d9801a04 	addi	r6,sp,104
10214064:	da402c15 	stw	r9,176(sp)
10214068:	02139040 	call	10213904 <__ssprint_r>
1021406c:	da402c17 	ldw	r9,176(sp)
10214070:	1001531e 	bne	r2,zero,102145c0 <___svfiprintf_internal_r+0xaf0>
10214074:	b5bffc04 	addi	r22,r22,-16
10214078:	d8c01c17 	ldw	r3,112(sp)
1021407c:	d8801b17 	ldw	r2,108(sp)
10214080:	d811883a 	mov	r8,sp
10214084:	4dbfeb16 	blt	r9,r22,10214034 <___svfiprintf_internal_r+0x564>
10214088:	dac02817 	ldw	r11,160(sp)
1021408c:	b0c7883a 	add	r3,r22,r3
10214090:	10800044 	addi	r2,r2,1
10214094:	42c00015 	stw	r11,0(r8)
10214098:	45800115 	stw	r22,4(r8)
1021409c:	d8c01c15 	stw	r3,112(sp)
102140a0:	d8801b15 	stw	r2,108(sp)
102140a4:	010001c4 	movi	r4,7
102140a8:	2081dd16 	blt	r4,r2,10214820 <___svfiprintf_internal_r+0xd50>
102140ac:	42000204 	addi	r8,r8,8
102140b0:	00008f06 	br	102142f0 <___svfiprintf_internal_r+0x820>
102140b4:	008408b4 	movhi	r2,4130
102140b8:	10b41404 	addi	r2,r2,-12208
102140bc:	d8802a15 	stw	r2,168(sp)
102140c0:	d9801d85 	stb	r6,118(sp)
102140c4:	8880080c 	andi	r2,r17,32
102140c8:	10003226 	beq	r2,zero,10214194 <___svfiprintf_internal_r+0x6c4>
102140cc:	da802317 	ldw	r10,140(sp)
102140d0:	dac02317 	ldw	r11,140(sp)
102140d4:	52400017 	ldw	r9,0(r10)
102140d8:	52800117 	ldw	r10,4(r10)
102140dc:	5ac00204 	addi	r11,r11,8
102140e0:	dac02315 	stw	r11,140(sp)
102140e4:	8880004c 	andi	r2,r17,1
102140e8:	10003426 	beq	r2,zero,102141bc <___svfiprintf_internal_r+0x6ec>
102140ec:	4a86b03a 	or	r3,r9,r10
102140f0:	1802231e 	bne	r3,zero,10214980 <___svfiprintf_internal_r+0xeb0>
102140f4:	00800084 	movi	r2,2
102140f8:	003f2e06 	br	10213db4 <___svfiprintf_internal_r+0x2e4>
102140fc:	a9000007 	ldb	r4,0(r21)
10214100:	a805883a 	mov	r2,r21
10214104:	21c22426 	beq	r4,r7,10214998 <___svfiprintf_internal_r+0xec8>
10214108:	8c400414 	ori	r17,r17,16
1021410c:	003ebc06 	br	10213c00 <___svfiprintf_internal_r+0x130>
10214110:	8c401014 	ori	r17,r17,64
10214114:	a9000007 	ldb	r4,0(r21)
10214118:	003eb906 	br	10213c00 <___svfiprintf_internal_r+0x130>
1021411c:	d9801d85 	stb	r6,118(sp)
10214120:	8880080c 	andi	r2,r17,32
10214124:	10020d1e 	bne	r2,zero,1021495c <___svfiprintf_internal_r+0xe8c>
10214128:	8880040c 	andi	r2,r17,16
1021412c:	10021e1e 	bne	r2,zero,102149a8 <___svfiprintf_internal_r+0xed8>
10214130:	8c40100c 	andi	r17,r17,64
10214134:	88021c26 	beq	r17,zero,102149a8 <___svfiprintf_internal_r+0xed8>
10214138:	dac02317 	ldw	r11,140(sp)
1021413c:	da802417 	ldw	r10,144(sp)
10214140:	58800017 	ldw	r2,0(r11)
10214144:	5ac00104 	addi	r11,r11,4
10214148:	dac02315 	stw	r11,140(sp)
1021414c:	1280000d 	sth	r10,0(r2)
10214150:	003e8306 	br	10213b60 <___svfiprintf_internal_r+0x90>
10214154:	8c400054 	ori	r17,r17,1
10214158:	a9000007 	ldb	r4,0(r21)
1021415c:	003ea806 	br	10213c00 <___svfiprintf_internal_r+0x130>
10214160:	30803fcc 	andi	r2,r6,255
10214164:	1080201c 	xori	r2,r2,128
10214168:	10bfe004 	addi	r2,r2,-128
1021416c:	1001f91e 	bne	r2,zero,10214954 <___svfiprintf_internal_r+0xe84>
10214170:	01800804 	movi	r6,32
10214174:	a9000007 	ldb	r4,0(r21)
10214178:	003ea106 	br	10213c00 <___svfiprintf_internal_r+0x130>
1021417c:	008408b4 	movhi	r2,4130
10214180:	10b41904 	addi	r2,r2,-12188
10214184:	d8802a15 	stw	r2,168(sp)
10214188:	d9801d85 	stb	r6,118(sp)
1021418c:	8880080c 	andi	r2,r17,32
10214190:	103fce1e 	bne	r2,zero,102140cc <___svfiprintf_internal_r+0x5fc>
10214194:	8880040c 	andi	r2,r17,16
10214198:	1001e526 	beq	r2,zero,10214930 <___svfiprintf_internal_r+0xe60>
1021419c:	da802317 	ldw	r10,140(sp)
102141a0:	dac02317 	ldw	r11,140(sp)
102141a4:	52400017 	ldw	r9,0(r10)
102141a8:	8880004c 	andi	r2,r17,1
102141ac:	5ac00104 	addi	r11,r11,4
102141b0:	dac02315 	stw	r11,140(sp)
102141b4:	0015883a 	mov	r10,zero
102141b8:	103fcc1e 	bne	r2,zero,102140ec <___svfiprintf_internal_r+0x61c>
102141bc:	00800084 	movi	r2,2
102141c0:	4a86b03a 	or	r3,r9,r10
102141c4:	003efb06 	br	10213db4 <___svfiprintf_internal_r+0x2e4>
102141c8:	8c400414 	ori	r17,r17,16
102141cc:	d9801d85 	stb	r6,118(sp)
102141d0:	8880080c 	andi	r2,r17,32
102141d4:	d8c02317 	ldw	r3,140(sp)
102141d8:	103f651e 	bne	r2,zero,10213f70 <___svfiprintf_internal_r+0x4a0>
102141dc:	8880040c 	andi	r2,r17,16
102141e0:	1001c61e 	bne	r2,zero,102148fc <___svfiprintf_internal_r+0xe2c>
102141e4:	8880100c 	andi	r2,r17,64
102141e8:	1001c426 	beq	r2,zero,102148fc <___svfiprintf_internal_r+0xe2c>
102141ec:	1a40000f 	ldh	r9,0(r3)
102141f0:	dac02317 	ldw	r11,140(sp)
102141f4:	4815d7fa 	srai	r10,r9,31
102141f8:	5ac00104 	addi	r11,r11,4
102141fc:	dac02315 	stw	r11,140(sp)
10214200:	5005883a 	mov	r2,r10
10214204:	103f610e 	bge	r2,zero,10213f8c <___svfiprintf_internal_r+0x4bc>
10214208:	0253c83a 	sub	r9,zero,r9
1021420c:	4804c03a 	cmpne	r2,r9,zero
10214210:	0295c83a 	sub	r10,zero,r10
10214214:	5095c83a 	sub	r10,r10,r2
10214218:	02c00b44 	movi	r11,45
1021421c:	dac01d85 	stb	r11,118(sp)
10214220:	8039883a 	mov	fp,r16
10214224:	00800044 	movi	r2,1
10214228:	4a86b03a 	or	r3,r9,r10
1021422c:	003ee406 	br	10213dc0 <___svfiprintf_internal_r+0x2f0>
10214230:	a815883a 	mov	r10,r21
10214234:	d8002115 	stw	zero,132(sp)
10214238:	20bff404 	addi	r2,r4,-48
1021423c:	51000007 	ldb	r4,0(r10)
10214240:	da802117 	ldw	r10,132(sp)
10214244:	ad400044 	addi	r21,r21,1
10214248:	52c002a4 	muli	r11,r10,10
1021424c:	a815883a 	mov	r10,r21
10214250:	5885883a 	add	r2,r11,r2
10214254:	d8802115 	stw	r2,132(sp)
10214258:	20bff404 	addi	r2,r4,-48
1021425c:	28bff72e 	bgeu	r5,r2,1021423c <___svfiprintf_internal_r+0x76c>
10214260:	20bff804 	addi	r2,r4,-32
10214264:	18be692e 	bgeu	r3,r2,10213c0c <___svfiprintf_internal_r+0x13c>
10214268:	d9801d85 	stb	r6,118(sp)
1021426c:	2000ce26 	beq	r4,zero,102145a8 <___svfiprintf_internal_r+0xad8>
10214270:	02800044 	movi	r10,1
10214274:	dac01004 	addi	r11,sp,64
10214278:	da802015 	stw	r10,128(sp)
1021427c:	d9001005 	stb	r4,64(sp)
10214280:	d8001d85 	stb	zero,118(sp)
10214284:	5039883a 	mov	fp,r10
10214288:	dac02615 	stw	r11,152(sp)
1021428c:	003f4f06 	br	10213fcc <___svfiprintf_internal_r+0x4fc>
10214290:	8c402014 	ori	r17,r17,128
10214294:	a9000007 	ldb	r4,0(r21)
10214298:	003e5906 	br	10213c00 <___svfiprintf_internal_r+0x130>
1021429c:	01800ac4 	movi	r6,43
102142a0:	a9000007 	ldb	r4,0(r21)
102142a4:	003e5606 	br	10213c00 <___svfiprintf_internal_r+0x130>
102142a8:	a9000007 	ldb	r4,0(r21)
102142ac:	aa800044 	addi	r10,r21,1
102142b0:	22420626 	beq	r4,r9,10214acc <___svfiprintf_internal_r+0xffc>
102142b4:	20bff404 	addi	r2,r4,-48
102142b8:	502b883a 	mov	r21,r10
102142bc:	0021883a 	mov	r16,zero
102142c0:	28be5036 	bltu	r5,r2,10213c04 <___svfiprintf_internal_r+0x134>
102142c4:	a9000007 	ldb	r4,0(r21)
102142c8:	840002a4 	muli	r16,r16,10
102142cc:	ad400044 	addi	r21,r21,1
102142d0:	1421883a 	add	r16,r2,r16
102142d4:	20bff404 	addi	r2,r4,-48
102142d8:	28bffa2e 	bgeu	r5,r2,102142c4 <___svfiprintf_internal_r+0x7f4>
102142dc:	803e490e 	bge	r16,zero,10213c04 <___svfiprintf_internal_r+0x134>
102142e0:	043fffc4 	movi	r16,-1
102142e4:	003e4706 	br	10213c04 <___svfiprintf_internal_r+0x134>
102142e8:	d8c01c17 	ldw	r3,112(sp)
102142ec:	d8801b17 	ldw	r2,108(sp)
102142f0:	d9001d87 	ldb	r4,118(sp)
102142f4:	20000b26 	beq	r4,zero,10214324 <___svfiprintf_internal_r+0x854>
102142f8:	d9001d84 	addi	r4,sp,118
102142fc:	18c00044 	addi	r3,r3,1
10214300:	10800044 	addi	r2,r2,1
10214304:	41000015 	stw	r4,0(r8)
10214308:	01000044 	movi	r4,1
1021430c:	41000115 	stw	r4,4(r8)
10214310:	d8c01c15 	stw	r3,112(sp)
10214314:	d8801b15 	stw	r2,108(sp)
10214318:	010001c4 	movi	r4,7
1021431c:	20811e16 	blt	r4,r2,10214798 <___svfiprintf_internal_r+0xcc8>
10214320:	42000204 	addi	r8,r8,8
10214324:	da802217 	ldw	r10,136(sp)
10214328:	50000b26 	beq	r10,zero,10214358 <___svfiprintf_internal_r+0x888>
1021432c:	d9001d04 	addi	r4,sp,116
10214330:	18c00084 	addi	r3,r3,2
10214334:	10800044 	addi	r2,r2,1
10214338:	41000015 	stw	r4,0(r8)
1021433c:	01000084 	movi	r4,2
10214340:	41000115 	stw	r4,4(r8)
10214344:	d8c01c15 	stw	r3,112(sp)
10214348:	d8801b15 	stw	r2,108(sp)
1021434c:	010001c4 	movi	r4,7
10214350:	20811a16 	blt	r4,r2,102147bc <___svfiprintf_internal_r+0xcec>
10214354:	42000204 	addi	r8,r8,8
10214358:	dac02517 	ldw	r11,148(sp)
1021435c:	01002004 	movi	r4,128
10214360:	5900a826 	beq	r11,r4,10214604 <___svfiprintf_internal_r+0xb34>
10214364:	8721c83a 	sub	r16,r16,fp
10214368:	0400260e 	bge	zero,r16,10214404 <___svfiprintf_internal_r+0x934>
1021436c:	01c00404 	movi	r7,16
10214370:	3c019d0e 	bge	r7,r16,102149e8 <___svfiprintf_internal_r+0xf18>
10214374:	010408b4 	movhi	r4,4130
10214378:	21358984 	addi	r4,r4,-10714
1021437c:	d9002215 	stw	r4,136(sp)
10214380:	382f883a 	mov	r23,r7
10214384:	058001c4 	movi	r22,7
10214388:	00000306 	br	10214398 <___svfiprintf_internal_r+0x8c8>
1021438c:	843ffc04 	addi	r16,r16,-16
10214390:	42000204 	addi	r8,r8,8
10214394:	bc00110e 	bge	r23,r16,102143dc <___svfiprintf_internal_r+0x90c>
10214398:	18c00404 	addi	r3,r3,16
1021439c:	10800044 	addi	r2,r2,1
102143a0:	44c00015 	stw	r19,0(r8)
102143a4:	45c00115 	stw	r23,4(r8)
102143a8:	d8c01c15 	stw	r3,112(sp)
102143ac:	d8801b15 	stw	r2,108(sp)
102143b0:	b0bff60e 	bge	r22,r2,1021438c <___svfiprintf_internal_r+0x8bc>
102143b4:	9009883a 	mov	r4,r18
102143b8:	a00b883a 	mov	r5,r20
102143bc:	d9801a04 	addi	r6,sp,104
102143c0:	02139040 	call	10213904 <__ssprint_r>
102143c4:	10007e1e 	bne	r2,zero,102145c0 <___svfiprintf_internal_r+0xaf0>
102143c8:	843ffc04 	addi	r16,r16,-16
102143cc:	d8c01c17 	ldw	r3,112(sp)
102143d0:	d8801b17 	ldw	r2,108(sp)
102143d4:	d811883a 	mov	r8,sp
102143d8:	bc3fef16 	blt	r23,r16,10214398 <___svfiprintf_internal_r+0x8c8>
102143dc:	da802217 	ldw	r10,136(sp)
102143e0:	1c07883a 	add	r3,r3,r16
102143e4:	10800044 	addi	r2,r2,1
102143e8:	42800015 	stw	r10,0(r8)
102143ec:	44000115 	stw	r16,4(r8)
102143f0:	d8c01c15 	stw	r3,112(sp)
102143f4:	d8801b15 	stw	r2,108(sp)
102143f8:	010001c4 	movi	r4,7
102143fc:	2080ce16 	blt	r4,r2,10214738 <___svfiprintf_internal_r+0xc68>
10214400:	42000204 	addi	r8,r8,8
10214404:	dac02617 	ldw	r11,152(sp)
10214408:	1f07883a 	add	r3,r3,fp
1021440c:	10800044 	addi	r2,r2,1
10214410:	42c00015 	stw	r11,0(r8)
10214414:	47000115 	stw	fp,4(r8)
10214418:	d8c01c15 	stw	r3,112(sp)
1021441c:	d8801b15 	stw	r2,108(sp)
10214420:	010001c4 	movi	r4,7
10214424:	2080a316 	blt	r4,r2,102146b4 <___svfiprintf_internal_r+0xbe4>
10214428:	42000204 	addi	r8,r8,8
1021442c:	8c40010c 	andi	r17,r17,4
10214430:	88002b26 	beq	r17,zero,102144e0 <___svfiprintf_internal_r+0xa10>
10214434:	da802117 	ldw	r10,132(sp)
10214438:	dac02017 	ldw	r11,128(sp)
1021443c:	52e1c83a 	sub	r16,r10,r11
10214440:	0400270e 	bge	zero,r16,102144e0 <___svfiprintf_internal_r+0xa10>
10214444:	04400404 	movi	r17,16
10214448:	d8801b17 	ldw	r2,108(sp)
1021444c:	8c01900e 	bge	r17,r16,10214a90 <___svfiprintf_internal_r+0xfc0>
10214450:	014408b4 	movhi	r5,4130
10214454:	29758d84 	addi	r5,r5,-10698
10214458:	d9402815 	stw	r5,160(sp)
1021445c:	070001c4 	movi	fp,7
10214460:	00000306 	br	10214470 <___svfiprintf_internal_r+0x9a0>
10214464:	843ffc04 	addi	r16,r16,-16
10214468:	42000204 	addi	r8,r8,8
1021446c:	8c00130e 	bge	r17,r16,102144bc <___svfiprintf_internal_r+0x9ec>
10214470:	028408b4 	movhi	r10,4130
10214474:	18c00404 	addi	r3,r3,16
10214478:	10800044 	addi	r2,r2,1
1021447c:	52b58d84 	addi	r10,r10,-10698
10214480:	42800015 	stw	r10,0(r8)
10214484:	44400115 	stw	r17,4(r8)
10214488:	d8c01c15 	stw	r3,112(sp)
1021448c:	d8801b15 	stw	r2,108(sp)
10214490:	e0bff40e 	bge	fp,r2,10214464 <___svfiprintf_internal_r+0x994>
10214494:	9009883a 	mov	r4,r18
10214498:	a00b883a 	mov	r5,r20
1021449c:	d9801a04 	addi	r6,sp,104
102144a0:	02139040 	call	10213904 <__ssprint_r>
102144a4:	1000461e 	bne	r2,zero,102145c0 <___svfiprintf_internal_r+0xaf0>
102144a8:	843ffc04 	addi	r16,r16,-16
102144ac:	d8c01c17 	ldw	r3,112(sp)
102144b0:	d8801b17 	ldw	r2,108(sp)
102144b4:	d811883a 	mov	r8,sp
102144b8:	8c3fed16 	blt	r17,r16,10214470 <___svfiprintf_internal_r+0x9a0>
102144bc:	dac02817 	ldw	r11,160(sp)
102144c0:	1c07883a 	add	r3,r3,r16
102144c4:	10800044 	addi	r2,r2,1
102144c8:	42c00015 	stw	r11,0(r8)
102144cc:	44000115 	stw	r16,4(r8)
102144d0:	d8c01c15 	stw	r3,112(sp)
102144d4:	d8801b15 	stw	r2,108(sp)
102144d8:	010001c4 	movi	r4,7
102144dc:	2080fd16 	blt	r4,r2,102148d4 <___svfiprintf_internal_r+0xe04>
102144e0:	dd802017 	ldw	r22,128(sp)
102144e4:	da802117 	ldw	r10,132(sp)
102144e8:	b280010e 	bge	r22,r10,102144f0 <___svfiprintf_internal_r+0xa20>
102144ec:	502d883a 	mov	r22,r10
102144f0:	dac02417 	ldw	r11,144(sp)
102144f4:	5d97883a 	add	r11,r11,r22
102144f8:	dac02415 	stw	r11,144(sp)
102144fc:	1800751e 	bne	r3,zero,102146d4 <___svfiprintf_internal_r+0xc04>
10214500:	a8800007 	ldb	r2,0(r21)
10214504:	d8001b15 	stw	zero,108(sp)
10214508:	d811883a 	mov	r8,sp
1021450c:	103d961e 	bne	r2,zero,10213b68 <___svfiprintf_internal_r+0x98>
10214510:	a82d883a 	mov	r22,r21
10214514:	003dad06 	br	10213bcc <___svfiprintf_internal_r+0xfc>
10214518:	10803fcc 	andi	r2,r2,255
1021451c:	00c00044 	movi	r3,1
10214520:	10fe2f1e 	bne	r2,r3,10213de0 <___svfiprintf_internal_r+0x310>
10214524:	5000e026 	beq	r10,zero,102148a8 <___svfiprintf_internal_r+0xdd8>
10214528:	dc002015 	stw	r16,128(sp)
1021452c:	dc402215 	stw	r17,136(sp)
10214530:	dd801a04 	addi	r22,sp,104
10214534:	402f883a 	mov	r23,r8
10214538:	5839883a 	mov	fp,r11
1021453c:	4821883a 	mov	r16,r9
10214540:	5023883a 	mov	r17,r10
10214544:	8009883a 	mov	r4,r16
10214548:	880b883a 	mov	r5,r17
1021454c:	01800284 	movi	r6,10
10214550:	000f883a 	mov	r7,zero
10214554:	02153840 	call	10215384 <__umoddi3>
10214558:	10800c04 	addi	r2,r2,48
1021455c:	b5bfffc4 	addi	r22,r22,-1
10214560:	8009883a 	mov	r4,r16
10214564:	880b883a 	mov	r5,r17
10214568:	01800284 	movi	r6,10
1021456c:	000f883a 	mov	r7,zero
10214570:	b0800005 	stb	r2,0(r22)
10214574:	0214dc40 	call	10214dc4 <__udivdi3>
10214578:	1021883a 	mov	r16,r2
1021457c:	10c4b03a 	or	r2,r2,r3
10214580:	1823883a 	mov	r17,r3
10214584:	103fef1e 	bne	r2,zero,10214544 <___svfiprintf_internal_r+0xa74>
10214588:	da801e17 	ldw	r10,120(sp)
1021458c:	e017883a 	mov	r11,fp
10214590:	dc002017 	ldw	r16,128(sp)
10214594:	dc402217 	ldw	r17,136(sp)
10214598:	b811883a 	mov	r8,r23
1021459c:	dd802615 	stw	r22,152(sp)
102145a0:	55b9c83a 	sub	fp,r10,r22
102145a4:	003e2006 	br	10213e28 <___svfiprintf_internal_r+0x358>
102145a8:	d8801c17 	ldw	r2,112(sp)
102145ac:	10000426 	beq	r2,zero,102145c0 <___svfiprintf_internal_r+0xaf0>
102145b0:	d9002917 	ldw	r4,164(sp)
102145b4:	d9402717 	ldw	r5,156(sp)
102145b8:	d9801a04 	addi	r6,sp,104
102145bc:	02139040 	call	10213904 <__ssprint_r>
102145c0:	da802717 	ldw	r10,156(sp)
102145c4:	5080030b 	ldhu	r2,12(r10)
102145c8:	1080100c 	andi	r2,r2,64
102145cc:	1000511e 	bne	r2,zero,10214714 <___svfiprintf_internal_r+0xc44>
102145d0:	d8802417 	ldw	r2,144(sp)
102145d4:	dfc03617 	ldw	ra,216(sp)
102145d8:	df003517 	ldw	fp,212(sp)
102145dc:	ddc03417 	ldw	r23,208(sp)
102145e0:	dd803317 	ldw	r22,204(sp)
102145e4:	dd403217 	ldw	r21,200(sp)
102145e8:	dd003117 	ldw	r20,196(sp)
102145ec:	dcc03017 	ldw	r19,192(sp)
102145f0:	dc802f17 	ldw	r18,188(sp)
102145f4:	dc402e17 	ldw	r17,184(sp)
102145f8:	dc002d17 	ldw	r16,180(sp)
102145fc:	dec03704 	addi	sp,sp,220
10214600:	f800283a 	ret
10214604:	da802117 	ldw	r10,132(sp)
10214608:	dac02017 	ldw	r11,128(sp)
1021460c:	52edc83a 	sub	r22,r10,r11
10214610:	05bf540e 	bge	zero,r22,10214364 <___svfiprintf_internal_r+0x894>
10214614:	02400404 	movi	r9,16
10214618:	4d81210e 	bge	r9,r22,10214aa0 <___svfiprintf_internal_r+0xfd0>
1021461c:	014408b4 	movhi	r5,4130
10214620:	29758984 	addi	r5,r5,-10714
10214624:	d9402215 	stw	r5,136(sp)
10214628:	05c001c4 	movi	r23,7
1021462c:	00000306 	br	1021463c <___svfiprintf_internal_r+0xb6c>
10214630:	b5bffc04 	addi	r22,r22,-16
10214634:	42000204 	addi	r8,r8,8
10214638:	4d80130e 	bge	r9,r22,10214688 <___svfiprintf_internal_r+0xbb8>
1021463c:	18c00404 	addi	r3,r3,16
10214640:	10800044 	addi	r2,r2,1
10214644:	44c00015 	stw	r19,0(r8)
10214648:	42400115 	stw	r9,4(r8)
1021464c:	d8c01c15 	stw	r3,112(sp)
10214650:	d8801b15 	stw	r2,108(sp)
10214654:	b8bff60e 	bge	r23,r2,10214630 <___svfiprintf_internal_r+0xb60>
10214658:	9009883a 	mov	r4,r18
1021465c:	a00b883a 	mov	r5,r20
10214660:	d9801a04 	addi	r6,sp,104
10214664:	da402c15 	stw	r9,176(sp)
10214668:	02139040 	call	10213904 <__ssprint_r>
1021466c:	da402c17 	ldw	r9,176(sp)
10214670:	103fd31e 	bne	r2,zero,102145c0 <___svfiprintf_internal_r+0xaf0>
10214674:	b5bffc04 	addi	r22,r22,-16
10214678:	d8c01c17 	ldw	r3,112(sp)
1021467c:	d8801b17 	ldw	r2,108(sp)
10214680:	d811883a 	mov	r8,sp
10214684:	4dbfed16 	blt	r9,r22,1021463c <___svfiprintf_internal_r+0xb6c>
10214688:	da802217 	ldw	r10,136(sp)
1021468c:	1d87883a 	add	r3,r3,r22
10214690:	10800044 	addi	r2,r2,1
10214694:	42800015 	stw	r10,0(r8)
10214698:	45800115 	stw	r22,4(r8)
1021469c:	d8c01c15 	stw	r3,112(sp)
102146a0:	d8801b15 	stw	r2,108(sp)
102146a4:	010001c4 	movi	r4,7
102146a8:	2080c616 	blt	r4,r2,102149c4 <___svfiprintf_internal_r+0xef4>
102146ac:	42000204 	addi	r8,r8,8
102146b0:	003f2c06 	br	10214364 <___svfiprintf_internal_r+0x894>
102146b4:	9009883a 	mov	r4,r18
102146b8:	a00b883a 	mov	r5,r20
102146bc:	d9801a04 	addi	r6,sp,104
102146c0:	02139040 	call	10213904 <__ssprint_r>
102146c4:	103fbe1e 	bne	r2,zero,102145c0 <___svfiprintf_internal_r+0xaf0>
102146c8:	d8c01c17 	ldw	r3,112(sp)
102146cc:	d811883a 	mov	r8,sp
102146d0:	003f5606 	br	1021442c <___svfiprintf_internal_r+0x95c>
102146d4:	9009883a 	mov	r4,r18
102146d8:	a00b883a 	mov	r5,r20
102146dc:	d9801a04 	addi	r6,sp,104
102146e0:	02139040 	call	10213904 <__ssprint_r>
102146e4:	103f8626 	beq	r2,zero,10214500 <___svfiprintf_internal_r+0xa30>
102146e8:	003fb506 	br	102145c0 <___svfiprintf_internal_r+0xaf0>
102146ec:	10803fcc 	andi	r2,r2,255
102146f0:	10003b1e 	bne	r2,zero,102147e0 <___svfiprintf_internal_r+0xd10>
102146f4:	8880004c 	andi	r2,r17,1
102146f8:	10007d26 	beq	r2,zero,102148f0 <___svfiprintf_internal_r+0xe20>
102146fc:	00800c04 	movi	r2,48
10214700:	d8c019c4 	addi	r3,sp,103
10214704:	d88019c5 	stb	r2,103(sp)
10214708:	df002b17 	ldw	fp,172(sp)
1021470c:	d8c02615 	stw	r3,152(sp)
10214710:	003dc506 	br	10213e28 <___svfiprintf_internal_r+0x358>
10214714:	00bfffc4 	movi	r2,-1
10214718:	003fae06 	br	102145d4 <___svfiprintf_internal_r+0xb04>
1021471c:	9009883a 	mov	r4,r18
10214720:	a00b883a 	mov	r5,r20
10214724:	d9801a04 	addi	r6,sp,104
10214728:	02139040 	call	10213904 <__ssprint_r>
1021472c:	103fa41e 	bne	r2,zero,102145c0 <___svfiprintf_internal_r+0xaf0>
10214730:	d811883a 	mov	r8,sp
10214734:	003d2206 	br	10213bc0 <___svfiprintf_internal_r+0xf0>
10214738:	9009883a 	mov	r4,r18
1021473c:	a00b883a 	mov	r5,r20
10214740:	d9801a04 	addi	r6,sp,104
10214744:	02139040 	call	10213904 <__ssprint_r>
10214748:	103f9d1e 	bne	r2,zero,102145c0 <___svfiprintf_internal_r+0xaf0>
1021474c:	d8c01c17 	ldw	r3,112(sp)
10214750:	d8801b17 	ldw	r2,108(sp)
10214754:	d811883a 	mov	r8,sp
10214758:	003f2a06 	br	10214404 <___svfiprintf_internal_r+0x934>
1021475c:	d9402a17 	ldw	r5,168(sp)
10214760:	d8c01a04 	addi	r3,sp,104
10214764:	488003cc 	andi	r2,r9,15
10214768:	5008973a 	slli	r4,r10,28
1021476c:	2885883a 	add	r2,r5,r2
10214770:	4812d13a 	srli	r9,r9,4
10214774:	10800003 	ldbu	r2,0(r2)
10214778:	5014d13a 	srli	r10,r10,4
1021477c:	18ffffc4 	addi	r3,r3,-1
10214780:	2252b03a 	or	r9,r4,r9
10214784:	18800005 	stb	r2,0(r3)
10214788:	4a84b03a 	or	r2,r9,r10
1021478c:	103ff51e 	bne	r2,zero,10214764 <___svfiprintf_internal_r+0xc94>
10214790:	d8c02615 	stw	r3,152(sp)
10214794:	003da206 	br	10213e20 <___svfiprintf_internal_r+0x350>
10214798:	9009883a 	mov	r4,r18
1021479c:	a00b883a 	mov	r5,r20
102147a0:	d9801a04 	addi	r6,sp,104
102147a4:	02139040 	call	10213904 <__ssprint_r>
102147a8:	103f851e 	bne	r2,zero,102145c0 <___svfiprintf_internal_r+0xaf0>
102147ac:	d8c01c17 	ldw	r3,112(sp)
102147b0:	d8801b17 	ldw	r2,108(sp)
102147b4:	d811883a 	mov	r8,sp
102147b8:	003eda06 	br	10214324 <___svfiprintf_internal_r+0x854>
102147bc:	9009883a 	mov	r4,r18
102147c0:	a00b883a 	mov	r5,r20
102147c4:	d9801a04 	addi	r6,sp,104
102147c8:	02139040 	call	10213904 <__ssprint_r>
102147cc:	103f7c1e 	bne	r2,zero,102145c0 <___svfiprintf_internal_r+0xaf0>
102147d0:	d8c01c17 	ldw	r3,112(sp)
102147d4:	d8801b17 	ldw	r2,108(sp)
102147d8:	d811883a 	mov	r8,sp
102147dc:	003ede06 	br	10214358 <___svfiprintf_internal_r+0x888>
102147e0:	da801a04 	addi	r10,sp,104
102147e4:	da802615 	stw	r10,152(sp)
102147e8:	003d8f06 	br	10213e28 <___svfiprintf_internal_r+0x358>
102147ec:	8880040c 	andi	r2,r17,16
102147f0:	10004c1e 	bne	r2,zero,10214924 <___svfiprintf_internal_r+0xe54>
102147f4:	8880100c 	andi	r2,r17,64
102147f8:	da802317 	ldw	r10,140(sp)
102147fc:	10004a26 	beq	r2,zero,10214928 <___svfiprintf_internal_r+0xe58>
10214800:	5240000b 	ldhu	r9,0(r10)
10214804:	dac02317 	ldw	r11,140(sp)
10214808:	0015883a 	mov	r10,zero
1021480c:	00800044 	movi	r2,1
10214810:	5ac00104 	addi	r11,r11,4
10214814:	dac02315 	stw	r11,140(sp)
10214818:	4807883a 	mov	r3,r9
1021481c:	003d6506 	br	10213db4 <___svfiprintf_internal_r+0x2e4>
10214820:	9009883a 	mov	r4,r18
10214824:	a00b883a 	mov	r5,r20
10214828:	d9801a04 	addi	r6,sp,104
1021482c:	02139040 	call	10213904 <__ssprint_r>
10214830:	103f631e 	bne	r2,zero,102145c0 <___svfiprintf_internal_r+0xaf0>
10214834:	d8c01c17 	ldw	r3,112(sp)
10214838:	d8801b17 	ldw	r2,108(sp)
1021483c:	d811883a 	mov	r8,sp
10214840:	003eab06 	br	102142f0 <___svfiprintf_internal_r+0x820>
10214844:	8880040c 	andi	r2,r17,16
10214848:	1000331e 	bne	r2,zero,10214918 <___svfiprintf_internal_r+0xe48>
1021484c:	8880100c 	andi	r2,r17,64
10214850:	da802317 	ldw	r10,140(sp)
10214854:	10003126 	beq	r2,zero,1021491c <___svfiprintf_internal_r+0xe4c>
10214858:	5240000b 	ldhu	r9,0(r10)
1021485c:	dac02317 	ldw	r11,140(sp)
10214860:	0015883a 	mov	r10,zero
10214864:	0005883a 	mov	r2,zero
10214868:	5ac00104 	addi	r11,r11,4
1021486c:	dac02315 	stw	r11,140(sp)
10214870:	4807883a 	mov	r3,r9
10214874:	003d4f06 	br	10213db4 <___svfiprintf_internal_r+0x2e4>
10214878:	10803fcc 	andi	r2,r2,255
1021487c:	1080201c 	xori	r2,r2,128
10214880:	10bfe004 	addi	r2,r2,-128
10214884:	01000c04 	movi	r4,48
10214888:	11005b26 	beq	r2,r4,102149f8 <___svfiprintf_internal_r+0xf28>
1021488c:	da802617 	ldw	r10,152(sp)
10214890:	d8801e17 	ldw	r2,120(sp)
10214894:	193fffc5 	stb	r4,-1(r3)
10214898:	52bfffc4 	addi	r10,r10,-1
1021489c:	da802615 	stw	r10,152(sp)
102148a0:	12b9c83a 	sub	fp,r2,r10
102148a4:	003d6006 	br	10213e28 <___svfiprintf_internal_r+0x358>
102148a8:	00800244 	movi	r2,9
102148ac:	127f1e36 	bltu	r2,r9,10214528 <___svfiprintf_internal_r+0xa58>
102148b0:	4a400c04 	addi	r9,r9,48
102148b4:	d8c019c4 	addi	r3,sp,103
102148b8:	da4019c5 	stb	r9,103(sp)
102148bc:	df002b17 	ldw	fp,172(sp)
102148c0:	d8c02615 	stw	r3,152(sp)
102148c4:	003d5806 	br	10213e28 <___svfiprintf_internal_r+0x358>
102148c8:	d8802315 	stw	r2,140(sp)
102148cc:	a9000007 	ldb	r4,0(r21)
102148d0:	003ccb06 	br	10213c00 <___svfiprintf_internal_r+0x130>
102148d4:	9009883a 	mov	r4,r18
102148d8:	a00b883a 	mov	r5,r20
102148dc:	d9801a04 	addi	r6,sp,104
102148e0:	02139040 	call	10213904 <__ssprint_r>
102148e4:	103f361e 	bne	r2,zero,102145c0 <___svfiprintf_internal_r+0xaf0>
102148e8:	d8c01c17 	ldw	r3,112(sp)
102148ec:	003efc06 	br	102144e0 <___svfiprintf_internal_r+0xa10>
102148f0:	d8c01a04 	addi	r3,sp,104
102148f4:	d8c02615 	stw	r3,152(sp)
102148f8:	003d4b06 	br	10213e28 <___svfiprintf_internal_r+0x358>
102148fc:	da802317 	ldw	r10,140(sp)
10214900:	1a400017 	ldw	r9,0(r3)
10214904:	52800104 	addi	r10,r10,4
10214908:	da802315 	stw	r10,140(sp)
1021490c:	4815d7fa 	srai	r10,r9,31
10214910:	5005883a 	mov	r2,r10
10214914:	003d9c06 	br	10213f88 <___svfiprintf_internal_r+0x4b8>
10214918:	da802317 	ldw	r10,140(sp)
1021491c:	52400017 	ldw	r9,0(r10)
10214920:	003fce06 	br	1021485c <___svfiprintf_internal_r+0xd8c>
10214924:	da802317 	ldw	r10,140(sp)
10214928:	52400017 	ldw	r9,0(r10)
1021492c:	003fb506 	br	10214804 <___svfiprintf_internal_r+0xd34>
10214930:	8880100c 	andi	r2,r17,64
10214934:	da802317 	ldw	r10,140(sp)
10214938:	103e1926 	beq	r2,zero,102141a0 <___svfiprintf_internal_r+0x6d0>
1021493c:	dac02317 	ldw	r11,140(sp)
10214940:	5240000b 	ldhu	r9,0(r10)
10214944:	0015883a 	mov	r10,zero
10214948:	5ac00104 	addi	r11,r11,4
1021494c:	dac02315 	stw	r11,140(sp)
10214950:	003de406 	br	102140e4 <___svfiprintf_internal_r+0x614>
10214954:	a9000007 	ldb	r4,0(r21)
10214958:	003ca906 	br	10213c00 <___svfiprintf_internal_r+0x130>
1021495c:	dac02317 	ldw	r11,140(sp)
10214960:	da802417 	ldw	r10,144(sp)
10214964:	58800017 	ldw	r2,0(r11)
10214968:	5007d7fa 	srai	r3,r10,31
1021496c:	5ac00104 	addi	r11,r11,4
10214970:	dac02315 	stw	r11,140(sp)
10214974:	12800015 	stw	r10,0(r2)
10214978:	10c00115 	stw	r3,4(r2)
1021497c:	003c7806 	br	10213b60 <___svfiprintf_internal_r+0x90>
10214980:	00800c04 	movi	r2,48
10214984:	d8801d05 	stb	r2,116(sp)
10214988:	d9001d45 	stb	r4,117(sp)
1021498c:	8c400094 	ori	r17,r17,2
10214990:	00800084 	movi	r2,2
10214994:	003d0706 	br	10213db4 <___svfiprintf_internal_r+0x2e4>
10214998:	ad400044 	addi	r21,r21,1
1021499c:	8c400814 	ori	r17,r17,32
102149a0:	11000047 	ldb	r4,1(r2)
102149a4:	003c9606 	br	10213c00 <___svfiprintf_internal_r+0x130>
102149a8:	dac02317 	ldw	r11,140(sp)
102149ac:	da802417 	ldw	r10,144(sp)
102149b0:	58800017 	ldw	r2,0(r11)
102149b4:	5ac00104 	addi	r11,r11,4
102149b8:	dac02315 	stw	r11,140(sp)
102149bc:	12800015 	stw	r10,0(r2)
102149c0:	003c6706 	br	10213b60 <___svfiprintf_internal_r+0x90>
102149c4:	9009883a 	mov	r4,r18
102149c8:	a00b883a 	mov	r5,r20
102149cc:	d9801a04 	addi	r6,sp,104
102149d0:	02139040 	call	10213904 <__ssprint_r>
102149d4:	103efa1e 	bne	r2,zero,102145c0 <___svfiprintf_internal_r+0xaf0>
102149d8:	d8c01c17 	ldw	r3,112(sp)
102149dc:	d8801b17 	ldw	r2,108(sp)
102149e0:	d811883a 	mov	r8,sp
102149e4:	003e5f06 	br	10214364 <___svfiprintf_internal_r+0x894>
102149e8:	02c408b4 	movhi	r11,4130
102149ec:	5af58984 	addi	r11,r11,-10714
102149f0:	dac02215 	stw	r11,136(sp)
102149f4:	003e7906 	br	102143dc <___svfiprintf_internal_r+0x90c>
102149f8:	da801e17 	ldw	r10,120(sp)
102149fc:	d8c02617 	ldw	r3,152(sp)
10214a00:	50f9c83a 	sub	fp,r10,r3
10214a04:	003d0806 	br	10213e28 <___svfiprintf_internal_r+0x358>
10214a08:	da002c15 	stw	r8,176(sp)
10214a0c:	02033500 	call	10203350 <strlen>
10214a10:	1039883a 	mov	fp,r2
10214a14:	dac01d83 	ldbu	r11,118(sp)
10214a18:	ddc02315 	stw	r23,140(sp)
10214a1c:	0021883a 	mov	r16,zero
10214a20:	da002c17 	ldw	r8,176(sp)
10214a24:	003d0006 	br	10213e28 <___svfiprintf_internal_r+0x358>
10214a28:	00800184 	movi	r2,6
10214a2c:	1400012e 	bgeu	r2,r16,10214a34 <___svfiprintf_internal_r+0xf64>
10214a30:	1021883a 	mov	r16,r2
10214a34:	8039883a 	mov	fp,r16
10214a38:	802d883a 	mov	r22,r16
10214a3c:	80002116 	blt	r16,zero,10214ac4 <___svfiprintf_internal_r+0xff4>
10214a40:	008408b4 	movhi	r2,4130
10214a44:	10b41e04 	addi	r2,r2,-12168
10214a48:	dd802015 	stw	r22,128(sp)
10214a4c:	ddc02315 	stw	r23,140(sp)
10214a50:	d8802615 	stw	r2,152(sp)
10214a54:	003d5d06 	br	10213fcc <___svfiprintf_internal_r+0x4fc>
10214a58:	04001004 	movi	r16,64
10214a5c:	800b883a 	mov	r5,r16
10214a60:	02025a40 	call	102025a4 <_malloc_r>
10214a64:	da802717 	ldw	r10,156(sp)
10214a68:	50800015 	stw	r2,0(r10)
10214a6c:	50800415 	stw	r2,16(r10)
10214a70:	10002026 	beq	r2,zero,10214af4 <___svfiprintf_internal_r+0x1024>
10214a74:	da802717 	ldw	r10,156(sp)
10214a78:	54000515 	stw	r16,20(r10)
10214a7c:	003c2806 	br	10213b20 <___svfiprintf_internal_r+0x50>
10214a80:	010408b4 	movhi	r4,4130
10214a84:	21358d84 	addi	r4,r4,-10698
10214a88:	d9002815 	stw	r4,160(sp)
10214a8c:	003d7e06 	br	10214088 <___svfiprintf_internal_r+0x5b8>
10214a90:	010408b4 	movhi	r4,4130
10214a94:	21358d84 	addi	r4,r4,-10698
10214a98:	d9002815 	stw	r4,160(sp)
10214a9c:	003e8706 	br	102144bc <___svfiprintf_internal_r+0x9ec>
10214aa0:	010408b4 	movhi	r4,4130
10214aa4:	21358984 	addi	r4,r4,-10714
10214aa8:	d9002215 	stw	r4,136(sp)
10214aac:	003ef606 	br	10214688 <___svfiprintf_internal_r+0xbb8>
10214ab0:	8039883a 	mov	fp,r16
10214ab4:	dac01d83 	ldbu	r11,118(sp)
10214ab8:	ddc02315 	stw	r23,140(sp)
10214abc:	0021883a 	mov	r16,zero
10214ac0:	003cd906 	br	10213e28 <___svfiprintf_internal_r+0x358>
10214ac4:	002d883a 	mov	r22,zero
10214ac8:	003fdd06 	br	10214a40 <___svfiprintf_internal_r+0xf70>
10214acc:	dac02317 	ldw	r11,140(sp)
10214ad0:	a805883a 	mov	r2,r21
10214ad4:	502b883a 	mov	r21,r10
10214ad8:	5c000017 	ldw	r16,0(r11)
10214adc:	59000104 	addi	r4,r11,4
10214ae0:	d9002315 	stw	r4,140(sp)
10214ae4:	803fae0e 	bge	r16,zero,102149a0 <___svfiprintf_internal_r+0xed0>
10214ae8:	043fffc4 	movi	r16,-1
10214aec:	11000047 	ldb	r4,1(r2)
10214af0:	003c4306 	br	10213c00 <___svfiprintf_internal_r+0x130>
10214af4:	dac02917 	ldw	r11,164(sp)
10214af8:	00800304 	movi	r2,12
10214afc:	58800015 	stw	r2,0(r11)
10214b00:	00bfffc4 	movi	r2,-1
10214b04:	003eb306 	br	102145d4 <___svfiprintf_internal_r+0xb04>

10214b08 <_wcrtomb_r>:
10214b08:	defff604 	addi	sp,sp,-40
10214b0c:	008408b4 	movhi	r2,4130
10214b10:	dc800815 	stw	r18,32(sp)
10214b14:	dc400715 	stw	r17,28(sp)
10214b18:	dc000615 	stw	r16,24(sp)
10214b1c:	10bd0c04 	addi	r2,r2,-3024
10214b20:	dfc00915 	stw	ra,36(sp)
10214b24:	2021883a 	mov	r16,r4
10214b28:	3823883a 	mov	r17,r7
10214b2c:	14800017 	ldw	r18,0(r2)
10214b30:	28001426 	beq	r5,zero,10214b84 <_wcrtomb_r+0x7c>
10214b34:	d9400415 	stw	r5,16(sp)
10214b38:	d9800515 	stw	r6,20(sp)
10214b3c:	02097780 	call	10209778 <__locale_charset>
10214b40:	d9400417 	ldw	r5,16(sp)
10214b44:	d9800517 	ldw	r6,20(sp)
10214b48:	8009883a 	mov	r4,r16
10214b4c:	dc400015 	stw	r17,0(sp)
10214b50:	100f883a 	mov	r7,r2
10214b54:	903ee83a 	callr	r18
10214b58:	00ffffc4 	movi	r3,-1
10214b5c:	10c0031e 	bne	r2,r3,10214b6c <_wcrtomb_r+0x64>
10214b60:	88000015 	stw	zero,0(r17)
10214b64:	00c02284 	movi	r3,138
10214b68:	80c00015 	stw	r3,0(r16)
10214b6c:	dfc00917 	ldw	ra,36(sp)
10214b70:	dc800817 	ldw	r18,32(sp)
10214b74:	dc400717 	ldw	r17,28(sp)
10214b78:	dc000617 	ldw	r16,24(sp)
10214b7c:	dec00a04 	addi	sp,sp,40
10214b80:	f800283a 	ret
10214b84:	02097780 	call	10209778 <__locale_charset>
10214b88:	8009883a 	mov	r4,r16
10214b8c:	dc400015 	stw	r17,0(sp)
10214b90:	d9400104 	addi	r5,sp,4
10214b94:	000d883a 	mov	r6,zero
10214b98:	100f883a 	mov	r7,r2
10214b9c:	903ee83a 	callr	r18
10214ba0:	003fed06 	br	10214b58 <_wcrtomb_r+0x50>

10214ba4 <wcrtomb>:
10214ba4:	defff604 	addi	sp,sp,-40
10214ba8:	008408b4 	movhi	r2,4130
10214bac:	dc800615 	stw	r18,24(sp)
10214bb0:	dc400515 	stw	r17,20(sp)
10214bb4:	dc000415 	stw	r16,16(sp)
10214bb8:	10bd0604 	addi	r2,r2,-3048
10214bbc:	dfc00915 	stw	ra,36(sp)
10214bc0:	dd000815 	stw	r20,32(sp)
10214bc4:	dcc00715 	stw	r19,28(sp)
10214bc8:	2021883a 	mov	r16,r4
10214bcc:	3025883a 	mov	r18,r6
10214bd0:	14400017 	ldw	r17,0(r2)
10214bd4:	20001826 	beq	r4,zero,10214c38 <wcrtomb+0x94>
10214bd8:	008408b4 	movhi	r2,4130
10214bdc:	10bd0c04 	addi	r2,r2,-3024
10214be0:	15000017 	ldw	r20,0(r2)
10214be4:	2827883a 	mov	r19,r5
10214be8:	02097780 	call	10209778 <__locale_charset>
10214bec:	8809883a 	mov	r4,r17
10214bf0:	dc800015 	stw	r18,0(sp)
10214bf4:	800b883a 	mov	r5,r16
10214bf8:	980d883a 	mov	r6,r19
10214bfc:	100f883a 	mov	r7,r2
10214c00:	a03ee83a 	callr	r20
10214c04:	00ffffc4 	movi	r3,-1
10214c08:	10c0031e 	bne	r2,r3,10214c18 <wcrtomb+0x74>
10214c0c:	90000015 	stw	zero,0(r18)
10214c10:	00c02284 	movi	r3,138
10214c14:	88c00015 	stw	r3,0(r17)
10214c18:	dfc00917 	ldw	ra,36(sp)
10214c1c:	dd000817 	ldw	r20,32(sp)
10214c20:	dcc00717 	ldw	r19,28(sp)
10214c24:	dc800617 	ldw	r18,24(sp)
10214c28:	dc400517 	ldw	r17,20(sp)
10214c2c:	dc000417 	ldw	r16,16(sp)
10214c30:	dec00a04 	addi	sp,sp,40
10214c34:	f800283a 	ret
10214c38:	008408b4 	movhi	r2,4130
10214c3c:	10bd0c04 	addi	r2,r2,-3024
10214c40:	14000017 	ldw	r16,0(r2)
10214c44:	02097780 	call	10209778 <__locale_charset>
10214c48:	8809883a 	mov	r4,r17
10214c4c:	dc800015 	stw	r18,0(sp)
10214c50:	d9400104 	addi	r5,sp,4
10214c54:	000d883a 	mov	r6,zero
10214c58:	100f883a 	mov	r7,r2
10214c5c:	803ee83a 	callr	r16
10214c60:	003fe806 	br	10214c04 <wcrtomb+0x60>

10214c64 <__ascii_wctomb>:
10214c64:	28000526 	beq	r5,zero,10214c7c <__ascii_wctomb+0x18>
10214c68:	00803fc4 	movi	r2,255
10214c6c:	11800536 	bltu	r2,r6,10214c84 <__ascii_wctomb+0x20>
10214c70:	29800005 	stb	r6,0(r5)
10214c74:	00800044 	movi	r2,1
10214c78:	f800283a 	ret
10214c7c:	0005883a 	mov	r2,zero
10214c80:	f800283a 	ret
10214c84:	00802284 	movi	r2,138
10214c88:	20800015 	stw	r2,0(r4)
10214c8c:	00bfffc4 	movi	r2,-1
10214c90:	f800283a 	ret

10214c94 <_wctomb_r>:
10214c94:	008408b4 	movhi	r2,4130
10214c98:	defff904 	addi	sp,sp,-28
10214c9c:	10bd0c04 	addi	r2,r2,-3024
10214ca0:	dfc00615 	stw	ra,24(sp)
10214ca4:	dc400515 	stw	r17,20(sp)
10214ca8:	dc000415 	stw	r16,16(sp)
10214cac:	3823883a 	mov	r17,r7
10214cb0:	14000017 	ldw	r16,0(r2)
10214cb4:	d9000115 	stw	r4,4(sp)
10214cb8:	d9400215 	stw	r5,8(sp)
10214cbc:	d9800315 	stw	r6,12(sp)
10214cc0:	02097780 	call	10209778 <__locale_charset>
10214cc4:	d9000117 	ldw	r4,4(sp)
10214cc8:	d9400217 	ldw	r5,8(sp)
10214ccc:	d9800317 	ldw	r6,12(sp)
10214cd0:	dc400015 	stw	r17,0(sp)
10214cd4:	100f883a 	mov	r7,r2
10214cd8:	803ee83a 	callr	r16
10214cdc:	dfc00617 	ldw	ra,24(sp)
10214ce0:	dc400517 	ldw	r17,20(sp)
10214ce4:	dc000417 	ldw	r16,16(sp)
10214ce8:	dec00704 	addi	sp,sp,28
10214cec:	f800283a 	ret

10214cf0 <__muldi3>:
10214cf0:	223fffcc 	andi	r8,r4,65535
10214cf4:	2012d43a 	srli	r9,r4,16
10214cf8:	32bfffcc 	andi	r10,r6,65535
10214cfc:	3006d43a 	srli	r3,r6,16
10214d00:	5217383a 	mul	r11,r10,r8
10214d04:	5255383a 	mul	r10,r10,r9
10214d08:	1a05383a 	mul	r2,r3,r8
10214d0c:	5810d43a 	srli	r8,r11,16
10214d10:	5085883a 	add	r2,r10,r2
10214d14:	1205883a 	add	r2,r2,r8
10214d18:	1a51383a 	mul	r8,r3,r9
10214d1c:	1280022e 	bgeu	r2,r10,10214d28 <__muldi3+0x38>
10214d20:	00c00074 	movhi	r3,1
10214d24:	40d1883a 	add	r8,r8,r3
10214d28:	1006d43a 	srli	r3,r2,16
10214d2c:	21cf383a 	mul	r7,r4,r7
10214d30:	314b383a 	mul	r5,r6,r5
10214d34:	1004943a 	slli	r2,r2,16
10214d38:	40c7883a 	add	r3,r8,r3
10214d3c:	5affffcc 	andi	r11,r11,65535
10214d40:	3949883a 	add	r4,r7,r5
10214d44:	12c5883a 	add	r2,r2,r11
10214d48:	20c7883a 	add	r3,r4,r3
10214d4c:	f800283a 	ret

10214d50 <__fixunsdfsi>:
10214d50:	defffd04 	addi	sp,sp,-12
10214d54:	000d883a 	mov	r6,zero
10214d58:	01d07834 	movhi	r7,16864
10214d5c:	dc400115 	stw	r17,4(sp)
10214d60:	dc000015 	stw	r16,0(sp)
10214d64:	dfc00215 	stw	ra,8(sp)
10214d68:	2023883a 	mov	r17,r4
10214d6c:	2821883a 	mov	r16,r5
10214d70:	0216ce40 	call	10216ce4 <__gedf2>
10214d74:	1000080e 	bge	r2,zero,10214d98 <__fixunsdfsi+0x48>
10214d78:	8809883a 	mov	r4,r17
10214d7c:	800b883a 	mov	r5,r16
10214d80:	0217e980 	call	10217e98 <__fixdfsi>
10214d84:	dfc00217 	ldw	ra,8(sp)
10214d88:	dc400117 	ldw	r17,4(sp)
10214d8c:	dc000017 	ldw	r16,0(sp)
10214d90:	dec00304 	addi	sp,sp,12
10214d94:	f800283a 	ret
10214d98:	000d883a 	mov	r6,zero
10214d9c:	01d07834 	movhi	r7,16864
10214da0:	8809883a 	mov	r4,r17
10214da4:	800b883a 	mov	r5,r16
10214da8:	02175c80 	call	102175c8 <__subdf3>
10214dac:	180b883a 	mov	r5,r3
10214db0:	1009883a 	mov	r4,r2
10214db4:	0217e980 	call	10217e98 <__fixdfsi>
10214db8:	00e00034 	movhi	r3,32768
10214dbc:	10c5883a 	add	r2,r2,r3
10214dc0:	003ff006 	br	10214d84 <__fixunsdfsi+0x34>

10214dc4 <__udivdi3>:
10214dc4:	defff504 	addi	sp,sp,-44
10214dc8:	dcc00415 	stw	r19,16(sp)
10214dcc:	dc000115 	stw	r16,4(sp)
10214dd0:	dfc00a15 	stw	ra,40(sp)
10214dd4:	df000915 	stw	fp,36(sp)
10214dd8:	ddc00815 	stw	r23,32(sp)
10214ddc:	dd800715 	stw	r22,28(sp)
10214de0:	dd400615 	stw	r21,24(sp)
10214de4:	dd000515 	stw	r20,20(sp)
10214de8:	dc800315 	stw	r18,12(sp)
10214dec:	dc400215 	stw	r17,8(sp)
10214df0:	2027883a 	mov	r19,r4
10214df4:	2821883a 	mov	r16,r5
10214df8:	3800421e 	bne	r7,zero,10214f04 <__udivdi3+0x140>
10214dfc:	3025883a 	mov	r18,r6
10214e00:	2023883a 	mov	r17,r4
10214e04:	2980542e 	bgeu	r5,r6,10214f58 <__udivdi3+0x194>
10214e08:	00bfffd4 	movui	r2,65535
10214e0c:	282d883a 	mov	r22,r5
10214e10:	1180a836 	bltu	r2,r6,102150b4 <__udivdi3+0x2f0>
10214e14:	00803fc4 	movi	r2,255
10214e18:	1181422e 	bgeu	r2,r6,10215324 <__udivdi3+0x560>
10214e1c:	00800204 	movi	r2,8
10214e20:	1007883a 	mov	r3,r2
10214e24:	3084d83a 	srl	r2,r6,r2
10214e28:	010408b4 	movhi	r4,4130
10214e2c:	21359184 	addi	r4,r4,-10682
10214e30:	2085883a 	add	r2,r4,r2
10214e34:	10800003 	ldbu	r2,0(r2)
10214e38:	10c7883a 	add	r3,r2,r3
10214e3c:	00800804 	movi	r2,32
10214e40:	10c5c83a 	sub	r2,r2,r3
10214e44:	10000526 	beq	r2,zero,10214e5c <__udivdi3+0x98>
10214e48:	80a0983a 	sll	r16,r16,r2
10214e4c:	98c6d83a 	srl	r3,r19,r3
10214e50:	30a4983a 	sll	r18,r6,r2
10214e54:	98a2983a 	sll	r17,r19,r2
10214e58:	80ecb03a 	or	r22,r16,r3
10214e5c:	902ad43a 	srli	r21,r18,16
10214e60:	b009883a 	mov	r4,r22
10214e64:	953fffcc 	andi	r20,r18,65535
10214e68:	a80b883a 	mov	r5,r21
10214e6c:	020247c0 	call	1020247c <__umodsi3>
10214e70:	b009883a 	mov	r4,r22
10214e74:	a80b883a 	mov	r5,r21
10214e78:	1027883a 	mov	r19,r2
10214e7c:	02024740 	call	10202474 <__udivsi3>
10214e80:	1021883a 	mov	r16,r2
10214e84:	8806d43a 	srli	r3,r17,16
10214e88:	9804943a 	slli	r2,r19,16
10214e8c:	8527383a 	mul	r19,r16,r20
10214e90:	10c4b03a 	or	r2,r2,r3
10214e94:	14c0052e 	bgeu	r2,r19,10214eac <__udivdi3+0xe8>
10214e98:	1485883a 	add	r2,r2,r18
10214e9c:	80ffffc4 	addi	r3,r16,-1
10214ea0:	14800136 	bltu	r2,r18,10214ea8 <__udivdi3+0xe4>
10214ea4:	14c13436 	bltu	r2,r19,10215378 <__udivdi3+0x5b4>
10214ea8:	1821883a 	mov	r16,r3
10214eac:	14e7c83a 	sub	r19,r2,r19
10214eb0:	9809883a 	mov	r4,r19
10214eb4:	a80b883a 	mov	r5,r21
10214eb8:	020247c0 	call	1020247c <__umodsi3>
10214ebc:	102d883a 	mov	r22,r2
10214ec0:	9809883a 	mov	r4,r19
10214ec4:	a80b883a 	mov	r5,r21
10214ec8:	02024740 	call	10202474 <__udivsi3>
10214ecc:	b02c943a 	slli	r22,r22,16
10214ed0:	1529383a 	mul	r20,r2,r20
10214ed4:	8c7fffcc 	andi	r17,r17,65535
10214ed8:	b462b03a 	or	r17,r22,r17
10214edc:	8d00052e 	bgeu	r17,r20,10214ef4 <__udivdi3+0x130>
10214ee0:	8ca3883a 	add	r17,r17,r18
10214ee4:	10ffffc4 	addi	r3,r2,-1
10214ee8:	8c80f636 	bltu	r17,r18,102152c4 <__udivdi3+0x500>
10214eec:	8d00f52e 	bgeu	r17,r20,102152c4 <__udivdi3+0x500>
10214ef0:	10bfff84 	addi	r2,r2,-2
10214ef4:	8020943a 	slli	r16,r16,16
10214ef8:	0007883a 	mov	r3,zero
10214efc:	1404b03a 	or	r2,r2,r16
10214f00:	00005b06 	br	10215070 <__udivdi3+0x2ac>
10214f04:	29c05836 	bltu	r5,r7,10215068 <__udivdi3+0x2a4>
10214f08:	00bfffd4 	movui	r2,65535
10214f0c:	11c0642e 	bgeu	r2,r7,102150a0 <__udivdi3+0x2dc>
10214f10:	00804034 	movhi	r2,256
10214f14:	10bfffc4 	addi	r2,r2,-1
10214f18:	11c0f32e 	bgeu	r2,r7,102152e8 <__udivdi3+0x524>
10214f1c:	00c00604 	movi	r3,24
10214f20:	180b883a 	mov	r5,r3
10214f24:	38c6d83a 	srl	r3,r7,r3
10214f28:	008408b4 	movhi	r2,4130
10214f2c:	10b59184 	addi	r2,r2,-10682
10214f30:	10c7883a 	add	r3,r2,r3
10214f34:	18c00003 	ldbu	r3,0(r3)
10214f38:	01000804 	movi	r4,32
10214f3c:	1947883a 	add	r3,r3,r5
10214f40:	20e5c83a 	sub	r18,r4,r3
10214f44:	9000661e 	bne	r18,zero,102150e0 <__udivdi3+0x31c>
10214f48:	3c00f936 	bltu	r7,r16,10215330 <__udivdi3+0x56c>
10214f4c:	9985403a 	cmpgeu	r2,r19,r6
10214f50:	0007883a 	mov	r3,zero
10214f54:	00004606 	br	10215070 <__udivdi3+0x2ac>
10214f58:	3000041e 	bne	r6,zero,10214f6c <__udivdi3+0x1a8>
10214f5c:	01000044 	movi	r4,1
10214f60:	000b883a 	mov	r5,zero
10214f64:	02024740 	call	10202474 <__udivsi3>
10214f68:	1025883a 	mov	r18,r2
10214f6c:	00bfffd4 	movui	r2,65535
10214f70:	1480562e 	bgeu	r2,r18,102150cc <__udivdi3+0x308>
10214f74:	00804034 	movhi	r2,256
10214f78:	10bfffc4 	addi	r2,r2,-1
10214f7c:	1480e32e 	bgeu	r2,r18,1021530c <__udivdi3+0x548>
10214f80:	00800604 	movi	r2,24
10214f84:	1007883a 	mov	r3,r2
10214f88:	9084d83a 	srl	r2,r18,r2
10214f8c:	010408b4 	movhi	r4,4130
10214f90:	21359184 	addi	r4,r4,-10682
10214f94:	2085883a 	add	r2,r4,r2
10214f98:	10800003 	ldbu	r2,0(r2)
10214f9c:	10c5883a 	add	r2,r2,r3
10214fa0:	00c00804 	movi	r3,32
10214fa4:	1887c83a 	sub	r3,r3,r2
10214fa8:	1800911e 	bne	r3,zero,102151f0 <__udivdi3+0x42c>
10214fac:	9028d43a 	srli	r20,r18,16
10214fb0:	84a1c83a 	sub	r16,r16,r18
10214fb4:	957fffcc 	andi	r21,r18,65535
10214fb8:	00c00044 	movi	r3,1
10214fbc:	8009883a 	mov	r4,r16
10214fc0:	a00b883a 	mov	r5,r20
10214fc4:	d8c00015 	stw	r3,0(sp)
10214fc8:	020247c0 	call	1020247c <__umodsi3>
10214fcc:	8009883a 	mov	r4,r16
10214fd0:	a00b883a 	mov	r5,r20
10214fd4:	1027883a 	mov	r19,r2
10214fd8:	02024740 	call	10202474 <__udivsi3>
10214fdc:	1021883a 	mov	r16,r2
10214fe0:	880cd43a 	srli	r6,r17,16
10214fe4:	9804943a 	slli	r2,r19,16
10214fe8:	8567383a 	mul	r19,r16,r21
10214fec:	d8c00017 	ldw	r3,0(sp)
10214ff0:	1188b03a 	or	r4,r2,r6
10214ff4:	24c0052e 	bgeu	r4,r19,1021500c <__udivdi3+0x248>
10214ff8:	2489883a 	add	r4,r4,r18
10214ffc:	80bfffc4 	addi	r2,r16,-1
10215000:	24800136 	bltu	r4,r18,10215008 <__udivdi3+0x244>
10215004:	24c0d936 	bltu	r4,r19,1021536c <__udivdi3+0x5a8>
10215008:	1021883a 	mov	r16,r2
1021500c:	24e7c83a 	sub	r19,r4,r19
10215010:	9809883a 	mov	r4,r19
10215014:	a00b883a 	mov	r5,r20
10215018:	d8c00015 	stw	r3,0(sp)
1021501c:	020247c0 	call	1020247c <__umodsi3>
10215020:	102d883a 	mov	r22,r2
10215024:	9809883a 	mov	r4,r19
10215028:	a00b883a 	mov	r5,r20
1021502c:	02024740 	call	10202474 <__udivsi3>
10215030:	b02c943a 	slli	r22,r22,16
10215034:	156b383a 	mul	r21,r2,r21
10215038:	8c7fffcc 	andi	r17,r17,65535
1021503c:	b462b03a 	or	r17,r22,r17
10215040:	d8c00017 	ldw	r3,0(sp)
10215044:	8d40052e 	bgeu	r17,r21,1021505c <__udivdi3+0x298>
10215048:	8ca3883a 	add	r17,r17,r18
1021504c:	113fffc4 	addi	r4,r2,-1
10215050:	8c809a36 	bltu	r17,r18,102152bc <__udivdi3+0x4f8>
10215054:	8d40992e 	bgeu	r17,r21,102152bc <__udivdi3+0x4f8>
10215058:	10bfff84 	addi	r2,r2,-2
1021505c:	8020943a 	slli	r16,r16,16
10215060:	1404b03a 	or	r2,r2,r16
10215064:	00000206 	br	10215070 <__udivdi3+0x2ac>
10215068:	0007883a 	mov	r3,zero
1021506c:	0005883a 	mov	r2,zero
10215070:	dfc00a17 	ldw	ra,40(sp)
10215074:	df000917 	ldw	fp,36(sp)
10215078:	ddc00817 	ldw	r23,32(sp)
1021507c:	dd800717 	ldw	r22,28(sp)
10215080:	dd400617 	ldw	r21,24(sp)
10215084:	dd000517 	ldw	r20,20(sp)
10215088:	dcc00417 	ldw	r19,16(sp)
1021508c:	dc800317 	ldw	r18,12(sp)
10215090:	dc400217 	ldw	r17,8(sp)
10215094:	dc000117 	ldw	r16,4(sp)
10215098:	dec00b04 	addi	sp,sp,44
1021509c:	f800283a 	ret
102150a0:	00803fc4 	movi	r2,255
102150a4:	11c0932e 	bgeu	r2,r7,102152f4 <__udivdi3+0x530>
102150a8:	00c00204 	movi	r3,8
102150ac:	180b883a 	mov	r5,r3
102150b0:	003f9c06 	br	10214f24 <__udivdi3+0x160>
102150b4:	00804034 	movhi	r2,256
102150b8:	10bfffc4 	addi	r2,r2,-1
102150bc:	1180902e 	bgeu	r2,r6,10215300 <__udivdi3+0x53c>
102150c0:	00800604 	movi	r2,24
102150c4:	1007883a 	mov	r3,r2
102150c8:	003f5606 	br	10214e24 <__udivdi3+0x60>
102150cc:	00803fc4 	movi	r2,255
102150d0:	1480912e 	bgeu	r2,r18,10215318 <__udivdi3+0x554>
102150d4:	00800204 	movi	r2,8
102150d8:	1007883a 	mov	r3,r2
102150dc:	003faa06 	br	10214f88 <__udivdi3+0x1c4>
102150e0:	30eed83a 	srl	r23,r6,r3
102150e4:	3c8e983a 	sll	r7,r7,r18
102150e8:	80f8d83a 	srl	fp,r16,r3
102150ec:	98c6d83a 	srl	r3,r19,r3
102150f0:	3deeb03a 	or	r23,r7,r23
102150f4:	b828d43a 	srli	r20,r23,16
102150f8:	84a0983a 	sll	r16,r16,r18
102150fc:	e009883a 	mov	r4,fp
10215100:	a00b883a 	mov	r5,r20
10215104:	80e2b03a 	or	r17,r16,r3
10215108:	34aa983a 	sll	r21,r6,r18
1021510c:	020247c0 	call	1020247c <__umodsi3>
10215110:	e009883a 	mov	r4,fp
10215114:	a00b883a 	mov	r5,r20
10215118:	102d883a 	mov	r22,r2
1021511c:	02024740 	call	10202474 <__udivsi3>
10215120:	1021883a 	mov	r16,r2
10215124:	bf3fffcc 	andi	fp,r23,65535
10215128:	b004943a 	slli	r2,r22,16
1021512c:	8808d43a 	srli	r4,r17,16
10215130:	872d383a 	mul	r22,r16,fp
10215134:	1104b03a 	or	r2,r2,r4
10215138:	1580042e 	bgeu	r2,r22,1021514c <__udivdi3+0x388>
1021513c:	15c5883a 	add	r2,r2,r23
10215140:	80ffffc4 	addi	r3,r16,-1
10215144:	15c0812e 	bgeu	r2,r23,1021534c <__udivdi3+0x588>
10215148:	1821883a 	mov	r16,r3
1021514c:	15adc83a 	sub	r22,r2,r22
10215150:	b009883a 	mov	r4,r22
10215154:	a00b883a 	mov	r5,r20
10215158:	020247c0 	call	1020247c <__umodsi3>
1021515c:	a00b883a 	mov	r5,r20
10215160:	b009883a 	mov	r4,r22
10215164:	d8800015 	stw	r2,0(sp)
10215168:	02024740 	call	10202474 <__udivsi3>
1021516c:	d8c00017 	ldw	r3,0(sp)
10215170:	170b383a 	mul	r5,r2,fp
10215174:	8c7fffcc 	andi	r17,r17,65535
10215178:	1806943a 	slli	r3,r3,16
1021517c:	1c46b03a 	or	r3,r3,r17
10215180:	1940042e 	bgeu	r3,r5,10215194 <__udivdi3+0x3d0>
10215184:	1dc7883a 	add	r3,r3,r23
10215188:	113fffc4 	addi	r4,r2,-1
1021518c:	1dc06b2e 	bgeu	r3,r23,1021533c <__udivdi3+0x578>
10215190:	2005883a 	mov	r2,r4
10215194:	8020943a 	slli	r16,r16,16
10215198:	a9ffffcc 	andi	r7,r21,65535
1021519c:	a82ad43a 	srli	r21,r21,16
102151a0:	1404b03a 	or	r2,r2,r16
102151a4:	113fffcc 	andi	r4,r2,65535
102151a8:	100cd43a 	srli	r6,r2,16
102151ac:	21d3383a 	mul	r9,r4,r7
102151b0:	2549383a 	mul	r4,r4,r21
102151b4:	31cf383a 	mul	r7,r6,r7
102151b8:	4810d43a 	srli	r8,r9,16
102151bc:	1947c83a 	sub	r3,r3,r5
102151c0:	3909883a 	add	r4,r7,r4
102151c4:	2209883a 	add	r4,r4,r8
102151c8:	354d383a 	mul	r6,r6,r21
102151cc:	21c0022e 	bgeu	r4,r7,102151d8 <__udivdi3+0x414>
102151d0:	01400074 	movhi	r5,1
102151d4:	314d883a 	add	r6,r6,r5
102151d8:	202ad43a 	srli	r21,r4,16
102151dc:	354d883a 	add	r6,r6,r21
102151e0:	19803f36 	bltu	r3,r6,102152e0 <__udivdi3+0x51c>
102151e4:	19803926 	beq	r3,r6,102152cc <__udivdi3+0x508>
102151e8:	0007883a 	mov	r3,zero
102151ec:	003fa006 	br	10215070 <__udivdi3+0x2ac>
102151f0:	90e4983a 	sll	r18,r18,r3
102151f4:	80aad83a 	srl	r21,r16,r2
102151f8:	80e0983a 	sll	r16,r16,r3
102151fc:	9028d43a 	srli	r20,r18,16
10215200:	9884d83a 	srl	r2,r19,r2
10215204:	a809883a 	mov	r4,r21
10215208:	a00b883a 	mov	r5,r20
1021520c:	80acb03a 	or	r22,r16,r2
10215210:	98e2983a 	sll	r17,r19,r3
10215214:	020247c0 	call	1020247c <__umodsi3>
10215218:	a809883a 	mov	r4,r21
1021521c:	a00b883a 	mov	r5,r20
10215220:	1021883a 	mov	r16,r2
10215224:	02024740 	call	10202474 <__udivsi3>
10215228:	957fffcc 	andi	r21,r18,65535
1021522c:	8020943a 	slli	r16,r16,16
10215230:	b00ad43a 	srli	r5,r22,16
10215234:	1567383a 	mul	r19,r2,r21
10215238:	102f883a 	mov	r23,r2
1021523c:	8148b03a 	or	r4,r16,r5
10215240:	24c0062e 	bgeu	r4,r19,1021525c <__udivdi3+0x498>
10215244:	2489883a 	add	r4,r4,r18
10215248:	10bfffc4 	addi	r2,r2,-1
1021524c:	24804536 	bltu	r4,r18,10215364 <__udivdi3+0x5a0>
10215250:	24c0442e 	bgeu	r4,r19,10215364 <__udivdi3+0x5a0>
10215254:	bdffff84 	addi	r23,r23,-2
10215258:	2489883a 	add	r4,r4,r18
1021525c:	24e7c83a 	sub	r19,r4,r19
10215260:	9809883a 	mov	r4,r19
10215264:	a00b883a 	mov	r5,r20
10215268:	020247c0 	call	1020247c <__umodsi3>
1021526c:	1021883a 	mov	r16,r2
10215270:	9809883a 	mov	r4,r19
10215274:	a00b883a 	mov	r5,r20
10215278:	02024740 	call	10202474 <__udivsi3>
1021527c:	8020943a 	slli	r16,r16,16
10215280:	1007883a 	mov	r3,r2
10215284:	1545383a 	mul	r2,r2,r21
10215288:	b13fffcc 	andi	r4,r22,65535
1021528c:	8108b03a 	or	r4,r16,r4
10215290:	2080062e 	bgeu	r4,r2,102152ac <__udivdi3+0x4e8>
10215294:	2489883a 	add	r4,r4,r18
10215298:	197fffc4 	addi	r5,r3,-1
1021529c:	24802f36 	bltu	r4,r18,1021535c <__udivdi3+0x598>
102152a0:	20802e2e 	bgeu	r4,r2,1021535c <__udivdi3+0x598>
102152a4:	18ffff84 	addi	r3,r3,-2
102152a8:	2489883a 	add	r4,r4,r18
102152ac:	b82e943a 	slli	r23,r23,16
102152b0:	20a1c83a 	sub	r16,r4,r2
102152b4:	1dc6b03a 	or	r3,r3,r23
102152b8:	003f4006 	br	10214fbc <__udivdi3+0x1f8>
102152bc:	2005883a 	mov	r2,r4
102152c0:	003f6606 	br	1021505c <__udivdi3+0x298>
102152c4:	1805883a 	mov	r2,r3
102152c8:	003f0a06 	br	10214ef4 <__udivdi3+0x130>
102152cc:	2006943a 	slli	r3,r4,16
102152d0:	9c88983a 	sll	r4,r19,r18
102152d4:	4a7fffcc 	andi	r9,r9,65535
102152d8:	1a47883a 	add	r3,r3,r9
102152dc:	20ffc22e 	bgeu	r4,r3,102151e8 <__udivdi3+0x424>
102152e0:	10bfffc4 	addi	r2,r2,-1
102152e4:	003fc006 	br	102151e8 <__udivdi3+0x424>
102152e8:	00c00404 	movi	r3,16
102152ec:	180b883a 	mov	r5,r3
102152f0:	003f0c06 	br	10214f24 <__udivdi3+0x160>
102152f4:	0007883a 	mov	r3,zero
102152f8:	000b883a 	mov	r5,zero
102152fc:	003f0906 	br	10214f24 <__udivdi3+0x160>
10215300:	00800404 	movi	r2,16
10215304:	1007883a 	mov	r3,r2
10215308:	003ec606 	br	10214e24 <__udivdi3+0x60>
1021530c:	00800404 	movi	r2,16
10215310:	1007883a 	mov	r3,r2
10215314:	003f1c06 	br	10214f88 <__udivdi3+0x1c4>
10215318:	0005883a 	mov	r2,zero
1021531c:	0007883a 	mov	r3,zero
10215320:	003f1906 	br	10214f88 <__udivdi3+0x1c4>
10215324:	0005883a 	mov	r2,zero
10215328:	0007883a 	mov	r3,zero
1021532c:	003ebd06 	br	10214e24 <__udivdi3+0x60>
10215330:	0007883a 	mov	r3,zero
10215334:	00800044 	movi	r2,1
10215338:	003f4d06 	br	10215070 <__udivdi3+0x2ac>
1021533c:	197f942e 	bgeu	r3,r5,10215190 <__udivdi3+0x3cc>
10215340:	10bfff84 	addi	r2,r2,-2
10215344:	1dc7883a 	add	r3,r3,r23
10215348:	003f9206 	br	10215194 <__udivdi3+0x3d0>
1021534c:	15bf7e2e 	bgeu	r2,r22,10215148 <__udivdi3+0x384>
10215350:	843fff84 	addi	r16,r16,-2
10215354:	15c5883a 	add	r2,r2,r23
10215358:	003f7c06 	br	1021514c <__udivdi3+0x388>
1021535c:	2807883a 	mov	r3,r5
10215360:	003fd206 	br	102152ac <__udivdi3+0x4e8>
10215364:	102f883a 	mov	r23,r2
10215368:	003fbc06 	br	1021525c <__udivdi3+0x498>
1021536c:	843fff84 	addi	r16,r16,-2
10215370:	2489883a 	add	r4,r4,r18
10215374:	003f2506 	br	1021500c <__udivdi3+0x248>
10215378:	843fff84 	addi	r16,r16,-2
1021537c:	1485883a 	add	r2,r2,r18
10215380:	003eca06 	br	10214eac <__udivdi3+0xe8>

10215384 <__umoddi3>:
10215384:	defff404 	addi	sp,sp,-48
10215388:	ddc00915 	stw	r23,36(sp)
1021538c:	dc400315 	stw	r17,12(sp)
10215390:	dc000215 	stw	r16,8(sp)
10215394:	dfc00b15 	stw	ra,44(sp)
10215398:	df000a15 	stw	fp,40(sp)
1021539c:	dd800815 	stw	r22,32(sp)
102153a0:	dd400715 	stw	r21,28(sp)
102153a4:	dd000615 	stw	r20,24(sp)
102153a8:	dcc00515 	stw	r19,20(sp)
102153ac:	dc800415 	stw	r18,16(sp)
102153b0:	2021883a 	mov	r16,r4
102153b4:	2823883a 	mov	r17,r5
102153b8:	282f883a 	mov	r23,r5
102153bc:	3800381e 	bne	r7,zero,102154a0 <__umoddi3+0x11c>
102153c0:	3027883a 	mov	r19,r6
102153c4:	2029883a 	mov	r20,r4
102153c8:	29804e2e 	bgeu	r5,r6,10215504 <__umoddi3+0x180>
102153cc:	00bfffd4 	movui	r2,65535
102153d0:	11809c36 	bltu	r2,r6,10215644 <__umoddi3+0x2c0>
102153d4:	00803fc4 	movi	r2,255
102153d8:	11813b2e 	bgeu	r2,r6,102158c8 <__umoddi3+0x544>
102153dc:	01400204 	movi	r5,8
102153e0:	2805883a 	mov	r2,r5
102153e4:	314ad83a 	srl	r5,r6,r5
102153e8:	00c408b4 	movhi	r3,4130
102153ec:	18f59184 	addi	r3,r3,-10682
102153f0:	194b883a 	add	r5,r3,r5
102153f4:	29000003 	ldbu	r4,0(r5)
102153f8:	2089883a 	add	r4,r4,r2
102153fc:	00800804 	movi	r2,32
10215400:	1105c83a 	sub	r2,r2,r4
10215404:	1000ec26 	beq	r2,zero,102157b8 <__umoddi3+0x434>
10215408:	88a2983a 	sll	r17,r17,r2
1021540c:	8108d83a 	srl	r4,r16,r4
10215410:	30a6983a 	sll	r19,r6,r2
10215414:	80a8983a 	sll	r20,r16,r2
10215418:	1025883a 	mov	r18,r2
1021541c:	892eb03a 	or	r23,r17,r4
10215420:	982cd43a 	srli	r22,r19,16
10215424:	b809883a 	mov	r4,r23
10215428:	9d7fffcc 	andi	r21,r19,65535
1021542c:	b00b883a 	mov	r5,r22
10215430:	020247c0 	call	1020247c <__umodsi3>
10215434:	b809883a 	mov	r4,r23
10215438:	b00b883a 	mov	r5,r22
1021543c:	1021883a 	mov	r16,r2
10215440:	02024740 	call	10202474 <__udivsi3>
10215444:	8020943a 	slli	r16,r16,16
10215448:	a00cd43a 	srli	r6,r20,16
1021544c:	1545383a 	mul	r2,r2,r21
10215450:	8188b03a 	or	r4,r16,r6
10215454:	2080042e 	bgeu	r4,r2,10215468 <__umoddi3+0xe4>
10215458:	24c9883a 	add	r4,r4,r19
1021545c:	24c00236 	bltu	r4,r19,10215468 <__umoddi3+0xe4>
10215460:	2080012e 	bgeu	r4,r2,10215468 <__umoddi3+0xe4>
10215464:	24c9883a 	add	r4,r4,r19
10215468:	20a3c83a 	sub	r17,r4,r2
1021546c:	8809883a 	mov	r4,r17
10215470:	b00b883a 	mov	r5,r22
10215474:	020247c0 	call	1020247c <__umodsi3>
10215478:	8809883a 	mov	r4,r17
1021547c:	b00b883a 	mov	r5,r22
10215480:	1021883a 	mov	r16,r2
10215484:	02024740 	call	10202474 <__udivsi3>
10215488:	8006943a 	slli	r3,r16,16
1021548c:	1545383a 	mul	r2,r2,r21
10215490:	a13fffcc 	andi	r4,r20,65535
10215494:	1906b03a 	or	r3,r3,r4
10215498:	1880532e 	bgeu	r3,r2,102155e8 <__umoddi3+0x264>
1021549c:	00004e06 	br	102155d8 <__umoddi3+0x254>
102154a0:	29c05536 	bltu	r5,r7,102155f8 <__umoddi3+0x274>
102154a4:	00bfffd4 	movui	r2,65535
102154a8:	11c0612e 	bgeu	r2,r7,10215630 <__umoddi3+0x2ac>
102154ac:	00804034 	movhi	r2,256
102154b0:	10bfffc4 	addi	r2,r2,-1
102154b4:	11c0f82e 	bgeu	r2,r7,10215898 <__umoddi3+0x514>
102154b8:	01400604 	movi	r5,24
102154bc:	282b883a 	mov	r21,r5
102154c0:	394ad83a 	srl	r5,r7,r5
102154c4:	00c408b4 	movhi	r3,4130
102154c8:	18f59184 	addi	r3,r3,-10682
102154cc:	194b883a 	add	r5,r3,r5
102154d0:	28800003 	ldbu	r2,0(r5)
102154d4:	00c00804 	movi	r3,32
102154d8:	156b883a 	add	r21,r2,r21
102154dc:	1d69c83a 	sub	r20,r3,r21
102154e0:	a000631e 	bne	r20,zero,10215670 <__umoddi3+0x2ec>
102154e4:	3c400136 	bltu	r7,r17,102154ec <__umoddi3+0x168>
102154e8:	81810436 	bltu	r16,r6,102158fc <__umoddi3+0x578>
102154ec:	8185c83a 	sub	r2,r16,r6
102154f0:	89e3c83a 	sub	r17,r17,r7
102154f4:	8087803a 	cmpltu	r3,r16,r2
102154f8:	88efc83a 	sub	r23,r17,r3
102154fc:	b807883a 	mov	r3,r23
10215500:	00003f06 	br	10215600 <__umoddi3+0x27c>
10215504:	3000041e 	bne	r6,zero,10215518 <__umoddi3+0x194>
10215508:	01000044 	movi	r4,1
1021550c:	000b883a 	mov	r5,zero
10215510:	02024740 	call	10202474 <__udivsi3>
10215514:	1027883a 	mov	r19,r2
10215518:	00bfffd4 	movui	r2,65535
1021551c:	14c04f2e 	bgeu	r2,r19,1021565c <__umoddi3+0x2d8>
10215520:	00804034 	movhi	r2,256
10215524:	10bfffc4 	addi	r2,r2,-1
10215528:	14c0e42e 	bgeu	r2,r19,102158bc <__umoddi3+0x538>
1021552c:	00800604 	movi	r2,24
10215530:	1007883a 	mov	r3,r2
10215534:	9884d83a 	srl	r2,r19,r2
10215538:	010408b4 	movhi	r4,4130
1021553c:	21359184 	addi	r4,r4,-10682
10215540:	2085883a 	add	r2,r4,r2
10215544:	11000003 	ldbu	r4,0(r2)
10215548:	00800804 	movi	r2,32
1021554c:	20c7883a 	add	r3,r4,r3
10215550:	10c5c83a 	sub	r2,r2,r3
10215554:	10009a1e 	bne	r2,zero,102157c0 <__umoddi3+0x43c>
10215558:	982cd43a 	srli	r22,r19,16
1021555c:	8ce3c83a 	sub	r17,r17,r19
10215560:	9c3fffcc 	andi	r16,r19,65535
10215564:	0025883a 	mov	r18,zero
10215568:	8809883a 	mov	r4,r17
1021556c:	b00b883a 	mov	r5,r22
10215570:	020247c0 	call	1020247c <__umodsi3>
10215574:	8809883a 	mov	r4,r17
10215578:	b00b883a 	mov	r5,r22
1021557c:	102b883a 	mov	r21,r2
10215580:	02024740 	call	10202474 <__udivsi3>
10215584:	a806943a 	slli	r3,r21,16
10215588:	a008d43a 	srli	r4,r20,16
1021558c:	1405383a 	mul	r2,r2,r16
10215590:	190cb03a 	or	r6,r3,r4
10215594:	3080032e 	bgeu	r6,r2,102155a4 <__umoddi3+0x220>
10215598:	34cd883a 	add	r6,r6,r19
1021559c:	34c00136 	bltu	r6,r19,102155a4 <__umoddi3+0x220>
102155a0:	3080d436 	bltu	r6,r2,102158f4 <__umoddi3+0x570>
102155a4:	30abc83a 	sub	r21,r6,r2
102155a8:	a809883a 	mov	r4,r21
102155ac:	b00b883a 	mov	r5,r22
102155b0:	020247c0 	call	1020247c <__umodsi3>
102155b4:	1023883a 	mov	r17,r2
102155b8:	a809883a 	mov	r4,r21
102155bc:	b00b883a 	mov	r5,r22
102155c0:	02024740 	call	10202474 <__udivsi3>
102155c4:	8822943a 	slli	r17,r17,16
102155c8:	1405383a 	mul	r2,r2,r16
102155cc:	a13fffcc 	andi	r4,r20,65535
102155d0:	8906b03a 	or	r3,r17,r4
102155d4:	1880042e 	bgeu	r3,r2,102155e8 <__umoddi3+0x264>
102155d8:	1cc7883a 	add	r3,r3,r19
102155dc:	1cc00236 	bltu	r3,r19,102155e8 <__umoddi3+0x264>
102155e0:	1880012e 	bgeu	r3,r2,102155e8 <__umoddi3+0x264>
102155e4:	1cc7883a 	add	r3,r3,r19
102155e8:	1887c83a 	sub	r3,r3,r2
102155ec:	1c84d83a 	srl	r2,r3,r18
102155f0:	0007883a 	mov	r3,zero
102155f4:	00000206 	br	10215600 <__umoddi3+0x27c>
102155f8:	2005883a 	mov	r2,r4
102155fc:	2807883a 	mov	r3,r5
10215600:	dfc00b17 	ldw	ra,44(sp)
10215604:	df000a17 	ldw	fp,40(sp)
10215608:	ddc00917 	ldw	r23,36(sp)
1021560c:	dd800817 	ldw	r22,32(sp)
10215610:	dd400717 	ldw	r21,28(sp)
10215614:	dd000617 	ldw	r20,24(sp)
10215618:	dcc00517 	ldw	r19,20(sp)
1021561c:	dc800417 	ldw	r18,16(sp)
10215620:	dc400317 	ldw	r17,12(sp)
10215624:	dc000217 	ldw	r16,8(sp)
10215628:	dec00c04 	addi	sp,sp,48
1021562c:	f800283a 	ret
10215630:	00803fc4 	movi	r2,255
10215634:	11c0952e 	bgeu	r2,r7,1021588c <__umoddi3+0x508>
10215638:	01400204 	movi	r5,8
1021563c:	282b883a 	mov	r21,r5
10215640:	003f9f06 	br	102154c0 <__umoddi3+0x13c>
10215644:	00804034 	movhi	r2,256
10215648:	10bfffc4 	addi	r2,r2,-1
1021564c:	1180952e 	bgeu	r2,r6,102158a4 <__umoddi3+0x520>
10215650:	01400604 	movi	r5,24
10215654:	2805883a 	mov	r2,r5
10215658:	003f6206 	br	102153e4 <__umoddi3+0x60>
1021565c:	00803fc4 	movi	r2,255
10215660:	14c0932e 	bgeu	r2,r19,102158b0 <__umoddi3+0x52c>
10215664:	00800204 	movi	r2,8
10215668:	1007883a 	mov	r3,r2
1021566c:	003fb106 	br	10215534 <__umoddi3+0x1b0>
10215670:	3548d83a 	srl	r4,r6,r21
10215674:	3d0e983a 	sll	r7,r7,r20
10215678:	8d10983a 	sll	r8,r17,r20
1021567c:	8d6cd83a 	srl	r22,r17,r21
10215680:	3922b03a 	or	r17,r7,r4
10215684:	882ed43a 	srli	r23,r17,16
10215688:	8564d83a 	srl	r18,r16,r21
1021568c:	b009883a 	mov	r4,r22
10215690:	b80b883a 	mov	r5,r23
10215694:	44a4b03a 	or	r18,r8,r18
10215698:	3526983a 	sll	r19,r6,r20
1021569c:	020247c0 	call	1020247c <__umodsi3>
102156a0:	b009883a 	mov	r4,r22
102156a4:	b80b883a 	mov	r5,r23
102156a8:	1039883a 	mov	fp,r2
102156ac:	02024740 	call	10202474 <__udivsi3>
102156b0:	102d883a 	mov	r22,r2
102156b4:	8a3fffcc 	andi	r8,r17,65535
102156b8:	e004943a 	slli	r2,fp,16
102156bc:	900cd43a 	srli	r6,r18,16
102156c0:	b239383a 	mul	fp,r22,r8
102156c4:	8520983a 	sll	r16,r16,r20
102156c8:	118ab03a 	or	r5,r2,r6
102156cc:	2f00042e 	bgeu	r5,fp,102156e0 <__umoddi3+0x35c>
102156d0:	2c4b883a 	add	r5,r5,r17
102156d4:	b0bfffc4 	addi	r2,r22,-1
102156d8:	2c40822e 	bgeu	r5,r17,102158e4 <__umoddi3+0x560>
102156dc:	102d883a 	mov	r22,r2
102156e0:	2f39c83a 	sub	fp,r5,fp
102156e4:	e009883a 	mov	r4,fp
102156e8:	b80b883a 	mov	r5,r23
102156ec:	da000115 	stw	r8,4(sp)
102156f0:	020247c0 	call	1020247c <__umodsi3>
102156f4:	e009883a 	mov	r4,fp
102156f8:	b80b883a 	mov	r5,r23
102156fc:	d8800015 	stw	r2,0(sp)
10215700:	02024740 	call	10202474 <__udivsi3>
10215704:	d9800017 	ldw	r6,0(sp)
10215708:	da000117 	ldw	r8,4(sp)
1021570c:	94bfffcc 	andi	r18,r18,65535
10215710:	300c943a 	slli	r6,r6,16
10215714:	1209383a 	mul	r4,r2,r8
10215718:	3490b03a 	or	r8,r6,r18
1021571c:	4100042e 	bgeu	r8,r4,10215730 <__umoddi3+0x3ac>
10215720:	4451883a 	add	r8,r8,r17
10215724:	10ffffc4 	addi	r3,r2,-1
10215728:	44406a2e 	bgeu	r8,r17,102158d4 <__umoddi3+0x550>
1021572c:	1805883a 	mov	r2,r3
10215730:	b012943a 	slli	r9,r22,16
10215734:	9abfffcc 	andi	r10,r19,65535
10215738:	980ed43a 	srli	r7,r19,16
1021573c:	124ab03a 	or	r5,r2,r9
10215740:	2a7fffcc 	andi	r9,r5,65535
10215744:	280ad43a 	srli	r5,r5,16
10215748:	4a8d383a 	mul	r6,r9,r10
1021574c:	49d3383a 	mul	r9,r9,r7
10215750:	2a95383a 	mul	r10,r5,r10
10215754:	3004d43a 	srli	r2,r6,16
10215758:	4111c83a 	sub	r8,r8,r4
1021575c:	5253883a 	add	r9,r10,r9
10215760:	4893883a 	add	r9,r9,r2
10215764:	29cb383a 	mul	r5,r5,r7
10215768:	4a80022e 	bgeu	r9,r10,10215774 <__umoddi3+0x3f0>
1021576c:	00800074 	movhi	r2,1
10215770:	288b883a 	add	r5,r5,r2
10215774:	4808d43a 	srli	r4,r9,16
10215778:	4812943a 	slli	r9,r9,16
1021577c:	31bfffcc 	andi	r6,r6,65535
10215780:	290b883a 	add	r5,r5,r4
10215784:	498d883a 	add	r6,r9,r6
10215788:	41403a36 	bltu	r8,r5,10215874 <__umoddi3+0x4f0>
1021578c:	41405d26 	beq	r8,r5,10215904 <__umoddi3+0x580>
10215790:	4149c83a 	sub	r4,r8,r5
10215794:	300f883a 	mov	r7,r6
10215798:	81cfc83a 	sub	r7,r16,r7
1021579c:	81c7803a 	cmpltu	r3,r16,r7
102157a0:	20c7c83a 	sub	r3,r4,r3
102157a4:	1d44983a 	sll	r2,r3,r21
102157a8:	3d0ed83a 	srl	r7,r7,r20
102157ac:	1d06d83a 	srl	r3,r3,r20
102157b0:	11c4b03a 	or	r2,r2,r7
102157b4:	003f9206 	br	10215600 <__umoddi3+0x27c>
102157b8:	0025883a 	mov	r18,zero
102157bc:	003f1806 	br	10215420 <__umoddi3+0x9c>
102157c0:	98a6983a 	sll	r19,r19,r2
102157c4:	88e8d83a 	srl	r20,r17,r3
102157c8:	80c6d83a 	srl	r3,r16,r3
102157cc:	982cd43a 	srli	r22,r19,16
102157d0:	88a2983a 	sll	r17,r17,r2
102157d4:	a009883a 	mov	r4,r20
102157d8:	b00b883a 	mov	r5,r22
102157dc:	88eab03a 	or	r21,r17,r3
102157e0:	1025883a 	mov	r18,r2
102157e4:	020247c0 	call	1020247c <__umodsi3>
102157e8:	a009883a 	mov	r4,r20
102157ec:	b00b883a 	mov	r5,r22
102157f0:	1023883a 	mov	r17,r2
102157f4:	02024740 	call	10202474 <__udivsi3>
102157f8:	9f3fffcc 	andi	fp,r19,65535
102157fc:	8822943a 	slli	r17,r17,16
10215800:	a80ad43a 	srli	r5,r21,16
10215804:	1705383a 	mul	r2,r2,fp
10215808:	84a8983a 	sll	r20,r16,r18
1021580c:	8948b03a 	or	r4,r17,r5
10215810:	2080042e 	bgeu	r4,r2,10215824 <__umoddi3+0x4a0>
10215814:	24c9883a 	add	r4,r4,r19
10215818:	24c00236 	bltu	r4,r19,10215824 <__umoddi3+0x4a0>
1021581c:	2080012e 	bgeu	r4,r2,10215824 <__umoddi3+0x4a0>
10215820:	24c9883a 	add	r4,r4,r19
10215824:	20afc83a 	sub	r23,r4,r2
10215828:	b809883a 	mov	r4,r23
1021582c:	b00b883a 	mov	r5,r22
10215830:	020247c0 	call	1020247c <__umodsi3>
10215834:	1023883a 	mov	r17,r2
10215838:	b809883a 	mov	r4,r23
1021583c:	b00b883a 	mov	r5,r22
10215840:	02024740 	call	10202474 <__udivsi3>
10215844:	8822943a 	slli	r17,r17,16
10215848:	1705383a 	mul	r2,r2,fp
1021584c:	a93fffcc 	andi	r4,r21,65535
10215850:	8908b03a 	or	r4,r17,r4
10215854:	2080042e 	bgeu	r4,r2,10215868 <__umoddi3+0x4e4>
10215858:	24c9883a 	add	r4,r4,r19
1021585c:	24c00236 	bltu	r4,r19,10215868 <__umoddi3+0x4e4>
10215860:	2080012e 	bgeu	r4,r2,10215868 <__umoddi3+0x4e4>
10215864:	24c9883a 	add	r4,r4,r19
10215868:	20a3c83a 	sub	r17,r4,r2
1021586c:	e021883a 	mov	r16,fp
10215870:	003f3d06 	br	10215568 <__umoddi3+0x1e4>
10215874:	34cfc83a 	sub	r7,r6,r19
10215878:	2c4bc83a 	sub	r5,r5,r17
1021587c:	31cd803a 	cmpltu	r6,r6,r7
10215880:	298dc83a 	sub	r6,r5,r6
10215884:	4189c83a 	sub	r4,r8,r6
10215888:	003fc306 	br	10215798 <__umoddi3+0x414>
1021588c:	000b883a 	mov	r5,zero
10215890:	002b883a 	mov	r21,zero
10215894:	003f0a06 	br	102154c0 <__umoddi3+0x13c>
10215898:	01400404 	movi	r5,16
1021589c:	282b883a 	mov	r21,r5
102158a0:	003f0706 	br	102154c0 <__umoddi3+0x13c>
102158a4:	01400404 	movi	r5,16
102158a8:	2805883a 	mov	r2,r5
102158ac:	003ecd06 	br	102153e4 <__umoddi3+0x60>
102158b0:	0005883a 	mov	r2,zero
102158b4:	0007883a 	mov	r3,zero
102158b8:	003f1e06 	br	10215534 <__umoddi3+0x1b0>
102158bc:	00800404 	movi	r2,16
102158c0:	1007883a 	mov	r3,r2
102158c4:	003f1b06 	br	10215534 <__umoddi3+0x1b0>
102158c8:	000b883a 	mov	r5,zero
102158cc:	0005883a 	mov	r2,zero
102158d0:	003ec406 	br	102153e4 <__umoddi3+0x60>
102158d4:	413f952e 	bgeu	r8,r4,1021572c <__umoddi3+0x3a8>
102158d8:	10bfff84 	addi	r2,r2,-2
102158dc:	4451883a 	add	r8,r8,r17
102158e0:	003f9306 	br	10215730 <__umoddi3+0x3ac>
102158e4:	2f3f7d2e 	bgeu	r5,fp,102156dc <__umoddi3+0x358>
102158e8:	b5bfff84 	addi	r22,r22,-2
102158ec:	2c4b883a 	add	r5,r5,r17
102158f0:	003f7b06 	br	102156e0 <__umoddi3+0x35c>
102158f4:	34cd883a 	add	r6,r6,r19
102158f8:	003f2a06 	br	102155a4 <__umoddi3+0x220>
102158fc:	8005883a 	mov	r2,r16
10215900:	003efe06 	br	102154fc <__umoddi3+0x178>
10215904:	81bfdb36 	bltu	r16,r6,10215874 <__umoddi3+0x4f0>
10215908:	300f883a 	mov	r7,r6
1021590c:	0009883a 	mov	r4,zero
10215910:	003fa106 	br	10215798 <__umoddi3+0x414>

10215914 <__eqsf2>:
10215914:	2006d5fa 	srli	r3,r4,23
10215918:	280cd5fa 	srli	r6,r5,23
1021591c:	01c02034 	movhi	r7,128
10215920:	39ffffc4 	addi	r7,r7,-1
10215924:	18c03fcc 	andi	r3,r3,255
10215928:	02003fc4 	movi	r8,255
1021592c:	3904703a 	and	r2,r7,r4
10215930:	31803fcc 	andi	r6,r6,255
10215934:	394e703a 	and	r7,r7,r5
10215938:	2008d7fa 	srli	r4,r4,31
1021593c:	280ad7fa 	srli	r5,r5,31
10215940:	1a000c26 	beq	r3,r8,10215974 <__eqsf2+0x60>
10215944:	02003fc4 	movi	r8,255
10215948:	32000326 	beq	r6,r8,10215958 <__eqsf2+0x44>
1021594c:	19800426 	beq	r3,r6,10215960 <__eqsf2+0x4c>
10215950:	00800044 	movi	r2,1
10215954:	f800283a 	ret
10215958:	383ffd1e 	bne	r7,zero,10215950 <__eqsf2+0x3c>
1021595c:	19bffc1e 	bne	r3,r6,10215950 <__eqsf2+0x3c>
10215960:	11fffb1e 	bne	r2,r7,10215950 <__eqsf2+0x3c>
10215964:	21400626 	beq	r4,r5,10215980 <__eqsf2+0x6c>
10215968:	183ff91e 	bne	r3,zero,10215950 <__eqsf2+0x3c>
1021596c:	1004c03a 	cmpne	r2,r2,zero
10215970:	f800283a 	ret
10215974:	103ff326 	beq	r2,zero,10215944 <__eqsf2+0x30>
10215978:	00800044 	movi	r2,1
1021597c:	f800283a 	ret
10215980:	0005883a 	mov	r2,zero
10215984:	f800283a 	ret

10215988 <__gesf2>:
10215988:	2004d5fa 	srli	r2,r4,23
1021598c:	2806d5fa 	srli	r3,r5,23
10215990:	01802034 	movhi	r6,128
10215994:	31bfffc4 	addi	r6,r6,-1
10215998:	10803fcc 	andi	r2,r2,255
1021599c:	01c03fc4 	movi	r7,255
102159a0:	3110703a 	and	r8,r6,r4
102159a4:	18c03fcc 	andi	r3,r3,255
102159a8:	314c703a 	and	r6,r6,r5
102159ac:	2008d7fa 	srli	r4,r4,31
102159b0:	280ad7fa 	srli	r5,r5,31
102159b4:	11c00926 	beq	r2,r7,102159dc <__gesf2+0x54>
102159b8:	19c01226 	beq	r3,r7,10215a04 <__gesf2+0x7c>
102159bc:	1000091e 	bne	r2,zero,102159e4 <__gesf2+0x5c>
102159c0:	4013003a 	cmpeq	r9,r8,zero
102159c4:	480f883a 	mov	r7,r9
102159c8:	1800091e 	bne	r3,zero,102159f0 <__gesf2+0x68>
102159cc:	3000081e 	bne	r6,zero,102159f0 <__gesf2+0x68>
102159d0:	48001026 	beq	r9,zero,10215a14 <__gesf2+0x8c>
102159d4:	0005883a 	mov	r2,zero
102159d8:	f800283a 	ret
102159dc:	4000161e 	bne	r8,zero,10215a38 <__gesf2+0xb0>
102159e0:	18800826 	beq	r3,r2,10215a04 <__gesf2+0x7c>
102159e4:	1800091e 	bne	r3,zero,10215a0c <__gesf2+0x84>
102159e8:	000f883a 	mov	r7,zero
102159ec:	30000926 	beq	r6,zero,10215a14 <__gesf2+0x8c>
102159f0:	29403fcc 	andi	r5,r5,255
102159f4:	38000626 	beq	r7,zero,10215a10 <__gesf2+0x88>
102159f8:	2800071e 	bne	r5,zero,10215a18 <__gesf2+0x90>
102159fc:	00bfffc4 	movi	r2,-1
10215a00:	f800283a 	ret
10215a04:	30000c1e 	bne	r6,zero,10215a38 <__gesf2+0xb0>
10215a08:	103fed26 	beq	r2,zero,102159c0 <__gesf2+0x38>
10215a0c:	29403fcc 	andi	r5,r5,255
10215a10:	21400326 	beq	r4,r5,10215a20 <__gesf2+0x98>
10215a14:	203ff91e 	bne	r4,zero,102159fc <__gesf2+0x74>
10215a18:	00800044 	movi	r2,1
10215a1c:	f800283a 	ret
10215a20:	18bffc16 	blt	r3,r2,10215a14 <__gesf2+0x8c>
10215a24:	10c00216 	blt	r2,r3,10215a30 <__gesf2+0xa8>
10215a28:	323ffa36 	bltu	r6,r8,10215a14 <__gesf2+0x8c>
10215a2c:	41bfe92e 	bgeu	r8,r6,102159d4 <__gesf2+0x4c>
10215a30:	203ff226 	beq	r4,zero,102159fc <__gesf2+0x74>
10215a34:	003ff806 	br	10215a18 <__gesf2+0x90>
10215a38:	00bfff84 	movi	r2,-2
10215a3c:	f800283a 	ret

10215a40 <__lesf2>:
10215a40:	2004d5fa 	srli	r2,r4,23
10215a44:	280cd5fa 	srli	r6,r5,23
10215a48:	00c02034 	movhi	r3,128
10215a4c:	18ffffc4 	addi	r3,r3,-1
10215a50:	10803fcc 	andi	r2,r2,255
10215a54:	01c03fc4 	movi	r7,255
10215a58:	1910703a 	and	r8,r3,r4
10215a5c:	31803fcc 	andi	r6,r6,255
10215a60:	1946703a 	and	r3,r3,r5
10215a64:	2008d7fa 	srli	r4,r4,31
10215a68:	280ad7fa 	srli	r5,r5,31
10215a6c:	11c00a26 	beq	r2,r7,10215a98 <__lesf2+0x58>
10215a70:	31c01526 	beq	r6,r7,10215ac8 <__lesf2+0x88>
10215a74:	10000a1e 	bne	r2,zero,10215aa0 <__lesf2+0x60>
10215a78:	4013003a 	cmpeq	r9,r8,zero
10215a7c:	480f883a 	mov	r7,r9
10215a80:	30000d26 	beq	r6,zero,10215ab8 <__lesf2+0x78>
10215a84:	29403fcc 	andi	r5,r5,255
10215a88:	38001426 	beq	r7,zero,10215adc <__lesf2+0x9c>
10215a8c:	2800081e 	bne	r5,zero,10215ab0 <__lesf2+0x70>
10215a90:	00bfffc4 	movi	r2,-1
10215a94:	f800283a 	ret
10215a98:	40000c1e 	bne	r8,zero,10215acc <__lesf2+0x8c>
10215a9c:	30800a26 	beq	r6,r2,10215ac8 <__lesf2+0x88>
10215aa0:	30000d1e 	bne	r6,zero,10215ad8 <__lesf2+0x98>
10215aa4:	000f883a 	mov	r7,zero
10215aa8:	183ff61e 	bne	r3,zero,10215a84 <__lesf2+0x44>
10215aac:	203ff81e 	bne	r4,zero,10215a90 <__lesf2+0x50>
10215ab0:	00800044 	movi	r2,1
10215ab4:	f800283a 	ret
10215ab8:	183ff21e 	bne	r3,zero,10215a84 <__lesf2+0x44>
10215abc:	483ffb26 	beq	r9,zero,10215aac <__lesf2+0x6c>
10215ac0:	0005883a 	mov	r2,zero
10215ac4:	f800283a 	ret
10215ac8:	18000226 	beq	r3,zero,10215ad4 <__lesf2+0x94>
10215acc:	00800084 	movi	r2,2
10215ad0:	f800283a 	ret
10215ad4:	103fe826 	beq	r2,zero,10215a78 <__lesf2+0x38>
10215ad8:	29403fcc 	andi	r5,r5,255
10215adc:	217ff31e 	bne	r4,r5,10215aac <__lesf2+0x6c>
10215ae0:	30bff216 	blt	r6,r2,10215aac <__lesf2+0x6c>
10215ae4:	11800216 	blt	r2,r6,10215af0 <__lesf2+0xb0>
10215ae8:	1a3ff036 	bltu	r3,r8,10215aac <__lesf2+0x6c>
10215aec:	40fff42e 	bgeu	r8,r3,10215ac0 <__lesf2+0x80>
10215af0:	203fe726 	beq	r4,zero,10215a90 <__lesf2+0x50>
10215af4:	003fee06 	br	10215ab0 <__lesf2+0x70>

10215af8 <__adddf3>:
10215af8:	02000434 	movhi	r8,16
10215afc:	423fffc4 	addi	r8,r8,-1
10215b00:	defffb04 	addi	sp,sp,-20
10215b04:	2a12703a 	and	r9,r5,r8
10215b08:	2806d7fa 	srli	r3,r5,31
10215b0c:	3a10703a 	and	r8,r7,r8
10215b10:	3804d53a 	srli	r2,r7,20
10215b14:	3014d77a 	srli	r10,r6,29
10215b18:	dc000015 	stw	r16,0(sp)
10215b1c:	481290fa 	slli	r9,r9,3
10215b20:	2820d53a 	srli	r16,r5,20
10215b24:	401090fa 	slli	r8,r8,3
10215b28:	200ad77a 	srli	r5,r4,29
10215b2c:	380ed7fa 	srli	r7,r7,31
10215b30:	dc800215 	stw	r18,8(sp)
10215b34:	dc400115 	stw	r17,4(sp)
10215b38:	dfc00415 	stw	ra,16(sp)
10215b3c:	dcc00315 	stw	r19,12(sp)
10215b40:	1c803fcc 	andi	r18,r3,255
10215b44:	8401ffcc 	andi	r16,r16,2047
10215b48:	494ab03a 	or	r5,r9,r5
10215b4c:	202290fa 	slli	r17,r4,3
10215b50:	1081ffcc 	andi	r2,r2,2047
10215b54:	4290b03a 	or	r8,r8,r10
10215b58:	300c90fa 	slli	r6,r6,3
10215b5c:	91c07026 	beq	r18,r7,10215d20 <__adddf3+0x228>
10215b60:	8087c83a 	sub	r3,r16,r2
10215b64:	00c0b30e 	bge	zero,r3,10215e34 <__adddf3+0x33c>
10215b68:	10002a1e 	bne	r2,zero,10215c14 <__adddf3+0x11c>
10215b6c:	4184b03a 	or	r2,r8,r6
10215b70:	1000991e 	bne	r2,zero,10215dd8 <__adddf3+0x2e0>
10215b74:	888001cc 	andi	r2,r17,7
10215b78:	10005b26 	beq	r2,zero,10215ce8 <__adddf3+0x1f0>
10215b7c:	88c003cc 	andi	r3,r17,15
10215b80:	00800104 	movi	r2,4
10215b84:	18805826 	beq	r3,r2,10215ce8 <__adddf3+0x1f0>
10215b88:	89800104 	addi	r6,r17,4
10215b8c:	3463803a 	cmpltu	r17,r6,r17
10215b90:	2c4b883a 	add	r5,r5,r17
10215b94:	2880202c 	andhi	r2,r5,128
10215b98:	9007883a 	mov	r3,r18
10215b9c:	3023883a 	mov	r17,r6
10215ba0:	10005426 	beq	r2,zero,10215cf4 <__adddf3+0x1fc>
10215ba4:	84000044 	addi	r16,r16,1
10215ba8:	0081ffc4 	movi	r2,2047
10215bac:	8080c126 	beq	r16,r2,10215eb4 <__adddf3+0x3bc>
10215bb0:	013fe034 	movhi	r4,65408
10215bb4:	213fffc4 	addi	r4,r4,-1
10215bb8:	290a703a 	and	r5,r5,r4
10215bbc:	2804977a 	slli	r2,r5,29
10215bc0:	280a927a 	slli	r5,r5,9
10215bc4:	8822d0fa 	srli	r17,r17,3
10215bc8:	8401ffcc 	andi	r16,r16,2047
10215bcc:	2808d33a 	srli	r4,r5,12
10215bd0:	1444b03a 	or	r2,r2,r17
10215bd4:	8401ffcc 	andi	r16,r16,2047
10215bd8:	800a953a 	slli	r5,r16,20
10215bdc:	18c03fcc 	andi	r3,r3,255
10215be0:	04000434 	movhi	r16,16
10215be4:	180697fa 	slli	r3,r3,31
10215be8:	843fffc4 	addi	r16,r16,-1
10215bec:	2420703a 	and	r16,r4,r16
10215bf0:	8160b03a 	or	r16,r16,r5
10215bf4:	80c6b03a 	or	r3,r16,r3
10215bf8:	dfc00417 	ldw	ra,16(sp)
10215bfc:	dcc00317 	ldw	r19,12(sp)
10215c00:	dc800217 	ldw	r18,8(sp)
10215c04:	dc400117 	ldw	r17,4(sp)
10215c08:	dc000017 	ldw	r16,0(sp)
10215c0c:	dec00504 	addi	sp,sp,20
10215c10:	f800283a 	ret
10215c14:	0081ffc4 	movi	r2,2047
10215c18:	80bfd626 	beq	r16,r2,10215b74 <__adddf3+0x7c>
10215c1c:	42002034 	orhi	r8,r8,128
10215c20:	00800e04 	movi	r2,56
10215c24:	10c0a616 	blt	r2,r3,10215ec0 <__adddf3+0x3c8>
10215c28:	008007c4 	movi	r2,31
10215c2c:	10c0c916 	blt	r2,r3,10215f54 <__adddf3+0x45c>
10215c30:	00800804 	movi	r2,32
10215c34:	10c5c83a 	sub	r2,r2,r3
10215c38:	408e983a 	sll	r7,r8,r2
10215c3c:	30c8d83a 	srl	r4,r6,r3
10215c40:	3084983a 	sll	r2,r6,r2
10215c44:	40c6d83a 	srl	r3,r8,r3
10215c48:	390cb03a 	or	r6,r7,r4
10215c4c:	1004c03a 	cmpne	r2,r2,zero
10215c50:	308cb03a 	or	r6,r6,r2
10215c54:	898dc83a 	sub	r6,r17,r6
10215c58:	89a3803a 	cmpltu	r17,r17,r6
10215c5c:	28cbc83a 	sub	r5,r5,r3
10215c60:	2c4bc83a 	sub	r5,r5,r17
10215c64:	3023883a 	mov	r17,r6
10215c68:	2880202c 	andhi	r2,r5,128
10215c6c:	10006d26 	beq	r2,zero,10215e24 <__adddf3+0x32c>
10215c70:	04c02034 	movhi	r19,128
10215c74:	9cffffc4 	addi	r19,r19,-1
10215c78:	2ce6703a 	and	r19,r5,r19
10215c7c:	98007e26 	beq	r19,zero,10215e78 <__adddf3+0x380>
10215c80:	9809883a 	mov	r4,r19
10215c84:	021822c0 	call	1021822c <__clzsi2>
10215c88:	10fffe04 	addi	r3,r2,-8
10215c8c:	010007c4 	movi	r4,31
10215c90:	20c07f16 	blt	r4,r3,10215e90 <__adddf3+0x398>
10215c94:	01400a04 	movi	r5,40
10215c98:	2885c83a 	sub	r2,r5,r2
10215c9c:	888ad83a 	srl	r5,r17,r2
10215ca0:	98e6983a 	sll	r19,r19,r3
10215ca4:	88e2983a 	sll	r17,r17,r3
10215ca8:	2ce6b03a 	or	r19,r5,r19
10215cac:	1c007c16 	blt	r3,r16,10215ea0 <__adddf3+0x3a8>
10215cb0:	1c21c83a 	sub	r16,r3,r16
10215cb4:	81400044 	addi	r5,r16,1
10215cb8:	00c007c4 	movi	r3,31
10215cbc:	19409816 	blt	r3,r5,10215f20 <__adddf3+0x428>
10215cc0:	1c21c83a 	sub	r16,r3,r16
10215cc4:	8c08983a 	sll	r4,r17,r16
10215cc8:	8946d83a 	srl	r3,r17,r5
10215ccc:	9c20983a 	sll	r16,r19,r16
10215cd0:	2008c03a 	cmpne	r4,r4,zero
10215cd4:	994ad83a 	srl	r5,r19,r5
10215cd8:	1c06b03a 	or	r3,r3,r16
10215cdc:	1922b03a 	or	r17,r3,r4
10215ce0:	0021883a 	mov	r16,zero
10215ce4:	003fa306 	br	10215b74 <__adddf3+0x7c>
10215ce8:	2880202c 	andhi	r2,r5,128
10215cec:	9007883a 	mov	r3,r18
10215cf0:	103fac1e 	bne	r2,zero,10215ba4 <__adddf3+0xac>
10215cf4:	2804977a 	slli	r2,r5,29
10215cf8:	8822d0fa 	srli	r17,r17,3
10215cfc:	0101ffc4 	movi	r4,2047
10215d00:	280ad0fa 	srli	r5,r5,3
10215d04:	1444b03a 	or	r2,r2,r17
10215d08:	81002c26 	beq	r16,r4,10215dbc <__adddf3+0x2c4>
10215d0c:	8120703a 	and	r16,r16,r4
10215d10:	01000434 	movhi	r4,16
10215d14:	213fffc4 	addi	r4,r4,-1
10215d18:	2908703a 	and	r4,r5,r4
10215d1c:	003fad06 	br	10215bd4 <__adddf3+0xdc>
10215d20:	8089c83a 	sub	r4,r16,r2
10215d24:	01006a0e 	bge	zero,r4,10215ed0 <__adddf3+0x3d8>
10215d28:	10003326 	beq	r2,zero,10215df8 <__adddf3+0x300>
10215d2c:	0081ffc4 	movi	r2,2047
10215d30:	80bf9026 	beq	r16,r2,10215b74 <__adddf3+0x7c>
10215d34:	42002034 	orhi	r8,r8,128
10215d38:	00800e04 	movi	r2,56
10215d3c:	1100b116 	blt	r2,r4,10216004 <__adddf3+0x50c>
10215d40:	008007c4 	movi	r2,31
10215d44:	1100e216 	blt	r2,r4,102160d0 <__adddf3+0x5d8>
10215d48:	00800804 	movi	r2,32
10215d4c:	1105c83a 	sub	r2,r2,r4
10215d50:	4092983a 	sll	r9,r8,r2
10215d54:	310ed83a 	srl	r7,r6,r4
10215d58:	3084983a 	sll	r2,r6,r2
10215d5c:	4110d83a 	srl	r8,r8,r4
10215d60:	49ccb03a 	or	r6,r9,r7
10215d64:	1004c03a 	cmpne	r2,r2,zero
10215d68:	308cb03a 	or	r6,r6,r2
10215d6c:	344d883a 	add	r6,r6,r17
10215d70:	3463803a 	cmpltu	r17,r6,r17
10215d74:	414b883a 	add	r5,r8,r5
10215d78:	2c4b883a 	add	r5,r5,r17
10215d7c:	3023883a 	mov	r17,r6
10215d80:	2880202c 	andhi	r2,r5,128
10215d84:	10002726 	beq	r2,zero,10215e24 <__adddf3+0x32c>
10215d88:	84000044 	addi	r16,r16,1
10215d8c:	0081ffc4 	movi	r2,2047
10215d90:	8080ae26 	beq	r16,r2,1021604c <__adddf3+0x554>
10215d94:	00bfe034 	movhi	r2,65408
10215d98:	10bfffc4 	addi	r2,r2,-1
10215d9c:	288a703a 	and	r5,r5,r2
10215da0:	880cd07a 	srli	r6,r17,1
10215da4:	280897fa 	slli	r4,r5,31
10215da8:	88c0004c 	andi	r3,r17,1
10215dac:	30e2b03a 	or	r17,r6,r3
10215db0:	280ad07a 	srli	r5,r5,1
10215db4:	8922b03a 	or	r17,r17,r4
10215db8:	003f6e06 	br	10215b74 <__adddf3+0x7c>
10215dbc:	1148b03a 	or	r4,r2,r5
10215dc0:	20003c26 	beq	r4,zero,10215eb4 <__adddf3+0x3bc>
10215dc4:	29000234 	orhi	r4,r5,8
10215dc8:	01400434 	movhi	r5,16
10215dcc:	297fffc4 	addi	r5,r5,-1
10215dd0:	2148703a 	and	r4,r4,r5
10215dd4:	003f7f06 	br	10215bd4 <__adddf3+0xdc>
10215dd8:	18ffffc4 	addi	r3,r3,-1
10215ddc:	18004d1e 	bne	r3,zero,10215f14 <__adddf3+0x41c>
10215de0:	898dc83a 	sub	r6,r17,r6
10215de4:	89a3803a 	cmpltu	r17,r17,r6
10215de8:	2a0bc83a 	sub	r5,r5,r8
10215dec:	2c4bc83a 	sub	r5,r5,r17
10215df0:	3023883a 	mov	r17,r6
10215df4:	003f9c06 	br	10215c68 <__adddf3+0x170>
10215df8:	4184b03a 	or	r2,r8,r6
10215dfc:	103f5d26 	beq	r2,zero,10215b74 <__adddf3+0x7c>
10215e00:	213fffc4 	addi	r4,r4,-1
10215e04:	203fd926 	beq	r4,zero,10215d6c <__adddf3+0x274>
10215e08:	0081ffc4 	movi	r2,2047
10215e0c:	80bfca1e 	bne	r16,r2,10215d38 <__adddf3+0x240>
10215e10:	003f5806 	br	10215b74 <__adddf3+0x7c>
10215e14:	10c8b03a 	or	r4,r2,r3
10215e18:	20008b26 	beq	r4,zero,10216048 <__adddf3+0x550>
10215e1c:	100b883a 	mov	r5,r2
10215e20:	1823883a 	mov	r17,r3
10215e24:	888001cc 	andi	r2,r17,7
10215e28:	103f541e 	bne	r2,zero,10215b7c <__adddf3+0x84>
10215e2c:	9007883a 	mov	r3,r18
10215e30:	003fb006 	br	10215cf4 <__adddf3+0x1fc>
10215e34:	1800531e 	bne	r3,zero,10215f84 <__adddf3+0x48c>
10215e38:	80800044 	addi	r2,r16,1
10215e3c:	1081ffcc 	andi	r2,r2,2047
10215e40:	00c00044 	movi	r3,1
10215e44:	1880990e 	bge	r3,r2,102160ac <__adddf3+0x5b4>
10215e48:	8985c83a 	sub	r2,r17,r6
10215e4c:	8887803a 	cmpltu	r3,r17,r2
10215e50:	2a27c83a 	sub	r19,r5,r8
10215e54:	98e7c83a 	sub	r19,r19,r3
10215e58:	98c0202c 	andhi	r3,r19,128
10215e5c:	18006226 	beq	r3,zero,10215fe8 <__adddf3+0x4f0>
10215e60:	3463c83a 	sub	r17,r6,r17
10215e64:	4151c83a 	sub	r8,r8,r5
10215e68:	344d803a 	cmpltu	r6,r6,r17
10215e6c:	41a7c83a 	sub	r19,r8,r6
10215e70:	3825883a 	mov	r18,r7
10215e74:	983f821e 	bne	r19,zero,10215c80 <__adddf3+0x188>
10215e78:	8809883a 	mov	r4,r17
10215e7c:	021822c0 	call	1021822c <__clzsi2>
10215e80:	10800804 	addi	r2,r2,32
10215e84:	10fffe04 	addi	r3,r2,-8
10215e88:	010007c4 	movi	r4,31
10215e8c:	20ff810e 	bge	r4,r3,10215c94 <__adddf3+0x19c>
10215e90:	14fff604 	addi	r19,r2,-40
10215e94:	8ce6983a 	sll	r19,r17,r19
10215e98:	0023883a 	mov	r17,zero
10215e9c:	1c3f840e 	bge	r3,r16,10215cb0 <__adddf3+0x1b8>
10215ea0:	017fe034 	movhi	r5,65408
10215ea4:	297fffc4 	addi	r5,r5,-1
10215ea8:	80e1c83a 	sub	r16,r16,r3
10215eac:	994a703a 	and	r5,r19,r5
10215eb0:	003f3006 	br	10215b74 <__adddf3+0x7c>
10215eb4:	0009883a 	mov	r4,zero
10215eb8:	0005883a 	mov	r2,zero
10215ebc:	003f4506 	br	10215bd4 <__adddf3+0xdc>
10215ec0:	418cb03a 	or	r6,r8,r6
10215ec4:	300cc03a 	cmpne	r6,r6,zero
10215ec8:	0007883a 	mov	r3,zero
10215ecc:	003f6106 	br	10215c54 <__adddf3+0x15c>
10215ed0:	2000921e 	bne	r4,zero,1021611c <__adddf3+0x624>
10215ed4:	80800044 	addi	r2,r16,1
10215ed8:	11c1ffcc 	andi	r7,r2,2047
10215edc:	01000044 	movi	r4,1
10215ee0:	21c0610e 	bge	r4,r7,10216068 <__adddf3+0x570>
10215ee4:	0101ffc4 	movi	r4,2047
10215ee8:	1100a326 	beq	r2,r4,10216178 <__adddf3+0x680>
10215eec:	344d883a 	add	r6,r6,r17
10215ef0:	3463803a 	cmpltu	r17,r6,r17
10215ef4:	414b883a 	add	r5,r8,r5
10215ef8:	2c4b883a 	add	r5,r5,r17
10215efc:	282297fa 	slli	r17,r5,31
10215f00:	300cd07a 	srli	r6,r6,1
10215f04:	280ad07a 	srli	r5,r5,1
10215f08:	1021883a 	mov	r16,r2
10215f0c:	89a2b03a 	or	r17,r17,r6
10215f10:	003f1806 	br	10215b74 <__adddf3+0x7c>
10215f14:	0081ffc4 	movi	r2,2047
10215f18:	80bf411e 	bne	r16,r2,10215c20 <__adddf3+0x128>
10215f1c:	003f1506 	br	10215b74 <__adddf3+0x7c>
10215f20:	80bff844 	addi	r2,r16,-31
10215f24:	00c00804 	movi	r3,32
10215f28:	9884d83a 	srl	r2,r19,r2
10215f2c:	28c04a26 	beq	r5,r3,10216058 <__adddf3+0x560>
10215f30:	00c00fc4 	movi	r3,63
10215f34:	1c21c83a 	sub	r16,r3,r16
10215f38:	9c26983a 	sll	r19,r19,r16
10215f3c:	9c62b03a 	or	r17,r19,r17
10215f40:	8822c03a 	cmpne	r17,r17,zero
10215f44:	88a2b03a 	or	r17,r17,r2
10215f48:	000b883a 	mov	r5,zero
10215f4c:	0021883a 	mov	r16,zero
10215f50:	003fb406 	br	10215e24 <__adddf3+0x32c>
10215f54:	18bff804 	addi	r2,r3,-32
10215f58:	01000804 	movi	r4,32
10215f5c:	4084d83a 	srl	r2,r8,r2
10215f60:	19003f26 	beq	r3,r4,10216060 <__adddf3+0x568>
10215f64:	01001004 	movi	r4,64
10215f68:	20c7c83a 	sub	r3,r4,r3
10215f6c:	40d0983a 	sll	r8,r8,r3
10215f70:	418cb03a 	or	r6,r8,r6
10215f74:	300cc03a 	cmpne	r6,r6,zero
10215f78:	308cb03a 	or	r6,r6,r2
10215f7c:	0007883a 	mov	r3,zero
10215f80:	003f3406 	br	10215c54 <__adddf3+0x15c>
10215f84:	80002326 	beq	r16,zero,10216014 <__adddf3+0x51c>
10215f88:	0101ffc4 	movi	r4,2047
10215f8c:	11005e26 	beq	r2,r4,10216108 <__adddf3+0x610>
10215f90:	00c7c83a 	sub	r3,zero,r3
10215f94:	29402034 	orhi	r5,r5,128
10215f98:	01000e04 	movi	r4,56
10215f9c:	20c07216 	blt	r4,r3,10216168 <__adddf3+0x670>
10215fa0:	010007c4 	movi	r4,31
10215fa4:	20c0ce16 	blt	r4,r3,102162e0 <__adddf3+0x7e8>
10215fa8:	01000804 	movi	r4,32
10215fac:	20c9c83a 	sub	r4,r4,r3
10215fb0:	2914983a 	sll	r10,r5,r4
10215fb4:	88d2d83a 	srl	r9,r17,r3
10215fb8:	8908983a 	sll	r4,r17,r4
10215fbc:	28c6d83a 	srl	r3,r5,r3
10215fc0:	5262b03a 	or	r17,r10,r9
10215fc4:	2008c03a 	cmpne	r4,r4,zero
10215fc8:	8922b03a 	or	r17,r17,r4
10215fcc:	3463c83a 	sub	r17,r6,r17
10215fd0:	40c7c83a 	sub	r3,r8,r3
10215fd4:	344d803a 	cmpltu	r6,r6,r17
10215fd8:	198bc83a 	sub	r5,r3,r6
10215fdc:	1021883a 	mov	r16,r2
10215fe0:	3825883a 	mov	r18,r7
10215fe4:	003f2006 	br	10215c68 <__adddf3+0x170>
10215fe8:	9886b03a 	or	r3,r19,r2
10215fec:	1800141e 	bne	r3,zero,10216040 <__adddf3+0x548>
10215ff0:	0007883a 	mov	r3,zero
10215ff4:	000b883a 	mov	r5,zero
10215ff8:	0023883a 	mov	r17,zero
10215ffc:	0021883a 	mov	r16,zero
10216000:	003f3c06 	br	10215cf4 <__adddf3+0x1fc>
10216004:	418cb03a 	or	r6,r8,r6
10216008:	300cc03a 	cmpne	r6,r6,zero
1021600c:	0011883a 	mov	r8,zero
10216010:	003f5606 	br	10215d6c <__adddf3+0x274>
10216014:	2c48b03a 	or	r4,r5,r17
10216018:	20003b26 	beq	r4,zero,10216108 <__adddf3+0x610>
1021601c:	00c6303a 	nor	r3,zero,r3
10216020:	1800371e 	bne	r3,zero,10216100 <__adddf3+0x608>
10216024:	3463c83a 	sub	r17,r6,r17
10216028:	414bc83a 	sub	r5,r8,r5
1021602c:	344d803a 	cmpltu	r6,r6,r17
10216030:	298bc83a 	sub	r5,r5,r6
10216034:	1021883a 	mov	r16,r2
10216038:	3825883a 	mov	r18,r7
1021603c:	003f0a06 	br	10215c68 <__adddf3+0x170>
10216040:	1023883a 	mov	r17,r2
10216044:	003f0d06 	br	10215c7c <__adddf3+0x184>
10216048:	0007883a 	mov	r3,zero
1021604c:	000b883a 	mov	r5,zero
10216050:	0023883a 	mov	r17,zero
10216054:	003f2706 	br	10215cf4 <__adddf3+0x1fc>
10216058:	0027883a 	mov	r19,zero
1021605c:	003fb706 	br	10215f3c <__adddf3+0x444>
10216060:	0011883a 	mov	r8,zero
10216064:	003fc206 	br	10215f70 <__adddf3+0x478>
10216068:	2c44b03a 	or	r2,r5,r17
1021606c:	8000871e 	bne	r16,zero,1021628c <__adddf3+0x794>
10216070:	1000b126 	beq	r2,zero,10216338 <__adddf3+0x840>
10216074:	4184b03a 	or	r2,r8,r6
10216078:	103ebe26 	beq	r2,zero,10215b74 <__adddf3+0x7c>
1021607c:	3445883a 	add	r2,r6,r17
10216080:	1463803a 	cmpltu	r17,r2,r17
10216084:	414b883a 	add	r5,r8,r5
10216088:	2c4b883a 	add	r5,r5,r17
1021608c:	28c0202c 	andhi	r3,r5,128
10216090:	1023883a 	mov	r17,r2
10216094:	183f6326 	beq	r3,zero,10215e24 <__adddf3+0x32c>
10216098:	00bfe034 	movhi	r2,65408
1021609c:	10bfffc4 	addi	r2,r2,-1
102160a0:	2021883a 	mov	r16,r4
102160a4:	288a703a 	and	r5,r5,r2
102160a8:	003eb206 	br	10215b74 <__adddf3+0x7c>
102160ac:	2c44b03a 	or	r2,r5,r17
102160b0:	8000251e 	bne	r16,zero,10216148 <__adddf3+0x650>
102160b4:	10004b1e 	bne	r2,zero,102161e4 <__adddf3+0x6ec>
102160b8:	4184b03a 	or	r2,r8,r6
102160bc:	103fe226 	beq	r2,zero,10216048 <__adddf3+0x550>
102160c0:	400b883a 	mov	r5,r8
102160c4:	3023883a 	mov	r17,r6
102160c8:	3825883a 	mov	r18,r7
102160cc:	003ea906 	br	10215b74 <__adddf3+0x7c>
102160d0:	20bff804 	addi	r2,r4,-32
102160d4:	01c00804 	movi	r7,32
102160d8:	4084d83a 	srl	r2,r8,r2
102160dc:	21c07e26 	beq	r4,r7,102162d8 <__adddf3+0x7e0>
102160e0:	01c01004 	movi	r7,64
102160e4:	3909c83a 	sub	r4,r7,r4
102160e8:	4110983a 	sll	r8,r8,r4
102160ec:	418cb03a 	or	r6,r8,r6
102160f0:	300cc03a 	cmpne	r6,r6,zero
102160f4:	308cb03a 	or	r6,r6,r2
102160f8:	0011883a 	mov	r8,zero
102160fc:	003f1b06 	br	10215d6c <__adddf3+0x274>
10216100:	0101ffc4 	movi	r4,2047
10216104:	113fa41e 	bne	r2,r4,10215f98 <__adddf3+0x4a0>
10216108:	400b883a 	mov	r5,r8
1021610c:	3023883a 	mov	r17,r6
10216110:	1021883a 	mov	r16,r2
10216114:	3825883a 	mov	r18,r7
10216118:	003e9606 	br	10215b74 <__adddf3+0x7c>
1021611c:	80001a1e 	bne	r16,zero,10216188 <__adddf3+0x690>
10216120:	2c4eb03a 	or	r7,r5,r17
10216124:	38005526 	beq	r7,zero,1021627c <__adddf3+0x784>
10216128:	0108303a 	nor	r4,zero,r4
1021612c:	2000511e 	bne	r4,zero,10216274 <__adddf3+0x77c>
10216130:	89a3883a 	add	r17,r17,r6
10216134:	414b883a 	add	r5,r8,r5
10216138:	898d803a 	cmpltu	r6,r17,r6
1021613c:	298b883a 	add	r5,r5,r6
10216140:	1021883a 	mov	r16,r2
10216144:	003f0e06 	br	10215d80 <__adddf3+0x288>
10216148:	1000341e 	bne	r2,zero,1021621c <__adddf3+0x724>
1021614c:	4184b03a 	or	r2,r8,r6
10216150:	10006f26 	beq	r2,zero,10216310 <__adddf3+0x818>
10216154:	400b883a 	mov	r5,r8
10216158:	3023883a 	mov	r17,r6
1021615c:	3825883a 	mov	r18,r7
10216160:	0401ffc4 	movi	r16,2047
10216164:	003e8306 	br	10215b74 <__adddf3+0x7c>
10216168:	2c62b03a 	or	r17,r5,r17
1021616c:	8822c03a 	cmpne	r17,r17,zero
10216170:	0007883a 	mov	r3,zero
10216174:	003f9506 	br	10215fcc <__adddf3+0x4d4>
10216178:	1021883a 	mov	r16,r2
1021617c:	000b883a 	mov	r5,zero
10216180:	0023883a 	mov	r17,zero
10216184:	003edb06 	br	10215cf4 <__adddf3+0x1fc>
10216188:	01c1ffc4 	movi	r7,2047
1021618c:	11c03b26 	beq	r2,r7,1021627c <__adddf3+0x784>
10216190:	0109c83a 	sub	r4,zero,r4
10216194:	29402034 	orhi	r5,r5,128
10216198:	01c00e04 	movi	r7,56
1021619c:	39006216 	blt	r7,r4,10216328 <__adddf3+0x830>
102161a0:	01c007c4 	movi	r7,31
102161a4:	39006b16 	blt	r7,r4,10216354 <__adddf3+0x85c>
102161a8:	01c00804 	movi	r7,32
102161ac:	390fc83a 	sub	r7,r7,r4
102161b0:	29d4983a 	sll	r10,r5,r7
102161b4:	8912d83a 	srl	r9,r17,r4
102161b8:	89ce983a 	sll	r7,r17,r7
102161bc:	2908d83a 	srl	r4,r5,r4
102161c0:	5262b03a 	or	r17,r10,r9
102161c4:	380ac03a 	cmpne	r5,r7,zero
102161c8:	8962b03a 	or	r17,r17,r5
102161cc:	89a3883a 	add	r17,r17,r6
102161d0:	2211883a 	add	r8,r4,r8
102161d4:	898d803a 	cmpltu	r6,r17,r6
102161d8:	418b883a 	add	r5,r8,r6
102161dc:	1021883a 	mov	r16,r2
102161e0:	003ee706 	br	10215d80 <__adddf3+0x288>
102161e4:	4184b03a 	or	r2,r8,r6
102161e8:	103e6226 	beq	r2,zero,10215b74 <__adddf3+0x7c>
102161ec:	8987c83a 	sub	r3,r17,r6
102161f0:	88c9803a 	cmpltu	r4,r17,r3
102161f4:	2a05c83a 	sub	r2,r5,r8
102161f8:	1105c83a 	sub	r2,r2,r4
102161fc:	1100202c 	andhi	r4,r2,128
10216200:	203f0426 	beq	r4,zero,10215e14 <__adddf3+0x31c>
10216204:	3463c83a 	sub	r17,r6,r17
10216208:	414bc83a 	sub	r5,r8,r5
1021620c:	344d803a 	cmpltu	r6,r6,r17
10216210:	298bc83a 	sub	r5,r5,r6
10216214:	3825883a 	mov	r18,r7
10216218:	003e5606 	br	10215b74 <__adddf3+0x7c>
1021621c:	4184b03a 	or	r2,r8,r6
10216220:	10002b26 	beq	r2,zero,102162d0 <__adddf3+0x7d8>
10216224:	2804d0fa 	srli	r2,r5,3
10216228:	8822d0fa 	srli	r17,r17,3
1021622c:	280a977a 	slli	r5,r5,29
10216230:	10c0022c 	andhi	r3,r2,8
10216234:	2c62b03a 	or	r17,r5,r17
10216238:	18000826 	beq	r3,zero,1021625c <__adddf3+0x764>
1021623c:	4008d0fa 	srli	r4,r8,3
10216240:	20c0022c 	andhi	r3,r4,8
10216244:	1800051e 	bne	r3,zero,1021625c <__adddf3+0x764>
10216248:	300cd0fa 	srli	r6,r6,3
1021624c:	4010977a 	slli	r8,r8,29
10216250:	2005883a 	mov	r2,r4
10216254:	3825883a 	mov	r18,r7
10216258:	41a2b03a 	or	r17,r8,r6
1021625c:	880ad77a 	srli	r5,r17,29
10216260:	100490fa 	slli	r2,r2,3
10216264:	882290fa 	slli	r17,r17,3
10216268:	0401ffc4 	movi	r16,2047
1021626c:	288ab03a 	or	r5,r5,r2
10216270:	003e4006 	br	10215b74 <__adddf3+0x7c>
10216274:	01c1ffc4 	movi	r7,2047
10216278:	11ffc71e 	bne	r2,r7,10216198 <__adddf3+0x6a0>
1021627c:	400b883a 	mov	r5,r8
10216280:	3023883a 	mov	r17,r6
10216284:	1021883a 	mov	r16,r2
10216288:	003e3a06 	br	10215b74 <__adddf3+0x7c>
1021628c:	10002d26 	beq	r2,zero,10216344 <__adddf3+0x84c>
10216290:	4184b03a 	or	r2,r8,r6
10216294:	10000e26 	beq	r2,zero,102162d0 <__adddf3+0x7d8>
10216298:	2804d0fa 	srli	r2,r5,3
1021629c:	8822d0fa 	srli	r17,r17,3
102162a0:	280a977a 	slli	r5,r5,29
102162a4:	10c0022c 	andhi	r3,r2,8
102162a8:	2c62b03a 	or	r17,r5,r17
102162ac:	183feb26 	beq	r3,zero,1021625c <__adddf3+0x764>
102162b0:	4008d0fa 	srli	r4,r8,3
102162b4:	20c0022c 	andhi	r3,r4,8
102162b8:	183fe81e 	bne	r3,zero,1021625c <__adddf3+0x764>
102162bc:	300cd0fa 	srli	r6,r6,3
102162c0:	4010977a 	slli	r8,r8,29
102162c4:	2005883a 	mov	r2,r4
102162c8:	41a2b03a 	or	r17,r8,r6
102162cc:	003fe306 	br	1021625c <__adddf3+0x764>
102162d0:	0401ffc4 	movi	r16,2047
102162d4:	003e2706 	br	10215b74 <__adddf3+0x7c>
102162d8:	0011883a 	mov	r8,zero
102162dc:	003f8306 	br	102160ec <__adddf3+0x5f4>
102162e0:	193ff804 	addi	r4,r3,-32
102162e4:	02400804 	movi	r9,32
102162e8:	2908d83a 	srl	r4,r5,r4
102162ec:	1a402526 	beq	r3,r9,10216384 <__adddf3+0x88c>
102162f0:	02401004 	movi	r9,64
102162f4:	48c7c83a 	sub	r3,r9,r3
102162f8:	28ca983a 	sll	r5,r5,r3
102162fc:	2c62b03a 	or	r17,r5,r17
10216300:	8822c03a 	cmpne	r17,r17,zero
10216304:	8922b03a 	or	r17,r17,r4
10216308:	0007883a 	mov	r3,zero
1021630c:	003f2f06 	br	10215fcc <__adddf3+0x4d4>
10216310:	01402034 	movhi	r5,128
10216314:	0007883a 	mov	r3,zero
10216318:	297fffc4 	addi	r5,r5,-1
1021631c:	047ffe04 	movi	r17,-8
10216320:	0401ffc4 	movi	r16,2047
10216324:	003e7306 	br	10215cf4 <__adddf3+0x1fc>
10216328:	2c62b03a 	or	r17,r5,r17
1021632c:	8822c03a 	cmpne	r17,r17,zero
10216330:	0009883a 	mov	r4,zero
10216334:	003fa506 	br	102161cc <__adddf3+0x6d4>
10216338:	400b883a 	mov	r5,r8
1021633c:	3023883a 	mov	r17,r6
10216340:	003e0c06 	br	10215b74 <__adddf3+0x7c>
10216344:	400b883a 	mov	r5,r8
10216348:	3023883a 	mov	r17,r6
1021634c:	0401ffc4 	movi	r16,2047
10216350:	003e0806 	br	10215b74 <__adddf3+0x7c>
10216354:	21fff804 	addi	r7,r4,-32
10216358:	02400804 	movi	r9,32
1021635c:	29ced83a 	srl	r7,r5,r7
10216360:	22400a26 	beq	r4,r9,1021638c <__adddf3+0x894>
10216364:	02401004 	movi	r9,64
10216368:	4909c83a 	sub	r4,r9,r4
1021636c:	290a983a 	sll	r5,r5,r4
10216370:	2c62b03a 	or	r17,r5,r17
10216374:	8822c03a 	cmpne	r17,r17,zero
10216378:	89e2b03a 	or	r17,r17,r7
1021637c:	0009883a 	mov	r4,zero
10216380:	003f9206 	br	102161cc <__adddf3+0x6d4>
10216384:	000b883a 	mov	r5,zero
10216388:	003fdc06 	br	102162fc <__adddf3+0x804>
1021638c:	000b883a 	mov	r5,zero
10216390:	003ff706 	br	10216370 <__adddf3+0x878>

10216394 <__divdf3>:
10216394:	defff204 	addi	sp,sp,-56
10216398:	dd000815 	stw	r20,32(sp)
1021639c:	2828d53a 	srli	r20,r5,20
102163a0:	dd800a15 	stw	r22,40(sp)
102163a4:	282cd7fa 	srli	r22,r5,31
102163a8:	dc000415 	stw	r16,16(sp)
102163ac:	04000434 	movhi	r16,16
102163b0:	df000c15 	stw	fp,48(sp)
102163b4:	dcc00715 	stw	r19,28(sp)
102163b8:	dc800615 	stw	r18,24(sp)
102163bc:	dc400515 	stw	r17,20(sp)
102163c0:	843fffc4 	addi	r16,r16,-1
102163c4:	dfc00d15 	stw	ra,52(sp)
102163c8:	ddc00b15 	stw	r23,44(sp)
102163cc:	dd400915 	stw	r21,36(sp)
102163d0:	a501ffcc 	andi	r20,r20,2047
102163d4:	2025883a 	mov	r18,r4
102163d8:	2027883a 	mov	r19,r4
102163dc:	2c22703a 	and	r17,r5,r16
102163e0:	b7003fcc 	andi	fp,r22,255
102163e4:	a0005e26 	beq	r20,zero,10216560 <__divdf3+0x1cc>
102163e8:	0081ffc4 	movi	r2,2047
102163ec:	a0803526 	beq	r20,r2,102164c4 <__divdf3+0x130>
102163f0:	8c000434 	orhi	r16,r17,16
102163f4:	2004d77a 	srli	r2,r4,29
102163f8:	802090fa 	slli	r16,r16,3
102163fc:	202690fa 	slli	r19,r4,3
10216400:	a53f0044 	addi	r20,r20,-1023
10216404:	80a2b03a 	or	r17,r16,r2
10216408:	0025883a 	mov	r18,zero
1021640c:	0011883a 	mov	r8,zero
10216410:	380ad53a 	srli	r5,r7,20
10216414:	382ed7fa 	srli	r23,r7,31
10216418:	04000434 	movhi	r16,16
1021641c:	843fffc4 	addi	r16,r16,-1
10216420:	2941ffcc 	andi	r5,r5,2047
10216424:	302b883a 	mov	r21,r6
10216428:	3c20703a 	and	r16,r7,r16
1021642c:	ba403fcc 	andi	r9,r23,255
10216430:	28006726 	beq	r5,zero,102165d0 <__divdf3+0x23c>
10216434:	0081ffc4 	movi	r2,2047
10216438:	28805f26 	beq	r5,r2,102165b8 <__divdf3+0x224>
1021643c:	84000434 	orhi	r16,r16,16
10216440:	3004d77a 	srli	r2,r6,29
10216444:	802090fa 	slli	r16,r16,3
10216448:	302a90fa 	slli	r21,r6,3
1021644c:	297f0044 	addi	r5,r5,-1023
10216450:	80a0b03a 	or	r16,r16,r2
10216454:	000f883a 	mov	r7,zero
10216458:	3c86b03a 	or	r3,r7,r18
1021645c:	180690ba 	slli	r3,r3,2
10216460:	00840874 	movhi	r2,4129
10216464:	10992104 	addi	r2,r2,25732
10216468:	1887883a 	add	r3,r3,r2
1021646c:	18c00017 	ldw	r3,0(r3)
10216470:	b5c8f03a 	xor	r4,r22,r23
10216474:	200d883a 	mov	r6,r4
10216478:	24803fcc 	andi	r18,r4,255
1021647c:	a169c83a 	sub	r20,r20,r5
10216480:	1800683a 	jmp	r3
10216484:	102166cc 	andi	zero,r2,34203
10216488:	102164fc 	xorhi	zero,r2,34195
1021648c:	10216690 	cmplti	zero,r2,-31334
10216490:	102164e0 	cmpeqi	zero,r2,-31341
10216494:	10216690 	cmplti	zero,r2,-31334
10216498:	10216664 	muli	zero,r2,-31335
1021649c:	10216690 	cmplti	zero,r2,-31334
102164a0:	102164e0 	cmpeqi	zero,r2,-31341
102164a4:	102164fc 	xorhi	zero,r2,34195
102164a8:	102164fc 	xorhi	zero,r2,34195
102164ac:	10216664 	muli	zero,r2,-31335
102164b0:	102164e0 	cmpeqi	zero,r2,-31341
102164b4:	102164f0 	cmpltui	zero,r2,34195
102164b8:	102164f0 	cmpltui	zero,r2,34195
102164bc:	102164f0 	cmpltui	zero,r2,34195
102164c0:	102166a0 	cmpeqi	zero,r2,-31334
102164c4:	8904b03a 	or	r2,r17,r4
102164c8:	1000631e 	bne	r2,zero,10216658 <__divdf3+0x2c4>
102164cc:	04800204 	movi	r18,8
102164d0:	0023883a 	mov	r17,zero
102164d4:	0027883a 	mov	r19,zero
102164d8:	02000084 	movi	r8,2
102164dc:	003fcc06 	br	10216410 <__divdf3+0x7c>
102164e0:	8023883a 	mov	r17,r16
102164e4:	a827883a 	mov	r19,r21
102164e8:	4839883a 	mov	fp,r9
102164ec:	3811883a 	mov	r8,r7
102164f0:	00800084 	movi	r2,2
102164f4:	40812a1e 	bne	r8,r2,102169a0 <__divdf3+0x60c>
102164f8:	e025883a 	mov	r18,fp
102164fc:	9180004c 	andi	r6,r18,1
10216500:	0101ffc4 	movi	r4,2047
10216504:	000b883a 	mov	r5,zero
10216508:	0027883a 	mov	r19,zero
1021650c:	2008953a 	slli	r4,r4,20
10216510:	30c03fcc 	andi	r3,r6,255
10216514:	04000434 	movhi	r16,16
10216518:	180697fa 	slli	r3,r3,31
1021651c:	843fffc4 	addi	r16,r16,-1
10216520:	2c20703a 	and	r16,r5,r16
10216524:	8120b03a 	or	r16,r16,r4
10216528:	80c6b03a 	or	r3,r16,r3
1021652c:	9805883a 	mov	r2,r19
10216530:	dfc00d17 	ldw	ra,52(sp)
10216534:	df000c17 	ldw	fp,48(sp)
10216538:	ddc00b17 	ldw	r23,44(sp)
1021653c:	dd800a17 	ldw	r22,40(sp)
10216540:	dd400917 	ldw	r21,36(sp)
10216544:	dd000817 	ldw	r20,32(sp)
10216548:	dcc00717 	ldw	r19,28(sp)
1021654c:	dc800617 	ldw	r18,24(sp)
10216550:	dc400517 	ldw	r17,20(sp)
10216554:	dc000417 	ldw	r16,16(sp)
10216558:	dec00e04 	addi	sp,sp,56
1021655c:	f800283a 	ret
10216560:	8904b03a 	or	r2,r17,r4
10216564:	10003726 	beq	r2,zero,10216644 <__divdf3+0x2b0>
10216568:	88011c26 	beq	r17,zero,102169dc <__divdf3+0x648>
1021656c:	8809883a 	mov	r4,r17
10216570:	d9800315 	stw	r6,12(sp)
10216574:	d9c00115 	stw	r7,4(sp)
10216578:	021822c0 	call	1021822c <__clzsi2>
1021657c:	d9800317 	ldw	r6,12(sp)
10216580:	d9c00117 	ldw	r7,4(sp)
10216584:	1007883a 	mov	r3,r2
10216588:	01000a04 	movi	r4,40
1021658c:	1cfffe04 	addi	r19,r3,-8
10216590:	20c9c83a 	sub	r4,r4,r3
10216594:	8cca983a 	sll	r5,r17,r19
10216598:	9108d83a 	srl	r4,r18,r4
1021659c:	94e6983a 	sll	r19,r18,r19
102165a0:	2162b03a 	or	r17,r4,r5
102165a4:	053f0344 	movi	r20,-1011
102165a8:	a0e9c83a 	sub	r20,r20,r3
102165ac:	0025883a 	mov	r18,zero
102165b0:	0011883a 	mov	r8,zero
102165b4:	003f9606 	br	10216410 <__divdf3+0x7c>
102165b8:	8184b03a 	or	r2,r16,r6
102165bc:	10001f1e 	bne	r2,zero,1021663c <__divdf3+0x2a8>
102165c0:	0021883a 	mov	r16,zero
102165c4:	002b883a 	mov	r21,zero
102165c8:	01c00084 	movi	r7,2
102165cc:	003fa206 	br	10216458 <__divdf3+0xc4>
102165d0:	8184b03a 	or	r2,r16,r6
102165d4:	10001526 	beq	r2,zero,1021662c <__divdf3+0x298>
102165d8:	80010c26 	beq	r16,zero,10216a0c <__divdf3+0x678>
102165dc:	8009883a 	mov	r4,r16
102165e0:	d9800315 	stw	r6,12(sp)
102165e4:	da000215 	stw	r8,8(sp)
102165e8:	da400015 	stw	r9,0(sp)
102165ec:	021822c0 	call	1021822c <__clzsi2>
102165f0:	d9800317 	ldw	r6,12(sp)
102165f4:	da000217 	ldw	r8,8(sp)
102165f8:	da400017 	ldw	r9,0(sp)
102165fc:	1007883a 	mov	r3,r2
10216600:	01000a04 	movi	r4,40
10216604:	1d7ffe04 	addi	r21,r3,-8
10216608:	20c9c83a 	sub	r4,r4,r3
1021660c:	8560983a 	sll	r16,r16,r21
10216610:	3108d83a 	srl	r4,r6,r4
10216614:	356a983a 	sll	r21,r6,r21
10216618:	2420b03a 	or	r16,r4,r16
1021661c:	017f0344 	movi	r5,-1011
10216620:	28cbc83a 	sub	r5,r5,r3
10216624:	000f883a 	mov	r7,zero
10216628:	003f8b06 	br	10216458 <__divdf3+0xc4>
1021662c:	0021883a 	mov	r16,zero
10216630:	002b883a 	mov	r21,zero
10216634:	01c00044 	movi	r7,1
10216638:	003f8706 	br	10216458 <__divdf3+0xc4>
1021663c:	01c000c4 	movi	r7,3
10216640:	003f8506 	br	10216458 <__divdf3+0xc4>
10216644:	04800104 	movi	r18,4
10216648:	0023883a 	mov	r17,zero
1021664c:	0027883a 	mov	r19,zero
10216650:	02000044 	movi	r8,1
10216654:	003f6e06 	br	10216410 <__divdf3+0x7c>
10216658:	04800304 	movi	r18,12
1021665c:	020000c4 	movi	r8,3
10216660:	003f6b06 	br	10216410 <__divdf3+0x7c>
10216664:	01400434 	movhi	r5,16
10216668:	000d883a 	mov	r6,zero
1021666c:	297fffc4 	addi	r5,r5,-1
10216670:	04ffffc4 	movi	r19,-1
10216674:	0101ffc4 	movi	r4,2047
10216678:	003fa406 	br	1021650c <__divdf3+0x178>
1021667c:	043f0084 	movi	r16,-1022
10216680:	8521c83a 	sub	r16,r16,r20
10216684:	00800e04 	movi	r2,56
10216688:	1401200e 	bge	r2,r16,10216b0c <__divdf3+0x778>
1021668c:	9180004c 	andi	r6,r18,1
10216690:	0009883a 	mov	r4,zero
10216694:	000b883a 	mov	r5,zero
10216698:	0027883a 	mov	r19,zero
1021669c:	003f9b06 	br	1021650c <__divdf3+0x178>
102166a0:	8880022c 	andhi	r2,r17,8
102166a4:	1000c726 	beq	r2,zero,102169c4 <__divdf3+0x630>
102166a8:	8080022c 	andhi	r2,r16,8
102166ac:	1000c51e 	bne	r2,zero,102169c4 <__divdf3+0x630>
102166b0:	00800434 	movhi	r2,16
102166b4:	81400234 	orhi	r5,r16,8
102166b8:	10bfffc4 	addi	r2,r2,-1
102166bc:	b80d883a 	mov	r6,r23
102166c0:	288a703a 	and	r5,r5,r2
102166c4:	a827883a 	mov	r19,r21
102166c8:	003fea06 	br	10216674 <__divdf3+0x2e0>
102166cc:	8440ea36 	bltu	r16,r17,10216a78 <__divdf3+0x6e4>
102166d0:	8c00e826 	beq	r17,r16,10216a74 <__divdf3+0x6e0>
102166d4:	a53fffc4 	addi	r20,r20,-1
102166d8:	882d883a 	mov	r22,r17
102166dc:	000d883a 	mov	r6,zero
102166e0:	a804d63a 	srli	r2,r21,24
102166e4:	8020923a 	slli	r16,r16,8
102166e8:	b009883a 	mov	r4,r22
102166ec:	d9800315 	stw	r6,12(sp)
102166f0:	1420b03a 	or	r16,r2,r16
102166f4:	802ed43a 	srli	r23,r16,16
102166f8:	873fffcc 	andi	fp,r16,65535
102166fc:	a82a923a 	slli	r21,r21,8
10216700:	b80b883a 	mov	r5,r23
10216704:	02024740 	call	10202474 <__udivsi3>
10216708:	b009883a 	mov	r4,r22
1021670c:	b80b883a 	mov	r5,r23
10216710:	1023883a 	mov	r17,r2
10216714:	020247c0 	call	1020247c <__umodsi3>
10216718:	1004943a 	slli	r2,r2,16
1021671c:	9808d43a 	srli	r4,r19,16
10216720:	8f2d383a 	mul	r22,r17,fp
10216724:	d9800317 	ldw	r6,12(sp)
10216728:	1106b03a 	or	r3,r2,r4
1021672c:	1d80062e 	bgeu	r3,r22,10216748 <__divdf3+0x3b4>
10216730:	1c07883a 	add	r3,r3,r16
10216734:	88bfffc4 	addi	r2,r17,-1
10216738:	1c00dc36 	bltu	r3,r16,10216aac <__divdf3+0x718>
1021673c:	1d80db2e 	bgeu	r3,r22,10216aac <__divdf3+0x718>
10216740:	8c7fff84 	addi	r17,r17,-2
10216744:	1c07883a 	add	r3,r3,r16
10216748:	1dadc83a 	sub	r22,r3,r22
1021674c:	b009883a 	mov	r4,r22
10216750:	b80b883a 	mov	r5,r23
10216754:	d9800315 	stw	r6,12(sp)
10216758:	02024740 	call	10202474 <__udivsi3>
1021675c:	b009883a 	mov	r4,r22
10216760:	b80b883a 	mov	r5,r23
10216764:	d8800015 	stw	r2,0(sp)
10216768:	020247c0 	call	1020247c <__umodsi3>
1021676c:	da400017 	ldw	r9,0(sp)
10216770:	1004943a 	slli	r2,r2,16
10216774:	9cffffcc 	andi	r19,r19,65535
10216778:	4f07383a 	mul	r3,r9,fp
1021677c:	14c8b03a 	or	r4,r2,r19
10216780:	d9800317 	ldw	r6,12(sp)
10216784:	20c0062e 	bgeu	r4,r3,102167a0 <__divdf3+0x40c>
10216788:	2409883a 	add	r4,r4,r16
1021678c:	48bfffc4 	addi	r2,r9,-1
10216790:	2400c436 	bltu	r4,r16,10216aa4 <__divdf3+0x710>
10216794:	20c0c32e 	bgeu	r4,r3,10216aa4 <__divdf3+0x710>
10216798:	4a7fff84 	addi	r9,r9,-2
1021679c:	2409883a 	add	r4,r4,r16
102167a0:	8822943a 	slli	r17,r17,16
102167a4:	a80ed43a 	srli	r7,r21,16
102167a8:	aa3fffcc 	andi	r8,r21,65535
102167ac:	4c62b03a 	or	r17,r9,r17
102167b0:	8816d43a 	srli	r11,r17,16
102167b4:	897fffcc 	andi	r5,r17,65535
102167b8:	2a15383a 	mul	r10,r5,r8
102167bc:	5a19383a 	mul	r12,r11,r8
102167c0:	29cb383a 	mul	r5,r5,r7
102167c4:	5012d43a 	srli	r9,r10,16
102167c8:	20c5c83a 	sub	r2,r4,r3
102167cc:	614b883a 	add	r5,r12,r5
102167d0:	2a4b883a 	add	r5,r5,r9
102167d4:	59c7383a 	mul	r3,r11,r7
102167d8:	2b00022e 	bgeu	r5,r12,102167e4 <__divdf3+0x450>
102167dc:	01000074 	movhi	r4,1
102167e0:	1907883a 	add	r3,r3,r4
102167e4:	2808d43a 	srli	r4,r5,16
102167e8:	280a943a 	slli	r5,r5,16
102167ec:	54ffffcc 	andi	r19,r10,65535
102167f0:	1907883a 	add	r3,r3,r4
102167f4:	2ccb883a 	add	r5,r5,r19
102167f8:	10c09336 	bltu	r2,r3,10216a48 <__divdf3+0x6b4>
102167fc:	10c0ad26 	beq	r2,r3,10216ab4 <__divdf3+0x720>
10216800:	10c7c83a 	sub	r3,r2,r3
10216804:	3167c83a 	sub	r19,r6,r5
10216808:	34ed803a 	cmpltu	r22,r6,r19
1021680c:	1dadc83a 	sub	r22,r3,r22
10216810:	b400b226 	beq	r22,r16,10216adc <__divdf3+0x748>
10216814:	b009883a 	mov	r4,r22
10216818:	b80b883a 	mov	r5,r23
1021681c:	d9c00115 	stw	r7,4(sp)
10216820:	da000215 	stw	r8,8(sp)
10216824:	02024740 	call	10202474 <__udivsi3>
10216828:	b009883a 	mov	r4,r22
1021682c:	b80b883a 	mov	r5,r23
10216830:	d8800315 	stw	r2,12(sp)
10216834:	020247c0 	call	1020247c <__umodsi3>
10216838:	d9800317 	ldw	r6,12(sp)
1021683c:	1004943a 	slli	r2,r2,16
10216840:	9808d43a 	srli	r4,r19,16
10216844:	372d383a 	mul	r22,r6,fp
10216848:	d9c00117 	ldw	r7,4(sp)
1021684c:	1106b03a 	or	r3,r2,r4
10216850:	da000217 	ldw	r8,8(sp)
10216854:	1d80062e 	bgeu	r3,r22,10216870 <__divdf3+0x4dc>
10216858:	1c07883a 	add	r3,r3,r16
1021685c:	30bfffc4 	addi	r2,r6,-1
10216860:	1c00a036 	bltu	r3,r16,10216ae4 <__divdf3+0x750>
10216864:	1d809f2e 	bgeu	r3,r22,10216ae4 <__divdf3+0x750>
10216868:	31bfff84 	addi	r6,r6,-2
1021686c:	1c07883a 	add	r3,r3,r16
10216870:	1dadc83a 	sub	r22,r3,r22
10216874:	b009883a 	mov	r4,r22
10216878:	b80b883a 	mov	r5,r23
1021687c:	d9800315 	stw	r6,12(sp)
10216880:	d9c00115 	stw	r7,4(sp)
10216884:	da000215 	stw	r8,8(sp)
10216888:	02024740 	call	10202474 <__udivsi3>
1021688c:	b009883a 	mov	r4,r22
10216890:	b80b883a 	mov	r5,r23
10216894:	d8800015 	stw	r2,0(sp)
10216898:	020247c0 	call	1020247c <__umodsi3>
1021689c:	da400017 	ldw	r9,0(sp)
102168a0:	1004943a 	slli	r2,r2,16
102168a4:	993fffcc 	andi	r4,r19,65535
102168a8:	4f39383a 	mul	fp,r9,fp
102168ac:	1106b03a 	or	r3,r2,r4
102168b0:	d9800317 	ldw	r6,12(sp)
102168b4:	d9c00117 	ldw	r7,4(sp)
102168b8:	da000217 	ldw	r8,8(sp)
102168bc:	1f00062e 	bgeu	r3,fp,102168d8 <__divdf3+0x544>
102168c0:	1c07883a 	add	r3,r3,r16
102168c4:	48bfffc4 	addi	r2,r9,-1
102168c8:	1c008836 	bltu	r3,r16,10216aec <__divdf3+0x758>
102168cc:	1f00872e 	bgeu	r3,fp,10216aec <__divdf3+0x758>
102168d0:	4a7fff84 	addi	r9,r9,-2
102168d4:	1c07883a 	add	r3,r3,r16
102168d8:	3008943a 	slli	r4,r6,16
102168dc:	1f07c83a 	sub	r3,r3,fp
102168e0:	4926b03a 	or	r19,r9,r4
102168e4:	993fffcc 	andi	r4,r19,65535
102168e8:	980cd43a 	srli	r6,r19,16
102168ec:	220b383a 	mul	r5,r4,r8
102168f0:	21c5383a 	mul	r2,r4,r7
102168f4:	3211383a 	mul	r8,r6,r8
102168f8:	2808d43a 	srli	r4,r5,16
102168fc:	31cf383a 	mul	r7,r6,r7
10216900:	4085883a 	add	r2,r8,r2
10216904:	1105883a 	add	r2,r2,r4
10216908:	1200022e 	bgeu	r2,r8,10216914 <__divdf3+0x580>
1021690c:	01000074 	movhi	r4,1
10216910:	390f883a 	add	r7,r7,r4
10216914:	1008d43a 	srli	r4,r2,16
10216918:	1004943a 	slli	r2,r2,16
1021691c:	297fffcc 	andi	r5,r5,65535
10216920:	390f883a 	add	r7,r7,r4
10216924:	1145883a 	add	r2,r2,r5
10216928:	19c06536 	bltu	r3,r7,10216ac0 <__divdf3+0x72c>
1021692c:	19c09f26 	beq	r3,r7,10216bac <__divdf3+0x818>
10216930:	9cc00054 	ori	r19,r19,1
10216934:	a100ffc4 	addi	r4,r20,1023
10216938:	013f500e 	bge	zero,r4,1021667c <__divdf3+0x2e8>
1021693c:	988001cc 	andi	r2,r19,7
10216940:	10000726 	beq	r2,zero,10216960 <__divdf3+0x5cc>
10216944:	98c003cc 	andi	r3,r19,15
10216948:	00800104 	movi	r2,4
1021694c:	18800426 	beq	r3,r2,10216960 <__divdf3+0x5cc>
10216950:	9885883a 	add	r2,r19,r2
10216954:	14e1803a 	cmpltu	r16,r2,r19
10216958:	8c23883a 	add	r17,r17,r16
1021695c:	1027883a 	mov	r19,r2
10216960:	8880402c 	andhi	r2,r17,256
10216964:	10000426 	beq	r2,zero,10216978 <__divdf3+0x5e4>
10216968:	00bfc034 	movhi	r2,65280
1021696c:	10bfffc4 	addi	r2,r2,-1
10216970:	a1010004 	addi	r4,r20,1024
10216974:	88a2703a 	and	r17,r17,r2
10216978:	0081ff84 	movi	r2,2046
1021697c:	113edf16 	blt	r2,r4,102164fc <__divdf3+0x168>
10216980:	9826d0fa 	srli	r19,r19,3
10216984:	8804977a 	slli	r2,r17,29
10216988:	8820927a 	slli	r16,r17,9
1021698c:	2101ffcc 	andi	r4,r4,2047
10216990:	14e6b03a 	or	r19,r2,r19
10216994:	800ad33a 	srli	r5,r16,12
10216998:	9180004c 	andi	r6,r18,1
1021699c:	003edb06 	br	1021650c <__divdf3+0x178>
102169a0:	008000c4 	movi	r2,3
102169a4:	4080a826 	beq	r8,r2,10216c48 <__divdf3+0x8b4>
102169a8:	00800044 	movi	r2,1
102169ac:	4080551e 	bne	r8,r2,10216b04 <__divdf3+0x770>
102169b0:	e00d883a 	mov	r6,fp
102169b4:	0009883a 	mov	r4,zero
102169b8:	000b883a 	mov	r5,zero
102169bc:	0027883a 	mov	r19,zero
102169c0:	003ed206 	br	1021650c <__divdf3+0x178>
102169c4:	00800434 	movhi	r2,16
102169c8:	89400234 	orhi	r5,r17,8
102169cc:	10bfffc4 	addi	r2,r2,-1
102169d0:	b00d883a 	mov	r6,r22
102169d4:	288a703a 	and	r5,r5,r2
102169d8:	003f2606 	br	10216674 <__divdf3+0x2e0>
102169dc:	d9800315 	stw	r6,12(sp)
102169e0:	d9c00115 	stw	r7,4(sp)
102169e4:	021822c0 	call	1021822c <__clzsi2>
102169e8:	10c00804 	addi	r3,r2,32
102169ec:	010009c4 	movi	r4,39
102169f0:	d9800317 	ldw	r6,12(sp)
102169f4:	d9c00117 	ldw	r7,4(sp)
102169f8:	20fee30e 	bge	r4,r3,10216588 <__divdf3+0x1f4>
102169fc:	117ffe04 	addi	r5,r2,-8
10216a00:	9162983a 	sll	r17,r18,r5
10216a04:	0027883a 	mov	r19,zero
10216a08:	003ee606 	br	102165a4 <__divdf3+0x210>
10216a0c:	3009883a 	mov	r4,r6
10216a10:	d9800315 	stw	r6,12(sp)
10216a14:	da000215 	stw	r8,8(sp)
10216a18:	da400015 	stw	r9,0(sp)
10216a1c:	021822c0 	call	1021822c <__clzsi2>
10216a20:	10c00804 	addi	r3,r2,32
10216a24:	010009c4 	movi	r4,39
10216a28:	d9800317 	ldw	r6,12(sp)
10216a2c:	da000217 	ldw	r8,8(sp)
10216a30:	da400017 	ldw	r9,0(sp)
10216a34:	20fef20e 	bge	r4,r3,10216600 <__divdf3+0x26c>
10216a38:	10bffe04 	addi	r2,r2,-8
10216a3c:	a8a0983a 	sll	r16,r21,r2
10216a40:	002b883a 	mov	r21,zero
10216a44:	003ef506 	br	1021661c <__divdf3+0x288>
10216a48:	354d883a 	add	r6,r6,r21
10216a4c:	3549803a 	cmpltu	r4,r6,r21
10216a50:	2409883a 	add	r4,r4,r16
10216a54:	2089883a 	add	r4,r4,r2
10216a58:	88bfffc4 	addi	r2,r17,-1
10216a5c:	81000c2e 	bgeu	r16,r4,10216a90 <__divdf3+0x6fc>
10216a60:	20c04436 	bltu	r4,r3,10216b74 <__divdf3+0x7e0>
10216a64:	19006f26 	beq	r3,r4,10216c24 <__divdf3+0x890>
10216a68:	20c7c83a 	sub	r3,r4,r3
10216a6c:	1023883a 	mov	r17,r2
10216a70:	003f6406 	br	10216804 <__divdf3+0x470>
10216a74:	9d7f1736 	bltu	r19,r21,102166d4 <__divdf3+0x340>
10216a78:	9806d07a 	srli	r3,r19,1
10216a7c:	880497fa 	slli	r2,r17,31
10216a80:	980c97fa 	slli	r6,r19,31
10216a84:	882cd07a 	srli	r22,r17,1
10216a88:	18a6b03a 	or	r19,r3,r2
10216a8c:	003f1406 	br	102166e0 <__divdf3+0x34c>
10216a90:	243ff51e 	bne	r4,r16,10216a68 <__divdf3+0x6d4>
10216a94:	357ff22e 	bgeu	r6,r21,10216a60 <__divdf3+0x6cc>
10216a98:	80c7c83a 	sub	r3,r16,r3
10216a9c:	1023883a 	mov	r17,r2
10216aa0:	003f5806 	br	10216804 <__divdf3+0x470>
10216aa4:	1013883a 	mov	r9,r2
10216aa8:	003f3d06 	br	102167a0 <__divdf3+0x40c>
10216aac:	1023883a 	mov	r17,r2
10216ab0:	003f2506 	br	10216748 <__divdf3+0x3b4>
10216ab4:	317fe436 	bltu	r6,r5,10216a48 <__divdf3+0x6b4>
10216ab8:	0007883a 	mov	r3,zero
10216abc:	003f5106 	br	10216804 <__divdf3+0x470>
10216ac0:	1c07883a 	add	r3,r3,r16
10216ac4:	993fffc4 	addi	r4,r19,-1
10216ac8:	1c000a2e 	bgeu	r3,r16,10216af4 <__divdf3+0x760>
10216acc:	2027883a 	mov	r19,r4
10216ad0:	19ff971e 	bne	r3,r7,10216930 <__divdf3+0x59c>
10216ad4:	a8bf961e 	bne	r21,r2,10216930 <__divdf3+0x59c>
10216ad8:	003f9606 	br	10216934 <__divdf3+0x5a0>
10216adc:	04ffffc4 	movi	r19,-1
10216ae0:	003f9406 	br	10216934 <__divdf3+0x5a0>
10216ae4:	100d883a 	mov	r6,r2
10216ae8:	003f6106 	br	10216870 <__divdf3+0x4dc>
10216aec:	1013883a 	mov	r9,r2
10216af0:	003f7906 	br	102168d8 <__divdf3+0x544>
10216af4:	19c02636 	bltu	r3,r7,10216b90 <__divdf3+0x7fc>
10216af8:	38c04d26 	beq	r7,r3,10216c30 <__divdf3+0x89c>
10216afc:	2027883a 	mov	r19,r4
10216b00:	003f8b06 	br	10216930 <__divdf3+0x59c>
10216b04:	e025883a 	mov	r18,fp
10216b08:	003f8a06 	br	10216934 <__divdf3+0x5a0>
10216b0c:	008007c4 	movi	r2,31
10216b10:	14002a16 	blt	r2,r16,10216bbc <__divdf3+0x828>
10216b14:	a5010784 	addi	r20,r20,1054
10216b18:	8d04983a 	sll	r2,r17,r20
10216b1c:	9c06d83a 	srl	r3,r19,r16
10216b20:	9d28983a 	sll	r20,r19,r20
10216b24:	8c20d83a 	srl	r16,r17,r16
10216b28:	1886b03a 	or	r3,r3,r2
10216b2c:	a004c03a 	cmpne	r2,r20,zero
10216b30:	1884b03a 	or	r2,r3,r2
10216b34:	10c001cc 	andi	r3,r2,7
10216b38:	18000726 	beq	r3,zero,10216b58 <__divdf3+0x7c4>
10216b3c:	110003cc 	andi	r4,r2,15
10216b40:	00c00104 	movi	r3,4
10216b44:	20c00426 	beq	r4,r3,10216b58 <__divdf3+0x7c4>
10216b48:	10c00104 	addi	r3,r2,4
10216b4c:	1885803a 	cmpltu	r2,r3,r2
10216b50:	80a1883a 	add	r16,r16,r2
10216b54:	1805883a 	mov	r2,r3
10216b58:	80c0202c 	andhi	r3,r16,128
10216b5c:	18002d26 	beq	r3,zero,10216c14 <__divdf3+0x880>
10216b60:	9180004c 	andi	r6,r18,1
10216b64:	01000044 	movi	r4,1
10216b68:	000b883a 	mov	r5,zero
10216b6c:	0027883a 	mov	r19,zero
10216b70:	003e6606 	br	1021650c <__divdf3+0x178>
10216b74:	354d883a 	add	r6,r6,r21
10216b78:	356d803a 	cmpltu	r22,r6,r21
10216b7c:	b42d883a 	add	r22,r22,r16
10216b80:	b12d883a 	add	r22,r22,r4
10216b84:	8c7fff84 	addi	r17,r17,-2
10216b88:	b0c7c83a 	sub	r3,r22,r3
10216b8c:	003f1d06 	br	10216804 <__divdf3+0x470>
10216b90:	ad4b883a 	add	r5,r21,r21
10216b94:	2d6b803a 	cmpltu	r21,r5,r21
10216b98:	ac2b883a 	add	r21,r21,r16
10216b9c:	1d47883a 	add	r3,r3,r21
10216ba0:	993fff84 	addi	r4,r19,-2
10216ba4:	282b883a 	mov	r21,r5
10216ba8:	003fc806 	br	10216acc <__divdf3+0x738>
10216bac:	103fc41e 	bne	r2,zero,10216ac0 <__divdf3+0x72c>
10216bb0:	002b883a 	mov	r21,zero
10216bb4:	a8bf5e1e 	bne	r21,r2,10216930 <__divdf3+0x59c>
10216bb8:	003f5e06 	br	10216934 <__divdf3+0x5a0>
10216bbc:	00bef884 	movi	r2,-1054
10216bc0:	1505c83a 	sub	r2,r2,r20
10216bc4:	00c00804 	movi	r3,32
10216bc8:	8884d83a 	srl	r2,r17,r2
10216bcc:	80c01c26 	beq	r16,r3,10216c40 <__divdf3+0x8ac>
10216bd0:	a0c10f84 	addi	r3,r20,1086
10216bd4:	88c6983a 	sll	r3,r17,r3
10216bd8:	1cc6b03a 	or	r3,r3,r19
10216bdc:	1806c03a 	cmpne	r3,r3,zero
10216be0:	1884b03a 	or	r2,r3,r2
10216be4:	140001cc 	andi	r16,r2,7
10216be8:	8000061e 	bne	r16,zero,10216c04 <__divdf3+0x870>
10216bec:	000b883a 	mov	r5,zero
10216bf0:	1004d0fa 	srli	r2,r2,3
10216bf4:	9180004c 	andi	r6,r18,1
10216bf8:	0009883a 	mov	r4,zero
10216bfc:	1426b03a 	or	r19,r2,r16
10216c00:	003e4206 	br	1021650c <__divdf3+0x178>
10216c04:	110003cc 	andi	r4,r2,15
10216c08:	00c00104 	movi	r3,4
10216c0c:	0021883a 	mov	r16,zero
10216c10:	20ffcd1e 	bne	r4,r3,10216b48 <__divdf3+0x7b4>
10216c14:	800a927a 	slli	r5,r16,9
10216c18:	8020977a 	slli	r16,r16,29
10216c1c:	280ad33a 	srli	r5,r5,12
10216c20:	003ff306 	br	10216bf0 <__divdf3+0x85c>
10216c24:	317fd336 	bltu	r6,r5,10216b74 <__divdf3+0x7e0>
10216c28:	1023883a 	mov	r17,r2
10216c2c:	003fa206 	br	10216ab8 <__divdf3+0x724>
10216c30:	a8bfd736 	bltu	r21,r2,10216b90 <__divdf3+0x7fc>
10216c34:	2027883a 	mov	r19,r4
10216c38:	a8bf3d1e 	bne	r21,r2,10216930 <__divdf3+0x59c>
10216c3c:	003f3d06 	br	10216934 <__divdf3+0x5a0>
10216c40:	0007883a 	mov	r3,zero
10216c44:	003fe406 	br	10216bd8 <__divdf3+0x844>
10216c48:	00800434 	movhi	r2,16
10216c4c:	89400234 	orhi	r5,r17,8
10216c50:	10bfffc4 	addi	r2,r2,-1
10216c54:	e00d883a 	mov	r6,fp
10216c58:	288a703a 	and	r5,r5,r2
10216c5c:	003e8506 	br	10216674 <__divdf3+0x2e0>

10216c60 <__eqdf2>:
10216c60:	2804d53a 	srli	r2,r5,20
10216c64:	3806d53a 	srli	r3,r7,20
10216c68:	02000434 	movhi	r8,16
10216c6c:	423fffc4 	addi	r8,r8,-1
10216c70:	1081ffcc 	andi	r2,r2,2047
10216c74:	0241ffc4 	movi	r9,2047
10216c78:	2a14703a 	and	r10,r5,r8
10216c7c:	18c1ffcc 	andi	r3,r3,2047
10216c80:	3a10703a 	and	r8,r7,r8
10216c84:	280ad7fa 	srli	r5,r5,31
10216c88:	380ed7fa 	srli	r7,r7,31
10216c8c:	12400f26 	beq	r2,r9,10216ccc <__eqdf2+0x6c>
10216c90:	0241ffc4 	movi	r9,2047
10216c94:	1a400326 	beq	r3,r9,10216ca4 <__eqdf2+0x44>
10216c98:	10c00526 	beq	r2,r3,10216cb0 <__eqdf2+0x50>
10216c9c:	00800044 	movi	r2,1
10216ca0:	f800283a 	ret
10216ca4:	4192b03a 	or	r9,r8,r6
10216ca8:	483ffc1e 	bne	r9,zero,10216c9c <__eqdf2+0x3c>
10216cac:	10fffb1e 	bne	r2,r3,10216c9c <__eqdf2+0x3c>
10216cb0:	523ffa1e 	bne	r10,r8,10216c9c <__eqdf2+0x3c>
10216cb4:	21bff91e 	bne	r4,r6,10216c9c <__eqdf2+0x3c>
10216cb8:	29c00826 	beq	r5,r7,10216cdc <__eqdf2+0x7c>
10216cbc:	103ff71e 	bne	r2,zero,10216c9c <__eqdf2+0x3c>
10216cc0:	5104b03a 	or	r2,r10,r4
10216cc4:	1004c03a 	cmpne	r2,r2,zero
10216cc8:	f800283a 	ret
10216ccc:	5112b03a 	or	r9,r10,r4
10216cd0:	483fef26 	beq	r9,zero,10216c90 <__eqdf2+0x30>
10216cd4:	00800044 	movi	r2,1
10216cd8:	f800283a 	ret
10216cdc:	0005883a 	mov	r2,zero
10216ce0:	f800283a 	ret

10216ce4 <__gedf2>:
10216ce4:	2804d53a 	srli	r2,r5,20
10216ce8:	3806d53a 	srli	r3,r7,20
10216cec:	02000434 	movhi	r8,16
10216cf0:	423fffc4 	addi	r8,r8,-1
10216cf4:	0241ffc4 	movi	r9,2047
10216cf8:	1081ffcc 	andi	r2,r2,2047
10216cfc:	2a14703a 	and	r10,r5,r8
10216d00:	1a46703a 	and	r3,r3,r9
10216d04:	3a10703a 	and	r8,r7,r8
10216d08:	280ad7fa 	srli	r5,r5,31
10216d0c:	380ed7fa 	srli	r7,r7,31
10216d10:	12400b26 	beq	r2,r9,10216d40 <__gedf2+0x5c>
10216d14:	1a401626 	beq	r3,r9,10216d70 <__gedf2+0x8c>
10216d18:	10000c1e 	bne	r2,zero,10216d4c <__gedf2+0x68>
10216d1c:	5112b03a 	or	r9,r10,r4
10216d20:	4813003a 	cmpeq	r9,r9,zero
10216d24:	4817883a 	mov	r11,r9
10216d28:	18000c1e 	bne	r3,zero,10216d5c <__gedf2+0x78>
10216d2c:	4198b03a 	or	r12,r8,r6
10216d30:	60000a1e 	bne	r12,zero,10216d5c <__gedf2+0x78>
10216d34:	48001326 	beq	r9,zero,10216d84 <__gedf2+0xa0>
10216d38:	0005883a 	mov	r2,zero
10216d3c:	f800283a 	ret
10216d40:	5112b03a 	or	r9,r10,r4
10216d44:	4800191e 	bne	r9,zero,10216dac <__gedf2+0xc8>
10216d48:	18800926 	beq	r3,r2,10216d70 <__gedf2+0x8c>
10216d4c:	18000b1e 	bne	r3,zero,10216d7c <__gedf2+0x98>
10216d50:	4192b03a 	or	r9,r8,r6
10216d54:	0017883a 	mov	r11,zero
10216d58:	48000a26 	beq	r9,zero,10216d84 <__gedf2+0xa0>
10216d5c:	39c03fcc 	andi	r7,r7,255
10216d60:	58000726 	beq	r11,zero,10216d80 <__gedf2+0x9c>
10216d64:	3800081e 	bne	r7,zero,10216d88 <__gedf2+0xa4>
10216d68:	00bfffc4 	movi	r2,-1
10216d6c:	f800283a 	ret
10216d70:	4192b03a 	or	r9,r8,r6
10216d74:	48000d1e 	bne	r9,zero,10216dac <__gedf2+0xc8>
10216d78:	103fe826 	beq	r2,zero,10216d1c <__gedf2+0x38>
10216d7c:	39c03fcc 	andi	r7,r7,255
10216d80:	29c00326 	beq	r5,r7,10216d90 <__gedf2+0xac>
10216d84:	283ff81e 	bne	r5,zero,10216d68 <__gedf2+0x84>
10216d88:	00800044 	movi	r2,1
10216d8c:	f800283a 	ret
10216d90:	18bffc16 	blt	r3,r2,10216d84 <__gedf2+0xa0>
10216d94:	10c00316 	blt	r2,r3,10216da4 <__gedf2+0xc0>
10216d98:	42bffa36 	bltu	r8,r10,10216d84 <__gedf2+0xa0>
10216d9c:	52000526 	beq	r10,r8,10216db4 <__gedf2+0xd0>
10216da0:	523fe52e 	bgeu	r10,r8,10216d38 <__gedf2+0x54>
10216da4:	283ff026 	beq	r5,zero,10216d68 <__gedf2+0x84>
10216da8:	003ff706 	br	10216d88 <__gedf2+0xa4>
10216dac:	00bfff84 	movi	r2,-2
10216db0:	f800283a 	ret
10216db4:	313ff336 	bltu	r6,r4,10216d84 <__gedf2+0xa0>
10216db8:	21bfdf2e 	bgeu	r4,r6,10216d38 <__gedf2+0x54>
10216dbc:	283fea26 	beq	r5,zero,10216d68 <__gedf2+0x84>
10216dc0:	003ff106 	br	10216d88 <__gedf2+0xa4>

10216dc4 <__ledf2>:
10216dc4:	2804d53a 	srli	r2,r5,20
10216dc8:	3810d53a 	srli	r8,r7,20
10216dcc:	00c00434 	movhi	r3,16
10216dd0:	18ffffc4 	addi	r3,r3,-1
10216dd4:	0241ffc4 	movi	r9,2047
10216dd8:	1081ffcc 	andi	r2,r2,2047
10216ddc:	28d4703a 	and	r10,r5,r3
10216de0:	4250703a 	and	r8,r8,r9
10216de4:	38c6703a 	and	r3,r7,r3
10216de8:	280ad7fa 	srli	r5,r5,31
10216dec:	380ed7fa 	srli	r7,r7,31
10216df0:	12400b26 	beq	r2,r9,10216e20 <__ledf2+0x5c>
10216df4:	42401926 	beq	r8,r9,10216e5c <__ledf2+0x98>
10216df8:	10000c1e 	bne	r2,zero,10216e2c <__ledf2+0x68>
10216dfc:	5112b03a 	or	r9,r10,r4
10216e00:	4813003a 	cmpeq	r9,r9,zero
10216e04:	4817883a 	mov	r11,r9
10216e08:	40000f26 	beq	r8,zero,10216e48 <__ledf2+0x84>
10216e0c:	39c03fcc 	andi	r7,r7,255
10216e10:	58001826 	beq	r11,zero,10216e74 <__ledf2+0xb0>
10216e14:	38000a1e 	bne	r7,zero,10216e40 <__ledf2+0x7c>
10216e18:	00bfffc4 	movi	r2,-1
10216e1c:	f800283a 	ret
10216e20:	5112b03a 	or	r9,r10,r4
10216e24:	48000f1e 	bne	r9,zero,10216e64 <__ledf2+0xa0>
10216e28:	40800c26 	beq	r8,r2,10216e5c <__ledf2+0x98>
10216e2c:	4000101e 	bne	r8,zero,10216e70 <__ledf2+0xac>
10216e30:	1992b03a 	or	r9,r3,r6
10216e34:	0017883a 	mov	r11,zero
10216e38:	483ff41e 	bne	r9,zero,10216e0c <__ledf2+0x48>
10216e3c:	283ff61e 	bne	r5,zero,10216e18 <__ledf2+0x54>
10216e40:	00800044 	movi	r2,1
10216e44:	f800283a 	ret
10216e48:	1998b03a 	or	r12,r3,r6
10216e4c:	603fef1e 	bne	r12,zero,10216e0c <__ledf2+0x48>
10216e50:	483ffa26 	beq	r9,zero,10216e3c <__ledf2+0x78>
10216e54:	0005883a 	mov	r2,zero
10216e58:	f800283a 	ret
10216e5c:	1992b03a 	or	r9,r3,r6
10216e60:	48000226 	beq	r9,zero,10216e6c <__ledf2+0xa8>
10216e64:	00800084 	movi	r2,2
10216e68:	f800283a 	ret
10216e6c:	103fe326 	beq	r2,zero,10216dfc <__ledf2+0x38>
10216e70:	39c03fcc 	andi	r7,r7,255
10216e74:	29fff11e 	bne	r5,r7,10216e3c <__ledf2+0x78>
10216e78:	40bff016 	blt	r8,r2,10216e3c <__ledf2+0x78>
10216e7c:	12000316 	blt	r2,r8,10216e8c <__ledf2+0xc8>
10216e80:	1abfee36 	bltu	r3,r10,10216e3c <__ledf2+0x78>
10216e84:	50c00326 	beq	r10,r3,10216e94 <__ledf2+0xd0>
10216e88:	50fff22e 	bgeu	r10,r3,10216e54 <__ledf2+0x90>
10216e8c:	283fe226 	beq	r5,zero,10216e18 <__ledf2+0x54>
10216e90:	003feb06 	br	10216e40 <__ledf2+0x7c>
10216e94:	313fe936 	bltu	r6,r4,10216e3c <__ledf2+0x78>
10216e98:	21bfee2e 	bgeu	r4,r6,10216e54 <__ledf2+0x90>
10216e9c:	283fde26 	beq	r5,zero,10216e18 <__ledf2+0x54>
10216ea0:	003fe706 	br	10216e40 <__ledf2+0x7c>

10216ea4 <__muldf3>:
10216ea4:	defff204 	addi	sp,sp,-56
10216ea8:	2804d53a 	srli	r2,r5,20
10216eac:	dd800a15 	stw	r22,40(sp)
10216eb0:	282cd7fa 	srli	r22,r5,31
10216eb4:	dc000415 	stw	r16,16(sp)
10216eb8:	04000434 	movhi	r16,16
10216ebc:	df000c15 	stw	fp,48(sp)
10216ec0:	dd000815 	stw	r20,32(sp)
10216ec4:	dcc00715 	stw	r19,28(sp)
10216ec8:	dc800615 	stw	r18,24(sp)
10216ecc:	dc400515 	stw	r17,20(sp)
10216ed0:	843fffc4 	addi	r16,r16,-1
10216ed4:	dfc00d15 	stw	ra,52(sp)
10216ed8:	ddc00b15 	stw	r23,44(sp)
10216edc:	dd400915 	stw	r21,36(sp)
10216ee0:	1501ffcc 	andi	r20,r2,2047
10216ee4:	2023883a 	mov	r17,r4
10216ee8:	2025883a 	mov	r18,r4
10216eec:	2c20703a 	and	r16,r5,r16
10216ef0:	b027883a 	mov	r19,r22
10216ef4:	b7003fcc 	andi	fp,r22,255
10216ef8:	a0005926 	beq	r20,zero,10217060 <__muldf3+0x1bc>
10216efc:	0081ffc4 	movi	r2,2047
10216f00:	a0803426 	beq	r20,r2,10216fd4 <__muldf3+0x130>
10216f04:	84000434 	orhi	r16,r16,16
10216f08:	2004d77a 	srli	r2,r4,29
10216f0c:	802090fa 	slli	r16,r16,3
10216f10:	202490fa 	slli	r18,r4,3
10216f14:	a53f0044 	addi	r20,r20,-1023
10216f18:	80a0b03a 	or	r16,r16,r2
10216f1c:	002b883a 	mov	r21,zero
10216f20:	0015883a 	mov	r10,zero
10216f24:	3812d53a 	srli	r9,r7,20
10216f28:	3806d7fa 	srli	r3,r7,31
10216f2c:	02000434 	movhi	r8,16
10216f30:	423fffc4 	addi	r8,r8,-1
10216f34:	4941ffcc 	andi	r5,r9,2047
10216f38:	302f883a 	mov	r23,r6
10216f3c:	3a22703a 	and	r17,r7,r8
10216f40:	1ac03fcc 	andi	r11,r3,255
10216f44:	28006226 	beq	r5,zero,102170d0 <__muldf3+0x22c>
10216f48:	0081ffc4 	movi	r2,2047
10216f4c:	28805a26 	beq	r5,r2,102170b8 <__muldf3+0x214>
10216f50:	8a000434 	orhi	r8,r17,16
10216f54:	3004d77a 	srli	r2,r6,29
10216f58:	401090fa 	slli	r8,r8,3
10216f5c:	302e90fa 	slli	r23,r6,3
10216f60:	297f0044 	addi	r5,r5,-1023
10216f64:	40a2b03a 	or	r17,r8,r2
10216f68:	0013883a 	mov	r9,zero
10216f6c:	4d4cb03a 	or	r6,r9,r21
10216f70:	300c90ba 	slli	r6,r6,2
10216f74:	02040874 	movhi	r8,4129
10216f78:	421be504 	addi	r8,r8,28564
10216f7c:	320d883a 	add	r6,r6,r8
10216f80:	31800017 	ldw	r6,0(r6)
10216f84:	a14b883a 	add	r5,r20,r5
10216f88:	1dacf03a 	xor	r22,r3,r22
10216f8c:	2b000044 	addi	r12,r5,1
10216f90:	3000683a 	jmp	r6
10216f94:	102171d0 	cmplti	zero,r2,-31289
10216f98:	102171bc 	xorhi	zero,r2,34246
10216f9c:	102171bc 	xorhi	zero,r2,34246
10216fa0:	102171a8 	cmpgeui	zero,r2,34246
10216fa4:	10216ff0 	cmpltui	zero,r2,34239
10216fa8:	10216ff0 	cmpltui	zero,r2,34239
10216fac:	10217190 	cmplti	zero,r2,-31290
10216fb0:	102171a8 	cmpgeui	zero,r2,34246
10216fb4:	10216ff0 	cmpltui	zero,r2,34239
10216fb8:	10217190 	cmplti	zero,r2,-31290
10216fbc:	10216ff0 	cmpltui	zero,r2,34239
10216fc0:	102171a8 	cmpgeui	zero,r2,34246
10216fc4:	10216ff4 	orhi	zero,r2,34239
10216fc8:	10216ff4 	orhi	zero,r2,34239
10216fcc:	10216ff4 	orhi	zero,r2,34239
10216fd0:	102173cc 	andi	zero,r2,34255
10216fd4:	8104b03a 	or	r2,r16,r4
10216fd8:	10006a1e 	bne	r2,zero,10217184 <__muldf3+0x2e0>
10216fdc:	05400204 	movi	r21,8
10216fe0:	0021883a 	mov	r16,zero
10216fe4:	0025883a 	mov	r18,zero
10216fe8:	02800084 	movi	r10,2
10216fec:	003fcd06 	br	10216f24 <__muldf3+0x80>
10216ff0:	b039883a 	mov	fp,r22
10216ff4:	00800084 	movi	r2,2
10216ff8:	50804e1e 	bne	r10,r2,10217134 <__muldf3+0x290>
10216ffc:	e4c0004c 	andi	r19,fp,1
10217000:	0101ffc4 	movi	r4,2047
10217004:	0021883a 	mov	r16,zero
10217008:	0025883a 	mov	r18,zero
1021700c:	2008953a 	slli	r4,r4,20
10217010:	98c03fcc 	andi	r3,r19,255
10217014:	01400434 	movhi	r5,16
10217018:	297fffc4 	addi	r5,r5,-1
1021701c:	180697fa 	slli	r3,r3,31
10217020:	8160703a 	and	r16,r16,r5
10217024:	8120b03a 	or	r16,r16,r4
10217028:	80c6b03a 	or	r3,r16,r3
1021702c:	9005883a 	mov	r2,r18
10217030:	dfc00d17 	ldw	ra,52(sp)
10217034:	df000c17 	ldw	fp,48(sp)
10217038:	ddc00b17 	ldw	r23,44(sp)
1021703c:	dd800a17 	ldw	r22,40(sp)
10217040:	dd400917 	ldw	r21,36(sp)
10217044:	dd000817 	ldw	r20,32(sp)
10217048:	dcc00717 	ldw	r19,28(sp)
1021704c:	dc800617 	ldw	r18,24(sp)
10217050:	dc400517 	ldw	r17,20(sp)
10217054:	dc000417 	ldw	r16,16(sp)
10217058:	dec00e04 	addi	sp,sp,56
1021705c:	f800283a 	ret
10217060:	8104b03a 	or	r2,r16,r4
10217064:	10004226 	beq	r2,zero,10217170 <__muldf3+0x2cc>
10217068:	8000f926 	beq	r16,zero,10217450 <__muldf3+0x5ac>
1021706c:	8009883a 	mov	r4,r16
10217070:	d9800315 	stw	r6,12(sp)
10217074:	d9c00015 	stw	r7,0(sp)
10217078:	021822c0 	call	1021822c <__clzsi2>
1021707c:	d9800317 	ldw	r6,12(sp)
10217080:	d9c00017 	ldw	r7,0(sp)
10217084:	1007883a 	mov	r3,r2
10217088:	01000a04 	movi	r4,40
1021708c:	18bffe04 	addi	r2,r3,-8
10217090:	20c9c83a 	sub	r4,r4,r3
10217094:	80a0983a 	sll	r16,r16,r2
10217098:	8908d83a 	srl	r4,r17,r4
1021709c:	88a4983a 	sll	r18,r17,r2
102170a0:	2420b03a 	or	r16,r4,r16
102170a4:	017f0344 	movi	r5,-1011
102170a8:	28e9c83a 	sub	r20,r5,r3
102170ac:	002b883a 	mov	r21,zero
102170b0:	0015883a 	mov	r10,zero
102170b4:	003f9b06 	br	10216f24 <__muldf3+0x80>
102170b8:	8984b03a 	or	r2,r17,r6
102170bc:	10002a1e 	bne	r2,zero,10217168 <__muldf3+0x2c4>
102170c0:	0023883a 	mov	r17,zero
102170c4:	002f883a 	mov	r23,zero
102170c8:	02400084 	movi	r9,2
102170cc:	003fa706 	br	10216f6c <__muldf3+0xc8>
102170d0:	8984b03a 	or	r2,r17,r6
102170d4:	10002026 	beq	r2,zero,10217158 <__muldf3+0x2b4>
102170d8:	8800cc26 	beq	r17,zero,1021740c <__muldf3+0x568>
102170dc:	8809883a 	mov	r4,r17
102170e0:	d8c00215 	stw	r3,8(sp)
102170e4:	d9800315 	stw	r6,12(sp)
102170e8:	da800015 	stw	r10,0(sp)
102170ec:	dac00115 	stw	r11,4(sp)
102170f0:	021822c0 	call	1021822c <__clzsi2>
102170f4:	d8c00217 	ldw	r3,8(sp)
102170f8:	d9800317 	ldw	r6,12(sp)
102170fc:	da800017 	ldw	r10,0(sp)
10217100:	dac00117 	ldw	r11,4(sp)
10217104:	1009883a 	mov	r4,r2
10217108:	01400a04 	movi	r5,40
1021710c:	25fffe04 	addi	r23,r4,-8
10217110:	290bc83a 	sub	r5,r5,r4
10217114:	8dd0983a 	sll	r8,r17,r23
10217118:	314ad83a 	srl	r5,r6,r5
1021711c:	35ee983a 	sll	r23,r6,r23
10217120:	2a22b03a 	or	r17,r5,r8
10217124:	017f0344 	movi	r5,-1011
10217128:	290bc83a 	sub	r5,r5,r4
1021712c:	0013883a 	mov	r9,zero
10217130:	003f8e06 	br	10216f6c <__muldf3+0xc8>
10217134:	008000c4 	movi	r2,3
10217138:	50811d26 	beq	r10,r2,102175b0 <__muldf3+0x70c>
1021713c:	00800044 	movi	r2,1
10217140:	5080e01e 	bne	r10,r2,102174c4 <__muldf3+0x620>
10217144:	e0a6703a 	and	r19,fp,r2
10217148:	0009883a 	mov	r4,zero
1021714c:	0021883a 	mov	r16,zero
10217150:	0025883a 	mov	r18,zero
10217154:	003fad06 	br	1021700c <__muldf3+0x168>
10217158:	0023883a 	mov	r17,zero
1021715c:	002f883a 	mov	r23,zero
10217160:	02400044 	movi	r9,1
10217164:	003f8106 	br	10216f6c <__muldf3+0xc8>
10217168:	024000c4 	movi	r9,3
1021716c:	003f7f06 	br	10216f6c <__muldf3+0xc8>
10217170:	05400104 	movi	r21,4
10217174:	0021883a 	mov	r16,zero
10217178:	0025883a 	mov	r18,zero
1021717c:	02800044 	movi	r10,1
10217180:	003f6806 	br	10216f24 <__muldf3+0x80>
10217184:	05400304 	movi	r21,12
10217188:	028000c4 	movi	r10,3
1021718c:	003f6506 	br	10216f24 <__muldf3+0x80>
10217190:	04000434 	movhi	r16,16
10217194:	0027883a 	mov	r19,zero
10217198:	843fffc4 	addi	r16,r16,-1
1021719c:	04bfffc4 	movi	r18,-1
102171a0:	0101ffc4 	movi	r4,2047
102171a4:	003f9906 	br	1021700c <__muldf3+0x168>
102171a8:	8821883a 	mov	r16,r17
102171ac:	b825883a 	mov	r18,r23
102171b0:	5839883a 	mov	fp,r11
102171b4:	4815883a 	mov	r10,r9
102171b8:	003f8e06 	br	10216ff4 <__muldf3+0x150>
102171bc:	8821883a 	mov	r16,r17
102171c0:	b825883a 	mov	r18,r23
102171c4:	b039883a 	mov	fp,r22
102171c8:	4815883a 	mov	r10,r9
102171cc:	003f8906 	br	10216ff4 <__muldf3+0x150>
102171d0:	b80cd43a 	srli	r6,r23,16
102171d4:	9006d43a 	srli	r3,r18,16
102171d8:	90bfffcc 	andi	r2,r18,65535
102171dc:	bdffffcc 	andi	r23,r23,65535
102171e0:	b891383a 	mul	r8,r23,r2
102171e4:	b8c9383a 	mul	r4,r23,r3
102171e8:	309b383a 	mul	r13,r6,r2
102171ec:	400ed43a 	srli	r7,r8,16
102171f0:	30df383a 	mul	r15,r6,r3
102171f4:	235b883a 	add	r13,r4,r13
102171f8:	69db883a 	add	r13,r13,r7
102171fc:	6900022e 	bgeu	r13,r4,10217208 <__muldf3+0x364>
10217200:	01000074 	movhi	r4,1
10217204:	791f883a 	add	r15,r15,r4
10217208:	8828d43a 	srli	r20,r17,16
1021720c:	8c7fffcc 	andi	r17,r17,65535
10217210:	888f383a 	mul	r7,r17,r2
10217214:	88d3383a 	mul	r9,r17,r3
10217218:	a0a5383a 	mul	r18,r20,r2
1021721c:	3816d43a 	srli	r11,r7,16
10217220:	6814943a 	slli	r10,r13,16
10217224:	4ca5883a 	add	r18,r9,r18
10217228:	423fffcc 	andi	r8,r8,65535
1021722c:	92e5883a 	add	r18,r18,r11
10217230:	6808d43a 	srli	r4,r13,16
10217234:	5215883a 	add	r10,r10,r8
10217238:	a0c7383a 	mul	r3,r20,r3
1021723c:	9240022e 	bgeu	r18,r9,10217248 <__muldf3+0x3a4>
10217240:	00800074 	movhi	r2,1
10217244:	1887883a 	add	r3,r3,r2
10217248:	802ad43a 	srli	r21,r16,16
1021724c:	80bfffcc 	andi	r2,r16,65535
10217250:	b893383a 	mul	r9,r23,r2
10217254:	3091383a 	mul	r8,r6,r2
10217258:	bd6f383a 	mul	r23,r23,r21
1021725c:	9026943a 	slli	r19,r18,16
10217260:	481ad43a 	srli	r13,r9,16
10217264:	9024d43a 	srli	r18,r18,16
10217268:	39ffffcc 	andi	r7,r7,65535
1021726c:	ba11883a 	add	r8,r23,r8
10217270:	99e7883a 	add	r19,r19,r7
10217274:	4351883a 	add	r8,r8,r13
10217278:	1c97883a 	add	r11,r3,r18
1021727c:	354d383a 	mul	r6,r6,r21
10217280:	9925883a 	add	r18,r19,r4
10217284:	45c0022e 	bgeu	r8,r23,10217290 <__muldf3+0x3ec>
10217288:	00c00074 	movhi	r3,1
1021728c:	30cd883a 	add	r6,r6,r3
10217290:	8889383a 	mul	r4,r17,r2
10217294:	8d63383a 	mul	r17,r17,r21
10217298:	a085383a 	mul	r2,r20,r2
1021729c:	200ed43a 	srli	r7,r4,16
102172a0:	401cd43a 	srli	r14,r8,16
102172a4:	401a943a 	slli	r13,r8,16
102172a8:	8885883a 	add	r2,r17,r2
102172ac:	4a3fffcc 	andi	r8,r9,65535
102172b0:	11c5883a 	add	r2,r2,r7
102172b4:	339d883a 	add	r14,r6,r14
102172b8:	6a11883a 	add	r8,r13,r8
102172bc:	a561383a 	mul	r16,r20,r21
102172c0:	1440022e 	bgeu	r2,r17,102172cc <__muldf3+0x428>
102172c4:	00c00074 	movhi	r3,1
102172c8:	80e1883a 	add	r16,r16,r3
102172cc:	1006943a 	slli	r3,r2,16
102172d0:	213fffcc 	andi	r4,r4,65535
102172d4:	93db883a 	add	r13,r18,r15
102172d8:	1909883a 	add	r4,r3,r4
102172dc:	22c7883a 	add	r3,r4,r11
102172e0:	6cd3803a 	cmpltu	r9,r13,r19
102172e4:	6a09883a 	add	r4,r13,r8
102172e8:	1a5b883a 	add	r13,r3,r9
102172ec:	2211803a 	cmpltu	r8,r4,r8
102172f0:	734d883a 	add	r6,r14,r13
102172f4:	100ed43a 	srli	r7,r2,16
102172f8:	6a53803a 	cmpltu	r9,r13,r9
102172fc:	3205883a 	add	r2,r6,r8
10217300:	1ac7803a 	cmpltu	r3,r3,r11
10217304:	1211803a 	cmpltu	r8,r2,r8
10217308:	48c6b03a 	or	r3,r9,r3
1021730c:	338d803a 	cmpltu	r6,r6,r14
10217310:	19c7883a 	add	r3,r3,r7
10217314:	418cb03a 	or	r6,r8,r6
10217318:	1987883a 	add	r3,r3,r6
1021731c:	2024927a 	slli	r18,r4,9
10217320:	1c07883a 	add	r3,r3,r16
10217324:	1806927a 	slli	r3,r3,9
10217328:	1020d5fa 	srli	r16,r2,23
1021732c:	2008d5fa 	srli	r4,r4,23
10217330:	9294b03a 	or	r10,r18,r10
10217334:	1004927a 	slli	r2,r2,9
10217338:	5024c03a 	cmpne	r18,r10,zero
1021733c:	1c20b03a 	or	r16,r3,r16
10217340:	9108b03a 	or	r4,r18,r4
10217344:	80c0402c 	andhi	r3,r16,256
10217348:	20a4b03a 	or	r18,r4,r2
1021734c:	18000726 	beq	r3,zero,1021736c <__muldf3+0x4c8>
10217350:	9006d07a 	srli	r3,r18,1
10217354:	800897fa 	slli	r4,r16,31
10217358:	9080004c 	andi	r2,r18,1
1021735c:	8020d07a 	srli	r16,r16,1
10217360:	10c4b03a 	or	r2,r2,r3
10217364:	1124b03a 	or	r18,r2,r4
10217368:	600b883a 	mov	r5,r12
1021736c:	2900ffc4 	addi	r4,r5,1023
10217370:	01004b0e 	bge	zero,r4,102174a0 <__muldf3+0x5fc>
10217374:	908001cc 	andi	r2,r18,7
10217378:	10000726 	beq	r2,zero,10217398 <__muldf3+0x4f4>
1021737c:	90c003cc 	andi	r3,r18,15
10217380:	00800104 	movi	r2,4
10217384:	18800426 	beq	r3,r2,10217398 <__muldf3+0x4f4>
10217388:	9087883a 	add	r3,r18,r2
1021738c:	1c85803a 	cmpltu	r2,r3,r18
10217390:	80a1883a 	add	r16,r16,r2
10217394:	1825883a 	mov	r18,r3
10217398:	8080402c 	andhi	r2,r16,256
1021739c:	10000426 	beq	r2,zero,102173b0 <__muldf3+0x50c>
102173a0:	00bfc034 	movhi	r2,65280
102173a4:	10bfffc4 	addi	r2,r2,-1
102173a8:	29010004 	addi	r4,r5,1024
102173ac:	80a0703a 	and	r16,r16,r2
102173b0:	0081ff84 	movi	r2,2046
102173b4:	1100320e 	bge	r2,r4,10217480 <__muldf3+0x5dc>
102173b8:	b4c0004c 	andi	r19,r22,1
102173bc:	0101ffc4 	movi	r4,2047
102173c0:	0021883a 	mov	r16,zero
102173c4:	0025883a 	mov	r18,zero
102173c8:	003f1006 	br	1021700c <__muldf3+0x168>
102173cc:	8080022c 	andhi	r2,r16,8
102173d0:	10000926 	beq	r2,zero,102173f8 <__muldf3+0x554>
102173d4:	8880022c 	andhi	r2,r17,8
102173d8:	1000071e 	bne	r2,zero,102173f8 <__muldf3+0x554>
102173dc:	00800434 	movhi	r2,16
102173e0:	8c000234 	orhi	r16,r17,8
102173e4:	10bfffc4 	addi	r2,r2,-1
102173e8:	1827883a 	mov	r19,r3
102173ec:	80a0703a 	and	r16,r16,r2
102173f0:	b825883a 	mov	r18,r23
102173f4:	003f6a06 	br	102171a0 <__muldf3+0x2fc>
102173f8:	00800434 	movhi	r2,16
102173fc:	84000234 	orhi	r16,r16,8
10217400:	10bfffc4 	addi	r2,r2,-1
10217404:	80a0703a 	and	r16,r16,r2
10217408:	003f6506 	br	102171a0 <__muldf3+0x2fc>
1021740c:	3009883a 	mov	r4,r6
10217410:	d8c00215 	stw	r3,8(sp)
10217414:	d9800315 	stw	r6,12(sp)
10217418:	da800015 	stw	r10,0(sp)
1021741c:	dac00115 	stw	r11,4(sp)
10217420:	021822c0 	call	1021822c <__clzsi2>
10217424:	11000804 	addi	r4,r2,32
10217428:	014009c4 	movi	r5,39
1021742c:	d8c00217 	ldw	r3,8(sp)
10217430:	d9800317 	ldw	r6,12(sp)
10217434:	da800017 	ldw	r10,0(sp)
10217438:	dac00117 	ldw	r11,4(sp)
1021743c:	293f320e 	bge	r5,r4,10217108 <__muldf3+0x264>
10217440:	10bffe04 	addi	r2,r2,-8
10217444:	b8a2983a 	sll	r17,r23,r2
10217448:	002f883a 	mov	r23,zero
1021744c:	003f3506 	br	10217124 <__muldf3+0x280>
10217450:	d9800315 	stw	r6,12(sp)
10217454:	d9c00015 	stw	r7,0(sp)
10217458:	021822c0 	call	1021822c <__clzsi2>
1021745c:	10c00804 	addi	r3,r2,32
10217460:	010009c4 	movi	r4,39
10217464:	d9800317 	ldw	r6,12(sp)
10217468:	d9c00017 	ldw	r7,0(sp)
1021746c:	20ff060e 	bge	r4,r3,10217088 <__muldf3+0x1e4>
10217470:	10bffe04 	addi	r2,r2,-8
10217474:	88a0983a 	sll	r16,r17,r2
10217478:	0025883a 	mov	r18,zero
1021747c:	003f0906 	br	102170a4 <__muldf3+0x200>
10217480:	9004d0fa 	srli	r2,r18,3
10217484:	8024977a 	slli	r18,r16,29
10217488:	8020927a 	slli	r16,r16,9
1021748c:	2101ffcc 	andi	r4,r4,2047
10217490:	90a4b03a 	or	r18,r18,r2
10217494:	8020d33a 	srli	r16,r16,12
10217498:	b4c0004c 	andi	r19,r22,1
1021749c:	003edb06 	br	1021700c <__muldf3+0x168>
102174a0:	00ff0084 	movi	r3,-1022
102174a4:	1947c83a 	sub	r3,r3,r5
102174a8:	00800e04 	movi	r2,56
102174ac:	10c0080e 	bge	r2,r3,102174d0 <__muldf3+0x62c>
102174b0:	b4c0004c 	andi	r19,r22,1
102174b4:	0009883a 	mov	r4,zero
102174b8:	0021883a 	mov	r16,zero
102174bc:	0025883a 	mov	r18,zero
102174c0:	003ed206 	br	1021700c <__muldf3+0x168>
102174c4:	600b883a 	mov	r5,r12
102174c8:	e02d883a 	mov	r22,fp
102174cc:	003fa706 	br	1021736c <__muldf3+0x4c8>
102174d0:	008007c4 	movi	r2,31
102174d4:	10c01816 	blt	r2,r3,10217538 <__muldf3+0x694>
102174d8:	29410784 	addi	r5,r5,1054
102174dc:	8144983a 	sll	r2,r16,r5
102174e0:	90c8d83a 	srl	r4,r18,r3
102174e4:	914a983a 	sll	r5,r18,r5
102174e8:	80c6d83a 	srl	r3,r16,r3
102174ec:	2088b03a 	or	r4,r4,r2
102174f0:	2804c03a 	cmpne	r2,r5,zero
102174f4:	2084b03a 	or	r2,r4,r2
102174f8:	110001cc 	andi	r4,r2,7
102174fc:	20000726 	beq	r4,zero,1021751c <__muldf3+0x678>
10217500:	114003cc 	andi	r5,r2,15
10217504:	01000104 	movi	r4,4
10217508:	29000426 	beq	r5,r4,1021751c <__muldf3+0x678>
1021750c:	11000104 	addi	r4,r2,4
10217510:	2085803a 	cmpltu	r2,r4,r2
10217514:	1887883a 	add	r3,r3,r2
10217518:	2005883a 	mov	r2,r4
1021751c:	1900202c 	andhi	r4,r3,128
10217520:	20001826 	beq	r4,zero,10217584 <__muldf3+0x6e0>
10217524:	b4c0004c 	andi	r19,r22,1
10217528:	01000044 	movi	r4,1
1021752c:	0021883a 	mov	r16,zero
10217530:	0025883a 	mov	r18,zero
10217534:	003eb506 	br	1021700c <__muldf3+0x168>
10217538:	00bef884 	movi	r2,-1054
1021753c:	1145c83a 	sub	r2,r2,r5
10217540:	8088d83a 	srl	r4,r16,r2
10217544:	00800804 	movi	r2,32
10217548:	18801726 	beq	r3,r2,102175a8 <__muldf3+0x704>
1021754c:	28810f84 	addi	r2,r5,1086
10217550:	8084983a 	sll	r2,r16,r2
10217554:	1484b03a 	or	r2,r2,r18
10217558:	1004c03a 	cmpne	r2,r2,zero
1021755c:	1104b03a 	or	r2,r2,r4
10217560:	10c001cc 	andi	r3,r2,7
10217564:	18000b1e 	bne	r3,zero,10217594 <__muldf3+0x6f0>
10217568:	0021883a 	mov	r16,zero
1021756c:	1004d0fa 	srli	r2,r2,3
10217570:	b4c0004c 	andi	r19,r22,1
10217574:	0009883a 	mov	r4,zero
10217578:	10e4b03a 	or	r18,r2,r3
1021757c:	003ea306 	br	1021700c <__muldf3+0x168>
10217580:	0007883a 	mov	r3,zero
10217584:	1820927a 	slli	r16,r3,9
10217588:	1806977a 	slli	r3,r3,29
1021758c:	8020d33a 	srli	r16,r16,12
10217590:	003ff606 	br	1021756c <__muldf3+0x6c8>
10217594:	110003cc 	andi	r4,r2,15
10217598:	00c00104 	movi	r3,4
1021759c:	20fff826 	beq	r4,r3,10217580 <__muldf3+0x6dc>
102175a0:	0007883a 	mov	r3,zero
102175a4:	003fd906 	br	1021750c <__muldf3+0x668>
102175a8:	0005883a 	mov	r2,zero
102175ac:	003fe906 	br	10217554 <__muldf3+0x6b0>
102175b0:	00800434 	movhi	r2,16
102175b4:	84000234 	orhi	r16,r16,8
102175b8:	10bfffc4 	addi	r2,r2,-1
102175bc:	e4c0004c 	andi	r19,fp,1
102175c0:	80a0703a 	and	r16,r16,r2
102175c4:	003ef606 	br	102171a0 <__muldf3+0x2fc>

102175c8 <__subdf3>:
102175c8:	00c00434 	movhi	r3,16
102175cc:	18ffffc4 	addi	r3,r3,-1
102175d0:	defffb04 	addi	sp,sp,-20
102175d4:	28d2703a 	and	r9,r5,r3
102175d8:	3814d53a 	srli	r10,r7,20
102175dc:	38c6703a 	and	r3,r7,r3
102175e0:	3004d77a 	srli	r2,r6,29
102175e4:	dc800215 	stw	r18,8(sp)
102175e8:	dc000015 	stw	r16,0(sp)
102175ec:	2824d7fa 	srli	r18,r5,31
102175f0:	2820d53a 	srli	r16,r5,20
102175f4:	481290fa 	slli	r9,r9,3
102175f8:	200ad77a 	srli	r5,r4,29
102175fc:	180690fa 	slli	r3,r3,3
10217600:	dc400115 	stw	r17,4(sp)
10217604:	dfc00415 	stw	ra,16(sp)
10217608:	202290fa 	slli	r17,r4,3
1021760c:	dcc00315 	stw	r19,12(sp)
10217610:	5281ffcc 	andi	r10,r10,2047
10217614:	0101ffc4 	movi	r4,2047
10217618:	9011883a 	mov	r8,r18
1021761c:	8401ffcc 	andi	r16,r16,2047
10217620:	94803fcc 	andi	r18,r18,255
10217624:	494ab03a 	or	r5,r9,r5
10217628:	380ed7fa 	srli	r7,r7,31
1021762c:	1886b03a 	or	r3,r3,r2
10217630:	300c90fa 	slli	r6,r6,3
10217634:	51009026 	beq	r10,r4,10217878 <__subdf3+0x2b0>
10217638:	39c0005c 	xori	r7,r7,1
1021763c:	8285c83a 	sub	r2,r16,r10
10217640:	91c06f26 	beq	r18,r7,10217800 <__subdf3+0x238>
10217644:	0080b10e 	bge	zero,r2,1021790c <__subdf3+0x344>
10217648:	50002a1e 	bne	r10,zero,102176f4 <__subdf3+0x12c>
1021764c:	1988b03a 	or	r4,r3,r6
10217650:	2000941e 	bne	r4,zero,102178a4 <__subdf3+0x2dc>
10217654:	888001cc 	andi	r2,r17,7
10217658:	10005b26 	beq	r2,zero,102177c8 <__subdf3+0x200>
1021765c:	88c003cc 	andi	r3,r17,15
10217660:	00800104 	movi	r2,4
10217664:	18805826 	beq	r3,r2,102177c8 <__subdf3+0x200>
10217668:	88c00104 	addi	r3,r17,4
1021766c:	1c63803a 	cmpltu	r17,r3,r17
10217670:	2c4b883a 	add	r5,r5,r17
10217674:	2880202c 	andhi	r2,r5,128
10217678:	9200004c 	andi	r8,r18,1
1021767c:	1823883a 	mov	r17,r3
10217680:	10005426 	beq	r2,zero,102177d4 <__subdf3+0x20c>
10217684:	84000044 	addi	r16,r16,1
10217688:	0081ffc4 	movi	r2,2047
1021768c:	8080bf26 	beq	r16,r2,1021798c <__subdf3+0x3c4>
10217690:	013fe034 	movhi	r4,65408
10217694:	213fffc4 	addi	r4,r4,-1
10217698:	290a703a 	and	r5,r5,r4
1021769c:	2804977a 	slli	r2,r5,29
102176a0:	280a927a 	slli	r5,r5,9
102176a4:	8822d0fa 	srli	r17,r17,3
102176a8:	8401ffcc 	andi	r16,r16,2047
102176ac:	2808d33a 	srli	r4,r5,12
102176b0:	1444b03a 	or	r2,r2,r17
102176b4:	8401ffcc 	andi	r16,r16,2047
102176b8:	800a953a 	slli	r5,r16,20
102176bc:	40c03fcc 	andi	r3,r8,255
102176c0:	04000434 	movhi	r16,16
102176c4:	180697fa 	slli	r3,r3,31
102176c8:	843fffc4 	addi	r16,r16,-1
102176cc:	2420703a 	and	r16,r4,r16
102176d0:	8160b03a 	or	r16,r16,r5
102176d4:	80c6b03a 	or	r3,r16,r3
102176d8:	dfc00417 	ldw	ra,16(sp)
102176dc:	dcc00317 	ldw	r19,12(sp)
102176e0:	dc800217 	ldw	r18,8(sp)
102176e4:	dc400117 	ldw	r17,4(sp)
102176e8:	dc000017 	ldw	r16,0(sp)
102176ec:	dec00504 	addi	sp,sp,20
102176f0:	f800283a 	ret
102176f4:	0101ffc4 	movi	r4,2047
102176f8:	813fd626 	beq	r16,r4,10217654 <__subdf3+0x8c>
102176fc:	18c02034 	orhi	r3,r3,128
10217700:	01000e04 	movi	r4,56
10217704:	2080a416 	blt	r4,r2,10217998 <__subdf3+0x3d0>
10217708:	010007c4 	movi	r4,31
1021770c:	2080c716 	blt	r4,r2,10217a2c <__subdf3+0x464>
10217710:	01000804 	movi	r4,32
10217714:	2089c83a 	sub	r4,r4,r2
10217718:	1910983a 	sll	r8,r3,r4
1021771c:	308ed83a 	srl	r7,r6,r2
10217720:	3108983a 	sll	r4,r6,r4
10217724:	1884d83a 	srl	r2,r3,r2
10217728:	41ccb03a 	or	r6,r8,r7
1021772c:	2008c03a 	cmpne	r4,r4,zero
10217730:	310cb03a 	or	r6,r6,r4
10217734:	898dc83a 	sub	r6,r17,r6
10217738:	89a3803a 	cmpltu	r17,r17,r6
1021773c:	288bc83a 	sub	r5,r5,r2
10217740:	2c4bc83a 	sub	r5,r5,r17
10217744:	3023883a 	mov	r17,r6
10217748:	2880202c 	andhi	r2,r5,128
1021774c:	10006b26 	beq	r2,zero,102178fc <__subdf3+0x334>
10217750:	04c02034 	movhi	r19,128
10217754:	9cffffc4 	addi	r19,r19,-1
10217758:	2ce6703a 	and	r19,r5,r19
1021775c:	98007c26 	beq	r19,zero,10217950 <__subdf3+0x388>
10217760:	9809883a 	mov	r4,r19
10217764:	021822c0 	call	1021822c <__clzsi2>
10217768:	10fffe04 	addi	r3,r2,-8
1021776c:	010007c4 	movi	r4,31
10217770:	20c07d16 	blt	r4,r3,10217968 <__subdf3+0x3a0>
10217774:	01400a04 	movi	r5,40
10217778:	2885c83a 	sub	r2,r5,r2
1021777c:	888ad83a 	srl	r5,r17,r2
10217780:	98e6983a 	sll	r19,r19,r3
10217784:	88e2983a 	sll	r17,r17,r3
10217788:	2ce6b03a 	or	r19,r5,r19
1021778c:	1c007a16 	blt	r3,r16,10217978 <__subdf3+0x3b0>
10217790:	1c21c83a 	sub	r16,r3,r16
10217794:	81400044 	addi	r5,r16,1
10217798:	00c007c4 	movi	r3,31
1021779c:	19409616 	blt	r3,r5,102179f8 <__subdf3+0x430>
102177a0:	1c21c83a 	sub	r16,r3,r16
102177a4:	8c08983a 	sll	r4,r17,r16
102177a8:	8946d83a 	srl	r3,r17,r5
102177ac:	9c20983a 	sll	r16,r19,r16
102177b0:	2008c03a 	cmpne	r4,r4,zero
102177b4:	994ad83a 	srl	r5,r19,r5
102177b8:	1c06b03a 	or	r3,r3,r16
102177bc:	1922b03a 	or	r17,r3,r4
102177c0:	0021883a 	mov	r16,zero
102177c4:	003fa306 	br	10217654 <__subdf3+0x8c>
102177c8:	2880202c 	andhi	r2,r5,128
102177cc:	9200004c 	andi	r8,r18,1
102177d0:	103fac1e 	bne	r2,zero,10217684 <__subdf3+0xbc>
102177d4:	2804977a 	slli	r2,r5,29
102177d8:	8822d0fa 	srli	r17,r17,3
102177dc:	00c1ffc4 	movi	r3,2047
102177e0:	280ad0fa 	srli	r5,r5,3
102177e4:	1444b03a 	or	r2,r2,r17
102177e8:	80c02726 	beq	r16,r3,10217888 <__subdf3+0x2c0>
102177ec:	01000434 	movhi	r4,16
102177f0:	213fffc4 	addi	r4,r4,-1
102177f4:	80e0703a 	and	r16,r16,r3
102177f8:	2908703a 	and	r4,r5,r4
102177fc:	003fad06 	br	102176b4 <__subdf3+0xec>
10217800:	0080690e 	bge	zero,r2,102179a8 <__subdf3+0x3e0>
10217804:	50002f26 	beq	r10,zero,102178c4 <__subdf3+0x2fc>
10217808:	0101ffc4 	movi	r4,2047
1021780c:	813f9126 	beq	r16,r4,10217654 <__subdf3+0x8c>
10217810:	18c02034 	orhi	r3,r3,128
10217814:	01000e04 	movi	r4,56
10217818:	2080b00e 	bge	r4,r2,10217adc <__subdf3+0x514>
1021781c:	198cb03a 	or	r6,r3,r6
10217820:	300ec03a 	cmpne	r7,r6,zero
10217824:	0005883a 	mov	r2,zero
10217828:	3c4f883a 	add	r7,r7,r17
1021782c:	3c63803a 	cmpltu	r17,r7,r17
10217830:	114b883a 	add	r5,r2,r5
10217834:	2c4b883a 	add	r5,r5,r17
10217838:	3823883a 	mov	r17,r7
1021783c:	2880202c 	andhi	r2,r5,128
10217840:	10002e26 	beq	r2,zero,102178fc <__subdf3+0x334>
10217844:	84000044 	addi	r16,r16,1
10217848:	0081ffc4 	movi	r2,2047
1021784c:	8080de26 	beq	r16,r2,10217bc8 <__subdf3+0x600>
10217850:	00bfe034 	movhi	r2,65408
10217854:	10bfffc4 	addi	r2,r2,-1
10217858:	288a703a 	and	r5,r5,r2
1021785c:	880cd07a 	srli	r6,r17,1
10217860:	280897fa 	slli	r4,r5,31
10217864:	88c0004c 	andi	r3,r17,1
10217868:	30e2b03a 	or	r17,r6,r3
1021786c:	280ad07a 	srli	r5,r5,1
10217870:	8922b03a 	or	r17,r17,r4
10217874:	003f7706 	br	10217654 <__subdf3+0x8c>
10217878:	1984b03a 	or	r2,r3,r6
1021787c:	103f6e26 	beq	r2,zero,10217638 <__subdf3+0x70>
10217880:	39c03fcc 	andi	r7,r7,255
10217884:	003f6d06 	br	1021763c <__subdf3+0x74>
10217888:	1146b03a 	or	r3,r2,r5
1021788c:	18003f26 	beq	r3,zero,1021798c <__subdf3+0x3c4>
10217890:	00c00434 	movhi	r3,16
10217894:	29000234 	orhi	r4,r5,8
10217898:	18ffffc4 	addi	r3,r3,-1
1021789c:	20c8703a 	and	r4,r4,r3
102178a0:	003f8406 	br	102176b4 <__subdf3+0xec>
102178a4:	10bfffc4 	addi	r2,r2,-1
102178a8:	1000501e 	bne	r2,zero,102179ec <__subdf3+0x424>
102178ac:	898fc83a 	sub	r7,r17,r6
102178b0:	89e3803a 	cmpltu	r17,r17,r7
102178b4:	28cbc83a 	sub	r5,r5,r3
102178b8:	2c4bc83a 	sub	r5,r5,r17
102178bc:	3823883a 	mov	r17,r7
102178c0:	003fa106 	br	10217748 <__subdf3+0x180>
102178c4:	1988b03a 	or	r4,r3,r6
102178c8:	203f6226 	beq	r4,zero,10217654 <__subdf3+0x8c>
102178cc:	10bfffc4 	addi	r2,r2,-1
102178d0:	10009b1e 	bne	r2,zero,10217b40 <__subdf3+0x578>
102178d4:	344d883a 	add	r6,r6,r17
102178d8:	3463803a 	cmpltu	r17,r6,r17
102178dc:	194b883a 	add	r5,r3,r5
102178e0:	2c4b883a 	add	r5,r5,r17
102178e4:	3023883a 	mov	r17,r6
102178e8:	003fd406 	br	1021783c <__subdf3+0x274>
102178ec:	1106b03a 	or	r3,r2,r4
102178f0:	1800b426 	beq	r3,zero,10217bc4 <__subdf3+0x5fc>
102178f4:	100b883a 	mov	r5,r2
102178f8:	2023883a 	mov	r17,r4
102178fc:	888001cc 	andi	r2,r17,7
10217900:	103f561e 	bne	r2,zero,1021765c <__subdf3+0x94>
10217904:	9200004c 	andi	r8,r18,1
10217908:	003fb206 	br	102177d4 <__subdf3+0x20c>
1021790c:	1000531e 	bne	r2,zero,10217a5c <__subdf3+0x494>
10217910:	80800044 	addi	r2,r16,1
10217914:	1081ffcc 	andi	r2,r2,2047
10217918:	01000044 	movi	r4,1
1021791c:	2080a00e 	bge	r4,r2,10217ba0 <__subdf3+0x5d8>
10217920:	8985c83a 	sub	r2,r17,r6
10217924:	8889803a 	cmpltu	r4,r17,r2
10217928:	28e7c83a 	sub	r19,r5,r3
1021792c:	9927c83a 	sub	r19,r19,r4
10217930:	9900202c 	andhi	r4,r19,128
10217934:	20006226 	beq	r4,zero,10217ac0 <__subdf3+0x4f8>
10217938:	3463c83a 	sub	r17,r6,r17
1021793c:	194bc83a 	sub	r5,r3,r5
10217940:	344d803a 	cmpltu	r6,r6,r17
10217944:	29a7c83a 	sub	r19,r5,r6
10217948:	3825883a 	mov	r18,r7
1021794c:	983f841e 	bne	r19,zero,10217760 <__subdf3+0x198>
10217950:	8809883a 	mov	r4,r17
10217954:	021822c0 	call	1021822c <__clzsi2>
10217958:	10800804 	addi	r2,r2,32
1021795c:	10fffe04 	addi	r3,r2,-8
10217960:	010007c4 	movi	r4,31
10217964:	20ff830e 	bge	r4,r3,10217774 <__subdf3+0x1ac>
10217968:	14fff604 	addi	r19,r2,-40
1021796c:	8ce6983a 	sll	r19,r17,r19
10217970:	0023883a 	mov	r17,zero
10217974:	1c3f860e 	bge	r3,r16,10217790 <__subdf3+0x1c8>
10217978:	017fe034 	movhi	r5,65408
1021797c:	297fffc4 	addi	r5,r5,-1
10217980:	80e1c83a 	sub	r16,r16,r3
10217984:	994a703a 	and	r5,r19,r5
10217988:	003f3206 	br	10217654 <__subdf3+0x8c>
1021798c:	0009883a 	mov	r4,zero
10217990:	0005883a 	mov	r2,zero
10217994:	003f4706 	br	102176b4 <__subdf3+0xec>
10217998:	198cb03a 	or	r6,r3,r6
1021799c:	300cc03a 	cmpne	r6,r6,zero
102179a0:	0005883a 	mov	r2,zero
102179a4:	003f6306 	br	10217734 <__subdf3+0x16c>
102179a8:	10009d1e 	bne	r2,zero,10217c20 <__subdf3+0x658>
102179ac:	81c00044 	addi	r7,r16,1
102179b0:	3881ffcc 	andi	r2,r7,2047
102179b4:	02400044 	movi	r9,1
102179b8:	4880680e 	bge	r9,r2,10217b5c <__subdf3+0x594>
102179bc:	0081ffc4 	movi	r2,2047
102179c0:	3880ae26 	beq	r7,r2,10217c7c <__subdf3+0x6b4>
102179c4:	344d883a 	add	r6,r6,r17
102179c8:	3463803a 	cmpltu	r17,r6,r17
102179cc:	194b883a 	add	r5,r3,r5
102179d0:	2c4b883a 	add	r5,r5,r17
102179d4:	282297fa 	slli	r17,r5,31
102179d8:	300cd07a 	srli	r6,r6,1
102179dc:	280ad07a 	srli	r5,r5,1
102179e0:	3821883a 	mov	r16,r7
102179e4:	89a2b03a 	or	r17,r17,r6
102179e8:	003f1a06 	br	10217654 <__subdf3+0x8c>
102179ec:	0101ffc4 	movi	r4,2047
102179f0:	813f431e 	bne	r16,r4,10217700 <__subdf3+0x138>
102179f4:	003f1706 	br	10217654 <__subdf3+0x8c>
102179f8:	80bff844 	addi	r2,r16,-31
102179fc:	00c00804 	movi	r3,32
10217a00:	9884d83a 	srl	r2,r19,r2
10217a04:	28c05126 	beq	r5,r3,10217b4c <__subdf3+0x584>
10217a08:	00c00fc4 	movi	r3,63
10217a0c:	1c21c83a 	sub	r16,r3,r16
10217a10:	9c26983a 	sll	r19,r19,r16
10217a14:	9c62b03a 	or	r17,r19,r17
10217a18:	8822c03a 	cmpne	r17,r17,zero
10217a1c:	88a2b03a 	or	r17,r17,r2
10217a20:	000b883a 	mov	r5,zero
10217a24:	0021883a 	mov	r16,zero
10217a28:	003fb406 	br	102178fc <__subdf3+0x334>
10217a2c:	113ff804 	addi	r4,r2,-32
10217a30:	01c00804 	movi	r7,32
10217a34:	1908d83a 	srl	r4,r3,r4
10217a38:	11c04626 	beq	r2,r7,10217b54 <__subdf3+0x58c>
10217a3c:	01c01004 	movi	r7,64
10217a40:	3885c83a 	sub	r2,r7,r2
10217a44:	1884983a 	sll	r2,r3,r2
10217a48:	118cb03a 	or	r6,r2,r6
10217a4c:	300cc03a 	cmpne	r6,r6,zero
10217a50:	310cb03a 	or	r6,r6,r4
10217a54:	0005883a 	mov	r2,zero
10217a58:	003f3606 	br	10217734 <__subdf3+0x16c>
10217a5c:	80002b26 	beq	r16,zero,10217b0c <__subdf3+0x544>
10217a60:	0101ffc4 	movi	r4,2047
10217a64:	51006926 	beq	r10,r4,10217c0c <__subdf3+0x644>
10217a68:	0085c83a 	sub	r2,zero,r2
10217a6c:	29402034 	orhi	r5,r5,128
10217a70:	01000e04 	movi	r4,56
10217a74:	20807d16 	blt	r4,r2,10217c6c <__subdf3+0x6a4>
10217a78:	010007c4 	movi	r4,31
10217a7c:	2080d916 	blt	r4,r2,10217de4 <__subdf3+0x81c>
10217a80:	01000804 	movi	r4,32
10217a84:	2089c83a 	sub	r4,r4,r2
10217a88:	2912983a 	sll	r9,r5,r4
10217a8c:	8890d83a 	srl	r8,r17,r2
10217a90:	8908983a 	sll	r4,r17,r4
10217a94:	2884d83a 	srl	r2,r5,r2
10217a98:	4a22b03a 	or	r17,r9,r8
10217a9c:	2008c03a 	cmpne	r4,r4,zero
10217aa0:	8922b03a 	or	r17,r17,r4
10217aa4:	3463c83a 	sub	r17,r6,r17
10217aa8:	1885c83a 	sub	r2,r3,r2
10217aac:	344d803a 	cmpltu	r6,r6,r17
10217ab0:	118bc83a 	sub	r5,r2,r6
10217ab4:	5021883a 	mov	r16,r10
10217ab8:	3825883a 	mov	r18,r7
10217abc:	003f2206 	br	10217748 <__subdf3+0x180>
10217ac0:	9886b03a 	or	r3,r19,r2
10217ac4:	18001c1e 	bne	r3,zero,10217b38 <__subdf3+0x570>
10217ac8:	0011883a 	mov	r8,zero
10217acc:	000b883a 	mov	r5,zero
10217ad0:	0023883a 	mov	r17,zero
10217ad4:	0021883a 	mov	r16,zero
10217ad8:	003f3e06 	br	102177d4 <__subdf3+0x20c>
10217adc:	010007c4 	movi	r4,31
10217ae0:	20803c16 	blt	r4,r2,10217bd4 <__subdf3+0x60c>
10217ae4:	01000804 	movi	r4,32
10217ae8:	2089c83a 	sub	r4,r4,r2
10217aec:	1912983a 	sll	r9,r3,r4
10217af0:	308ed83a 	srl	r7,r6,r2
10217af4:	3108983a 	sll	r4,r6,r4
10217af8:	1884d83a 	srl	r2,r3,r2
10217afc:	49ceb03a 	or	r7,r9,r7
10217b00:	2008c03a 	cmpne	r4,r4,zero
10217b04:	390eb03a 	or	r7,r7,r4
10217b08:	003f4706 	br	10217828 <__subdf3+0x260>
10217b0c:	2c48b03a 	or	r4,r5,r17
10217b10:	20003e26 	beq	r4,zero,10217c0c <__subdf3+0x644>
10217b14:	0084303a 	nor	r2,zero,r2
10217b18:	10003a1e 	bne	r2,zero,10217c04 <__subdf3+0x63c>
10217b1c:	3463c83a 	sub	r17,r6,r17
10217b20:	194bc83a 	sub	r5,r3,r5
10217b24:	344d803a 	cmpltu	r6,r6,r17
10217b28:	298bc83a 	sub	r5,r5,r6
10217b2c:	5021883a 	mov	r16,r10
10217b30:	3825883a 	mov	r18,r7
10217b34:	003f0406 	br	10217748 <__subdf3+0x180>
10217b38:	1023883a 	mov	r17,r2
10217b3c:	003f0706 	br	1021775c <__subdf3+0x194>
10217b40:	0101ffc4 	movi	r4,2047
10217b44:	813f331e 	bne	r16,r4,10217814 <__subdf3+0x24c>
10217b48:	003ec206 	br	10217654 <__subdf3+0x8c>
10217b4c:	0027883a 	mov	r19,zero
10217b50:	003fb006 	br	10217a14 <__subdf3+0x44c>
10217b54:	0005883a 	mov	r2,zero
10217b58:	003fbb06 	br	10217a48 <__subdf3+0x480>
10217b5c:	2c44b03a 	or	r2,r5,r17
10217b60:	80008b1e 	bne	r16,zero,10217d90 <__subdf3+0x7c8>
10217b64:	1000b526 	beq	r2,zero,10217e3c <__subdf3+0x874>
10217b68:	1984b03a 	or	r2,r3,r6
10217b6c:	103eb926 	beq	r2,zero,10217654 <__subdf3+0x8c>
10217b70:	3449883a 	add	r4,r6,r17
10217b74:	2463803a 	cmpltu	r17,r4,r17
10217b78:	194b883a 	add	r5,r3,r5
10217b7c:	2c4b883a 	add	r5,r5,r17
10217b80:	2880202c 	andhi	r2,r5,128
10217b84:	2023883a 	mov	r17,r4
10217b88:	103f5c26 	beq	r2,zero,102178fc <__subdf3+0x334>
10217b8c:	00bfe034 	movhi	r2,65408
10217b90:	10bfffc4 	addi	r2,r2,-1
10217b94:	4821883a 	mov	r16,r9
10217b98:	288a703a 	and	r5,r5,r2
10217b9c:	003ead06 	br	10217654 <__subdf3+0x8c>
10217ba0:	2c44b03a 	or	r2,r5,r17
10217ba4:	8000291e 	bne	r16,zero,10217c4c <__subdf3+0x684>
10217ba8:	10004f1e 	bne	r2,zero,10217ce8 <__subdf3+0x720>
10217bac:	1984b03a 	or	r2,r3,r6
10217bb0:	10000426 	beq	r2,zero,10217bc4 <__subdf3+0x5fc>
10217bb4:	180b883a 	mov	r5,r3
10217bb8:	3023883a 	mov	r17,r6
10217bbc:	3825883a 	mov	r18,r7
10217bc0:	003ea406 	br	10217654 <__subdf3+0x8c>
10217bc4:	0011883a 	mov	r8,zero
10217bc8:	000b883a 	mov	r5,zero
10217bcc:	0023883a 	mov	r17,zero
10217bd0:	003f0006 	br	102177d4 <__subdf3+0x20c>
10217bd4:	11fff804 	addi	r7,r2,-32
10217bd8:	19c8d83a 	srl	r4,r3,r7
10217bdc:	01c00804 	movi	r7,32
10217be0:	11c07e26 	beq	r2,r7,10217ddc <__subdf3+0x814>
10217be4:	01c01004 	movi	r7,64
10217be8:	3885c83a 	sub	r2,r7,r2
10217bec:	1884983a 	sll	r2,r3,r2
10217bf0:	118cb03a 	or	r6,r2,r6
10217bf4:	300ec03a 	cmpne	r7,r6,zero
10217bf8:	390eb03a 	or	r7,r7,r4
10217bfc:	0005883a 	mov	r2,zero
10217c00:	003f0906 	br	10217828 <__subdf3+0x260>
10217c04:	0101ffc4 	movi	r4,2047
10217c08:	513f991e 	bne	r10,r4,10217a70 <__subdf3+0x4a8>
10217c0c:	180b883a 	mov	r5,r3
10217c10:	3023883a 	mov	r17,r6
10217c14:	5021883a 	mov	r16,r10
10217c18:	3825883a 	mov	r18,r7
10217c1c:	003e8d06 	br	10217654 <__subdf3+0x8c>
10217c20:	80001a1e 	bne	r16,zero,10217c8c <__subdf3+0x6c4>
10217c24:	2c48b03a 	or	r4,r5,r17
10217c28:	20005526 	beq	r4,zero,10217d80 <__subdf3+0x7b8>
10217c2c:	0084303a 	nor	r2,zero,r2
10217c30:	1000511e 	bne	r2,zero,10217d78 <__subdf3+0x7b0>
10217c34:	89a3883a 	add	r17,r17,r6
10217c38:	194b883a 	add	r5,r3,r5
10217c3c:	898d803a 	cmpltu	r6,r17,r6
10217c40:	298b883a 	add	r5,r5,r6
10217c44:	5021883a 	mov	r16,r10
10217c48:	003efc06 	br	1021783c <__subdf3+0x274>
10217c4c:	1000341e 	bne	r2,zero,10217d20 <__subdf3+0x758>
10217c50:	1984b03a 	or	r2,r3,r6
10217c54:	10006f26 	beq	r2,zero,10217e14 <__subdf3+0x84c>
10217c58:	180b883a 	mov	r5,r3
10217c5c:	3023883a 	mov	r17,r6
10217c60:	3825883a 	mov	r18,r7
10217c64:	0401ffc4 	movi	r16,2047
10217c68:	003e7a06 	br	10217654 <__subdf3+0x8c>
10217c6c:	2c62b03a 	or	r17,r5,r17
10217c70:	8822c03a 	cmpne	r17,r17,zero
10217c74:	0005883a 	mov	r2,zero
10217c78:	003f8a06 	br	10217aa4 <__subdf3+0x4dc>
10217c7c:	3821883a 	mov	r16,r7
10217c80:	000b883a 	mov	r5,zero
10217c84:	0023883a 	mov	r17,zero
10217c88:	003ed206 	br	102177d4 <__subdf3+0x20c>
10217c8c:	0101ffc4 	movi	r4,2047
10217c90:	51003b26 	beq	r10,r4,10217d80 <__subdf3+0x7b8>
10217c94:	0085c83a 	sub	r2,zero,r2
10217c98:	29402034 	orhi	r5,r5,128
10217c9c:	01000e04 	movi	r4,56
10217ca0:	20806216 	blt	r4,r2,10217e2c <__subdf3+0x864>
10217ca4:	010007c4 	movi	r4,31
10217ca8:	20806b16 	blt	r4,r2,10217e58 <__subdf3+0x890>
10217cac:	01000804 	movi	r4,32
10217cb0:	2089c83a 	sub	r4,r4,r2
10217cb4:	2912983a 	sll	r9,r5,r4
10217cb8:	888ed83a 	srl	r7,r17,r2
10217cbc:	8908983a 	sll	r4,r17,r4
10217cc0:	2884d83a 	srl	r2,r5,r2
10217cc4:	49e2b03a 	or	r17,r9,r7
10217cc8:	2008c03a 	cmpne	r4,r4,zero
10217ccc:	8922b03a 	or	r17,r17,r4
10217cd0:	89a3883a 	add	r17,r17,r6
10217cd4:	10c5883a 	add	r2,r2,r3
10217cd8:	898d803a 	cmpltu	r6,r17,r6
10217cdc:	118b883a 	add	r5,r2,r6
10217ce0:	5021883a 	mov	r16,r10
10217ce4:	003ed506 	br	1021783c <__subdf3+0x274>
10217ce8:	1984b03a 	or	r2,r3,r6
10217cec:	103e5926 	beq	r2,zero,10217654 <__subdf3+0x8c>
10217cf0:	8989c83a 	sub	r4,r17,r6
10217cf4:	8911803a 	cmpltu	r8,r17,r4
10217cf8:	28c5c83a 	sub	r2,r5,r3
10217cfc:	1205c83a 	sub	r2,r2,r8
10217d00:	1200202c 	andhi	r8,r2,128
10217d04:	403ef926 	beq	r8,zero,102178ec <__subdf3+0x324>
10217d08:	3463c83a 	sub	r17,r6,r17
10217d0c:	194bc83a 	sub	r5,r3,r5
10217d10:	344d803a 	cmpltu	r6,r6,r17
10217d14:	298bc83a 	sub	r5,r5,r6
10217d18:	3825883a 	mov	r18,r7
10217d1c:	003e4d06 	br	10217654 <__subdf3+0x8c>
10217d20:	1984b03a 	or	r2,r3,r6
10217d24:	10002b26 	beq	r2,zero,10217dd4 <__subdf3+0x80c>
10217d28:	2808d0fa 	srli	r4,r5,3
10217d2c:	8822d0fa 	srli	r17,r17,3
10217d30:	280a977a 	slli	r5,r5,29
10217d34:	2080022c 	andhi	r2,r4,8
10217d38:	2c62b03a 	or	r17,r5,r17
10217d3c:	10000826 	beq	r2,zero,10217d60 <__subdf3+0x798>
10217d40:	1810d0fa 	srli	r8,r3,3
10217d44:	4080022c 	andhi	r2,r8,8
10217d48:	1000051e 	bne	r2,zero,10217d60 <__subdf3+0x798>
10217d4c:	300cd0fa 	srli	r6,r6,3
10217d50:	1804977a 	slli	r2,r3,29
10217d54:	4009883a 	mov	r4,r8
10217d58:	3825883a 	mov	r18,r7
10217d5c:	11a2b03a 	or	r17,r2,r6
10217d60:	880ad77a 	srli	r5,r17,29
10217d64:	200890fa 	slli	r4,r4,3
10217d68:	882290fa 	slli	r17,r17,3
10217d6c:	0401ffc4 	movi	r16,2047
10217d70:	290ab03a 	or	r5,r5,r4
10217d74:	003e3706 	br	10217654 <__subdf3+0x8c>
10217d78:	0101ffc4 	movi	r4,2047
10217d7c:	513fc71e 	bne	r10,r4,10217c9c <__subdf3+0x6d4>
10217d80:	180b883a 	mov	r5,r3
10217d84:	3023883a 	mov	r17,r6
10217d88:	5021883a 	mov	r16,r10
10217d8c:	003e3106 	br	10217654 <__subdf3+0x8c>
10217d90:	10002d26 	beq	r2,zero,10217e48 <__subdf3+0x880>
10217d94:	1984b03a 	or	r2,r3,r6
10217d98:	10000e26 	beq	r2,zero,10217dd4 <__subdf3+0x80c>
10217d9c:	2808d0fa 	srli	r4,r5,3
10217da0:	8822d0fa 	srli	r17,r17,3
10217da4:	280a977a 	slli	r5,r5,29
10217da8:	2080022c 	andhi	r2,r4,8
10217dac:	2c62b03a 	or	r17,r5,r17
10217db0:	103feb26 	beq	r2,zero,10217d60 <__subdf3+0x798>
10217db4:	180ed0fa 	srli	r7,r3,3
10217db8:	3880022c 	andhi	r2,r7,8
10217dbc:	103fe81e 	bne	r2,zero,10217d60 <__subdf3+0x798>
10217dc0:	300cd0fa 	srli	r6,r6,3
10217dc4:	1804977a 	slli	r2,r3,29
10217dc8:	3809883a 	mov	r4,r7
10217dcc:	11a2b03a 	or	r17,r2,r6
10217dd0:	003fe306 	br	10217d60 <__subdf3+0x798>
10217dd4:	0401ffc4 	movi	r16,2047
10217dd8:	003e1e06 	br	10217654 <__subdf3+0x8c>
10217ddc:	0005883a 	mov	r2,zero
10217de0:	003f8306 	br	10217bf0 <__subdf3+0x628>
10217de4:	113ff804 	addi	r4,r2,-32
10217de8:	02000804 	movi	r8,32
10217dec:	2908d83a 	srl	r4,r5,r4
10217df0:	12002526 	beq	r2,r8,10217e88 <__subdf3+0x8c0>
10217df4:	02001004 	movi	r8,64
10217df8:	4085c83a 	sub	r2,r8,r2
10217dfc:	288a983a 	sll	r5,r5,r2
10217e00:	2c62b03a 	or	r17,r5,r17
10217e04:	8822c03a 	cmpne	r17,r17,zero
10217e08:	8922b03a 	or	r17,r17,r4
10217e0c:	0005883a 	mov	r2,zero
10217e10:	003f2406 	br	10217aa4 <__subdf3+0x4dc>
10217e14:	01402034 	movhi	r5,128
10217e18:	0011883a 	mov	r8,zero
10217e1c:	297fffc4 	addi	r5,r5,-1
10217e20:	047ffe04 	movi	r17,-8
10217e24:	0401ffc4 	movi	r16,2047
10217e28:	003e6a06 	br	102177d4 <__subdf3+0x20c>
10217e2c:	2c62b03a 	or	r17,r5,r17
10217e30:	8822c03a 	cmpne	r17,r17,zero
10217e34:	0005883a 	mov	r2,zero
10217e38:	003fa506 	br	10217cd0 <__subdf3+0x708>
10217e3c:	180b883a 	mov	r5,r3
10217e40:	3023883a 	mov	r17,r6
10217e44:	003e0306 	br	10217654 <__subdf3+0x8c>
10217e48:	180b883a 	mov	r5,r3
10217e4c:	3023883a 	mov	r17,r6
10217e50:	0401ffc4 	movi	r16,2047
10217e54:	003dff06 	br	10217654 <__subdf3+0x8c>
10217e58:	113ff804 	addi	r4,r2,-32
10217e5c:	01c00804 	movi	r7,32
10217e60:	2908d83a 	srl	r4,r5,r4
10217e64:	11c00a26 	beq	r2,r7,10217e90 <__subdf3+0x8c8>
10217e68:	01c01004 	movi	r7,64
10217e6c:	3885c83a 	sub	r2,r7,r2
10217e70:	288a983a 	sll	r5,r5,r2
10217e74:	2c62b03a 	or	r17,r5,r17
10217e78:	8822c03a 	cmpne	r17,r17,zero
10217e7c:	8922b03a 	or	r17,r17,r4
10217e80:	0005883a 	mov	r2,zero
10217e84:	003f9206 	br	10217cd0 <__subdf3+0x708>
10217e88:	000b883a 	mov	r5,zero
10217e8c:	003fdc06 	br	10217e00 <__subdf3+0x838>
10217e90:	000b883a 	mov	r5,zero
10217e94:	003ff706 	br	10217e74 <__subdf3+0x8ac>

10217e98 <__fixdfsi>:
10217e98:	2806d53a 	srli	r3,r5,20
10217e9c:	00800434 	movhi	r2,16
10217ea0:	10bfffc4 	addi	r2,r2,-1
10217ea4:	18c1ffcc 	andi	r3,r3,2047
10217ea8:	0180ff84 	movi	r6,1022
10217eac:	2884703a 	and	r2,r5,r2
10217eb0:	280ad7fa 	srli	r5,r5,31
10217eb4:	30c0130e 	bge	r6,r3,10217f04 <__fixdfsi+0x6c>
10217eb8:	01810744 	movi	r6,1053
10217ebc:	30c00d16 	blt	r6,r3,10217ef4 <__fixdfsi+0x5c>
10217ec0:	01810cc4 	movi	r6,1075
10217ec4:	30cdc83a 	sub	r6,r6,r3
10217ec8:	01c007c4 	movi	r7,31
10217ecc:	10800434 	orhi	r2,r2,16
10217ed0:	39800e0e 	bge	r7,r6,10217f0c <__fixdfsi+0x74>
10217ed4:	010104c4 	movi	r4,1043
10217ed8:	20c7c83a 	sub	r3,r4,r3
10217edc:	10c6d83a 	srl	r3,r2,r3
10217ee0:	29403fcc 	andi	r5,r5,255
10217ee4:	0145c83a 	sub	r2,zero,r5
10217ee8:	1884f03a 	xor	r2,r3,r2
10217eec:	1145883a 	add	r2,r2,r5
10217ef0:	f800283a 	ret
10217ef4:	00a00034 	movhi	r2,32768
10217ef8:	10bfffc4 	addi	r2,r2,-1
10217efc:	2885883a 	add	r2,r5,r2
10217f00:	f800283a 	ret
10217f04:	0005883a 	mov	r2,zero
10217f08:	f800283a 	ret
10217f0c:	18fefb44 	addi	r3,r3,-1043
10217f10:	2188d83a 	srl	r4,r4,r6
10217f14:	10c6983a 	sll	r3,r2,r3
10217f18:	20c6b03a 	or	r3,r4,r3
10217f1c:	003ff006 	br	10217ee0 <__fixdfsi+0x48>

10217f20 <__floatsidf>:
10217f20:	defffd04 	addi	sp,sp,-12
10217f24:	dc400115 	stw	r17,4(sp)
10217f28:	dfc00215 	stw	ra,8(sp)
10217f2c:	dc000015 	stw	r16,0(sp)
10217f30:	2023883a 	mov	r17,r4
10217f34:	20001426 	beq	r4,zero,10217f88 <__floatsidf+0x68>
10217f38:	2020d7fa 	srli	r16,r4,31
10217f3c:	80000126 	beq	r16,zero,10217f44 <__floatsidf+0x24>
10217f40:	0123c83a 	sub	r17,zero,r4
10217f44:	8809883a 	mov	r4,r17
10217f48:	021822c0 	call	1021822c <__clzsi2>
10217f4c:	01410784 	movi	r5,1054
10217f50:	00c00284 	movi	r3,10
10217f54:	288bc83a 	sub	r5,r5,r2
10217f58:	18801c16 	blt	r3,r2,10217fcc <__floatsidf+0xac>
10217f5c:	00c002c4 	movi	r3,11
10217f60:	1887c83a 	sub	r3,r3,r2
10217f64:	88c8d83a 	srl	r4,r17,r3
10217f68:	00c00434 	movhi	r3,16
10217f6c:	18ffffc4 	addi	r3,r3,-1
10217f70:	10800544 	addi	r2,r2,21
10217f74:	20c8703a 	and	r4,r4,r3
10217f78:	8884983a 	sll	r2,r17,r2
10217f7c:	28c1ffcc 	andi	r3,r5,2047
10217f80:	800d883a 	mov	r6,r16
10217f84:	00000406 	br	10217f98 <__floatsidf+0x78>
10217f88:	000d883a 	mov	r6,zero
10217f8c:	0007883a 	mov	r3,zero
10217f90:	0009883a 	mov	r4,zero
10217f94:	0005883a 	mov	r2,zero
10217f98:	180a953a 	slli	r5,r3,20
10217f9c:	31803fcc 	andi	r6,r6,255
10217fa0:	00c00434 	movhi	r3,16
10217fa4:	300c97fa 	slli	r6,r6,31
10217fa8:	18ffffc4 	addi	r3,r3,-1
10217fac:	20c6703a 	and	r3,r4,r3
10217fb0:	1946b03a 	or	r3,r3,r5
10217fb4:	1986b03a 	or	r3,r3,r6
10217fb8:	dfc00217 	ldw	ra,8(sp)
10217fbc:	dc400117 	ldw	r17,4(sp)
10217fc0:	dc000017 	ldw	r16,0(sp)
10217fc4:	dec00304 	addi	sp,sp,12
10217fc8:	f800283a 	ret
10217fcc:	10fffd44 	addi	r3,r2,-11
10217fd0:	88c8983a 	sll	r4,r17,r3
10217fd4:	00800434 	movhi	r2,16
10217fd8:	10bfffc4 	addi	r2,r2,-1
10217fdc:	2088703a 	and	r4,r4,r2
10217fe0:	28c1ffcc 	andi	r3,r5,2047
10217fe4:	800d883a 	mov	r6,r16
10217fe8:	0005883a 	mov	r2,zero
10217fec:	003fea06 	br	10217f98 <__floatsidf+0x78>

10217ff0 <__floatunsidf>:
10217ff0:	defffe04 	addi	sp,sp,-8
10217ff4:	dc000015 	stw	r16,0(sp)
10217ff8:	dfc00115 	stw	ra,4(sp)
10217ffc:	2021883a 	mov	r16,r4
10218000:	20001026 	beq	r4,zero,10218044 <__floatunsidf+0x54>
10218004:	021822c0 	call	1021822c <__clzsi2>
10218008:	01410784 	movi	r5,1054
1021800c:	100d883a 	mov	r6,r2
10218010:	288bc83a 	sub	r5,r5,r2
10218014:	00800284 	movi	r2,10
10218018:	11801616 	blt	r2,r6,10218074 <__floatunsidf+0x84>
1021801c:	008002c4 	movi	r2,11
10218020:	1185c83a 	sub	r2,r2,r6
10218024:	8084d83a 	srl	r2,r16,r2
10218028:	00c00434 	movhi	r3,16
1021802c:	31c00544 	addi	r7,r6,21
10218030:	18ffffc4 	addi	r3,r3,-1
10218034:	81e0983a 	sll	r16,r16,r7
10218038:	10cc703a 	and	r6,r2,r3
1021803c:	2941ffcc 	andi	r5,r5,2047
10218040:	00000206 	br	1021804c <__floatunsidf+0x5c>
10218044:	000b883a 	mov	r5,zero
10218048:	000d883a 	mov	r6,zero
1021804c:	280a953a 	slli	r5,r5,20
10218050:	00c00434 	movhi	r3,16
10218054:	18ffffc4 	addi	r3,r3,-1
10218058:	30c6703a 	and	r3,r6,r3
1021805c:	8005883a 	mov	r2,r16
10218060:	1946b03a 	or	r3,r3,r5
10218064:	dfc00117 	ldw	ra,4(sp)
10218068:	dc000017 	ldw	r16,0(sp)
1021806c:	dec00204 	addi	sp,sp,8
10218070:	f800283a 	ret
10218074:	31bffd44 	addi	r6,r6,-11
10218078:	818c983a 	sll	r6,r16,r6
1021807c:	00800434 	movhi	r2,16
10218080:	10bfffc4 	addi	r2,r2,-1
10218084:	2941ffcc 	andi	r5,r5,2047
10218088:	0021883a 	mov	r16,zero
1021808c:	308c703a 	and	r6,r6,r2
10218090:	003fee06 	br	1021804c <__floatunsidf+0x5c>

10218094 <__truncdfsf2>:
10218094:	2810d53a 	srli	r8,r5,20
10218098:	01c00434 	movhi	r7,16
1021809c:	39ffffc4 	addi	r7,r7,-1
102180a0:	29ce703a 	and	r7,r5,r7
102180a4:	380e90fa 	slli	r7,r7,3
102180a8:	4201ffcc 	andi	r8,r8,2047
102180ac:	200cd77a 	srli	r6,r4,29
102180b0:	42400044 	addi	r9,r8,1
102180b4:	4a41ffcc 	andi	r9,r9,2047
102180b8:	00800044 	movi	r2,1
102180bc:	398cb03a 	or	r6,r7,r6
102180c0:	280ad7fa 	srli	r5,r5,31
102180c4:	200e90fa 	slli	r7,r4,3
102180c8:	1240230e 	bge	r2,r9,10218158 <__truncdfsf2+0xc4>
102180cc:	40ff2004 	addi	r3,r8,-896
102180d0:	00803f84 	movi	r2,254
102180d4:	10c01516 	blt	r2,r3,1021812c <__truncdfsf2+0x98>
102180d8:	00c02d0e 	bge	zero,r3,10218190 <__truncdfsf2+0xfc>
102180dc:	200891ba 	slli	r4,r4,6
102180e0:	300c90fa 	slli	r6,r6,3
102180e4:	380ed77a 	srli	r7,r7,29
102180e8:	2008c03a 	cmpne	r4,r4,zero
102180ec:	310cb03a 	or	r6,r6,r4
102180f0:	31ccb03a 	or	r6,r6,r7
102180f4:	308001cc 	andi	r2,r6,7
102180f8:	10000426 	beq	r2,zero,1021810c <__truncdfsf2+0x78>
102180fc:	310003cc 	andi	r4,r6,15
10218100:	00800104 	movi	r2,4
10218104:	20800126 	beq	r4,r2,1021810c <__truncdfsf2+0x78>
10218108:	31800104 	addi	r6,r6,4
1021810c:	3081002c 	andhi	r2,r6,1024
10218110:	10002326 	beq	r2,zero,102181a0 <__truncdfsf2+0x10c>
10218114:	18c00044 	addi	r3,r3,1
10218118:	00803fc4 	movi	r2,255
1021811c:	18800326 	beq	r3,r2,1021812c <__truncdfsf2+0x98>
10218120:	300c91ba 	slli	r6,r6,6
10218124:	300cd27a 	srli	r6,r6,9
10218128:	00000206 	br	10218134 <__truncdfsf2+0xa0>
1021812c:	00ffffc4 	movi	r3,-1
10218130:	000d883a 	mov	r6,zero
10218134:	18c03fcc 	andi	r3,r3,255
10218138:	180895fa 	slli	r4,r3,23
1021813c:	00c02034 	movhi	r3,128
10218140:	280a97fa 	slli	r5,r5,31
10218144:	18ffffc4 	addi	r3,r3,-1
10218148:	30c6703a 	and	r3,r6,r3
1021814c:	1906b03a 	or	r3,r3,r4
10218150:	1944b03a 	or	r2,r3,r5
10218154:	f800283a 	ret
10218158:	4000071e 	bne	r8,zero,10218178 <__truncdfsf2+0xe4>
1021815c:	31ccb03a 	or	r6,r6,r7
10218160:	30000d1e 	bne	r6,zero,10218198 <__truncdfsf2+0x104>
10218164:	0007883a 	mov	r3,zero
10218168:	00802034 	movhi	r2,128
1021816c:	10bfffc4 	addi	r2,r2,-1
10218170:	308c703a 	and	r6,r6,r2
10218174:	003fef06 	br	10218134 <__truncdfsf2+0xa0>
10218178:	31c8b03a 	or	r4,r6,r7
1021817c:	203feb26 	beq	r4,zero,1021812c <__truncdfsf2+0x98>
10218180:	300c90fa 	slli	r6,r6,3
10218184:	00c03fc4 	movi	r3,255
10218188:	31808034 	orhi	r6,r6,512
1021818c:	003fd906 	br	102180f4 <__truncdfsf2+0x60>
10218190:	00bffa44 	movi	r2,-23
10218194:	1880090e 	bge	r3,r2,102181bc <__truncdfsf2+0x128>
10218198:	01800144 	movi	r6,5
1021819c:	0007883a 	mov	r3,zero
102181a0:	00803fc4 	movi	r2,255
102181a4:	300cd0fa 	srli	r6,r6,3
102181a8:	18bfef1e 	bne	r3,r2,10218168 <__truncdfsf2+0xd4>
102181ac:	303fdf26 	beq	r6,zero,1021812c <__truncdfsf2+0x98>
102181b0:	31801034 	orhi	r6,r6,64
102181b4:	00ffffc4 	movi	r3,-1
102181b8:	003feb06 	br	10218168 <__truncdfsf2+0xd4>
102181bc:	0080e784 	movi	r2,926
102181c0:	1205c83a 	sub	r2,r2,r8
102181c4:	00c007c4 	movi	r3,31
102181c8:	31802034 	orhi	r6,r6,128
102181cc:	18800916 	blt	r3,r2,102181f4 <__truncdfsf2+0x160>
102181d0:	423f2084 	addi	r8,r8,-894
102181d4:	3a06983a 	sll	r3,r7,r8
102181d8:	3210983a 	sll	r8,r6,r8
102181dc:	388ed83a 	srl	r7,r7,r2
102181e0:	180cc03a 	cmpne	r6,r3,zero
102181e4:	418cb03a 	or	r6,r8,r6
102181e8:	31ccb03a 	or	r6,r6,r7
102181ec:	0007883a 	mov	r3,zero
102181f0:	003fc006 	br	102180f4 <__truncdfsf2+0x60>
102181f4:	00c0df84 	movi	r3,894
102181f8:	1a07c83a 	sub	r3,r3,r8
102181fc:	01000804 	movi	r4,32
10218200:	30c6d83a 	srl	r3,r6,r3
10218204:	11000726 	beq	r2,r4,10218224 <__truncdfsf2+0x190>
10218208:	423f2884 	addi	r8,r8,-862
1021820c:	3210983a 	sll	r8,r6,r8
10218210:	41ceb03a 	or	r7,r8,r7
10218214:	380ec03a 	cmpne	r7,r7,zero
10218218:	38ccb03a 	or	r6,r7,r3
1021821c:	0007883a 	mov	r3,zero
10218220:	003fb406 	br	102180f4 <__truncdfsf2+0x60>
10218224:	0011883a 	mov	r8,zero
10218228:	003ff906 	br	10218210 <__truncdfsf2+0x17c>

1021822c <__clzsi2>:
1021822c:	00bfffd4 	movui	r2,65535
10218230:	11000b36 	bltu	r2,r4,10218260 <__clzsi2+0x34>
10218234:	00803fc4 	movi	r2,255
10218238:	1100122e 	bgeu	r2,r4,10218284 <__clzsi2+0x58>
1021823c:	00c00204 	movi	r3,8
10218240:	01400604 	movi	r5,24
10218244:	20c8d83a 	srl	r4,r4,r3
10218248:	008408b4 	movhi	r2,4130
1021824c:	10b59184 	addi	r2,r2,-10682
10218250:	1109883a 	add	r4,r2,r4
10218254:	20800003 	ldbu	r2,0(r4)
10218258:	2885c83a 	sub	r2,r5,r2
1021825c:	f800283a 	ret
10218260:	00804034 	movhi	r2,256
10218264:	10bfffc4 	addi	r2,r2,-1
10218268:	11000336 	bltu	r2,r4,10218278 <__clzsi2+0x4c>
1021826c:	00c00404 	movi	r3,16
10218270:	180b883a 	mov	r5,r3
10218274:	003ff306 	br	10218244 <__clzsi2+0x18>
10218278:	00c00604 	movi	r3,24
1021827c:	01400204 	movi	r5,8
10218280:	003ff006 	br	10218244 <__clzsi2+0x18>
10218284:	0007883a 	mov	r3,zero
10218288:	01400804 	movi	r5,32
1021828c:	003fed06 	br	10218244 <__clzsi2+0x18>

10218290 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10218290:	defffe04 	addi	sp,sp,-8
10218294:	dfc00115 	stw	ra,4(sp)
10218298:	df000015 	stw	fp,0(sp)
1021829c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
102182a0:	008408b4 	movhi	r2,4130
102182a4:	10bd1204 	addi	r2,r2,-3000
102182a8:	10800017 	ldw	r2,0(r2)
102182ac:	10000526 	beq	r2,zero,102182c4 <alt_get_errno+0x34>
102182b0:	008408b4 	movhi	r2,4130
102182b4:	10bd1204 	addi	r2,r2,-3000
102182b8:	10800017 	ldw	r2,0(r2)
102182bc:	103ee83a 	callr	r2
102182c0:	00000206 	br	102182cc <alt_get_errno+0x3c>
102182c4:	008408b4 	movhi	r2,4130
102182c8:	10845804 	addi	r2,r2,4448
}
102182cc:	e037883a 	mov	sp,fp
102182d0:	dfc00117 	ldw	ra,4(sp)
102182d4:	df000017 	ldw	fp,0(sp)
102182d8:	dec00204 	addi	sp,sp,8
102182dc:	f800283a 	ret

102182e0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
102182e0:	defffb04 	addi	sp,sp,-20
102182e4:	dfc00415 	stw	ra,16(sp)
102182e8:	df000315 	stw	fp,12(sp)
102182ec:	df000304 	addi	fp,sp,12
102182f0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
102182f4:	e0bfff17 	ldw	r2,-4(fp)
102182f8:	10000616 	blt	r2,zero,10218314 <close+0x34>
102182fc:	e0bfff17 	ldw	r2,-4(fp)
10218300:	10c00324 	muli	r3,r2,12
10218304:	008408b4 	movhi	r2,4130
10218308:	10b81404 	addi	r2,r2,-8112
1021830c:	1885883a 	add	r2,r3,r2
10218310:	00000106 	br	10218318 <close+0x38>
10218314:	0005883a 	mov	r2,zero
10218318:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1021831c:	e0bffd17 	ldw	r2,-12(fp)
10218320:	10001926 	beq	r2,zero,10218388 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10218324:	e0bffd17 	ldw	r2,-12(fp)
10218328:	10800017 	ldw	r2,0(r2)
1021832c:	10800417 	ldw	r2,16(r2)
10218330:	10000626 	beq	r2,zero,1021834c <close+0x6c>
10218334:	e0bffd17 	ldw	r2,-12(fp)
10218338:	10800017 	ldw	r2,0(r2)
1021833c:	10800417 	ldw	r2,16(r2)
10218340:	e13ffd17 	ldw	r4,-12(fp)
10218344:	103ee83a 	callr	r2
10218348:	00000106 	br	10218350 <close+0x70>
1021834c:	0005883a 	mov	r2,zero
10218350:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10218354:	e13fff17 	ldw	r4,-4(fp)
10218358:	0218b080 	call	10218b08 <alt_release_fd>
    if (rval < 0)
1021835c:	e0bffe17 	ldw	r2,-8(fp)
10218360:	1000070e 	bge	r2,zero,10218380 <close+0xa0>
    {
      ALT_ERRNO = -rval;
10218364:	02182900 	call	10218290 <alt_get_errno>
10218368:	1007883a 	mov	r3,r2
1021836c:	e0bffe17 	ldw	r2,-8(fp)
10218370:	0085c83a 	sub	r2,zero,r2
10218374:	18800015 	stw	r2,0(r3)
      return -1;
10218378:	00bfffc4 	movi	r2,-1
1021837c:	00000706 	br	1021839c <close+0xbc>
    }
    return 0;
10218380:	0005883a 	mov	r2,zero
10218384:	00000506 	br	1021839c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10218388:	02182900 	call	10218290 <alt_get_errno>
1021838c:	1007883a 	mov	r3,r2
10218390:	00801444 	movi	r2,81
10218394:	18800015 	stw	r2,0(r3)
    return -1;
10218398:	00bfffc4 	movi	r2,-1
  }
}
1021839c:	e037883a 	mov	sp,fp
102183a0:	dfc00117 	ldw	ra,4(sp)
102183a4:	df000017 	ldw	fp,0(sp)
102183a8:	dec00204 	addi	sp,sp,8
102183ac:	f800283a 	ret

102183b0 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
102183b0:	defffb04 	addi	sp,sp,-20
102183b4:	df000415 	stw	fp,16(sp)
102183b8:	df000404 	addi	fp,sp,16
102183bc:	e13ffe15 	stw	r4,-8(fp)
102183c0:	e17fff15 	stw	r5,-4(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
102183c4:	e0fffe17 	ldw	r3,-8(fp)
102183c8:	e0bfff17 	ldw	r2,-4(fp)
102183cc:	1885883a 	add	r2,r3,r2
102183d0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
102183d4:	e0bffe17 	ldw	r2,-8(fp)
102183d8:	e0bffc15 	stw	r2,-16(fp)
102183dc:	00000506 	br	102183f4 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
102183e0:	e0bffc17 	ldw	r2,-16(fp)
102183e4:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
102183e8:	e0bffc17 	ldw	r2,-16(fp)
102183ec:	10800804 	addi	r2,r2,32
102183f0:	e0bffc15 	stw	r2,-16(fp)
102183f4:	e0fffc17 	ldw	r3,-16(fp)
102183f8:	e0bffd17 	ldw	r2,-12(fp)
102183fc:	18bff836 	bltu	r3,r2,102183e0 <alt_dcache_flush+0x30>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
10218400:	e0bffe17 	ldw	r2,-8(fp)
10218404:	108007cc 	andi	r2,r2,31
10218408:	10000226 	beq	r2,zero,10218414 <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
1021840c:	e0bffc17 	ldw	r2,-16(fp)
10218410:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10218414:	e037883a 	mov	sp,fp
10218418:	df000017 	ldw	fp,0(sp)
1021841c:	dec00104 	addi	sp,sp,4
10218420:	f800283a 	ret

10218424 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10218424:	defffc04 	addi	sp,sp,-16
10218428:	df000315 	stw	fp,12(sp)
1021842c:	df000304 	addi	fp,sp,12
10218430:	e13ffd15 	stw	r4,-12(fp)
10218434:	e17ffe15 	stw	r5,-8(fp)
10218438:	e1bfff15 	stw	r6,-4(fp)
  return len;
1021843c:	e0bfff17 	ldw	r2,-4(fp)
}
10218440:	e037883a 	mov	sp,fp
10218444:	df000017 	ldw	fp,0(sp)
10218448:	dec00104 	addi	sp,sp,4
1021844c:	f800283a 	ret

10218450 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
10218450:	defffc04 	addi	sp,sp,-16
10218454:	dfc00315 	stw	ra,12(sp)
10218458:	df000215 	stw	fp,8(sp)
1021845c:	df000204 	addi	fp,sp,8
10218460:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
10218464:	e13fff17 	ldw	r4,-4(fp)
10218468:	d1600e04 	addi	r5,gp,-32712
1021846c:	021b49c0 	call	1021b49c <alt_find_dev>
10218470:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
10218474:	e0bffe17 	ldw	r2,-8(fp)
10218478:	10000926 	beq	r2,zero,102184a0 <alt_flash_open_dev+0x50>
1021847c:	e0bffe17 	ldw	r2,-8(fp)
10218480:	10800317 	ldw	r2,12(r2)
10218484:	10000626 	beq	r2,zero,102184a0 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
10218488:	e0bffe17 	ldw	r2,-8(fp)
1021848c:	10800317 	ldw	r2,12(r2)
10218490:	e13ffe17 	ldw	r4,-8(fp)
10218494:	e17fff17 	ldw	r5,-4(fp)
10218498:	103ee83a 	callr	r2
1021849c:	00000106 	br	102184a4 <alt_flash_open_dev+0x54>
  }

  return dev;
102184a0:	e0bffe17 	ldw	r2,-8(fp)
}
102184a4:	e037883a 	mov	sp,fp
102184a8:	dfc00117 	ldw	ra,4(sp)
102184ac:	df000017 	ldw	fp,0(sp)
102184b0:	dec00204 	addi	sp,sp,8
102184b4:	f800283a 	ret

102184b8 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
102184b8:	defffd04 	addi	sp,sp,-12
102184bc:	dfc00215 	stw	ra,8(sp)
102184c0:	df000115 	stw	fp,4(sp)
102184c4:	df000104 	addi	fp,sp,4
102184c8:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
102184cc:	e0bfff17 	ldw	r2,-4(fp)
102184d0:	10000726 	beq	r2,zero,102184f0 <alt_flash_close_dev+0x38>
102184d4:	e0bfff17 	ldw	r2,-4(fp)
102184d8:	10800417 	ldw	r2,16(r2)
102184dc:	10000426 	beq	r2,zero,102184f0 <alt_flash_close_dev+0x38>
  {
    fd->close(fd);
102184e0:	e0bfff17 	ldw	r2,-4(fp)
102184e4:	10800417 	ldw	r2,16(r2)
102184e8:	e13fff17 	ldw	r4,-4(fp)
102184ec:	103ee83a 	callr	r2
  }
  return;
102184f0:	0001883a 	nop
}
102184f4:	e037883a 	mov	sp,fp
102184f8:	dfc00117 	ldw	ra,4(sp)
102184fc:	df000017 	ldw	fp,0(sp)
10218500:	dec00204 	addi	sp,sp,8
10218504:	f800283a 	ret

10218508 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10218508:	defffe04 	addi	sp,sp,-8
1021850c:	dfc00115 	stw	ra,4(sp)
10218510:	df000015 	stw	fp,0(sp)
10218514:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10218518:	008408b4 	movhi	r2,4130
1021851c:	10bd1204 	addi	r2,r2,-3000
10218520:	10800017 	ldw	r2,0(r2)
10218524:	10000526 	beq	r2,zero,1021853c <alt_get_errno+0x34>
10218528:	008408b4 	movhi	r2,4130
1021852c:	10bd1204 	addi	r2,r2,-3000
10218530:	10800017 	ldw	r2,0(r2)
10218534:	103ee83a 	callr	r2
10218538:	00000206 	br	10218544 <alt_get_errno+0x3c>
1021853c:	008408b4 	movhi	r2,4130
10218540:	10845804 	addi	r2,r2,4448
}
10218544:	e037883a 	mov	sp,fp
10218548:	dfc00117 	ldw	ra,4(sp)
1021854c:	df000017 	ldw	fp,0(sp)
10218550:	dec00204 	addi	sp,sp,8
10218554:	f800283a 	ret

10218558 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
10218558:	defffb04 	addi	sp,sp,-20
1021855c:	dfc00415 	stw	ra,16(sp)
10218560:	df000315 	stw	fp,12(sp)
10218564:	df000304 	addi	fp,sp,12
10218568:	e13ffe15 	stw	r4,-8(fp)
1021856c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10218570:	e0bffe17 	ldw	r2,-8(fp)
10218574:	10000616 	blt	r2,zero,10218590 <fstat+0x38>
10218578:	e0bffe17 	ldw	r2,-8(fp)
1021857c:	10c00324 	muli	r3,r2,12
10218580:	008408b4 	movhi	r2,4130
10218584:	10b81404 	addi	r2,r2,-8112
10218588:	1885883a 	add	r2,r3,r2
1021858c:	00000106 	br	10218594 <fstat+0x3c>
10218590:	0005883a 	mov	r2,zero
10218594:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10218598:	e0bffd17 	ldw	r2,-12(fp)
1021859c:	10001026 	beq	r2,zero,102185e0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
102185a0:	e0bffd17 	ldw	r2,-12(fp)
102185a4:	10800017 	ldw	r2,0(r2)
102185a8:	10800817 	ldw	r2,32(r2)
102185ac:	10000726 	beq	r2,zero,102185cc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
102185b0:	e0bffd17 	ldw	r2,-12(fp)
102185b4:	10800017 	ldw	r2,0(r2)
102185b8:	10800817 	ldw	r2,32(r2)
102185bc:	e13ffd17 	ldw	r4,-12(fp)
102185c0:	e17fff17 	ldw	r5,-4(fp)
102185c4:	103ee83a 	callr	r2
102185c8:	00000a06 	br	102185f4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
102185cc:	e0bfff17 	ldw	r2,-4(fp)
102185d0:	00c80004 	movi	r3,8192
102185d4:	10c00115 	stw	r3,4(r2)
      return 0;
102185d8:	0005883a 	mov	r2,zero
102185dc:	00000506 	br	102185f4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
102185e0:	02185080 	call	10218508 <alt_get_errno>
102185e4:	1007883a 	mov	r3,r2
102185e8:	00801444 	movi	r2,81
102185ec:	18800015 	stw	r2,0(r3)
    return -1;
102185f0:	00bfffc4 	movi	r2,-1
  }
}
102185f4:	e037883a 	mov	sp,fp
102185f8:	dfc00117 	ldw	ra,4(sp)
102185fc:	df000017 	ldw	fp,0(sp)
10218600:	dec00204 	addi	sp,sp,8
10218604:	f800283a 	ret

10218608 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10218608:	defffe04 	addi	sp,sp,-8
1021860c:	dfc00115 	stw	ra,4(sp)
10218610:	df000015 	stw	fp,0(sp)
10218614:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10218618:	008408b4 	movhi	r2,4130
1021861c:	10bd1204 	addi	r2,r2,-3000
10218620:	10800017 	ldw	r2,0(r2)
10218624:	10000526 	beq	r2,zero,1021863c <alt_get_errno+0x34>
10218628:	008408b4 	movhi	r2,4130
1021862c:	10bd1204 	addi	r2,r2,-3000
10218630:	10800017 	ldw	r2,0(r2)
10218634:	103ee83a 	callr	r2
10218638:	00000206 	br	10218644 <alt_get_errno+0x3c>
1021863c:	008408b4 	movhi	r2,4130
10218640:	10845804 	addi	r2,r2,4448
}
10218644:	e037883a 	mov	sp,fp
10218648:	dfc00117 	ldw	ra,4(sp)
1021864c:	df000017 	ldw	fp,0(sp)
10218650:	dec00204 	addi	sp,sp,8
10218654:	f800283a 	ret

10218658 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10218658:	deffed04 	addi	sp,sp,-76
1021865c:	dfc01215 	stw	ra,72(sp)
10218660:	df001115 	stw	fp,68(sp)
10218664:	df001104 	addi	fp,sp,68
10218668:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1021866c:	e0bfff17 	ldw	r2,-4(fp)
10218670:	10000616 	blt	r2,zero,1021868c <isatty+0x34>
10218674:	e0bfff17 	ldw	r2,-4(fp)
10218678:	10c00324 	muli	r3,r2,12
1021867c:	008408b4 	movhi	r2,4130
10218680:	10b81404 	addi	r2,r2,-8112
10218684:	1885883a 	add	r2,r3,r2
10218688:	00000106 	br	10218690 <isatty+0x38>
1021868c:	0005883a 	mov	r2,zero
10218690:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10218694:	e0bfef17 	ldw	r2,-68(fp)
10218698:	10000e26 	beq	r2,zero,102186d4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1021869c:	e0bfef17 	ldw	r2,-68(fp)
102186a0:	10800017 	ldw	r2,0(r2)
102186a4:	10800817 	ldw	r2,32(r2)
102186a8:	1000021e 	bne	r2,zero,102186b4 <isatty+0x5c>
    {
      return 1;
102186ac:	00800044 	movi	r2,1
102186b0:	00000d06 	br	102186e8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
102186b4:	e0bff004 	addi	r2,fp,-64
102186b8:	e13fff17 	ldw	r4,-4(fp)
102186bc:	100b883a 	mov	r5,r2
102186c0:	02185580 	call	10218558 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
102186c4:	e0bff117 	ldw	r2,-60(fp)
102186c8:	10880020 	cmpeqi	r2,r2,8192
102186cc:	10803fcc 	andi	r2,r2,255
102186d0:	00000506 	br	102186e8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
102186d4:	02186080 	call	10218608 <alt_get_errno>
102186d8:	1007883a 	mov	r3,r2
102186dc:	00801444 	movi	r2,81
102186e0:	18800015 	stw	r2,0(r3)
    return 0;
102186e4:	0005883a 	mov	r2,zero
  }
}
102186e8:	e037883a 	mov	sp,fp
102186ec:	dfc00117 	ldw	ra,4(sp)
102186f0:	df000017 	ldw	fp,0(sp)
102186f4:	dec00204 	addi	sp,sp,8
102186f8:	f800283a 	ret

102186fc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
102186fc:	defffc04 	addi	sp,sp,-16
10218700:	df000315 	stw	fp,12(sp)
10218704:	df000304 	addi	fp,sp,12
10218708:	e13ffd15 	stw	r4,-12(fp)
1021870c:	e17ffe15 	stw	r5,-8(fp)
10218710:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10218714:	e0fffe17 	ldw	r3,-8(fp)
10218718:	e0bffd17 	ldw	r2,-12(fp)
1021871c:	18800c26 	beq	r3,r2,10218750 <alt_load_section+0x54>
  {
    while( to != end )
10218720:	00000806 	br	10218744 <alt_load_section+0x48>
    {
      *to++ = *from++;
10218724:	e0bffe17 	ldw	r2,-8(fp)
10218728:	10c00104 	addi	r3,r2,4
1021872c:	e0fffe15 	stw	r3,-8(fp)
10218730:	e0fffd17 	ldw	r3,-12(fp)
10218734:	19000104 	addi	r4,r3,4
10218738:	e13ffd15 	stw	r4,-12(fp)
1021873c:	18c00017 	ldw	r3,0(r3)
10218740:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10218744:	e0fffe17 	ldw	r3,-8(fp)
10218748:	e0bfff17 	ldw	r2,-4(fp)
1021874c:	18bff51e 	bne	r3,r2,10218724 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
10218750:	e037883a 	mov	sp,fp
10218754:	df000017 	ldw	fp,0(sp)
10218758:	dec00104 	addi	sp,sp,4
1021875c:	f800283a 	ret

10218760 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10218760:	defffe04 	addi	sp,sp,-8
10218764:	dfc00115 	stw	ra,4(sp)
10218768:	df000015 	stw	fp,0(sp)
1021876c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10218770:	010408b4 	movhi	r4,4130
10218774:	213d1a04 	addi	r4,r4,-2968
10218778:	014408b4 	movhi	r5,4130
1021877c:	2975e104 	addi	r5,r5,-10364
10218780:	018408b4 	movhi	r6,4130
10218784:	31bd1a04 	addi	r6,r6,-2968
10218788:	02186fc0 	call	102186fc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1021878c:	01040834 	movhi	r4,4128
10218790:	21000004 	addi	r4,r4,0
10218794:	01441074 	movhi	r5,4161
10218798:	29600804 	addi	r5,r5,-32736
1021879c:	01841074 	movhi	r6,4161
102187a0:	31a09004 	addi	r6,r6,-32192
102187a4:	02186fc0 	call	102186fc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
102187a8:	010408b4 	movhi	r4,4130
102187ac:	21314d04 	addi	r4,r4,-15052
102187b0:	014408b4 	movhi	r5,4130
102187b4:	29714d04 	addi	r5,r5,-15052
102187b8:	018408b4 	movhi	r6,4130
102187bc:	31b5e104 	addi	r6,r6,-10364
102187c0:	02186fc0 	call	102186fc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
102187c4:	021b2ac0 	call	1021b2ac <alt_dcache_flush_all>
  alt_icache_flush_all();
102187c8:	021b52c0 	call	1021b52c <alt_icache_flush_all>
}
102187cc:	e037883a 	mov	sp,fp
102187d0:	dfc00117 	ldw	ra,4(sp)
102187d4:	df000017 	ldw	fp,0(sp)
102187d8:	dec00204 	addi	sp,sp,8
102187dc:	f800283a 	ret

102187e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
102187e0:	defffe04 	addi	sp,sp,-8
102187e4:	dfc00115 	stw	ra,4(sp)
102187e8:	df000015 	stw	fp,0(sp)
102187ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
102187f0:	008408b4 	movhi	r2,4130
102187f4:	10bd1204 	addi	r2,r2,-3000
102187f8:	10800017 	ldw	r2,0(r2)
102187fc:	10000526 	beq	r2,zero,10218814 <alt_get_errno+0x34>
10218800:	008408b4 	movhi	r2,4130
10218804:	10bd1204 	addi	r2,r2,-3000
10218808:	10800017 	ldw	r2,0(r2)
1021880c:	103ee83a 	callr	r2
10218810:	00000206 	br	1021881c <alt_get_errno+0x3c>
10218814:	008408b4 	movhi	r2,4130
10218818:	10845804 	addi	r2,r2,4448
}
1021881c:	e037883a 	mov	sp,fp
10218820:	dfc00117 	ldw	ra,4(sp)
10218824:	df000017 	ldw	fp,0(sp)
10218828:	dec00204 	addi	sp,sp,8
1021882c:	f800283a 	ret

10218830 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10218830:	defff904 	addi	sp,sp,-28
10218834:	dfc00615 	stw	ra,24(sp)
10218838:	df000515 	stw	fp,20(sp)
1021883c:	df000504 	addi	fp,sp,20
10218840:	e13ffd15 	stw	r4,-12(fp)
10218844:	e17ffe15 	stw	r5,-8(fp)
10218848:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1021884c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10218850:	e0bffd17 	ldw	r2,-12(fp)
10218854:	10000616 	blt	r2,zero,10218870 <lseek+0x40>
10218858:	e0bffd17 	ldw	r2,-12(fp)
1021885c:	10c00324 	muli	r3,r2,12
10218860:	008408b4 	movhi	r2,4130
10218864:	10b81404 	addi	r2,r2,-8112
10218868:	1885883a 	add	r2,r3,r2
1021886c:	00000106 	br	10218874 <lseek+0x44>
10218870:	0005883a 	mov	r2,zero
10218874:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10218878:	e0bffc17 	ldw	r2,-16(fp)
1021887c:	10001026 	beq	r2,zero,102188c0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10218880:	e0bffc17 	ldw	r2,-16(fp)
10218884:	10800017 	ldw	r2,0(r2)
10218888:	10800717 	ldw	r2,28(r2)
1021888c:	10000926 	beq	r2,zero,102188b4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10218890:	e0bffc17 	ldw	r2,-16(fp)
10218894:	10800017 	ldw	r2,0(r2)
10218898:	10800717 	ldw	r2,28(r2)
1021889c:	e13ffc17 	ldw	r4,-16(fp)
102188a0:	e17ffe17 	ldw	r5,-8(fp)
102188a4:	e1bfff17 	ldw	r6,-4(fp)
102188a8:	103ee83a 	callr	r2
102188ac:	e0bffb15 	stw	r2,-20(fp)
102188b0:	00000506 	br	102188c8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
102188b4:	00bfde84 	movi	r2,-134
102188b8:	e0bffb15 	stw	r2,-20(fp)
102188bc:	00000206 	br	102188c8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
102188c0:	00bfebc4 	movi	r2,-81
102188c4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
102188c8:	e0bffb17 	ldw	r2,-20(fp)
102188cc:	1000070e 	bge	r2,zero,102188ec <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
102188d0:	02187e00 	call	102187e0 <alt_get_errno>
102188d4:	1007883a 	mov	r3,r2
102188d8:	e0bffb17 	ldw	r2,-20(fp)
102188dc:	0085c83a 	sub	r2,zero,r2
102188e0:	18800015 	stw	r2,0(r3)
    rc = -1;
102188e4:	00bfffc4 	movi	r2,-1
102188e8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
102188ec:	e0bffb17 	ldw	r2,-20(fp)
}
102188f0:	e037883a 	mov	sp,fp
102188f4:	dfc00117 	ldw	ra,4(sp)
102188f8:	df000017 	ldw	fp,0(sp)
102188fc:	dec00204 	addi	sp,sp,8
10218900:	f800283a 	ret

10218904 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10218904:	defffd04 	addi	sp,sp,-12
10218908:	dfc00215 	stw	ra,8(sp)
1021890c:	df000115 	stw	fp,4(sp)
10218910:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10218914:	0009883a 	mov	r4,zero
10218918:	0218d980 	call	10218d98 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1021891c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10218920:	0218dcc0 	call	10218dcc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10218924:	010408b4 	movhi	r4,4130
10218928:	2135d504 	addi	r4,r4,-10412
1021892c:	014408b4 	movhi	r5,4130
10218930:	2975d504 	addi	r5,r5,-10412
10218934:	018408b4 	movhi	r6,4130
10218938:	31b5d504 	addi	r6,r6,-10412
1021893c:	021b8ec0 	call	1021b8ec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10218940:	021b3e40 	call	1021b3e4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10218944:	010408b4 	movhi	r4,4130
10218948:	212d1004 	addi	r4,r4,-19392
1021894c:	021c20c0 	call	1021c20c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10218950:	d1275717 	ldw	r4,-25252(gp)
10218954:	d0e75817 	ldw	r3,-25248(gp)
10218958:	d0a75917 	ldw	r2,-25244(gp)
1021895c:	180b883a 	mov	r5,r3
10218960:	100d883a 	mov	r6,r2
10218964:	02023040 	call	10202304 <main>
10218968:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1021896c:	01000044 	movi	r4,1
10218970:	02182e00 	call	102182e0 <close>
  exit (result);
10218974:	e13fff17 	ldw	r4,-4(fp)
10218978:	021c2200 	call	1021c220 <exit>

1021897c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1021897c:	defffe04 	addi	sp,sp,-8
10218980:	df000115 	stw	fp,4(sp)
10218984:	df000104 	addi	fp,sp,4
10218988:	e13fff15 	stw	r4,-4(fp)
}
1021898c:	e037883a 	mov	sp,fp
10218990:	df000017 	ldw	fp,0(sp)
10218994:	dec00104 	addi	sp,sp,4
10218998:	f800283a 	ret

1021899c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1021899c:	defffe04 	addi	sp,sp,-8
102189a0:	df000115 	stw	fp,4(sp)
102189a4:	df000104 	addi	fp,sp,4
102189a8:	e13fff15 	stw	r4,-4(fp)
}
102189ac:	e037883a 	mov	sp,fp
102189b0:	df000017 	ldw	fp,0(sp)
102189b4:	dec00104 	addi	sp,sp,4
102189b8:	f800283a 	ret

102189bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
102189bc:	defffe04 	addi	sp,sp,-8
102189c0:	dfc00115 	stw	ra,4(sp)
102189c4:	df000015 	stw	fp,0(sp)
102189c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
102189cc:	008408b4 	movhi	r2,4130
102189d0:	10bd1204 	addi	r2,r2,-3000
102189d4:	10800017 	ldw	r2,0(r2)
102189d8:	10000526 	beq	r2,zero,102189f0 <alt_get_errno+0x34>
102189dc:	008408b4 	movhi	r2,4130
102189e0:	10bd1204 	addi	r2,r2,-3000
102189e4:	10800017 	ldw	r2,0(r2)
102189e8:	103ee83a 	callr	r2
102189ec:	00000206 	br	102189f8 <alt_get_errno+0x3c>
102189f0:	008408b4 	movhi	r2,4130
102189f4:	10845804 	addi	r2,r2,4448
}
102189f8:	e037883a 	mov	sp,fp
102189fc:	dfc00117 	ldw	ra,4(sp)
10218a00:	df000017 	ldw	fp,0(sp)
10218a04:	dec00204 	addi	sp,sp,8
10218a08:	f800283a 	ret

10218a0c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10218a0c:	defff904 	addi	sp,sp,-28
10218a10:	dfc00615 	stw	ra,24(sp)
10218a14:	df000515 	stw	fp,20(sp)
10218a18:	df000504 	addi	fp,sp,20
10218a1c:	e13ffd15 	stw	r4,-12(fp)
10218a20:	e17ffe15 	stw	r5,-8(fp)
10218a24:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10218a28:	e0bffd17 	ldw	r2,-12(fp)
10218a2c:	10000616 	blt	r2,zero,10218a48 <read+0x3c>
10218a30:	e0bffd17 	ldw	r2,-12(fp)
10218a34:	10c00324 	muli	r3,r2,12
10218a38:	008408b4 	movhi	r2,4130
10218a3c:	10b81404 	addi	r2,r2,-8112
10218a40:	1885883a 	add	r2,r3,r2
10218a44:	00000106 	br	10218a4c <read+0x40>
10218a48:	0005883a 	mov	r2,zero
10218a4c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10218a50:	e0bffb17 	ldw	r2,-20(fp)
10218a54:	10002226 	beq	r2,zero,10218ae0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10218a58:	e0bffb17 	ldw	r2,-20(fp)
10218a5c:	10800217 	ldw	r2,8(r2)
10218a60:	108000cc 	andi	r2,r2,3
10218a64:	10800060 	cmpeqi	r2,r2,1
10218a68:	1000181e 	bne	r2,zero,10218acc <read+0xc0>
        (fd->dev->read))
10218a6c:	e0bffb17 	ldw	r2,-20(fp)
10218a70:	10800017 	ldw	r2,0(r2)
10218a74:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10218a78:	10001426 	beq	r2,zero,10218acc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10218a7c:	e0bffb17 	ldw	r2,-20(fp)
10218a80:	10800017 	ldw	r2,0(r2)
10218a84:	10800517 	ldw	r2,20(r2)
10218a88:	e0ffff17 	ldw	r3,-4(fp)
10218a8c:	e13ffb17 	ldw	r4,-20(fp)
10218a90:	e17ffe17 	ldw	r5,-8(fp)
10218a94:	180d883a 	mov	r6,r3
10218a98:	103ee83a 	callr	r2
10218a9c:	e0bffc15 	stw	r2,-16(fp)
10218aa0:	e0bffc17 	ldw	r2,-16(fp)
10218aa4:	1000070e 	bge	r2,zero,10218ac4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
10218aa8:	02189bc0 	call	102189bc <alt_get_errno>
10218aac:	1007883a 	mov	r3,r2
10218ab0:	e0bffc17 	ldw	r2,-16(fp)
10218ab4:	0085c83a 	sub	r2,zero,r2
10218ab8:	18800015 	stw	r2,0(r3)
          return -1;
10218abc:	00bfffc4 	movi	r2,-1
10218ac0:	00000c06 	br	10218af4 <read+0xe8>
        }
        return rval;
10218ac4:	e0bffc17 	ldw	r2,-16(fp)
10218ac8:	00000a06 	br	10218af4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
10218acc:	02189bc0 	call	102189bc <alt_get_errno>
10218ad0:	1007883a 	mov	r3,r2
10218ad4:	00800344 	movi	r2,13
10218ad8:	18800015 	stw	r2,0(r3)
10218adc:	00000406 	br	10218af0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10218ae0:	02189bc0 	call	102189bc <alt_get_errno>
10218ae4:	1007883a 	mov	r3,r2
10218ae8:	00801444 	movi	r2,81
10218aec:	18800015 	stw	r2,0(r3)
  }
  return -1;
10218af0:	00bfffc4 	movi	r2,-1
}
10218af4:	e037883a 	mov	sp,fp
10218af8:	dfc00117 	ldw	ra,4(sp)
10218afc:	df000017 	ldw	fp,0(sp)
10218b00:	dec00204 	addi	sp,sp,8
10218b04:	f800283a 	ret

10218b08 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10218b08:	defffe04 	addi	sp,sp,-8
10218b0c:	df000115 	stw	fp,4(sp)
10218b10:	df000104 	addi	fp,sp,4
10218b14:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
10218b18:	e0bfff17 	ldw	r2,-4(fp)
10218b1c:	108000d0 	cmplti	r2,r2,3
10218b20:	10000d1e 	bne	r2,zero,10218b58 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
10218b24:	008408b4 	movhi	r2,4130
10218b28:	10b81404 	addi	r2,r2,-8112
10218b2c:	e0ffff17 	ldw	r3,-4(fp)
10218b30:	18c00324 	muli	r3,r3,12
10218b34:	18c00204 	addi	r3,r3,8
10218b38:	10c5883a 	add	r2,r2,r3
10218b3c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10218b40:	008408b4 	movhi	r2,4130
10218b44:	10b81404 	addi	r2,r2,-8112
10218b48:	e0ffff17 	ldw	r3,-4(fp)
10218b4c:	18c00324 	muli	r3,r3,12
10218b50:	10c5883a 	add	r2,r2,r3
10218b54:	10000015 	stw	zero,0(r2)
  }
}
10218b58:	e037883a 	mov	sp,fp
10218b5c:	df000017 	ldw	fp,0(sp)
10218b60:	dec00104 	addi	sp,sp,4
10218b64:	f800283a 	ret

10218b68 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10218b68:	defff904 	addi	sp,sp,-28
10218b6c:	df000615 	stw	fp,24(sp)
10218b70:	df000604 	addi	fp,sp,24
10218b74:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10218b78:	0005303a 	rdctl	r2,status
10218b7c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10218b80:	e0fffc17 	ldw	r3,-16(fp)
10218b84:	00bfff84 	movi	r2,-2
10218b88:	1884703a 	and	r2,r3,r2
10218b8c:	1001703a 	wrctl	status,r2
  
  return context;
10218b90:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10218b94:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10218b98:	d0a01017 	ldw	r2,-32704(gp)
10218b9c:	10c000c4 	addi	r3,r2,3
10218ba0:	00bfff04 	movi	r2,-4
10218ba4:	1884703a 	and	r2,r3,r2
10218ba8:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10218bac:	d0e01017 	ldw	r3,-32704(gp)
10218bb0:	e0bfff17 	ldw	r2,-4(fp)
10218bb4:	1887883a 	add	r3,r3,r2
10218bb8:	00841034 	movhi	r2,4160
10218bbc:	10800004 	addi	r2,r2,0
10218bc0:	10c0062e 	bgeu	r2,r3,10218bdc <sbrk+0x74>
10218bc4:	e0bffa17 	ldw	r2,-24(fp)
10218bc8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10218bcc:	e0bffd17 	ldw	r2,-12(fp)
10218bd0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10218bd4:	00bfffc4 	movi	r2,-1
10218bd8:	00000b06 	br	10218c08 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10218bdc:	d0a01017 	ldw	r2,-32704(gp)
10218be0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
10218be4:	d0e01017 	ldw	r3,-32704(gp)
10218be8:	e0bfff17 	ldw	r2,-4(fp)
10218bec:	1885883a 	add	r2,r3,r2
10218bf0:	d0a01015 	stw	r2,-32704(gp)
10218bf4:	e0bffa17 	ldw	r2,-24(fp)
10218bf8:	e0bffe15 	stw	r2,-8(fp)
10218bfc:	e0bffe17 	ldw	r2,-8(fp)
10218c00:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10218c04:	e0bffb17 	ldw	r2,-20(fp)
} 
10218c08:	e037883a 	mov	sp,fp
10218c0c:	df000017 	ldw	fp,0(sp)
10218c10:	dec00104 	addi	sp,sp,4
10218c14:	f800283a 	ret

10218c18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10218c18:	defffe04 	addi	sp,sp,-8
10218c1c:	dfc00115 	stw	ra,4(sp)
10218c20:	df000015 	stw	fp,0(sp)
10218c24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10218c28:	008408b4 	movhi	r2,4130
10218c2c:	10bd1204 	addi	r2,r2,-3000
10218c30:	10800017 	ldw	r2,0(r2)
10218c34:	10000526 	beq	r2,zero,10218c4c <alt_get_errno+0x34>
10218c38:	008408b4 	movhi	r2,4130
10218c3c:	10bd1204 	addi	r2,r2,-3000
10218c40:	10800017 	ldw	r2,0(r2)
10218c44:	103ee83a 	callr	r2
10218c48:	00000206 	br	10218c54 <alt_get_errno+0x3c>
10218c4c:	008408b4 	movhi	r2,4130
10218c50:	10845804 	addi	r2,r2,4448
}
10218c54:	e037883a 	mov	sp,fp
10218c58:	dfc00117 	ldw	ra,4(sp)
10218c5c:	df000017 	ldw	fp,0(sp)
10218c60:	dec00204 	addi	sp,sp,8
10218c64:	f800283a 	ret

10218c68 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10218c68:	defff904 	addi	sp,sp,-28
10218c6c:	dfc00615 	stw	ra,24(sp)
10218c70:	df000515 	stw	fp,20(sp)
10218c74:	df000504 	addi	fp,sp,20
10218c78:	e13ffd15 	stw	r4,-12(fp)
10218c7c:	e17ffe15 	stw	r5,-8(fp)
10218c80:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10218c84:	e0bffd17 	ldw	r2,-12(fp)
10218c88:	10000616 	blt	r2,zero,10218ca4 <write+0x3c>
10218c8c:	e0bffd17 	ldw	r2,-12(fp)
10218c90:	10c00324 	muli	r3,r2,12
10218c94:	008408b4 	movhi	r2,4130
10218c98:	10b81404 	addi	r2,r2,-8112
10218c9c:	1885883a 	add	r2,r3,r2
10218ca0:	00000106 	br	10218ca8 <write+0x40>
10218ca4:	0005883a 	mov	r2,zero
10218ca8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10218cac:	e0bffb17 	ldw	r2,-20(fp)
10218cb0:	10002126 	beq	r2,zero,10218d38 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10218cb4:	e0bffb17 	ldw	r2,-20(fp)
10218cb8:	10800217 	ldw	r2,8(r2)
10218cbc:	108000cc 	andi	r2,r2,3
10218cc0:	10001826 	beq	r2,zero,10218d24 <write+0xbc>
10218cc4:	e0bffb17 	ldw	r2,-20(fp)
10218cc8:	10800017 	ldw	r2,0(r2)
10218ccc:	10800617 	ldw	r2,24(r2)
10218cd0:	10001426 	beq	r2,zero,10218d24 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10218cd4:	e0bffb17 	ldw	r2,-20(fp)
10218cd8:	10800017 	ldw	r2,0(r2)
10218cdc:	10800617 	ldw	r2,24(r2)
10218ce0:	e0ffff17 	ldw	r3,-4(fp)
10218ce4:	e13ffb17 	ldw	r4,-20(fp)
10218ce8:	e17ffe17 	ldw	r5,-8(fp)
10218cec:	180d883a 	mov	r6,r3
10218cf0:	103ee83a 	callr	r2
10218cf4:	e0bffc15 	stw	r2,-16(fp)
10218cf8:	e0bffc17 	ldw	r2,-16(fp)
10218cfc:	1000070e 	bge	r2,zero,10218d1c <write+0xb4>
      {
        ALT_ERRNO = -rval;
10218d00:	0218c180 	call	10218c18 <alt_get_errno>
10218d04:	1007883a 	mov	r3,r2
10218d08:	e0bffc17 	ldw	r2,-16(fp)
10218d0c:	0085c83a 	sub	r2,zero,r2
10218d10:	18800015 	stw	r2,0(r3)
        return -1;
10218d14:	00bfffc4 	movi	r2,-1
10218d18:	00000c06 	br	10218d4c <write+0xe4>
      }
      return rval;
10218d1c:	e0bffc17 	ldw	r2,-16(fp)
10218d20:	00000a06 	br	10218d4c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
10218d24:	0218c180 	call	10218c18 <alt_get_errno>
10218d28:	1007883a 	mov	r3,r2
10218d2c:	00800344 	movi	r2,13
10218d30:	18800015 	stw	r2,0(r3)
10218d34:	00000406 	br	10218d48 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10218d38:	0218c180 	call	10218c18 <alt_get_errno>
10218d3c:	1007883a 	mov	r3,r2
10218d40:	00801444 	movi	r2,81
10218d44:	18800015 	stw	r2,0(r3)
  }
  return -1;
10218d48:	00bfffc4 	movi	r2,-1
}
10218d4c:	e037883a 	mov	sp,fp
10218d50:	dfc00117 	ldw	ra,4(sp)
10218d54:	df000017 	ldw	fp,0(sp)
10218d58:	dec00204 	addi	sp,sp,8
10218d5c:	f800283a 	ret

10218d60 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10218d60:	defffd04 	addi	sp,sp,-12
10218d64:	dfc00215 	stw	ra,8(sp)
10218d68:	df000115 	stw	fp,4(sp)
10218d6c:	df000104 	addi	fp,sp,4
10218d70:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10218d74:	e13fff17 	ldw	r4,-4(fp)
10218d78:	014408b4 	movhi	r5,4130
10218d7c:	297d0f04 	addi	r5,r5,-3012
10218d80:	021b3400 	call	1021b340 <alt_dev_llist_insert>
}
10218d84:	e037883a 	mov	sp,fp
10218d88:	dfc00117 	ldw	ra,4(sp)
10218d8c:	df000017 	ldw	fp,0(sp)
10218d90:	dec00204 	addi	sp,sp,8
10218d94:	f800283a 	ret

10218d98 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10218d98:	defffd04 	addi	sp,sp,-12
10218d9c:	dfc00215 	stw	ra,8(sp)
10218da0:	df000115 	stw	fp,4(sp)
10218da4:	df000104 	addi	fp,sp,4
10218da8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
10218dac:	021bda40 	call	1021bda4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10218db0:	00800044 	movi	r2,1
10218db4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10218db8:	e037883a 	mov	sp,fp
10218dbc:	dfc00117 	ldw	ra,4(sp)
10218dc0:	df000017 	ldw	fp,0(sp)
10218dc4:	dec00204 	addi	sp,sp,8
10218dc8:	f800283a 	ret

10218dcc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10218dcc:	defffe04 	addi	sp,sp,-8
10218dd0:	dfc00115 	stw	ra,4(sp)
10218dd4:	df000015 	stw	fp,0(sp)
10218dd8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
10218ddc:	01041074 	movhi	r4,4161
10218de0:	21040004 	addi	r4,r4,4096
10218de4:	000b883a 	mov	r5,zero
10218de8:	01800084 	movi	r6,2
10218dec:	01c0fa04 	movi	r7,1000
10218df0:	021a7f40 	call	1021a7f4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
10218df4:	010408b4 	movhi	r4,4130
10218df8:	21387e04 	addi	r4,r4,-7688
10218dfc:	000b883a 	mov	r5,zero
10218e00:	000d883a 	mov	r6,zero
10218e04:	0218fc80 	call	10218fc8 <altera_avalon_jtag_uart_init>
10218e08:	010408b4 	movhi	r4,4130
10218e0c:	21387404 	addi	r4,r4,-7728
10218e10:	0218d600 	call	10218d60 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
10218e14:	010408b4 	movhi	r4,4130
10218e18:	213c9604 	addi	r4,r4,-3496
10218e1c:	021a5e80 	call	1021a5e8 <altera_avalon_lcd_16207_init>
10218e20:	010408b4 	movhi	r4,4130
10218e24:	213c8c04 	addi	r4,r4,-3536
10218e28:	0218d600 	call	10218d60 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
10218e2c:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232, rs232);
10218e30:	010408b4 	movhi	r4,4130
10218e34:	213cde04 	addi	r4,r4,-3208
10218e38:	000b883a 	mov	r5,zero
10218e3c:	01800044 	movi	r6,1
10218e40:	021a98c0 	call	1021a98c <altera_avalon_uart_init>
10218e44:	010408b4 	movhi	r4,4130
10218e48:	213cd404 	addi	r4,r4,-3248
10218e4c:	0218d600 	call	10218d60 <alt_dev_reg>
}
10218e50:	e037883a 	mov	sp,fp
10218e54:	dfc00117 	ldw	ra,4(sp)
10218e58:	df000017 	ldw	fp,0(sp)
10218e5c:	dec00204 	addi	sp,sp,8
10218e60:	f800283a 	ret

10218e64 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10218e64:	defffa04 	addi	sp,sp,-24
10218e68:	dfc00515 	stw	ra,20(sp)
10218e6c:	df000415 	stw	fp,16(sp)
10218e70:	df000404 	addi	fp,sp,16
10218e74:	e13ffd15 	stw	r4,-12(fp)
10218e78:	e17ffe15 	stw	r5,-8(fp)
10218e7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10218e80:	e0bffd17 	ldw	r2,-12(fp)
10218e84:	10800017 	ldw	r2,0(r2)
10218e88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10218e8c:	e0bffc17 	ldw	r2,-16(fp)
10218e90:	10c00a04 	addi	r3,r2,40
10218e94:	e0bffd17 	ldw	r2,-12(fp)
10218e98:	10800217 	ldw	r2,8(r2)
10218e9c:	1809883a 	mov	r4,r3
10218ea0:	e17ffe17 	ldw	r5,-8(fp)
10218ea4:	e1bfff17 	ldw	r6,-4(fp)
10218ea8:	100f883a 	mov	r7,r2
10218eac:	021948c0 	call	1021948c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10218eb0:	e037883a 	mov	sp,fp
10218eb4:	dfc00117 	ldw	ra,4(sp)
10218eb8:	df000017 	ldw	fp,0(sp)
10218ebc:	dec00204 	addi	sp,sp,8
10218ec0:	f800283a 	ret

10218ec4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10218ec4:	defffa04 	addi	sp,sp,-24
10218ec8:	dfc00515 	stw	ra,20(sp)
10218ecc:	df000415 	stw	fp,16(sp)
10218ed0:	df000404 	addi	fp,sp,16
10218ed4:	e13ffd15 	stw	r4,-12(fp)
10218ed8:	e17ffe15 	stw	r5,-8(fp)
10218edc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10218ee0:	e0bffd17 	ldw	r2,-12(fp)
10218ee4:	10800017 	ldw	r2,0(r2)
10218ee8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10218eec:	e0bffc17 	ldw	r2,-16(fp)
10218ef0:	10c00a04 	addi	r3,r2,40
10218ef4:	e0bffd17 	ldw	r2,-12(fp)
10218ef8:	10800217 	ldw	r2,8(r2)
10218efc:	1809883a 	mov	r4,r3
10218f00:	e17ffe17 	ldw	r5,-8(fp)
10218f04:	e1bfff17 	ldw	r6,-4(fp)
10218f08:	100f883a 	mov	r7,r2
10218f0c:	02196980 	call	10219698 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10218f10:	e037883a 	mov	sp,fp
10218f14:	dfc00117 	ldw	ra,4(sp)
10218f18:	df000017 	ldw	fp,0(sp)
10218f1c:	dec00204 	addi	sp,sp,8
10218f20:	f800283a 	ret

10218f24 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10218f24:	defffc04 	addi	sp,sp,-16
10218f28:	dfc00315 	stw	ra,12(sp)
10218f2c:	df000215 	stw	fp,8(sp)
10218f30:	df000204 	addi	fp,sp,8
10218f34:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10218f38:	e0bfff17 	ldw	r2,-4(fp)
10218f3c:	10800017 	ldw	r2,0(r2)
10218f40:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10218f44:	e0bffe17 	ldw	r2,-8(fp)
10218f48:	10c00a04 	addi	r3,r2,40
10218f4c:	e0bfff17 	ldw	r2,-4(fp)
10218f50:	10800217 	ldw	r2,8(r2)
10218f54:	1809883a 	mov	r4,r3
10218f58:	100b883a 	mov	r5,r2
10218f5c:	02193380 	call	10219338 <altera_avalon_jtag_uart_close>
}
10218f60:	e037883a 	mov	sp,fp
10218f64:	dfc00117 	ldw	ra,4(sp)
10218f68:	df000017 	ldw	fp,0(sp)
10218f6c:	dec00204 	addi	sp,sp,8
10218f70:	f800283a 	ret

10218f74 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10218f74:	defffa04 	addi	sp,sp,-24
10218f78:	dfc00515 	stw	ra,20(sp)
10218f7c:	df000415 	stw	fp,16(sp)
10218f80:	df000404 	addi	fp,sp,16
10218f84:	e13ffd15 	stw	r4,-12(fp)
10218f88:	e17ffe15 	stw	r5,-8(fp)
10218f8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10218f90:	e0bffd17 	ldw	r2,-12(fp)
10218f94:	10800017 	ldw	r2,0(r2)
10218f98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10218f9c:	e0bffc17 	ldw	r2,-16(fp)
10218fa0:	10800a04 	addi	r2,r2,40
10218fa4:	1009883a 	mov	r4,r2
10218fa8:	e17ffe17 	ldw	r5,-8(fp)
10218fac:	e1bfff17 	ldw	r6,-4(fp)
10218fb0:	02193a00 	call	102193a0 <altera_avalon_jtag_uart_ioctl>
}
10218fb4:	e037883a 	mov	sp,fp
10218fb8:	dfc00117 	ldw	ra,4(sp)
10218fbc:	df000017 	ldw	fp,0(sp)
10218fc0:	dec00204 	addi	sp,sp,8
10218fc4:	f800283a 	ret

10218fc8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10218fc8:	defffa04 	addi	sp,sp,-24
10218fcc:	dfc00515 	stw	ra,20(sp)
10218fd0:	df000415 	stw	fp,16(sp)
10218fd4:	df000404 	addi	fp,sp,16
10218fd8:	e13ffd15 	stw	r4,-12(fp)
10218fdc:	e17ffe15 	stw	r5,-8(fp)
10218fe0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10218fe4:	e0bffd17 	ldw	r2,-12(fp)
10218fe8:	00c00044 	movi	r3,1
10218fec:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10218ff0:	e0bffd17 	ldw	r2,-12(fp)
10218ff4:	10800017 	ldw	r2,0(r2)
10218ff8:	10800104 	addi	r2,r2,4
10218ffc:	1007883a 	mov	r3,r2
10219000:	e0bffd17 	ldw	r2,-12(fp)
10219004:	10800817 	ldw	r2,32(r2)
10219008:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1021900c:	e0fffe17 	ldw	r3,-8(fp)
10219010:	e0bfff17 	ldw	r2,-4(fp)
10219014:	d8000015 	stw	zero,0(sp)
10219018:	1809883a 	mov	r4,r3
1021901c:	100b883a 	mov	r5,r2
10219020:	018408b4 	movhi	r6,4130
10219024:	31a42304 	addi	r6,r6,-28532
10219028:	e1fffd17 	ldw	r7,-12(fp)
1021902c:	021b55c0 	call	1021b55c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10219030:	e0bffd17 	ldw	r2,-12(fp)
10219034:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10219038:	e0bffd17 	ldw	r2,-12(fp)
1021903c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10219040:	008408b4 	movhi	r2,4130
10219044:	10846004 	addi	r2,r2,4480
10219048:	10800017 	ldw	r2,0(r2)
1021904c:	1809883a 	mov	r4,r3
10219050:	100b883a 	mov	r5,r2
10219054:	018408b4 	movhi	r6,4130
10219058:	31a4a404 	addi	r6,r6,-28016
1021905c:	e1fffd17 	ldw	r7,-12(fp)
10219060:	021b16c0 	call	1021b16c <alt_alarm_start>
10219064:	1000040e 	bge	r2,zero,10219078 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10219068:	e0fffd17 	ldw	r3,-12(fp)
1021906c:	00a00034 	movhi	r2,32768
10219070:	10bfffc4 	addi	r2,r2,-1
10219074:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10219078:	e037883a 	mov	sp,fp
1021907c:	dfc00117 	ldw	ra,4(sp)
10219080:	df000017 	ldw	fp,0(sp)
10219084:	dec00204 	addi	sp,sp,8
10219088:	f800283a 	ret

1021908c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1021908c:	defff804 	addi	sp,sp,-32
10219090:	df000715 	stw	fp,28(sp)
10219094:	df000704 	addi	fp,sp,28
10219098:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1021909c:	e0bfff17 	ldw	r2,-4(fp)
102190a0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
102190a4:	e0bffb17 	ldw	r2,-20(fp)
102190a8:	10800017 	ldw	r2,0(r2)
102190ac:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
102190b0:	e0bffc17 	ldw	r2,-16(fp)
102190b4:	10800104 	addi	r2,r2,4
102190b8:	10800037 	ldwio	r2,0(r2)
102190bc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
102190c0:	e0bffd17 	ldw	r2,-12(fp)
102190c4:	1080c00c 	andi	r2,r2,768
102190c8:	1000011e 	bne	r2,zero,102190d0 <altera_avalon_jtag_uart_irq+0x44>
      break;
102190cc:	00006c06 	br	10219280 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
102190d0:	e0bffd17 	ldw	r2,-12(fp)
102190d4:	1080400c 	andi	r2,r2,256
102190d8:	10003426 	beq	r2,zero,102191ac <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
102190dc:	00800074 	movhi	r2,1
102190e0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
102190e4:	e0bffb17 	ldw	r2,-20(fp)
102190e8:	10800a17 	ldw	r2,40(r2)
102190ec:	10800044 	addi	r2,r2,1
102190f0:	1081ffcc 	andi	r2,r2,2047
102190f4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
102190f8:	e0bffb17 	ldw	r2,-20(fp)
102190fc:	10c00b17 	ldw	r3,44(r2)
10219100:	e0bffe17 	ldw	r2,-8(fp)
10219104:	1880011e 	bne	r3,r2,1021910c <altera_avalon_jtag_uart_irq+0x80>
          break;
10219108:	00001606 	br	10219164 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1021910c:	e0bffc17 	ldw	r2,-16(fp)
10219110:	10800037 	ldwio	r2,0(r2)
10219114:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10219118:	e0bff917 	ldw	r2,-28(fp)
1021911c:	10a0000c 	andi	r2,r2,32768
10219120:	1000011e 	bne	r2,zero,10219128 <altera_avalon_jtag_uart_irq+0x9c>
          break;
10219124:	00000f06 	br	10219164 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10219128:	e0bffb17 	ldw	r2,-20(fp)
1021912c:	10800a17 	ldw	r2,40(r2)
10219130:	e0fff917 	ldw	r3,-28(fp)
10219134:	1809883a 	mov	r4,r3
10219138:	e0fffb17 	ldw	r3,-20(fp)
1021913c:	1885883a 	add	r2,r3,r2
10219140:	10800e04 	addi	r2,r2,56
10219144:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10219148:	e0bffb17 	ldw	r2,-20(fp)
1021914c:	10800a17 	ldw	r2,40(r2)
10219150:	10800044 	addi	r2,r2,1
10219154:	10c1ffcc 	andi	r3,r2,2047
10219158:	e0bffb17 	ldw	r2,-20(fp)
1021915c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10219160:	003fe006 	br	102190e4 <altera_avalon_jtag_uart_irq+0x58>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10219164:	e0bff917 	ldw	r2,-28(fp)
10219168:	10bfffec 	andhi	r2,r2,65535
1021916c:	10000f26 	beq	r2,zero,102191ac <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10219170:	e0bffb17 	ldw	r2,-20(fp)
10219174:	10c00817 	ldw	r3,32(r2)
10219178:	00bfff84 	movi	r2,-2
1021917c:	1886703a 	and	r3,r3,r2
10219180:	e0bffb17 	ldw	r2,-20(fp)
10219184:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10219188:	e0bffc17 	ldw	r2,-16(fp)
1021918c:	10800104 	addi	r2,r2,4
10219190:	1007883a 	mov	r3,r2
10219194:	e0bffb17 	ldw	r2,-20(fp)
10219198:	10800817 	ldw	r2,32(r2)
1021919c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
102191a0:	e0bffc17 	ldw	r2,-16(fp)
102191a4:	10800104 	addi	r2,r2,4
102191a8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
102191ac:	e0bffd17 	ldw	r2,-12(fp)
102191b0:	1080800c 	andi	r2,r2,512
102191b4:	10003126 	beq	r2,zero,1021927c <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
102191b8:	e0bffd17 	ldw	r2,-12(fp)
102191bc:	1004d43a 	srli	r2,r2,16
102191c0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
102191c4:	00001406 	br	10219218 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
102191c8:	e0bffc17 	ldw	r2,-16(fp)
102191cc:	e0fffb17 	ldw	r3,-20(fp)
102191d0:	18c00d17 	ldw	r3,52(r3)
102191d4:	e13ffb17 	ldw	r4,-20(fp)
102191d8:	20c7883a 	add	r3,r4,r3
102191dc:	18c20e04 	addi	r3,r3,2104
102191e0:	18c00003 	ldbu	r3,0(r3)
102191e4:	18c03fcc 	andi	r3,r3,255
102191e8:	18c0201c 	xori	r3,r3,128
102191ec:	18ffe004 	addi	r3,r3,-128
102191f0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
102191f4:	e0bffb17 	ldw	r2,-20(fp)
102191f8:	10800d17 	ldw	r2,52(r2)
102191fc:	10800044 	addi	r2,r2,1
10219200:	10c1ffcc 	andi	r3,r2,2047
10219204:	e0bffb17 	ldw	r2,-20(fp)
10219208:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1021920c:	e0bffa17 	ldw	r2,-24(fp)
10219210:	10bfffc4 	addi	r2,r2,-1
10219214:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10219218:	e0bffa17 	ldw	r2,-24(fp)
1021921c:	10000526 	beq	r2,zero,10219234 <altera_avalon_jtag_uart_irq+0x1a8>
10219220:	e0bffb17 	ldw	r2,-20(fp)
10219224:	10c00d17 	ldw	r3,52(r2)
10219228:	e0bffb17 	ldw	r2,-20(fp)
1021922c:	10800c17 	ldw	r2,48(r2)
10219230:	18bfe51e 	bne	r3,r2,102191c8 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10219234:	e0bffa17 	ldw	r2,-24(fp)
10219238:	10001026 	beq	r2,zero,1021927c <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1021923c:	e0bffb17 	ldw	r2,-20(fp)
10219240:	10c00817 	ldw	r3,32(r2)
10219244:	00bfff44 	movi	r2,-3
10219248:	1886703a 	and	r3,r3,r2
1021924c:	e0bffb17 	ldw	r2,-20(fp)
10219250:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10219254:	e0bffb17 	ldw	r2,-20(fp)
10219258:	10800017 	ldw	r2,0(r2)
1021925c:	10800104 	addi	r2,r2,4
10219260:	1007883a 	mov	r3,r2
10219264:	e0bffb17 	ldw	r2,-20(fp)
10219268:	10800817 	ldw	r2,32(r2)
1021926c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10219270:	e0bffc17 	ldw	r2,-16(fp)
10219274:	10800104 	addi	r2,r2,4
10219278:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1021927c:	003f8c06 	br	102190b0 <altera_avalon_jtag_uart_irq+0x24>
}
10219280:	e037883a 	mov	sp,fp
10219284:	df000017 	ldw	fp,0(sp)
10219288:	dec00104 	addi	sp,sp,4
1021928c:	f800283a 	ret

10219290 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10219290:	defff804 	addi	sp,sp,-32
10219294:	df000715 	stw	fp,28(sp)
10219298:	df000704 	addi	fp,sp,28
1021929c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
102192a0:	e0bffb17 	ldw	r2,-20(fp)
102192a4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
102192a8:	e0bff917 	ldw	r2,-28(fp)
102192ac:	10800017 	ldw	r2,0(r2)
102192b0:	10800104 	addi	r2,r2,4
102192b4:	10800037 	ldwio	r2,0(r2)
102192b8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
102192bc:	e0bffa17 	ldw	r2,-24(fp)
102192c0:	1081000c 	andi	r2,r2,1024
102192c4:	10000b26 	beq	r2,zero,102192f4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
102192c8:	e0bff917 	ldw	r2,-28(fp)
102192cc:	10800017 	ldw	r2,0(r2)
102192d0:	10800104 	addi	r2,r2,4
102192d4:	1007883a 	mov	r3,r2
102192d8:	e0bff917 	ldw	r2,-28(fp)
102192dc:	10800817 	ldw	r2,32(r2)
102192e0:	10810014 	ori	r2,r2,1024
102192e4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
102192e8:	e0bff917 	ldw	r2,-28(fp)
102192ec:	10000915 	stw	zero,36(r2)
102192f0:	00000a06 	br	1021931c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
102192f4:	e0bff917 	ldw	r2,-28(fp)
102192f8:	10c00917 	ldw	r3,36(r2)
102192fc:	00a00034 	movhi	r2,32768
10219300:	10bfff04 	addi	r2,r2,-4
10219304:	10c00536 	bltu	r2,r3,1021931c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10219308:	e0bff917 	ldw	r2,-28(fp)
1021930c:	10800917 	ldw	r2,36(r2)
10219310:	10c00044 	addi	r3,r2,1
10219314:	e0bff917 	ldw	r2,-28(fp)
10219318:	10c00915 	stw	r3,36(r2)
1021931c:	008408b4 	movhi	r2,4130
10219320:	10846004 	addi	r2,r2,4480
10219324:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10219328:	e037883a 	mov	sp,fp
1021932c:	df000017 	ldw	fp,0(sp)
10219330:	dec00104 	addi	sp,sp,4
10219334:	f800283a 	ret

10219338 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10219338:	defffd04 	addi	sp,sp,-12
1021933c:	df000215 	stw	fp,8(sp)
10219340:	df000204 	addi	fp,sp,8
10219344:	e13ffe15 	stw	r4,-8(fp)
10219348:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1021934c:	00000506 	br	10219364 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10219350:	e0bfff17 	ldw	r2,-4(fp)
10219354:	1090000c 	andi	r2,r2,16384
10219358:	10000226 	beq	r2,zero,10219364 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1021935c:	00bffd44 	movi	r2,-11
10219360:	00000b06 	br	10219390 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10219364:	e0bffe17 	ldw	r2,-8(fp)
10219368:	10c00d17 	ldw	r3,52(r2)
1021936c:	e0bffe17 	ldw	r2,-8(fp)
10219370:	10800c17 	ldw	r2,48(r2)
10219374:	18800526 	beq	r3,r2,1021938c <altera_avalon_jtag_uart_close+0x54>
10219378:	e0bffe17 	ldw	r2,-8(fp)
1021937c:	10c00917 	ldw	r3,36(r2)
10219380:	e0bffe17 	ldw	r2,-8(fp)
10219384:	10800117 	ldw	r2,4(r2)
10219388:	18bff136 	bltu	r3,r2,10219350 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1021938c:	0005883a 	mov	r2,zero
}
10219390:	e037883a 	mov	sp,fp
10219394:	df000017 	ldw	fp,0(sp)
10219398:	dec00104 	addi	sp,sp,4
1021939c:	f800283a 	ret

102193a0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
102193a0:	defffa04 	addi	sp,sp,-24
102193a4:	df000515 	stw	fp,20(sp)
102193a8:	df000504 	addi	fp,sp,20
102193ac:	e13ffd15 	stw	r4,-12(fp)
102193b0:	e17ffe15 	stw	r5,-8(fp)
102193b4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
102193b8:	00bff9c4 	movi	r2,-25
102193bc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
102193c0:	e0bffe17 	ldw	r2,-8(fp)
102193c4:	10da8060 	cmpeqi	r3,r2,27137
102193c8:	1800031e 	bne	r3,zero,102193d8 <altera_avalon_jtag_uart_ioctl+0x38>
102193cc:	109a80a0 	cmpeqi	r2,r2,27138
102193d0:	1000191e 	bne	r2,zero,10219438 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
102193d4:	00002806 	br	10219478 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
102193d8:	e0bffd17 	ldw	r2,-12(fp)
102193dc:	10c00117 	ldw	r3,4(r2)
102193e0:	00a00034 	movhi	r2,32768
102193e4:	10bfffc4 	addi	r2,r2,-1
102193e8:	18801226 	beq	r3,r2,10219434 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
102193ec:	e0bfff17 	ldw	r2,-4(fp)
102193f0:	10800017 	ldw	r2,0(r2)
102193f4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
102193f8:	e0bffc17 	ldw	r2,-16(fp)
102193fc:	10800090 	cmplti	r2,r2,2
10219400:	1000061e 	bne	r2,zero,1021941c <altera_avalon_jtag_uart_ioctl+0x7c>
10219404:	e0fffc17 	ldw	r3,-16(fp)
10219408:	00a00034 	movhi	r2,32768
1021940c:	10bfffc4 	addi	r2,r2,-1
10219410:	18800226 	beq	r3,r2,1021941c <altera_avalon_jtag_uart_ioctl+0x7c>
10219414:	e0bffc17 	ldw	r2,-16(fp)
10219418:	00000206 	br	10219424 <altera_avalon_jtag_uart_ioctl+0x84>
1021941c:	00a00034 	movhi	r2,32768
10219420:	10bfff84 	addi	r2,r2,-2
10219424:	e0fffd17 	ldw	r3,-12(fp)
10219428:	18800115 	stw	r2,4(r3)
      rc = 0;
1021942c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10219430:	00001106 	br	10219478 <altera_avalon_jtag_uart_ioctl+0xd8>
10219434:	00001006 	br	10219478 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10219438:	e0bffd17 	ldw	r2,-12(fp)
1021943c:	10c00117 	ldw	r3,4(r2)
10219440:	00a00034 	movhi	r2,32768
10219444:	10bfffc4 	addi	r2,r2,-1
10219448:	18800a26 	beq	r3,r2,10219474 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1021944c:	e0bffd17 	ldw	r2,-12(fp)
10219450:	10c00917 	ldw	r3,36(r2)
10219454:	e0bffd17 	ldw	r2,-12(fp)
10219458:	10800117 	ldw	r2,4(r2)
1021945c:	1885803a 	cmpltu	r2,r3,r2
10219460:	10c03fcc 	andi	r3,r2,255
10219464:	e0bfff17 	ldw	r2,-4(fp)
10219468:	10c00015 	stw	r3,0(r2)
      rc = 0;
1021946c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10219470:	00000006 	br	10219474 <altera_avalon_jtag_uart_ioctl+0xd4>
10219474:	0001883a 	nop

  default:
    break;
  }

  return rc;
10219478:	e0bffb17 	ldw	r2,-20(fp)
}
1021947c:	e037883a 	mov	sp,fp
10219480:	df000017 	ldw	fp,0(sp)
10219484:	dec00104 	addi	sp,sp,4
10219488:	f800283a 	ret

1021948c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1021948c:	defff304 	addi	sp,sp,-52
10219490:	dfc00c15 	stw	ra,48(sp)
10219494:	df000b15 	stw	fp,44(sp)
10219498:	df000b04 	addi	fp,sp,44
1021949c:	e13ffc15 	stw	r4,-16(fp)
102194a0:	e17ffd15 	stw	r5,-12(fp)
102194a4:	e1bffe15 	stw	r6,-8(fp)
102194a8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
102194ac:	e0bffd17 	ldw	r2,-12(fp)
102194b0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
102194b4:	00004906 	br	102195dc <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
102194b8:	e0bffc17 	ldw	r2,-16(fp)
102194bc:	10800a17 	ldw	r2,40(r2)
102194c0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
102194c4:	e0bffc17 	ldw	r2,-16(fp)
102194c8:	10800b17 	ldw	r2,44(r2)
102194cc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
102194d0:	e0fff717 	ldw	r3,-36(fp)
102194d4:	e0bff817 	ldw	r2,-32(fp)
102194d8:	18800536 	bltu	r3,r2,102194f0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
102194dc:	e0fff717 	ldw	r3,-36(fp)
102194e0:	e0bff817 	ldw	r2,-32(fp)
102194e4:	1885c83a 	sub	r2,r3,r2
102194e8:	e0bff615 	stw	r2,-40(fp)
102194ec:	00000406 	br	10219500 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
102194f0:	00c20004 	movi	r3,2048
102194f4:	e0bff817 	ldw	r2,-32(fp)
102194f8:	1885c83a 	sub	r2,r3,r2
102194fc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10219500:	e0bff617 	ldw	r2,-40(fp)
10219504:	1000011e 	bne	r2,zero,1021950c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
10219508:	00001d06 	br	10219580 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
1021950c:	e0fffe17 	ldw	r3,-8(fp)
10219510:	e0bff617 	ldw	r2,-40(fp)
10219514:	1880022e 	bgeu	r3,r2,10219520 <altera_avalon_jtag_uart_read+0x94>
        n = space;
10219518:	e0bffe17 	ldw	r2,-8(fp)
1021951c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10219520:	e0bff817 	ldw	r2,-32(fp)
10219524:	10800e04 	addi	r2,r2,56
10219528:	e0fffc17 	ldw	r3,-16(fp)
1021952c:	1885883a 	add	r2,r3,r2
10219530:	e13ff517 	ldw	r4,-44(fp)
10219534:	100b883a 	mov	r5,r2
10219538:	e1bff617 	ldw	r6,-40(fp)
1021953c:	0202dc80 	call	10202dc8 <memcpy>
      ptr   += n;
10219540:	e0fff517 	ldw	r3,-44(fp)
10219544:	e0bff617 	ldw	r2,-40(fp)
10219548:	1885883a 	add	r2,r3,r2
1021954c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10219550:	e0fffe17 	ldw	r3,-8(fp)
10219554:	e0bff617 	ldw	r2,-40(fp)
10219558:	1885c83a 	sub	r2,r3,r2
1021955c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10219560:	e0fff817 	ldw	r3,-32(fp)
10219564:	e0bff617 	ldw	r2,-40(fp)
10219568:	1885883a 	add	r2,r3,r2
1021956c:	10c1ffcc 	andi	r3,r2,2047
10219570:	e0bffc17 	ldw	r2,-16(fp)
10219574:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10219578:	e0bffe17 	ldw	r2,-8(fp)
1021957c:	00bfce16 	blt	zero,r2,102194b8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
10219580:	e0fff517 	ldw	r3,-44(fp)
10219584:	e0bffd17 	ldw	r2,-12(fp)
10219588:	18800126 	beq	r3,r2,10219590 <altera_avalon_jtag_uart_read+0x104>
      break;
1021958c:	00001506 	br	102195e4 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10219590:	e0bfff17 	ldw	r2,-4(fp)
10219594:	1090000c 	andi	r2,r2,16384
10219598:	10000126 	beq	r2,zero,102195a0 <altera_avalon_jtag_uart_read+0x114>
      break;
1021959c:	00001106 	br	102195e4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
102195a0:	0001883a 	nop
102195a4:	e0bffc17 	ldw	r2,-16(fp)
102195a8:	10c00a17 	ldw	r3,40(r2)
102195ac:	e0bff717 	ldw	r2,-36(fp)
102195b0:	1880051e 	bne	r3,r2,102195c8 <altera_avalon_jtag_uart_read+0x13c>
102195b4:	e0bffc17 	ldw	r2,-16(fp)
102195b8:	10c00917 	ldw	r3,36(r2)
102195bc:	e0bffc17 	ldw	r2,-16(fp)
102195c0:	10800117 	ldw	r2,4(r2)
102195c4:	18bff736 	bltu	r3,r2,102195a4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
102195c8:	e0bffc17 	ldw	r2,-16(fp)
102195cc:	10c00a17 	ldw	r3,40(r2)
102195d0:	e0bff717 	ldw	r2,-36(fp)
102195d4:	1880011e 	bne	r3,r2,102195dc <altera_avalon_jtag_uart_read+0x150>
      break;
102195d8:	00000206 	br	102195e4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
102195dc:	e0bffe17 	ldw	r2,-8(fp)
102195e0:	00bfb516 	blt	zero,r2,102194b8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
102195e4:	e0fff517 	ldw	r3,-44(fp)
102195e8:	e0bffd17 	ldw	r2,-12(fp)
102195ec:	18801826 	beq	r3,r2,10219650 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
102195f0:	0005303a 	rdctl	r2,status
102195f4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
102195f8:	e0fffa17 	ldw	r3,-24(fp)
102195fc:	00bfff84 	movi	r2,-2
10219600:	1884703a 	and	r2,r3,r2
10219604:	1001703a 	wrctl	status,r2
  
  return context;
10219608:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1021960c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10219610:	e0bffc17 	ldw	r2,-16(fp)
10219614:	10800817 	ldw	r2,32(r2)
10219618:	10c00054 	ori	r3,r2,1
1021961c:	e0bffc17 	ldw	r2,-16(fp)
10219620:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10219624:	e0bffc17 	ldw	r2,-16(fp)
10219628:	10800017 	ldw	r2,0(r2)
1021962c:	10800104 	addi	r2,r2,4
10219630:	1007883a 	mov	r3,r2
10219634:	e0bffc17 	ldw	r2,-16(fp)
10219638:	10800817 	ldw	r2,32(r2)
1021963c:	18800035 	stwio	r2,0(r3)
10219640:	e0bff917 	ldw	r2,-28(fp)
10219644:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10219648:	e0bffb17 	ldw	r2,-20(fp)
1021964c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10219650:	e0fff517 	ldw	r3,-44(fp)
10219654:	e0bffd17 	ldw	r2,-12(fp)
10219658:	18800426 	beq	r3,r2,1021966c <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
1021965c:	e0fff517 	ldw	r3,-44(fp)
10219660:	e0bffd17 	ldw	r2,-12(fp)
10219664:	1885c83a 	sub	r2,r3,r2
10219668:	00000606 	br	10219684 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
1021966c:	e0bfff17 	ldw	r2,-4(fp)
10219670:	1090000c 	andi	r2,r2,16384
10219674:	10000226 	beq	r2,zero,10219680 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
10219678:	00bffd44 	movi	r2,-11
1021967c:	00000106 	br	10219684 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
10219680:	00bffec4 	movi	r2,-5
}
10219684:	e037883a 	mov	sp,fp
10219688:	dfc00117 	ldw	ra,4(sp)
1021968c:	df000017 	ldw	fp,0(sp)
10219690:	dec00204 	addi	sp,sp,8
10219694:	f800283a 	ret

10219698 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10219698:	defff304 	addi	sp,sp,-52
1021969c:	dfc00c15 	stw	ra,48(sp)
102196a0:	df000b15 	stw	fp,44(sp)
102196a4:	df000b04 	addi	fp,sp,44
102196a8:	e13ffc15 	stw	r4,-16(fp)
102196ac:	e17ffd15 	stw	r5,-12(fp)
102196b0:	e1bffe15 	stw	r6,-8(fp)
102196b4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
102196b8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
102196bc:	e0bffd17 	ldw	r2,-12(fp)
102196c0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
102196c4:	00003806 	br	102197a8 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
102196c8:	e0bffc17 	ldw	r2,-16(fp)
102196cc:	10800c17 	ldw	r2,48(r2)
102196d0:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
102196d4:	e0bffc17 	ldw	r2,-16(fp)
102196d8:	10800d17 	ldw	r2,52(r2)
102196dc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
102196e0:	e0fff817 	ldw	r3,-32(fp)
102196e4:	e0bff517 	ldw	r2,-44(fp)
102196e8:	1880062e 	bgeu	r3,r2,10219704 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
102196ec:	e0fff517 	ldw	r3,-44(fp)
102196f0:	e0bff817 	ldw	r2,-32(fp)
102196f4:	1885c83a 	sub	r2,r3,r2
102196f8:	10bfffc4 	addi	r2,r2,-1
102196fc:	e0bff615 	stw	r2,-40(fp)
10219700:	00000b06 	br	10219730 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10219704:	e0bff517 	ldw	r2,-44(fp)
10219708:	10000526 	beq	r2,zero,10219720 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1021970c:	00c20004 	movi	r3,2048
10219710:	e0bff817 	ldw	r2,-32(fp)
10219714:	1885c83a 	sub	r2,r3,r2
10219718:	e0bff615 	stw	r2,-40(fp)
1021971c:	00000406 	br	10219730 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10219720:	00c1ffc4 	movi	r3,2047
10219724:	e0bff817 	ldw	r2,-32(fp)
10219728:	1885c83a 	sub	r2,r3,r2
1021972c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10219730:	e0bff617 	ldw	r2,-40(fp)
10219734:	1000011e 	bne	r2,zero,1021973c <altera_avalon_jtag_uart_write+0xa4>
        break;
10219738:	00001d06 	br	102197b0 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
1021973c:	e0fffe17 	ldw	r3,-8(fp)
10219740:	e0bff617 	ldw	r2,-40(fp)
10219744:	1880022e 	bgeu	r3,r2,10219750 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
10219748:	e0bffe17 	ldw	r2,-8(fp)
1021974c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10219750:	e0bff817 	ldw	r2,-32(fp)
10219754:	10820e04 	addi	r2,r2,2104
10219758:	e0fffc17 	ldw	r3,-16(fp)
1021975c:	1885883a 	add	r2,r3,r2
10219760:	1009883a 	mov	r4,r2
10219764:	e17ffd17 	ldw	r5,-12(fp)
10219768:	e1bff617 	ldw	r6,-40(fp)
1021976c:	0202dc80 	call	10202dc8 <memcpy>
      ptr   += n;
10219770:	e0fffd17 	ldw	r3,-12(fp)
10219774:	e0bff617 	ldw	r2,-40(fp)
10219778:	1885883a 	add	r2,r3,r2
1021977c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10219780:	e0fffe17 	ldw	r3,-8(fp)
10219784:	e0bff617 	ldw	r2,-40(fp)
10219788:	1885c83a 	sub	r2,r3,r2
1021978c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10219790:	e0fff817 	ldw	r3,-32(fp)
10219794:	e0bff617 	ldw	r2,-40(fp)
10219798:	1885883a 	add	r2,r3,r2
1021979c:	10c1ffcc 	andi	r3,r2,2047
102197a0:	e0bffc17 	ldw	r2,-16(fp)
102197a4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
102197a8:	e0bffe17 	ldw	r2,-8(fp)
102197ac:	00bfc616 	blt	zero,r2,102196c8 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
102197b0:	0005303a 	rdctl	r2,status
102197b4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
102197b8:	e0fffa17 	ldw	r3,-24(fp)
102197bc:	00bfff84 	movi	r2,-2
102197c0:	1884703a 	and	r2,r3,r2
102197c4:	1001703a 	wrctl	status,r2
  
  return context;
102197c8:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
102197cc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
102197d0:	e0bffc17 	ldw	r2,-16(fp)
102197d4:	10800817 	ldw	r2,32(r2)
102197d8:	10c00094 	ori	r3,r2,2
102197dc:	e0bffc17 	ldw	r2,-16(fp)
102197e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
102197e4:	e0bffc17 	ldw	r2,-16(fp)
102197e8:	10800017 	ldw	r2,0(r2)
102197ec:	10800104 	addi	r2,r2,4
102197f0:	1007883a 	mov	r3,r2
102197f4:	e0bffc17 	ldw	r2,-16(fp)
102197f8:	10800817 	ldw	r2,32(r2)
102197fc:	18800035 	stwio	r2,0(r3)
10219800:	e0bff917 	ldw	r2,-28(fp)
10219804:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10219808:	e0bffb17 	ldw	r2,-20(fp)
1021980c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10219810:	e0bffe17 	ldw	r2,-8(fp)
10219814:	0080120e 	bge	zero,r2,10219860 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
10219818:	e0bfff17 	ldw	r2,-4(fp)
1021981c:	1090000c 	andi	r2,r2,16384
10219820:	10000126 	beq	r2,zero,10219828 <altera_avalon_jtag_uart_write+0x190>
        break;
10219824:	00001006 	br	10219868 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10219828:	0001883a 	nop
1021982c:	e0bffc17 	ldw	r2,-16(fp)
10219830:	10c00d17 	ldw	r3,52(r2)
10219834:	e0bff517 	ldw	r2,-44(fp)
10219838:	1880051e 	bne	r3,r2,10219850 <altera_avalon_jtag_uart_write+0x1b8>
1021983c:	e0bffc17 	ldw	r2,-16(fp)
10219840:	10c00917 	ldw	r3,36(r2)
10219844:	e0bffc17 	ldw	r2,-16(fp)
10219848:	10800117 	ldw	r2,4(r2)
1021984c:	18bff736 	bltu	r3,r2,1021982c <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10219850:	e0bffc17 	ldw	r2,-16(fp)
10219854:	10800917 	ldw	r2,36(r2)
10219858:	10000126 	beq	r2,zero,10219860 <altera_avalon_jtag_uart_write+0x1c8>
         break;
1021985c:	00000206 	br	10219868 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
10219860:	e0bffe17 	ldw	r2,-8(fp)
10219864:	00bf9716 	blt	zero,r2,102196c4 <altera_avalon_jtag_uart_write+0x2c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10219868:	e0fffd17 	ldw	r3,-12(fp)
1021986c:	e0bff717 	ldw	r2,-36(fp)
10219870:	18800426 	beq	r3,r2,10219884 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
10219874:	e0fffd17 	ldw	r3,-12(fp)
10219878:	e0bff717 	ldw	r2,-36(fp)
1021987c:	1885c83a 	sub	r2,r3,r2
10219880:	00000606 	br	1021989c <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
10219884:	e0bfff17 	ldw	r2,-4(fp)
10219888:	1090000c 	andi	r2,r2,16384
1021988c:	10000226 	beq	r2,zero,10219898 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
10219890:	00bffd44 	movi	r2,-11
10219894:	00000106 	br	1021989c <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10219898:	00bffec4 	movi	r2,-5
}
1021989c:	e037883a 	mov	sp,fp
102198a0:	dfc00117 	ldw	ra,4(sp)
102198a4:	df000017 	ldw	fp,0(sp)
102198a8:	dec00204 	addi	sp,sp,8
102198ac:	f800283a 	ret

102198b0 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
102198b0:	defffa04 	addi	sp,sp,-24
102198b4:	dfc00515 	stw	ra,20(sp)
102198b8:	df000415 	stw	fp,16(sp)
102198bc:	df000404 	addi	fp,sp,16
102198c0:	e13ffe15 	stw	r4,-8(fp)
102198c4:	2805883a 	mov	r2,r5
102198c8:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
102198cc:	e0bffe17 	ldw	r2,-8(fp)
102198d0:	10800017 	ldw	r2,0(r2)
102198d4:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
102198d8:	008003f4 	movhi	r2,15
102198dc:	10909004 	addi	r2,r2,16960
102198e0:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
102198e4:	e0bffe17 	ldw	r2,-8(fp)
102198e8:	10800803 	ldbu	r2,32(r2)
102198ec:	10803fcc 	andi	r2,r2,255
102198f0:	1080201c 	xori	r2,r2,128
102198f4:	10bfe004 	addi	r2,r2,-128
102198f8:	10000126 	beq	r2,zero,10219900 <lcd_write_command+0x50>
    return;
102198fc:	00001406 	br	10219950 <lcd_write_command+0xa0>

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
10219900:	00000906 	br	10219928 <lcd_write_command+0x78>
    if (--i == 0)
10219904:	e0bffc17 	ldw	r2,-16(fp)
10219908:	10bfffc4 	addi	r2,r2,-1
1021990c:	e0bffc15 	stw	r2,-16(fp)
10219910:	e0bffc17 	ldw	r2,-16(fp)
10219914:	1000041e 	bne	r2,zero,10219928 <lcd_write_command+0x78>
    {
      sp->broken = 1;
10219918:	e0bffe17 	ldw	r2,-8(fp)
1021991c:	00c00044 	movi	r3,1
10219920:	10c00805 	stb	r3,32(r2)
      return;
10219924:	00000a06 	br	10219950 <lcd_write_command+0xa0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
10219928:	e0bffd17 	ldw	r2,-12(fp)
1021992c:	10800104 	addi	r2,r2,4
10219930:	10800037 	ldwio	r2,0(r2)
10219934:	1080200c 	andi	r2,r2,128
10219938:	103ff21e 	bne	r2,zero,10219904 <lcd_write_command+0x54>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
1021993c:	01001904 	movi	r4,100
10219940:	021bd740 	call	1021bd74 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
10219944:	e0bffd17 	ldw	r2,-12(fp)
10219948:	e0ffff03 	ldbu	r3,-4(fp)
1021994c:	10c00035 	stwio	r3,0(r2)
}
10219950:	e037883a 	mov	sp,fp
10219954:	dfc00117 	ldw	ra,4(sp)
10219958:	df000017 	ldw	fp,0(sp)
1021995c:	dec00204 	addi	sp,sp,8
10219960:	f800283a 	ret

10219964 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
10219964:	defffa04 	addi	sp,sp,-24
10219968:	dfc00515 	stw	ra,20(sp)
1021996c:	df000415 	stw	fp,16(sp)
10219970:	df000404 	addi	fp,sp,16
10219974:	e13ffe15 	stw	r4,-8(fp)
10219978:	2805883a 	mov	r2,r5
1021997c:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
10219980:	e0bffe17 	ldw	r2,-8(fp)
10219984:	10800017 	ldw	r2,0(r2)
10219988:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
1021998c:	008003f4 	movhi	r2,15
10219990:	10909004 	addi	r2,r2,16960
10219994:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
10219998:	e0bffe17 	ldw	r2,-8(fp)
1021999c:	10800803 	ldbu	r2,32(r2)
102199a0:	10803fcc 	andi	r2,r2,255
102199a4:	1080201c 	xori	r2,r2,128
102199a8:	10bfe004 	addi	r2,r2,-128
102199ac:	10000126 	beq	r2,zero,102199b4 <lcd_write_data+0x50>
    return;
102199b0:	00001c06 	br	10219a24 <lcd_write_data+0xc0>

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
102199b4:	00000906 	br	102199dc <lcd_write_data+0x78>
    if (--i == 0)
102199b8:	e0bffc17 	ldw	r2,-16(fp)
102199bc:	10bfffc4 	addi	r2,r2,-1
102199c0:	e0bffc15 	stw	r2,-16(fp)
102199c4:	e0bffc17 	ldw	r2,-16(fp)
102199c8:	1000041e 	bne	r2,zero,102199dc <lcd_write_data+0x78>
    {
      sp->broken = 1;
102199cc:	e0bffe17 	ldw	r2,-8(fp)
102199d0:	00c00044 	movi	r3,1
102199d4:	10c00805 	stb	r3,32(r2)
      return;
102199d8:	00001206 	br	10219a24 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
102199dc:	e0bffd17 	ldw	r2,-12(fp)
102199e0:	10800104 	addi	r2,r2,4
102199e4:	10800037 	ldwio	r2,0(r2)
102199e8:	1080200c 	andi	r2,r2,128
102199ec:	103ff21e 	bne	r2,zero,102199b8 <lcd_write_data+0x54>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
102199f0:	01001904 	movi	r4,100
102199f4:	021bd740 	call	1021bd74 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
102199f8:	e0bffd17 	ldw	r2,-12(fp)
102199fc:	10800204 	addi	r2,r2,8
10219a00:	1007883a 	mov	r3,r2
10219a04:	e0bfff03 	ldbu	r2,-4(fp)
10219a08:	18800035 	stwio	r2,0(r3)

  sp->address++;
10219a0c:	e0bffe17 	ldw	r2,-8(fp)
10219a10:	108008c3 	ldbu	r2,35(r2)
10219a14:	10800044 	addi	r2,r2,1
10219a18:	1007883a 	mov	r3,r2
10219a1c:	e0bffe17 	ldw	r2,-8(fp)
10219a20:	10c008c5 	stb	r3,35(r2)
}
10219a24:	e037883a 	mov	sp,fp
10219a28:	dfc00117 	ldw	ra,4(sp)
10219a2c:	df000017 	ldw	fp,0(sp)
10219a30:	dec00204 	addi	sp,sp,8
10219a34:	f800283a 	ret

10219a38 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
10219a38:	defffc04 	addi	sp,sp,-16
10219a3c:	dfc00315 	stw	ra,12(sp)
10219a40:	df000215 	stw	fp,8(sp)
10219a44:	df000204 	addi	fp,sp,8
10219a48:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
10219a4c:	e13fff17 	ldw	r4,-4(fp)
10219a50:	01400044 	movi	r5,1
10219a54:	02198b00 	call	102198b0 <lcd_write_command>

  sp->x = 0;
10219a58:	e0bfff17 	ldw	r2,-4(fp)
10219a5c:	10000845 	stb	zero,33(r2)
  sp->y = 0;
10219a60:	e0bfff17 	ldw	r2,-4(fp)
10219a64:	10000885 	stb	zero,34(r2)
  sp->address = 0;
10219a68:	e0bfff17 	ldw	r2,-4(fp)
10219a6c:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
10219a70:	e03ffe15 	stw	zero,-8(fp)
10219a74:	00001b06 	br	10219ae4 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
10219a78:	e0bffe17 	ldw	r2,-8(fp)
10219a7c:	108018e4 	muli	r2,r2,99
10219a80:	10801004 	addi	r2,r2,64
10219a84:	e0ffff17 	ldw	r3,-4(fp)
10219a88:	1885883a 	add	r2,r3,r2
10219a8c:	1009883a 	mov	r4,r2
10219a90:	01400804 	movi	r5,32
10219a94:	01801444 	movi	r6,81
10219a98:	0209e580 	call	10209e58 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
10219a9c:	e0bffe17 	ldw	r2,-8(fp)
10219aa0:	108018e4 	muli	r2,r2,99
10219aa4:	10800c04 	addi	r2,r2,48
10219aa8:	e0ffff17 	ldw	r3,-4(fp)
10219aac:	1885883a 	add	r2,r3,r2
10219ab0:	1009883a 	mov	r4,r2
10219ab4:	01400804 	movi	r5,32
10219ab8:	01800404 	movi	r6,16
10219abc:	0209e580 	call	10209e58 <memset>
    sp->line[y].width = 0;
10219ac0:	e0ffff17 	ldw	r3,-4(fp)
10219ac4:	e0bffe17 	ldw	r2,-8(fp)
10219ac8:	108018e4 	muli	r2,r2,99
10219acc:	10802404 	addi	r2,r2,144
10219ad0:	1885883a 	add	r2,r3,r2
10219ad4:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
10219ad8:	e0bffe17 	ldw	r2,-8(fp)
10219adc:	10800044 	addi	r2,r2,1
10219ae0:	e0bffe15 	stw	r2,-8(fp)
10219ae4:	e0bffe17 	ldw	r2,-8(fp)
10219ae8:	10800090 	cmplti	r2,r2,2
10219aec:	103fe21e 	bne	r2,zero,10219a78 <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
10219af0:	e037883a 	mov	sp,fp
10219af4:	dfc00117 	ldw	ra,4(sp)
10219af8:	df000017 	ldw	fp,0(sp)
10219afc:	dec00204 	addi	sp,sp,8
10219b00:	f800283a 	ret

10219b04 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
10219b04:	defff704 	addi	sp,sp,-36
10219b08:	dfc00815 	stw	ra,32(sp)
10219b0c:	df000715 	stw	fp,28(sp)
10219b10:	df000704 	addi	fp,sp,28
10219b14:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
10219b18:	e0bfff17 	ldw	r2,-4(fp)
10219b1c:	10800943 	ldbu	r2,37(r2)
10219b20:	10803fcc 	andi	r2,r2,255
10219b24:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
10219b28:	e03ff915 	stw	zero,-28(fp)
10219b2c:	00006706 	br	10219ccc <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
10219b30:	e0ffff17 	ldw	r3,-4(fp)
10219b34:	e0bff917 	ldw	r2,-28(fp)
10219b38:	108018e4 	muli	r2,r2,99
10219b3c:	10802404 	addi	r2,r2,144
10219b40:	1885883a 	add	r2,r3,r2
10219b44:	10800043 	ldbu	r2,1(r2)
10219b48:	10803fcc 	andi	r2,r2,255
10219b4c:	1080201c 	xori	r2,r2,128
10219b50:	10bfe004 	addi	r2,r2,-128
10219b54:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
10219b58:	e0ffff17 	ldw	r3,-4(fp)
10219b5c:	e0bff917 	ldw	r2,-28(fp)
10219b60:	108018e4 	muli	r2,r2,99
10219b64:	10802404 	addi	r2,r2,144
10219b68:	1885883a 	add	r2,r3,r2
10219b6c:	10800083 	ldbu	r2,2(r2)
10219b70:	10c03fcc 	andi	r3,r2,255
10219b74:	e0bffc17 	ldw	r2,-16(fp)
10219b78:	1885383a 	mul	r2,r3,r2
10219b7c:	1005d23a 	srai	r2,r2,8
10219b80:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
10219b84:	e0fffb17 	ldw	r3,-20(fp)
10219b88:	e0bffd17 	ldw	r2,-12(fp)
10219b8c:	18800116 	blt	r3,r2,10219b94 <lcd_repaint_screen+0x90>
      offset = 0;
10219b90:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
10219b94:	e03ffa15 	stw	zero,-24(fp)
10219b98:	00004606 	br	10219cb4 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
10219b9c:	e0fffa17 	ldw	r3,-24(fp)
10219ba0:	e0bffb17 	ldw	r2,-20(fp)
10219ba4:	1885883a 	add	r2,r3,r2
10219ba8:	1009883a 	mov	r4,r2
10219bac:	e17ffd17 	ldw	r5,-12(fp)
10219bb0:	02024180 	call	10202418 <__modsi3>
10219bb4:	1009883a 	mov	r4,r2
10219bb8:	e0ffff17 	ldw	r3,-4(fp)
10219bbc:	e0bff917 	ldw	r2,-28(fp)
10219bc0:	108018e4 	muli	r2,r2,99
10219bc4:	1885883a 	add	r2,r3,r2
10219bc8:	1105883a 	add	r2,r2,r4
10219bcc:	10801004 	addi	r2,r2,64
10219bd0:	10800003 	ldbu	r2,0(r2)
10219bd4:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
10219bd8:	e0ffff17 	ldw	r3,-4(fp)
10219bdc:	e0bff917 	ldw	r2,-28(fp)
10219be0:	108018e4 	muli	r2,r2,99
10219be4:	1887883a 	add	r3,r3,r2
10219be8:	e0bffa17 	ldw	r2,-24(fp)
10219bec:	1885883a 	add	r2,r3,r2
10219bf0:	10800c04 	addi	r2,r2,48
10219bf4:	10800003 	ldbu	r2,0(r2)
10219bf8:	10c03fcc 	andi	r3,r2,255
10219bfc:	18c0201c 	xori	r3,r3,128
10219c00:	18ffe004 	addi	r3,r3,-128
10219c04:	e0bffe07 	ldb	r2,-8(fp)
10219c08:	18802726 	beq	r3,r2,10219ca8 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
10219c0c:	e0fff917 	ldw	r3,-28(fp)
10219c10:	d0a01104 	addi	r2,gp,-32700
10219c14:	1885883a 	add	r2,r3,r2
10219c18:	10800003 	ldbu	r2,0(r2)
10219c1c:	1007883a 	mov	r3,r2
10219c20:	e0bffa17 	ldw	r2,-24(fp)
10219c24:	1885883a 	add	r2,r3,r2
10219c28:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
10219c2c:	e0fffe43 	ldbu	r3,-7(fp)
10219c30:	e0bfff17 	ldw	r2,-4(fp)
10219c34:	108008c3 	ldbu	r2,35(r2)
10219c38:	10803fcc 	andi	r2,r2,255
10219c3c:	1080201c 	xori	r2,r2,128
10219c40:	10bfe004 	addi	r2,r2,-128
10219c44:	18800a26 	beq	r3,r2,10219c70 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
10219c48:	e0fffe43 	ldbu	r3,-7(fp)
10219c4c:	00bfe004 	movi	r2,-128
10219c50:	1884b03a 	or	r2,r3,r2
10219c54:	10803fcc 	andi	r2,r2,255
10219c58:	e13fff17 	ldw	r4,-4(fp)
10219c5c:	100b883a 	mov	r5,r2
10219c60:	02198b00 	call	102198b0 <lcd_write_command>
          sp->address = address;
10219c64:	e0fffe43 	ldbu	r3,-7(fp)
10219c68:	e0bfff17 	ldw	r2,-4(fp)
10219c6c:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
10219c70:	e0bffe03 	ldbu	r2,-8(fp)
10219c74:	10803fcc 	andi	r2,r2,255
10219c78:	e13fff17 	ldw	r4,-4(fp)
10219c7c:	100b883a 	mov	r5,r2
10219c80:	02199640 	call	10219964 <lcd_write_data>
        sp->line[y].visible[x] = c;
10219c84:	e0ffff17 	ldw	r3,-4(fp)
10219c88:	e0bff917 	ldw	r2,-28(fp)
10219c8c:	108018e4 	muli	r2,r2,99
10219c90:	1887883a 	add	r3,r3,r2
10219c94:	e0bffa17 	ldw	r2,-24(fp)
10219c98:	1885883a 	add	r2,r3,r2
10219c9c:	10800c04 	addi	r2,r2,48
10219ca0:	e0fffe03 	ldbu	r3,-8(fp)
10219ca4:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
10219ca8:	e0bffa17 	ldw	r2,-24(fp)
10219cac:	10800044 	addi	r2,r2,1
10219cb0:	e0bffa15 	stw	r2,-24(fp)
10219cb4:	e0bffa17 	ldw	r2,-24(fp)
10219cb8:	10800410 	cmplti	r2,r2,16
10219cbc:	103fb71e 	bne	r2,zero,10219b9c <lcd_repaint_screen+0x98>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
10219cc0:	e0bff917 	ldw	r2,-28(fp)
10219cc4:	10800044 	addi	r2,r2,1
10219cc8:	e0bff915 	stw	r2,-28(fp)
10219ccc:	e0bff917 	ldw	r2,-28(fp)
10219cd0:	10800090 	cmplti	r2,r2,2
10219cd4:	103f961e 	bne	r2,zero,10219b30 <lcd_repaint_screen+0x2c>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
10219cd8:	e037883a 	mov	sp,fp
10219cdc:	dfc00117 	ldw	ra,4(sp)
10219ce0:	df000017 	ldw	fp,0(sp)
10219ce4:	dec00204 	addi	sp,sp,8
10219ce8:	f800283a 	ret

10219cec <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
10219cec:	defffc04 	addi	sp,sp,-16
10219cf0:	dfc00315 	stw	ra,12(sp)
10219cf4:	df000215 	stw	fp,8(sp)
10219cf8:	df000204 	addi	fp,sp,8
10219cfc:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
10219d00:	e03ffe15 	stw	zero,-8(fp)
10219d04:	00001d06 	br	10219d7c <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
10219d08:	e0bffe17 	ldw	r2,-8(fp)
10219d0c:	00800f16 	blt	zero,r2,10219d4c <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
10219d10:	e0bffe17 	ldw	r2,-8(fp)
10219d14:	108018e4 	muli	r2,r2,99
10219d18:	10801004 	addi	r2,r2,64
10219d1c:	e0ffff17 	ldw	r3,-4(fp)
10219d20:	1889883a 	add	r4,r3,r2
10219d24:	e0bffe17 	ldw	r2,-8(fp)
10219d28:	10800044 	addi	r2,r2,1
10219d2c:	108018e4 	muli	r2,r2,99
10219d30:	10801004 	addi	r2,r2,64
10219d34:	e0ffff17 	ldw	r3,-4(fp)
10219d38:	1885883a 	add	r2,r3,r2
10219d3c:	100b883a 	mov	r5,r2
10219d40:	01801404 	movi	r6,80
10219d44:	0202dc80 	call	10202dc8 <memcpy>
10219d48:	00000906 	br	10219d70 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
10219d4c:	e0bffe17 	ldw	r2,-8(fp)
10219d50:	108018e4 	muli	r2,r2,99
10219d54:	10801004 	addi	r2,r2,64
10219d58:	e0ffff17 	ldw	r3,-4(fp)
10219d5c:	1885883a 	add	r2,r3,r2
10219d60:	1009883a 	mov	r4,r2
10219d64:	01400804 	movi	r5,32
10219d68:	01801404 	movi	r6,80
10219d6c:	0209e580 	call	10209e58 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
10219d70:	e0bffe17 	ldw	r2,-8(fp)
10219d74:	10800044 	addi	r2,r2,1
10219d78:	e0bffe15 	stw	r2,-8(fp)
10219d7c:	e0bffe17 	ldw	r2,-8(fp)
10219d80:	10800090 	cmplti	r2,r2,2
10219d84:	103fe01e 	bne	r2,zero,10219d08 <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
10219d88:	e0bfff17 	ldw	r2,-4(fp)
10219d8c:	10800883 	ldbu	r2,34(r2)
10219d90:	10bfffc4 	addi	r2,r2,-1
10219d94:	1007883a 	mov	r3,r2
10219d98:	e0bfff17 	ldw	r2,-4(fp)
10219d9c:	10c00885 	stb	r3,34(r2)
}
10219da0:	e037883a 	mov	sp,fp
10219da4:	dfc00117 	ldw	ra,4(sp)
10219da8:	df000017 	ldw	fp,0(sp)
10219dac:	dec00204 	addi	sp,sp,8
10219db0:	f800283a 	ret

10219db4 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
10219db4:	defff904 	addi	sp,sp,-28
10219db8:	dfc00615 	stw	ra,24(sp)
10219dbc:	df000515 	stw	fp,20(sp)
10219dc0:	df000504 	addi	fp,sp,20
10219dc4:	e13ffe15 	stw	r4,-8(fp)
10219dc8:	2805883a 	mov	r2,r5
10219dcc:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
10219dd0:	e03ffb15 	stw	zero,-20(fp)
10219dd4:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
10219dd8:	e0bffe17 	ldw	r2,-8(fp)
10219ddc:	10800a03 	ldbu	r2,40(r2)
10219de0:	10803fcc 	andi	r2,r2,255
10219de4:	1080201c 	xori	r2,r2,128
10219de8:	10bfe004 	addi	r2,r2,-128
10219dec:	108016d8 	cmpnei	r2,r2,91
10219df0:	1000441e 	bne	r2,zero,10219f04 <lcd_handle_escape+0x150>
  {
    char * ptr = sp->escape+1;
10219df4:	e0bffe17 	ldw	r2,-8(fp)
10219df8:	10800a44 	addi	r2,r2,41
10219dfc:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
10219e00:	00000c06 	br	10219e34 <lcd_handle_escape+0x80>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
10219e04:	e0bffb17 	ldw	r2,-20(fp)
10219e08:	10c002a4 	muli	r3,r2,10
10219e0c:	e0bffd17 	ldw	r2,-12(fp)
10219e10:	11000044 	addi	r4,r2,1
10219e14:	e13ffd15 	stw	r4,-12(fp)
10219e18:	10800003 	ldbu	r2,0(r2)
10219e1c:	10803fcc 	andi	r2,r2,255
10219e20:	1080201c 	xori	r2,r2,128
10219e24:	10bfe004 	addi	r2,r2,-128
10219e28:	10bff404 	addi	r2,r2,-48
10219e2c:	1885883a 	add	r2,r3,r2
10219e30:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
10219e34:	008408b4 	movhi	r2,4130
10219e38:	10bd0904 	addi	r2,r2,-3036
10219e3c:	10c00017 	ldw	r3,0(r2)
10219e40:	e0bffd17 	ldw	r2,-12(fp)
10219e44:	10800003 	ldbu	r2,0(r2)
10219e48:	10803fcc 	andi	r2,r2,255
10219e4c:	1080201c 	xori	r2,r2,128
10219e50:	10bfe004 	addi	r2,r2,-128
10219e54:	10800044 	addi	r2,r2,1
10219e58:	1885883a 	add	r2,r3,r2
10219e5c:	10800003 	ldbu	r2,0(r2)
10219e60:	10803fcc 	andi	r2,r2,255
10219e64:	1080010c 	andi	r2,r2,4
10219e68:	103fe61e 	bne	r2,zero,10219e04 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
10219e6c:	e0bffd17 	ldw	r2,-12(fp)
10219e70:	10800003 	ldbu	r2,0(r2)
10219e74:	10803fcc 	andi	r2,r2,255
10219e78:	1080201c 	xori	r2,r2,128
10219e7c:	10bfe004 	addi	r2,r2,-128
10219e80:	10800ed8 	cmpnei	r2,r2,59
10219e84:	10001e1e 	bne	r2,zero,10219f00 <lcd_handle_escape+0x14c>
    {
      ptr++;
10219e88:	e0bffd17 	ldw	r2,-12(fp)
10219e8c:	10800044 	addi	r2,r2,1
10219e90:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
10219e94:	00000c06 	br	10219ec8 <lcd_handle_escape+0x114>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
10219e98:	e0bffc17 	ldw	r2,-16(fp)
10219e9c:	10c002a4 	muli	r3,r2,10
10219ea0:	e0bffd17 	ldw	r2,-12(fp)
10219ea4:	11000044 	addi	r4,r2,1
10219ea8:	e13ffd15 	stw	r4,-12(fp)
10219eac:	10800003 	ldbu	r2,0(r2)
10219eb0:	10803fcc 	andi	r2,r2,255
10219eb4:	1080201c 	xori	r2,r2,128
10219eb8:	10bfe004 	addi	r2,r2,-128
10219ebc:	10bff404 	addi	r2,r2,-48
10219ec0:	1885883a 	add	r2,r3,r2
10219ec4:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
10219ec8:	008408b4 	movhi	r2,4130
10219ecc:	10bd0904 	addi	r2,r2,-3036
10219ed0:	10c00017 	ldw	r3,0(r2)
10219ed4:	e0bffd17 	ldw	r2,-12(fp)
10219ed8:	10800003 	ldbu	r2,0(r2)
10219edc:	10803fcc 	andi	r2,r2,255
10219ee0:	1080201c 	xori	r2,r2,128
10219ee4:	10bfe004 	addi	r2,r2,-128
10219ee8:	10800044 	addi	r2,r2,1
10219eec:	1885883a 	add	r2,r3,r2
10219ef0:	10800003 	ldbu	r2,0(r2)
10219ef4:	10803fcc 	andi	r2,r2,255
10219ef8:	1080010c 	andi	r2,r2,4
10219efc:	103fe61e 	bne	r2,zero,10219e98 <lcd_handle_escape+0xe4>
10219f00:	00000206 	br	10219f0c <lcd_handle_escape+0x158>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
10219f04:	00bfffc4 	movi	r2,-1
10219f08:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
10219f0c:	e0bfff07 	ldb	r2,-4(fp)
10219f10:	10c012a0 	cmpeqi	r3,r2,74
10219f14:	1800281e 	bne	r3,zero,10219fb8 <lcd_handle_escape+0x204>
10219f18:	10c012c8 	cmpgei	r3,r2,75
10219f1c:	1800031e 	bne	r3,zero,10219f2c <lcd_handle_escape+0x178>
10219f20:	10801220 	cmpeqi	r2,r2,72
10219f24:	1000051e 	bne	r2,zero,10219f3c <lcd_handle_escape+0x188>
10219f28:	00004506 	br	1021a040 <lcd_handle_escape+0x28c>
10219f2c:	10c012e0 	cmpeqi	r3,r2,75
10219f30:	1800281e 	bne	r3,zero,10219fd4 <lcd_handle_escape+0x220>
10219f34:	108019a0 	cmpeqi	r2,r2,102
10219f38:	10004126 	beq	r2,zero,1021a040 <lcd_handle_escape+0x28c>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
10219f3c:	e0bffc17 	ldw	r2,-16(fp)
10219f40:	0080050e 	bge	zero,r2,10219f58 <lcd_handle_escape+0x1a4>
      sp->x = parm2 - 1;
10219f44:	e0bffc17 	ldw	r2,-16(fp)
10219f48:	10bfffc4 	addi	r2,r2,-1
10219f4c:	1007883a 	mov	r3,r2
10219f50:	e0bffe17 	ldw	r2,-8(fp)
10219f54:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
10219f58:	e0bffb17 	ldw	r2,-20(fp)
10219f5c:	0080150e 	bge	zero,r2,10219fb4 <lcd_handle_escape+0x200>
    {
      sp->y = parm1 - 1;
10219f60:	e0bffb17 	ldw	r2,-20(fp)
10219f64:	10bfffc4 	addi	r2,r2,-1
10219f68:	1007883a 	mov	r3,r2
10219f6c:	e0bffe17 	ldw	r2,-8(fp)
10219f70:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
10219f74:	e0bffe17 	ldw	r2,-8(fp)
10219f78:	10800883 	ldbu	r2,34(r2)
10219f7c:	10803fcc 	andi	r2,r2,255
10219f80:	10800170 	cmpltui	r2,r2,5
10219f84:	1000031e 	bne	r2,zero,10219f94 <lcd_handle_escape+0x1e0>
        sp->y = ALT_LCD_HEIGHT * 2;
10219f88:	e0bffe17 	ldw	r2,-8(fp)
10219f8c:	00c00104 	movi	r3,4
10219f90:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
10219f94:	00000206 	br	10219fa0 <lcd_handle_escape+0x1ec>
        lcd_scroll_up(sp);
10219f98:	e13ffe17 	ldw	r4,-8(fp)
10219f9c:	0219cec0 	call	10219cec <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
10219fa0:	e0bffe17 	ldw	r2,-8(fp)
10219fa4:	10800883 	ldbu	r2,34(r2)
10219fa8:	10803fcc 	andi	r2,r2,255
10219fac:	108000e8 	cmpgeui	r2,r2,3
10219fb0:	103ff91e 	bne	r2,zero,10219f98 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
    }
    break;
10219fb4:	00002206 	br	1021a040 <lcd_handle_escape+0x28c>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
10219fb8:	e0bffb17 	ldw	r2,-20(fp)
10219fbc:	10800098 	cmpnei	r2,r2,2
10219fc0:	1000031e 	bne	r2,zero,10219fd0 <lcd_handle_escape+0x21c>
      lcd_clear_screen(sp);
10219fc4:	e13ffe17 	ldw	r4,-8(fp)
10219fc8:	0219a380 	call	10219a38 <lcd_clear_screen>
    break;
10219fcc:	00001c06 	br	1021a040 <lcd_handle_escape+0x28c>
10219fd0:	00001b06 	br	1021a040 <lcd_handle_escape+0x28c>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
10219fd4:	e0bffb17 	ldw	r2,-20(fp)
10219fd8:	00801816 	blt	zero,r2,1021a03c <lcd_handle_escape+0x288>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
10219fdc:	e0bffe17 	ldw	r2,-8(fp)
10219fe0:	10800843 	ldbu	r2,33(r2)
10219fe4:	10803fcc 	andi	r2,r2,255
10219fe8:	10801428 	cmpgeui	r2,r2,80
10219fec:	1000131e 	bne	r2,zero,1021a03c <lcd_handle_escape+0x288>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
10219ff0:	e0bffe17 	ldw	r2,-8(fp)
10219ff4:	10800883 	ldbu	r2,34(r2)
10219ff8:	10803fcc 	andi	r2,r2,255
10219ffc:	108018e4 	muli	r2,r2,99
1021a000:	10801004 	addi	r2,r2,64
1021a004:	e0fffe17 	ldw	r3,-8(fp)
1021a008:	1887883a 	add	r3,r3,r2
1021a00c:	e0bffe17 	ldw	r2,-8(fp)
1021a010:	10800843 	ldbu	r2,33(r2)
1021a014:	10803fcc 	andi	r2,r2,255
1021a018:	1889883a 	add	r4,r3,r2
1021a01c:	e0bffe17 	ldw	r2,-8(fp)
1021a020:	10800843 	ldbu	r2,33(r2)
1021a024:	10803fcc 	andi	r2,r2,255
1021a028:	00c01404 	movi	r3,80
1021a02c:	1885c83a 	sub	r2,r3,r2
1021a030:	01400804 	movi	r5,32
1021a034:	100d883a 	mov	r6,r2
1021a038:	0209e580 	call	10209e58 <memset>
    }
    break;
1021a03c:	0001883a 	nop
  }
}
1021a040:	e037883a 	mov	sp,fp
1021a044:	dfc00117 	ldw	ra,4(sp)
1021a048:	df000017 	ldw	fp,0(sp)
1021a04c:	dec00204 	addi	sp,sp,8
1021a050:	f800283a 	ret

1021a054 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
1021a054:	defff304 	addi	sp,sp,-52
1021a058:	dfc00c15 	stw	ra,48(sp)
1021a05c:	df000b15 	stw	fp,44(sp)
1021a060:	df000b04 	addi	fp,sp,44
1021a064:	e13ffc15 	stw	r4,-16(fp)
1021a068:	e17ffd15 	stw	r5,-12(fp)
1021a06c:	e1bffe15 	stw	r6,-8(fp)
1021a070:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
1021a074:	e0bffe17 	ldw	r2,-8(fp)
1021a078:	e0fffd17 	ldw	r3,-12(fp)
1021a07c:	1885883a 	add	r2,r3,r2
1021a080:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
1021a084:	e0bffc17 	ldw	r2,-16(fp)
1021a088:	00c00044 	movi	r3,1
1021a08c:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
1021a090:	00009e06 	br	1021a30c <altera_avalon_lcd_16207_write+0x2b8>
  {
    char c = *ptr;
1021a094:	e0bffd17 	ldw	r2,-12(fp)
1021a098:	10800003 	ldbu	r2,0(r2)
1021a09c:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
1021a0a0:	e0bffc17 	ldw	r2,-16(fp)
1021a0a4:	10800903 	ldbu	r2,36(r2)
1021a0a8:	10803fcc 	andi	r2,r2,255
1021a0ac:	1080201c 	xori	r2,r2,128
1021a0b0:	10bfe004 	addi	r2,r2,-128
1021a0b4:	10003a16 	blt	r2,zero,1021a1a0 <altera_avalon_lcd_16207_write+0x14c>
    {
      unsigned int esccount = sp->esccount;
1021a0b8:	e0bffc17 	ldw	r2,-16(fp)
1021a0bc:	10800903 	ldbu	r2,36(r2)
1021a0c0:	10803fcc 	andi	r2,r2,255
1021a0c4:	1080201c 	xori	r2,r2,128
1021a0c8:	10bfe004 	addi	r2,r2,-128
1021a0cc:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
1021a0d0:	e0bffa17 	ldw	r2,-24(fp)
1021a0d4:	1000031e 	bne	r2,zero,1021a0e4 <altera_avalon_lcd_16207_write+0x90>
1021a0d8:	e0bff907 	ldb	r2,-28(fp)
1021a0dc:	108016d8 	cmpnei	r2,r2,91
1021a0e0:	10000f1e 	bne	r2,zero,1021a120 <altera_avalon_lcd_16207_write+0xcc>
1021a0e4:	e0bffa17 	ldw	r2,-24(fp)
1021a0e8:	10001a26 	beq	r2,zero,1021a154 <altera_avalon_lcd_16207_write+0x100>
          (esccount > 0 && !isdigit(c) && c != ';'))
1021a0ec:	008408b4 	movhi	r2,4130
1021a0f0:	10bd0904 	addi	r2,r2,-3036
1021a0f4:	10c00017 	ldw	r3,0(r2)
1021a0f8:	e0bff907 	ldb	r2,-28(fp)
1021a0fc:	10800044 	addi	r2,r2,1
1021a100:	1885883a 	add	r2,r3,r2
1021a104:	10800003 	ldbu	r2,0(r2)
1021a108:	10803fcc 	andi	r2,r2,255
1021a10c:	1080010c 	andi	r2,r2,4
1021a110:	1000101e 	bne	r2,zero,1021a154 <altera_avalon_lcd_16207_write+0x100>
1021a114:	e0bff907 	ldb	r2,-28(fp)
1021a118:	10800ee0 	cmpeqi	r2,r2,59
1021a11c:	10000d1e 	bne	r2,zero,1021a154 <altera_avalon_lcd_16207_write+0x100>
      {
        sp->escape[esccount] = 0;
1021a120:	e0fffc17 	ldw	r3,-16(fp)
1021a124:	e0bffa17 	ldw	r2,-24(fp)
1021a128:	1885883a 	add	r2,r3,r2
1021a12c:	10800a04 	addi	r2,r2,40
1021a130:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
1021a134:	e0bff907 	ldb	r2,-28(fp)
1021a138:	e13ffc17 	ldw	r4,-16(fp)
1021a13c:	100b883a 	mov	r5,r2
1021a140:	0219db40 	call	10219db4 <lcd_handle_escape>

        sp->esccount = -1;
1021a144:	e0bffc17 	ldw	r2,-16(fp)
1021a148:	00ffffc4 	movi	r3,-1
1021a14c:	10c00905 	stb	r3,36(r2)
1021a150:	00001206 	br	1021a19c <altera_avalon_lcd_16207_write+0x148>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
1021a154:	e0bffc17 	ldw	r2,-16(fp)
1021a158:	10800903 	ldbu	r2,36(r2)
1021a15c:	10803fcc 	andi	r2,r2,255
1021a160:	108001e8 	cmpgeui	r2,r2,7
1021a164:	10000d1e 	bne	r2,zero,1021a19c <altera_avalon_lcd_16207_write+0x148>
      {
        sp->escape[esccount] = c;
1021a168:	e0fffc17 	ldw	r3,-16(fp)
1021a16c:	e0bffa17 	ldw	r2,-24(fp)
1021a170:	1885883a 	add	r2,r3,r2
1021a174:	10800a04 	addi	r2,r2,40
1021a178:	e0fff903 	ldbu	r3,-28(fp)
1021a17c:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
1021a180:	e0bffc17 	ldw	r2,-16(fp)
1021a184:	10800903 	ldbu	r2,36(r2)
1021a188:	10800044 	addi	r2,r2,1
1021a18c:	1007883a 	mov	r3,r2
1021a190:	e0bffc17 	ldw	r2,-16(fp)
1021a194:	10c00905 	stb	r3,36(r2)
1021a198:	00005906 	br	1021a300 <altera_avalon_lcd_16207_write+0x2ac>
1021a19c:	00005806 	br	1021a300 <altera_avalon_lcd_16207_write+0x2ac>
      }
    }
    else if (c == 27) /* ESC */
1021a1a0:	e0bff907 	ldb	r2,-28(fp)
1021a1a4:	108006d8 	cmpnei	r2,r2,27
1021a1a8:	1000031e 	bne	r2,zero,1021a1b8 <altera_avalon_lcd_16207_write+0x164>
    {
      sp->esccount = 0;
1021a1ac:	e0bffc17 	ldw	r2,-16(fp)
1021a1b0:	10000905 	stb	zero,36(r2)
1021a1b4:	00005206 	br	1021a300 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\r')
1021a1b8:	e0bff907 	ldb	r2,-28(fp)
1021a1bc:	10800358 	cmpnei	r2,r2,13
1021a1c0:	1000031e 	bne	r2,zero,1021a1d0 <altera_avalon_lcd_16207_write+0x17c>
    {
      sp->x = 0;
1021a1c4:	e0bffc17 	ldw	r2,-16(fp)
1021a1c8:	10000845 	stb	zero,33(r2)
1021a1cc:	00004c06 	br	1021a300 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\n')
1021a1d0:	e0bff907 	ldb	r2,-28(fp)
1021a1d4:	10800298 	cmpnei	r2,r2,10
1021a1d8:	1000101e 	bne	r2,zero,1021a21c <altera_avalon_lcd_16207_write+0x1c8>
    {
      sp->x = 0;
1021a1dc:	e0bffc17 	ldw	r2,-16(fp)
1021a1e0:	10000845 	stb	zero,33(r2)
      sp->y++;
1021a1e4:	e0bffc17 	ldw	r2,-16(fp)
1021a1e8:	10800883 	ldbu	r2,34(r2)
1021a1ec:	10800044 	addi	r2,r2,1
1021a1f0:	1007883a 	mov	r3,r2
1021a1f4:	e0bffc17 	ldw	r2,-16(fp)
1021a1f8:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
1021a1fc:	e0bffc17 	ldw	r2,-16(fp)
1021a200:	10800883 	ldbu	r2,34(r2)
1021a204:	10803fcc 	andi	r2,r2,255
1021a208:	108000f0 	cmpltui	r2,r2,3
1021a20c:	10003c1e 	bne	r2,zero,1021a300 <altera_avalon_lcd_16207_write+0x2ac>
        lcd_scroll_up(sp);
1021a210:	e13ffc17 	ldw	r4,-16(fp)
1021a214:	0219cec0 	call	10219cec <lcd_scroll_up>
1021a218:	00003906 	br	1021a300 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\b')
1021a21c:	e0bff907 	ldb	r2,-28(fp)
1021a220:	10800218 	cmpnei	r2,r2,8
1021a224:	10000b1e 	bne	r2,zero,1021a254 <altera_avalon_lcd_16207_write+0x200>
    {
      if (sp->x > 0)
1021a228:	e0bffc17 	ldw	r2,-16(fp)
1021a22c:	10800843 	ldbu	r2,33(r2)
1021a230:	10803fcc 	andi	r2,r2,255
1021a234:	10003226 	beq	r2,zero,1021a300 <altera_avalon_lcd_16207_write+0x2ac>
        sp->x--;
1021a238:	e0bffc17 	ldw	r2,-16(fp)
1021a23c:	10800843 	ldbu	r2,33(r2)
1021a240:	10bfffc4 	addi	r2,r2,-1
1021a244:	1007883a 	mov	r3,r2
1021a248:	e0bffc17 	ldw	r2,-16(fp)
1021a24c:	10c00845 	stb	r3,33(r2)
1021a250:	00002b06 	br	1021a300 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (isprint(c))
1021a254:	008408b4 	movhi	r2,4130
1021a258:	10bd0904 	addi	r2,r2,-3036
1021a25c:	10c00017 	ldw	r3,0(r2)
1021a260:	e0bff907 	ldb	r2,-28(fp)
1021a264:	10800044 	addi	r2,r2,1
1021a268:	1885883a 	add	r2,r3,r2
1021a26c:	10800003 	ldbu	r2,0(r2)
1021a270:	10803fcc 	andi	r2,r2,255
1021a274:	1080201c 	xori	r2,r2,128
1021a278:	10bfe004 	addi	r2,r2,-128
1021a27c:	108025cc 	andi	r2,r2,151
1021a280:	10001f26 	beq	r2,zero,1021a300 <altera_avalon_lcd_16207_write+0x2ac>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
1021a284:	e0bffc17 	ldw	r2,-16(fp)
1021a288:	10800883 	ldbu	r2,34(r2)
1021a28c:	10803fcc 	andi	r2,r2,255
1021a290:	108000b0 	cmpltui	r2,r2,2
1021a294:	1000021e 	bne	r2,zero,1021a2a0 <altera_avalon_lcd_16207_write+0x24c>
        lcd_scroll_up(sp);
1021a298:	e13ffc17 	ldw	r4,-16(fp)
1021a29c:	0219cec0 	call	10219cec <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
1021a2a0:	e0bffc17 	ldw	r2,-16(fp)
1021a2a4:	10800843 	ldbu	r2,33(r2)
1021a2a8:	10803fcc 	andi	r2,r2,255
1021a2ac:	10801428 	cmpgeui	r2,r2,80
1021a2b0:	10000d1e 	bne	r2,zero,1021a2e8 <altera_avalon_lcd_16207_write+0x294>
        sp->line[sp->y].data[sp->x] = c;
1021a2b4:	e0bffc17 	ldw	r2,-16(fp)
1021a2b8:	10800883 	ldbu	r2,34(r2)
1021a2bc:	10c03fcc 	andi	r3,r2,255
1021a2c0:	e0bffc17 	ldw	r2,-16(fp)
1021a2c4:	10800843 	ldbu	r2,33(r2)
1021a2c8:	10803fcc 	andi	r2,r2,255
1021a2cc:	e13ffc17 	ldw	r4,-16(fp)
1021a2d0:	18c018e4 	muli	r3,r3,99
1021a2d4:	20c7883a 	add	r3,r4,r3
1021a2d8:	1885883a 	add	r2,r3,r2
1021a2dc:	10801004 	addi	r2,r2,64
1021a2e0:	e0fff903 	ldbu	r3,-28(fp)
1021a2e4:	10c00005 	stb	r3,0(r2)

      sp->x++;
1021a2e8:	e0bffc17 	ldw	r2,-16(fp)
1021a2ec:	10800843 	ldbu	r2,33(r2)
1021a2f0:	10800044 	addi	r2,r2,1
1021a2f4:	1007883a 	mov	r3,r2
1021a2f8:	e0bffc17 	ldw	r2,-16(fp)
1021a2fc:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
1021a300:	e0bffd17 	ldw	r2,-12(fp)
1021a304:	10800044 	addi	r2,r2,1
1021a308:	e0bffd15 	stw	r2,-12(fp)
1021a30c:	e0fffd17 	ldw	r3,-12(fp)
1021a310:	e0bff817 	ldw	r2,-32(fp)
1021a314:	18bf5f36 	bltu	r3,r2,1021a094 <altera_avalon_lcd_16207_write+0x40>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
1021a318:	00800404 	movi	r2,16
1021a31c:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
1021a320:	e03ff515 	stw	zero,-44(fp)
1021a324:	00003606 	br	1021a400 <altera_avalon_lcd_16207_write+0x3ac>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
1021a328:	00801404 	movi	r2,80
1021a32c:	e0bff715 	stw	r2,-36(fp)
1021a330:	00001206 	br	1021a37c <altera_avalon_lcd_16207_write+0x328>
      if (sp->line[y].data[width-1] != ' ')
1021a334:	e0bff717 	ldw	r2,-36(fp)
1021a338:	10bfffc4 	addi	r2,r2,-1
1021a33c:	e13ffc17 	ldw	r4,-16(fp)
1021a340:	e0fff517 	ldw	r3,-44(fp)
1021a344:	18c018e4 	muli	r3,r3,99
1021a348:	20c7883a 	add	r3,r4,r3
1021a34c:	1885883a 	add	r2,r3,r2
1021a350:	10801004 	addi	r2,r2,64
1021a354:	10800003 	ldbu	r2,0(r2)
1021a358:	10803fcc 	andi	r2,r2,255
1021a35c:	1080201c 	xori	r2,r2,128
1021a360:	10bfe004 	addi	r2,r2,-128
1021a364:	10800820 	cmpeqi	r2,r2,32
1021a368:	1000011e 	bne	r2,zero,1021a370 <altera_avalon_lcd_16207_write+0x31c>
        break;
1021a36c:	00000506 	br	1021a384 <altera_avalon_lcd_16207_write+0x330>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
1021a370:	e0bff717 	ldw	r2,-36(fp)
1021a374:	10bfffc4 	addi	r2,r2,-1
1021a378:	e0bff715 	stw	r2,-36(fp)
1021a37c:	e0bff717 	ldw	r2,-36(fp)
1021a380:	00bfec16 	blt	zero,r2,1021a334 <altera_avalon_lcd_16207_write+0x2e0>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
1021a384:	e0bff717 	ldw	r2,-36(fp)
1021a388:	10800448 	cmpgei	r2,r2,17
1021a38c:	1000031e 	bne	r2,zero,1021a39c <altera_avalon_lcd_16207_write+0x348>
      width = ALT_LCD_WIDTH;
1021a390:	00800404 	movi	r2,16
1021a394:	e0bff715 	stw	r2,-36(fp)
1021a398:	00000306 	br	1021a3a8 <altera_avalon_lcd_16207_write+0x354>
    else
      width++;
1021a39c:	e0bff717 	ldw	r2,-36(fp)
1021a3a0:	10800044 	addi	r2,r2,1
1021a3a4:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
1021a3a8:	e0bff717 	ldw	r2,-36(fp)
1021a3ac:	1009883a 	mov	r4,r2
1021a3b0:	e0fffc17 	ldw	r3,-16(fp)
1021a3b4:	e0bff517 	ldw	r2,-44(fp)
1021a3b8:	108018e4 	muli	r2,r2,99
1021a3bc:	10802404 	addi	r2,r2,144
1021a3c0:	1885883a 	add	r2,r3,r2
1021a3c4:	11000045 	stb	r4,1(r2)
    if (widthmax < width)
1021a3c8:	e0fff617 	ldw	r3,-40(fp)
1021a3cc:	e0bff717 	ldw	r2,-36(fp)
1021a3d0:	1880020e 	bge	r3,r2,1021a3dc <altera_avalon_lcd_16207_write+0x388>
      widthmax = width;
1021a3d4:	e0bff717 	ldw	r2,-36(fp)
1021a3d8:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
1021a3dc:	e0fffc17 	ldw	r3,-16(fp)
1021a3e0:	e0bff517 	ldw	r2,-44(fp)
1021a3e4:	108018e4 	muli	r2,r2,99
1021a3e8:	10802404 	addi	r2,r2,144
1021a3ec:	1885883a 	add	r2,r3,r2
1021a3f0:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
1021a3f4:	e0bff517 	ldw	r2,-44(fp)
1021a3f8:	10800044 	addi	r2,r2,1
1021a3fc:	e0bff515 	stw	r2,-44(fp)
1021a400:	e0bff517 	ldw	r2,-44(fp)
1021a404:	10800090 	cmplti	r2,r2,2
1021a408:	103fc71e 	bne	r2,zero,1021a328 <altera_avalon_lcd_16207_write+0x2d4>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
1021a40c:	e0bff617 	ldw	r2,-40(fp)
1021a410:	10800448 	cmpgei	r2,r2,17
1021a414:	1000031e 	bne	r2,zero,1021a424 <altera_avalon_lcd_16207_write+0x3d0>
    sp->scrollmax = 0;
1021a418:	e0bffc17 	ldw	r2,-16(fp)
1021a41c:	10000985 	stb	zero,38(r2)
1021a420:	00002e06 	br	1021a4dc <altera_avalon_lcd_16207_write+0x488>
  else
  {
    widthmax *= 2;
1021a424:	e0bff617 	ldw	r2,-40(fp)
1021a428:	1085883a 	add	r2,r2,r2
1021a42c:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
1021a430:	e0bff617 	ldw	r2,-40(fp)
1021a434:	1007883a 	mov	r3,r2
1021a438:	e0bffc17 	ldw	r2,-16(fp)
1021a43c:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
1021a440:	e03ff515 	stw	zero,-44(fp)
1021a444:	00002206 	br	1021a4d0 <altera_avalon_lcd_16207_write+0x47c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
1021a448:	e0fffc17 	ldw	r3,-16(fp)
1021a44c:	e0bff517 	ldw	r2,-44(fp)
1021a450:	108018e4 	muli	r2,r2,99
1021a454:	10802404 	addi	r2,r2,144
1021a458:	1885883a 	add	r2,r3,r2
1021a45c:	10800043 	ldbu	r2,1(r2)
1021a460:	10803fcc 	andi	r2,r2,255
1021a464:	1080201c 	xori	r2,r2,128
1021a468:	10bfe004 	addi	r2,r2,-128
1021a46c:	10800450 	cmplti	r2,r2,17
1021a470:	1000141e 	bne	r2,zero,1021a4c4 <altera_avalon_lcd_16207_write+0x470>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
1021a474:	e0fffc17 	ldw	r3,-16(fp)
1021a478:	e0bff517 	ldw	r2,-44(fp)
1021a47c:	108018e4 	muli	r2,r2,99
1021a480:	10802404 	addi	r2,r2,144
1021a484:	1885883a 	add	r2,r3,r2
1021a488:	10800043 	ldbu	r2,1(r2)
1021a48c:	10803fcc 	andi	r2,r2,255
1021a490:	1080201c 	xori	r2,r2,128
1021a494:	10bfe004 	addi	r2,r2,-128
1021a498:	1004923a 	slli	r2,r2,8
1021a49c:	1009883a 	mov	r4,r2
1021a4a0:	e17ff617 	ldw	r5,-40(fp)
1021a4a4:	02023c40 	call	102023c4 <__divsi3>
1021a4a8:	1009883a 	mov	r4,r2
1021a4ac:	e0fffc17 	ldw	r3,-16(fp)
1021a4b0:	e0bff517 	ldw	r2,-44(fp)
1021a4b4:	108018e4 	muli	r2,r2,99
1021a4b8:	10802404 	addi	r2,r2,144
1021a4bc:	1885883a 	add	r2,r3,r2
1021a4c0:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
1021a4c4:	e0bff517 	ldw	r2,-44(fp)
1021a4c8:	10800044 	addi	r2,r2,1
1021a4cc:	e0bff515 	stw	r2,-44(fp)
1021a4d0:	e0bff517 	ldw	r2,-44(fp)
1021a4d4:	10800090 	cmplti	r2,r2,2
1021a4d8:	103fdb1e 	bne	r2,zero,1021a448 <altera_avalon_lcd_16207_write+0x3f4>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
1021a4dc:	e0bffc17 	ldw	r2,-16(fp)
1021a4e0:	10800943 	ldbu	r2,37(r2)
1021a4e4:	10803fcc 	andi	r2,r2,255
1021a4e8:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
1021a4ec:	e13ffc17 	ldw	r4,-16(fp)
1021a4f0:	0219b040 	call	10219b04 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
1021a4f4:	e0bffc17 	ldw	r2,-16(fp)
1021a4f8:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
1021a4fc:	e0bffc17 	ldw	r2,-16(fp)
1021a500:	10800943 	ldbu	r2,37(r2)
1021a504:	10c03fcc 	andi	r3,r2,255
1021a508:	e0bffb17 	ldw	r2,-20(fp)
1021a50c:	1880011e 	bne	r3,r2,1021a514 <altera_avalon_lcd_16207_write+0x4c0>
      break;
1021a510:	00000406 	br	1021a524 <altera_avalon_lcd_16207_write+0x4d0>

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
1021a514:	e0bffc17 	ldw	r2,-16(fp)
1021a518:	00c00044 	movi	r3,1
1021a51c:	10c009c5 	stb	r3,39(r2)
  }
1021a520:	003fee06 	br	1021a4dc <altera_avalon_lcd_16207_write+0x488>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
1021a524:	e0bffe17 	ldw	r2,-8(fp)
}
1021a528:	e037883a 	mov	sp,fp
1021a52c:	dfc00117 	ldw	ra,4(sp)
1021a530:	df000017 	ldw	fp,0(sp)
1021a534:	dec00204 	addi	sp,sp,8
1021a538:	f800283a 	ret

1021a53c <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
1021a53c:	defffc04 	addi	sp,sp,-16
1021a540:	dfc00315 	stw	ra,12(sp)
1021a544:	df000215 	stw	fp,8(sp)
1021a548:	df000204 	addi	fp,sp,8
1021a54c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
1021a550:	e0bfff17 	ldw	r2,-4(fp)
1021a554:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
1021a558:	e0bffe17 	ldw	r2,-8(fp)
1021a55c:	10800943 	ldbu	r2,37(r2)
1021a560:	10803fcc 	andi	r2,r2,255
1021a564:	10c00044 	addi	r3,r2,1
1021a568:	e0bffe17 	ldw	r2,-8(fp)
1021a56c:	10800983 	ldbu	r2,38(r2)
1021a570:	10803fcc 	andi	r2,r2,255
1021a574:	18800316 	blt	r3,r2,1021a584 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
1021a578:	e0bffe17 	ldw	r2,-8(fp)
1021a57c:	10000945 	stb	zero,37(r2)
1021a580:	00000606 	br	1021a59c <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
1021a584:	e0bffe17 	ldw	r2,-8(fp)
1021a588:	10800943 	ldbu	r2,37(r2)
1021a58c:	10800044 	addi	r2,r2,1
1021a590:	1007883a 	mov	r3,r2
1021a594:	e0bffe17 	ldw	r2,-8(fp)
1021a598:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
1021a59c:	e0bffe17 	ldw	r2,-8(fp)
1021a5a0:	10800983 	ldbu	r2,38(r2)
1021a5a4:	10803fcc 	andi	r2,r2,255
1021a5a8:	10000826 	beq	r2,zero,1021a5cc <alt_lcd_16207_timeout+0x90>
1021a5ac:	e0bffe17 	ldw	r2,-8(fp)
1021a5b0:	108009c3 	ldbu	r2,39(r2)
1021a5b4:	10803fcc 	andi	r2,r2,255
1021a5b8:	1080201c 	xori	r2,r2,128
1021a5bc:	10bfe004 	addi	r2,r2,-128
1021a5c0:	1000021e 	bne	r2,zero,1021a5cc <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
1021a5c4:	e13ffe17 	ldw	r4,-8(fp)
1021a5c8:	0219b040 	call	10219b04 <lcd_repaint_screen>

  return sp->period;
1021a5cc:	e0bffe17 	ldw	r2,-8(fp)
1021a5d0:	10800717 	ldw	r2,28(r2)
}
1021a5d4:	e037883a 	mov	sp,fp
1021a5d8:	dfc00117 	ldw	ra,4(sp)
1021a5dc:	df000017 	ldw	fp,0(sp)
1021a5e0:	dec00204 	addi	sp,sp,8
1021a5e4:	f800283a 	ret

1021a5e8 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
1021a5e8:	defffc04 	addi	sp,sp,-16
1021a5ec:	dfc00315 	stw	ra,12(sp)
1021a5f0:	df000215 	stw	fp,8(sp)
1021a5f4:	df000204 	addi	fp,sp,8
1021a5f8:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
1021a5fc:	e0bfff17 	ldw	r2,-4(fp)
1021a600:	10800017 	ldw	r2,0(r2)
1021a604:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
1021a608:	e0bfff17 	ldw	r2,-4(fp)
1021a60c:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
1021a610:	010ea604 	movi	r4,15000
1021a614:	021bd740 	call	1021bd74 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
1021a618:	e0bffe17 	ldw	r2,-8(fp)
1021a61c:	00c00c04 	movi	r3,48
1021a620:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
1021a624:	01040104 	movi	r4,4100
1021a628:	021bd740 	call	1021bd74 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
1021a62c:	e0bffe17 	ldw	r2,-8(fp)
1021a630:	00c00c04 	movi	r3,48
1021a634:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
1021a638:	0100fa04 	movi	r4,1000
1021a63c:	021bd740 	call	1021bd74 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
1021a640:	e0bffe17 	ldw	r2,-8(fp)
1021a644:	00c00c04 	movi	r3,48
1021a648:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
1021a64c:	e13fff17 	ldw	r4,-4(fp)
1021a650:	01400e04 	movi	r5,56
1021a654:	02198b00 	call	102198b0 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
1021a658:	e13fff17 	ldw	r4,-4(fp)
1021a65c:	01400204 	movi	r5,8
1021a660:	02198b00 	call	102198b0 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
1021a664:	e13fff17 	ldw	r4,-4(fp)
1021a668:	0219a380 	call	10219a38 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
1021a66c:	e13fff17 	ldw	r4,-4(fp)
1021a670:	01400184 	movi	r5,6
1021a674:	02198b00 	call	102198b0 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
1021a678:	e13fff17 	ldw	r4,-4(fp)
1021a67c:	01400304 	movi	r5,12
1021a680:	02198b00 	call	102198b0 <lcd_write_command>

  sp->esccount = -1;
1021a684:	e0bfff17 	ldw	r2,-4(fp)
1021a688:	00ffffc4 	movi	r3,-1
1021a68c:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
1021a690:	e0bfff17 	ldw	r2,-4(fp)
1021a694:	10800a04 	addi	r2,r2,40
1021a698:	1009883a 	mov	r4,r2
1021a69c:	000b883a 	mov	r5,zero
1021a6a0:	01800204 	movi	r6,8
1021a6a4:	0209e580 	call	10209e58 <memset>

  sp->scrollpos = 0;
1021a6a8:	e0bfff17 	ldw	r2,-4(fp)
1021a6ac:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
1021a6b0:	e0bfff17 	ldw	r2,-4(fp)
1021a6b4:	10000985 	stb	zero,38(r2)
  sp->active = 0;
1021a6b8:	e0bfff17 	ldw	r2,-4(fp)
1021a6bc:	100009c5 	stb	zero,39(r2)
1021a6c0:	008408b4 	movhi	r2,4130
1021a6c4:	10846004 	addi	r2,r2,4480
1021a6c8:	10800017 	ldw	r2,0(r2)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
1021a6cc:	1009883a 	mov	r4,r2
1021a6d0:	01400284 	movi	r5,10
1021a6d4:	02024740 	call	10202474 <__udivsi3>
1021a6d8:	1007883a 	mov	r3,r2
1021a6dc:	e0bfff17 	ldw	r2,-4(fp)
1021a6e0:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
1021a6e4:	e0bfff17 	ldw	r2,-4(fp)
1021a6e8:	10c00104 	addi	r3,r2,4
1021a6ec:	e0bfff17 	ldw	r2,-4(fp)
1021a6f0:	10800717 	ldw	r2,28(r2)
1021a6f4:	1809883a 	mov	r4,r3
1021a6f8:	100b883a 	mov	r5,r2
1021a6fc:	018408b4 	movhi	r6,4130
1021a700:	31a94f04 	addi	r6,r6,-23236
1021a704:	e1ffff17 	ldw	r7,-4(fp)
1021a708:	021b16c0 	call	1021b16c <alt_alarm_start>
}
1021a70c:	e037883a 	mov	sp,fp
1021a710:	dfc00117 	ldw	ra,4(sp)
1021a714:	df000017 	ldw	fp,0(sp)
1021a718:	dec00204 	addi	sp,sp,8
1021a71c:	f800283a 	ret

1021a720 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
1021a720:	defffa04 	addi	sp,sp,-24
1021a724:	dfc00515 	stw	ra,20(sp)
1021a728:	df000415 	stw	fp,16(sp)
1021a72c:	df000404 	addi	fp,sp,16
1021a730:	e13ffd15 	stw	r4,-12(fp)
1021a734:	e17ffe15 	stw	r5,-8(fp)
1021a738:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
1021a73c:	e0bffd17 	ldw	r2,-12(fp)
1021a740:	10800017 	ldw	r2,0(r2)
1021a744:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
1021a748:	e0bffc17 	ldw	r2,-16(fp)
1021a74c:	10c00a04 	addi	r3,r2,40
1021a750:	e0bffd17 	ldw	r2,-12(fp)
1021a754:	10800217 	ldw	r2,8(r2)
1021a758:	1809883a 	mov	r4,r3
1021a75c:	e17ffe17 	ldw	r5,-8(fp)
1021a760:	e1bfff17 	ldw	r6,-4(fp)
1021a764:	100f883a 	mov	r7,r2
1021a768:	021a0540 	call	1021a054 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
1021a76c:	e037883a 	mov	sp,fp
1021a770:	dfc00117 	ldw	ra,4(sp)
1021a774:	df000017 	ldw	fp,0(sp)
1021a778:	dec00204 	addi	sp,sp,8
1021a77c:	f800283a 	ret

1021a780 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
1021a780:	defffa04 	addi	sp,sp,-24
1021a784:	dfc00515 	stw	ra,20(sp)
1021a788:	df000415 	stw	fp,16(sp)
1021a78c:	df000404 	addi	fp,sp,16
1021a790:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
1021a794:	0007883a 	mov	r3,zero
1021a798:	e0bfff17 	ldw	r2,-4(fp)
1021a79c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
1021a7a0:	e0bfff17 	ldw	r2,-4(fp)
1021a7a4:	10800104 	addi	r2,r2,4
1021a7a8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1021a7ac:	0005303a 	rdctl	r2,status
1021a7b0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1021a7b4:	e0fffd17 	ldw	r3,-12(fp)
1021a7b8:	00bfff84 	movi	r2,-2
1021a7bc:	1884703a 	and	r2,r3,r2
1021a7c0:	1001703a 	wrctl	status,r2
  
  return context;
1021a7c4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
1021a7c8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
1021a7cc:	021bc700 	call	1021bc70 <alt_tick>
1021a7d0:	e0bffc17 	ldw	r2,-16(fp)
1021a7d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1021a7d8:	e0bffe17 	ldw	r2,-8(fp)
1021a7dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
1021a7e0:	e037883a 	mov	sp,fp
1021a7e4:	dfc00117 	ldw	ra,4(sp)
1021a7e8:	df000017 	ldw	fp,0(sp)
1021a7ec:	dec00204 	addi	sp,sp,8
1021a7f0:	f800283a 	ret

1021a7f4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
1021a7f4:	defff804 	addi	sp,sp,-32
1021a7f8:	dfc00715 	stw	ra,28(sp)
1021a7fc:	df000615 	stw	fp,24(sp)
1021a800:	df000604 	addi	fp,sp,24
1021a804:	e13ffc15 	stw	r4,-16(fp)
1021a808:	e17ffd15 	stw	r5,-12(fp)
1021a80c:	e1bffe15 	stw	r6,-8(fp)
1021a810:	e1ffff15 	stw	r7,-4(fp)
1021a814:	e0bfff17 	ldw	r2,-4(fp)
1021a818:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
1021a81c:	008408b4 	movhi	r2,4130
1021a820:	10846004 	addi	r2,r2,4480
1021a824:	10800017 	ldw	r2,0(r2)
1021a828:	1000041e 	bne	r2,zero,1021a83c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
1021a82c:	008408b4 	movhi	r2,4130
1021a830:	10846004 	addi	r2,r2,4480
1021a834:	e0fffb17 	ldw	r3,-20(fp)
1021a838:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
1021a83c:	e0bffc17 	ldw	r2,-16(fp)
1021a840:	10800104 	addi	r2,r2,4
1021a844:	00c001c4 	movi	r3,7
1021a848:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
1021a84c:	d8000015 	stw	zero,0(sp)
1021a850:	e13ffd17 	ldw	r4,-12(fp)
1021a854:	e17ffe17 	ldw	r5,-8(fp)
1021a858:	018408b4 	movhi	r6,4130
1021a85c:	31a9e004 	addi	r6,r6,-22656
1021a860:	e1fffc17 	ldw	r7,-16(fp)
1021a864:	021b55c0 	call	1021b55c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
1021a868:	e037883a 	mov	sp,fp
1021a86c:	dfc00117 	ldw	ra,4(sp)
1021a870:	df000017 	ldw	fp,0(sp)
1021a874:	dec00204 	addi	sp,sp,8
1021a878:	f800283a 	ret

1021a87c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1021a87c:	defffa04 	addi	sp,sp,-24
1021a880:	dfc00515 	stw	ra,20(sp)
1021a884:	df000415 	stw	fp,16(sp)
1021a888:	df000404 	addi	fp,sp,16
1021a88c:	e13ffd15 	stw	r4,-12(fp)
1021a890:	e17ffe15 	stw	r5,-8(fp)
1021a894:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
1021a898:	e0bffd17 	ldw	r2,-12(fp)
1021a89c:	10800017 	ldw	r2,0(r2)
1021a8a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
1021a8a4:	e0bffc17 	ldw	r2,-16(fp)
1021a8a8:	10c00a04 	addi	r3,r2,40
1021a8ac:	e0bffd17 	ldw	r2,-12(fp)
1021a8b0:	10800217 	ldw	r2,8(r2)
1021a8b4:	1809883a 	mov	r4,r3
1021a8b8:	e17ffe17 	ldw	r5,-8(fp)
1021a8bc:	e1bfff17 	ldw	r6,-4(fp)
1021a8c0:	100f883a 	mov	r7,r2
1021a8c4:	021ad940 	call	1021ad94 <altera_avalon_uart_read>
      fd->fd_flags);
}
1021a8c8:	e037883a 	mov	sp,fp
1021a8cc:	dfc00117 	ldw	ra,4(sp)
1021a8d0:	df000017 	ldw	fp,0(sp)
1021a8d4:	dec00204 	addi	sp,sp,8
1021a8d8:	f800283a 	ret

1021a8dc <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1021a8dc:	defffa04 	addi	sp,sp,-24
1021a8e0:	dfc00515 	stw	ra,20(sp)
1021a8e4:	df000415 	stw	fp,16(sp)
1021a8e8:	df000404 	addi	fp,sp,16
1021a8ec:	e13ffd15 	stw	r4,-12(fp)
1021a8f0:	e17ffe15 	stw	r5,-8(fp)
1021a8f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
1021a8f8:	e0bffd17 	ldw	r2,-12(fp)
1021a8fc:	10800017 	ldw	r2,0(r2)
1021a900:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
1021a904:	e0bffc17 	ldw	r2,-16(fp)
1021a908:	10c00a04 	addi	r3,r2,40
1021a90c:	e0bffd17 	ldw	r2,-12(fp)
1021a910:	10800217 	ldw	r2,8(r2)
1021a914:	1809883a 	mov	r4,r3
1021a918:	e17ffe17 	ldw	r5,-8(fp)
1021a91c:	e1bfff17 	ldw	r6,-4(fp)
1021a920:	100f883a 	mov	r7,r2
1021a924:	021afc00 	call	1021afc0 <altera_avalon_uart_write>
      fd->fd_flags);
}
1021a928:	e037883a 	mov	sp,fp
1021a92c:	dfc00117 	ldw	ra,4(sp)
1021a930:	df000017 	ldw	fp,0(sp)
1021a934:	dec00204 	addi	sp,sp,8
1021a938:	f800283a 	ret

1021a93c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
1021a93c:	defffc04 	addi	sp,sp,-16
1021a940:	dfc00315 	stw	ra,12(sp)
1021a944:	df000215 	stw	fp,8(sp)
1021a948:	df000204 	addi	fp,sp,8
1021a94c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
1021a950:	e0bfff17 	ldw	r2,-4(fp)
1021a954:	10800017 	ldw	r2,0(r2)
1021a958:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
1021a95c:	e0bffe17 	ldw	r2,-8(fp)
1021a960:	10c00a04 	addi	r3,r2,40
1021a964:	e0bfff17 	ldw	r2,-4(fp)
1021a968:	10800217 	ldw	r2,8(r2)
1021a96c:	1809883a 	mov	r4,r3
1021a970:	100b883a 	mov	r5,r2
1021a974:	021acf00 	call	1021acf0 <altera_avalon_uart_close>
}
1021a978:	e037883a 	mov	sp,fp
1021a97c:	dfc00117 	ldw	ra,4(sp)
1021a980:	df000017 	ldw	fp,0(sp)
1021a984:	dec00204 	addi	sp,sp,8
1021a988:	f800283a 	ret

1021a98c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
1021a98c:	defff804 	addi	sp,sp,-32
1021a990:	dfc00715 	stw	ra,28(sp)
1021a994:	df000615 	stw	fp,24(sp)
1021a998:	df000604 	addi	fp,sp,24
1021a99c:	e13ffd15 	stw	r4,-12(fp)
1021a9a0:	e17ffe15 	stw	r5,-8(fp)
1021a9a4:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
1021a9a8:	e0bffd17 	ldw	r2,-12(fp)
1021a9ac:	10800017 	ldw	r2,0(r2)
1021a9b0:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
1021a9b4:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
1021a9b8:	1000041e 	bne	r2,zero,1021a9cc <altera_avalon_uart_init+0x40>
1021a9bc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
1021a9c0:	1000021e 	bne	r2,zero,1021a9cc <altera_avalon_uart_init+0x40>
1021a9c4:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
1021a9c8:	10000226 	beq	r2,zero,1021a9d4 <altera_avalon_uart_init+0x48>
1021a9cc:	00800044 	movi	r2,1
1021a9d0:	00000106 	br	1021a9d8 <altera_avalon_uart_init+0x4c>
1021a9d4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
1021a9d8:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
1021a9dc:	e0bffc17 	ldw	r2,-16(fp)
1021a9e0:	10000f1e 	bne	r2,zero,1021aa20 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
1021a9e4:	e0bffd17 	ldw	r2,-12(fp)
1021a9e8:	00c32004 	movi	r3,3200
1021a9ec:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
1021a9f0:	e0bffb17 	ldw	r2,-20(fp)
1021a9f4:	10800304 	addi	r2,r2,12
1021a9f8:	e0fffd17 	ldw	r3,-12(fp)
1021a9fc:	18c00117 	ldw	r3,4(r3)
1021aa00:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
1021aa04:	d8000015 	stw	zero,0(sp)
1021aa08:	e13ffe17 	ldw	r4,-8(fp)
1021aa0c:	e17fff17 	ldw	r5,-4(fp)
1021aa10:	018408b4 	movhi	r6,4130
1021aa14:	31aa8d04 	addi	r6,r6,-21964
1021aa18:	e1fffd17 	ldw	r7,-12(fp)
1021aa1c:	021b55c0 	call	1021b55c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
1021aa20:	e037883a 	mov	sp,fp
1021aa24:	dfc00117 	ldw	ra,4(sp)
1021aa28:	df000017 	ldw	fp,0(sp)
1021aa2c:	dec00204 	addi	sp,sp,8
1021aa30:	f800283a 	ret

1021aa34 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
1021aa34:	defffa04 	addi	sp,sp,-24
1021aa38:	dfc00515 	stw	ra,20(sp)
1021aa3c:	df000415 	stw	fp,16(sp)
1021aa40:	df000404 	addi	fp,sp,16
1021aa44:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
1021aa48:	e0bfff17 	ldw	r2,-4(fp)
1021aa4c:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
1021aa50:	e0bffc17 	ldw	r2,-16(fp)
1021aa54:	10800017 	ldw	r2,0(r2)
1021aa58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
1021aa5c:	e0bffd17 	ldw	r2,-12(fp)
1021aa60:	10800204 	addi	r2,r2,8
1021aa64:	10800037 	ldwio	r2,0(r2)
1021aa68:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
1021aa6c:	e0bffd17 	ldw	r2,-12(fp)
1021aa70:	10800204 	addi	r2,r2,8
1021aa74:	0007883a 	mov	r3,zero
1021aa78:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
1021aa7c:	e0bffd17 	ldw	r2,-12(fp)
1021aa80:	10800204 	addi	r2,r2,8
1021aa84:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
1021aa88:	e0bffe17 	ldw	r2,-8(fp)
1021aa8c:	1080200c 	andi	r2,r2,128
1021aa90:	10000326 	beq	r2,zero,1021aaa0 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
1021aa94:	e13ffc17 	ldw	r4,-16(fp)
1021aa98:	e17ffe17 	ldw	r5,-8(fp)
1021aa9c:	021aacc0 	call	1021aacc <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
1021aaa0:	e0bffe17 	ldw	r2,-8(fp)
1021aaa4:	1081100c 	andi	r2,r2,1088
1021aaa8:	10000326 	beq	r2,zero,1021aab8 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
1021aaac:	e13ffc17 	ldw	r4,-16(fp)
1021aab0:	e17ffe17 	ldw	r5,-8(fp)
1021aab4:	021abac0 	call	1021abac <altera_avalon_uart_txirq>
  }
  

}
1021aab8:	e037883a 	mov	sp,fp
1021aabc:	dfc00117 	ldw	ra,4(sp)
1021aac0:	df000017 	ldw	fp,0(sp)
1021aac4:	dec00204 	addi	sp,sp,8
1021aac8:	f800283a 	ret

1021aacc <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
1021aacc:	defffc04 	addi	sp,sp,-16
1021aad0:	df000315 	stw	fp,12(sp)
1021aad4:	df000304 	addi	fp,sp,12
1021aad8:	e13ffe15 	stw	r4,-8(fp)
1021aadc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
1021aae0:	e0bfff17 	ldw	r2,-4(fp)
1021aae4:	108000cc 	andi	r2,r2,3
1021aae8:	10000126 	beq	r2,zero,1021aaf0 <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
1021aaec:	00002b06 	br	1021ab9c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
1021aaf0:	e0bffe17 	ldw	r2,-8(fp)
1021aaf4:	10800317 	ldw	r2,12(r2)
1021aaf8:	e0bffe17 	ldw	r2,-8(fp)
1021aafc:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
1021ab00:	e0bffe17 	ldw	r2,-8(fp)
1021ab04:	10800317 	ldw	r2,12(r2)
1021ab08:	10800044 	addi	r2,r2,1
1021ab0c:	10800fcc 	andi	r2,r2,63
1021ab10:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
1021ab14:	e0bffe17 	ldw	r2,-8(fp)
1021ab18:	10800317 	ldw	r2,12(r2)
1021ab1c:	e0fffe17 	ldw	r3,-8(fp)
1021ab20:	18c00017 	ldw	r3,0(r3)
1021ab24:	18c00037 	ldwio	r3,0(r3)
1021ab28:	1809883a 	mov	r4,r3
1021ab2c:	e0fffe17 	ldw	r3,-8(fp)
1021ab30:	1885883a 	add	r2,r3,r2
1021ab34:	10800704 	addi	r2,r2,28
1021ab38:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
1021ab3c:	e0bffe17 	ldw	r2,-8(fp)
1021ab40:	e0fffd17 	ldw	r3,-12(fp)
1021ab44:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
1021ab48:	e0bffe17 	ldw	r2,-8(fp)
1021ab4c:	10800317 	ldw	r2,12(r2)
1021ab50:	10800044 	addi	r2,r2,1
1021ab54:	10800fcc 	andi	r2,r2,63
1021ab58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
1021ab5c:	e0bffe17 	ldw	r2,-8(fp)
1021ab60:	10c00217 	ldw	r3,8(r2)
1021ab64:	e0bffd17 	ldw	r2,-12(fp)
1021ab68:	18800c1e 	bne	r3,r2,1021ab9c <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
1021ab6c:	e0bffe17 	ldw	r2,-8(fp)
1021ab70:	10c00117 	ldw	r3,4(r2)
1021ab74:	00bfdfc4 	movi	r2,-129
1021ab78:	1886703a 	and	r3,r3,r2
1021ab7c:	e0bffe17 	ldw	r2,-8(fp)
1021ab80:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
1021ab84:	e0bffe17 	ldw	r2,-8(fp)
1021ab88:	10800017 	ldw	r2,0(r2)
1021ab8c:	10800304 	addi	r2,r2,12
1021ab90:	e0fffe17 	ldw	r3,-8(fp)
1021ab94:	18c00117 	ldw	r3,4(r3)
1021ab98:	10c00035 	stwio	r3,0(r2)
  }   
}
1021ab9c:	e037883a 	mov	sp,fp
1021aba0:	df000017 	ldw	fp,0(sp)
1021aba4:	dec00104 	addi	sp,sp,4
1021aba8:	f800283a 	ret

1021abac <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
1021abac:	defffb04 	addi	sp,sp,-20
1021abb0:	df000415 	stw	fp,16(sp)
1021abb4:	df000404 	addi	fp,sp,16
1021abb8:	e13ffc15 	stw	r4,-16(fp)
1021abbc:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
1021abc0:	e0bffc17 	ldw	r2,-16(fp)
1021abc4:	10c00417 	ldw	r3,16(r2)
1021abc8:	e0bffc17 	ldw	r2,-16(fp)
1021abcc:	10800517 	ldw	r2,20(r2)
1021abd0:	18803226 	beq	r3,r2,1021ac9c <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
1021abd4:	e0bffc17 	ldw	r2,-16(fp)
1021abd8:	10800617 	ldw	r2,24(r2)
1021abdc:	1080008c 	andi	r2,r2,2
1021abe0:	10000326 	beq	r2,zero,1021abf0 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
1021abe4:	e0bffd17 	ldw	r2,-12(fp)
1021abe8:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
1021abec:	10001d26 	beq	r2,zero,1021ac64 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
1021abf0:	e0bffc17 	ldw	r2,-16(fp)
1021abf4:	10800417 	ldw	r2,16(r2)
1021abf8:	e0bffc17 	ldw	r2,-16(fp)
1021abfc:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
1021ac00:	e0bffc17 	ldw	r2,-16(fp)
1021ac04:	10800017 	ldw	r2,0(r2)
1021ac08:	10800104 	addi	r2,r2,4
1021ac0c:	e0fffc17 	ldw	r3,-16(fp)
1021ac10:	18c00417 	ldw	r3,16(r3)
1021ac14:	e13ffc17 	ldw	r4,-16(fp)
1021ac18:	20c7883a 	add	r3,r4,r3
1021ac1c:	18c01704 	addi	r3,r3,92
1021ac20:	18c00003 	ldbu	r3,0(r3)
1021ac24:	18c03fcc 	andi	r3,r3,255
1021ac28:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
1021ac2c:	e0bffc17 	ldw	r2,-16(fp)
1021ac30:	10800417 	ldw	r2,16(r2)
1021ac34:	10800044 	addi	r2,r2,1
1021ac38:	e0fffc17 	ldw	r3,-16(fp)
1021ac3c:	18800415 	stw	r2,16(r3)
1021ac40:	10c00fcc 	andi	r3,r2,63
1021ac44:	e0bffc17 	ldw	r2,-16(fp)
1021ac48:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
1021ac4c:	e0bffc17 	ldw	r2,-16(fp)
1021ac50:	10800117 	ldw	r2,4(r2)
1021ac54:	10c01014 	ori	r3,r2,64
1021ac58:	e0bffc17 	ldw	r2,-16(fp)
1021ac5c:	10c00115 	stw	r3,4(r2)
1021ac60:	00000e06 	br	1021ac9c <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
1021ac64:	e0bffc17 	ldw	r2,-16(fp)
1021ac68:	10800017 	ldw	r2,0(r2)
1021ac6c:	10800204 	addi	r2,r2,8
1021ac70:	10800037 	ldwio	r2,0(r2)
1021ac74:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
1021ac78:	e0bffd17 	ldw	r2,-12(fp)
1021ac7c:	1082000c 	andi	r2,r2,2048
1021ac80:	1000061e 	bne	r2,zero,1021ac9c <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
1021ac84:	e0bffc17 	ldw	r2,-16(fp)
1021ac88:	10c00117 	ldw	r3,4(r2)
1021ac8c:	00bfefc4 	movi	r2,-65
1021ac90:	1886703a 	and	r3,r3,r2
1021ac94:	e0bffc17 	ldw	r2,-16(fp)
1021ac98:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
1021ac9c:	e0bffc17 	ldw	r2,-16(fp)
1021aca0:	10c00417 	ldw	r3,16(r2)
1021aca4:	e0bffc17 	ldw	r2,-16(fp)
1021aca8:	10800517 	ldw	r2,20(r2)
1021acac:	1880061e 	bne	r3,r2,1021acc8 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
1021acb0:	e0bffc17 	ldw	r2,-16(fp)
1021acb4:	10c00117 	ldw	r3,4(r2)
1021acb8:	00beefc4 	movi	r2,-1089
1021acbc:	1886703a 	and	r3,r3,r2
1021acc0:	e0bffc17 	ldw	r2,-16(fp)
1021acc4:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
1021acc8:	e0bffc17 	ldw	r2,-16(fp)
1021accc:	10800017 	ldw	r2,0(r2)
1021acd0:	10800304 	addi	r2,r2,12
1021acd4:	e0fffc17 	ldw	r3,-16(fp)
1021acd8:	18c00117 	ldw	r3,4(r3)
1021acdc:	10c00035 	stwio	r3,0(r2)
}
1021ace0:	e037883a 	mov	sp,fp
1021ace4:	df000017 	ldw	fp,0(sp)
1021ace8:	dec00104 	addi	sp,sp,4
1021acec:	f800283a 	ret

1021acf0 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
1021acf0:	defffd04 	addi	sp,sp,-12
1021acf4:	df000215 	stw	fp,8(sp)
1021acf8:	df000204 	addi	fp,sp,8
1021acfc:	e13ffe15 	stw	r4,-8(fp)
1021ad00:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
1021ad04:	00000506 	br	1021ad1c <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1021ad08:	e0bfff17 	ldw	r2,-4(fp)
1021ad0c:	1090000c 	andi	r2,r2,16384
1021ad10:	10000226 	beq	r2,zero,1021ad1c <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
1021ad14:	00bffd44 	movi	r2,-11
1021ad18:	00000606 	br	1021ad34 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
1021ad1c:	e0bffe17 	ldw	r2,-8(fp)
1021ad20:	10c00417 	ldw	r3,16(r2)
1021ad24:	e0bffe17 	ldw	r2,-8(fp)
1021ad28:	10800517 	ldw	r2,20(r2)
1021ad2c:	18bff61e 	bne	r3,r2,1021ad08 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1021ad30:	0005883a 	mov	r2,zero
}
1021ad34:	e037883a 	mov	sp,fp
1021ad38:	df000017 	ldw	fp,0(sp)
1021ad3c:	dec00104 	addi	sp,sp,4
1021ad40:	f800283a 	ret

1021ad44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1021ad44:	defffe04 	addi	sp,sp,-8
1021ad48:	dfc00115 	stw	ra,4(sp)
1021ad4c:	df000015 	stw	fp,0(sp)
1021ad50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1021ad54:	008408b4 	movhi	r2,4130
1021ad58:	10bd1204 	addi	r2,r2,-3000
1021ad5c:	10800017 	ldw	r2,0(r2)
1021ad60:	10000526 	beq	r2,zero,1021ad78 <alt_get_errno+0x34>
1021ad64:	008408b4 	movhi	r2,4130
1021ad68:	10bd1204 	addi	r2,r2,-3000
1021ad6c:	10800017 	ldw	r2,0(r2)
1021ad70:	103ee83a 	callr	r2
1021ad74:	00000206 	br	1021ad80 <alt_get_errno+0x3c>
1021ad78:	008408b4 	movhi	r2,4130
1021ad7c:	10845804 	addi	r2,r2,4448
}
1021ad80:	e037883a 	mov	sp,fp
1021ad84:	dfc00117 	ldw	ra,4(sp)
1021ad88:	df000017 	ldw	fp,0(sp)
1021ad8c:	dec00204 	addi	sp,sp,8
1021ad90:	f800283a 	ret

1021ad94 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
1021ad94:	defff204 	addi	sp,sp,-56
1021ad98:	dfc00d15 	stw	ra,52(sp)
1021ad9c:	df000c15 	stw	fp,48(sp)
1021ada0:	df000c04 	addi	fp,sp,48
1021ada4:	e13ffc15 	stw	r4,-16(fp)
1021ada8:	e17ffd15 	stw	r5,-12(fp)
1021adac:	e1bffe15 	stw	r6,-8(fp)
1021adb0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
1021adb4:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
1021adb8:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
1021adbc:	e0bfff17 	ldw	r2,-4(fp)
1021adc0:	1090000c 	andi	r2,r2,16384
1021adc4:	1005003a 	cmpeq	r2,r2,zero
1021adc8:	10803fcc 	andi	r2,r2,255
1021adcc:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
1021add0:	00001306 	br	1021ae20 <altera_avalon_uart_read+0x8c>
    {
      count++;
1021add4:	e0bff517 	ldw	r2,-44(fp)
1021add8:	10800044 	addi	r2,r2,1
1021addc:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
1021ade0:	e0bffd17 	ldw	r2,-12(fp)
1021ade4:	10c00044 	addi	r3,r2,1
1021ade8:	e0fffd15 	stw	r3,-12(fp)
1021adec:	e0fffc17 	ldw	r3,-16(fp)
1021adf0:	18c00217 	ldw	r3,8(r3)
1021adf4:	e13ffc17 	ldw	r4,-16(fp)
1021adf8:	20c7883a 	add	r3,r4,r3
1021adfc:	18c00704 	addi	r3,r3,28
1021ae00:	18c00003 	ldbu	r3,0(r3)
1021ae04:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
1021ae08:	e0bffc17 	ldw	r2,-16(fp)
1021ae0c:	10800217 	ldw	r2,8(r2)
1021ae10:	10800044 	addi	r2,r2,1
1021ae14:	10c00fcc 	andi	r3,r2,63
1021ae18:	e0bffc17 	ldw	r2,-16(fp)
1021ae1c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
1021ae20:	e0fff517 	ldw	r3,-44(fp)
1021ae24:	e0bffe17 	ldw	r2,-8(fp)
1021ae28:	1880050e 	bge	r3,r2,1021ae40 <altera_avalon_uart_read+0xac>
1021ae2c:	e0bffc17 	ldw	r2,-16(fp)
1021ae30:	10c00217 	ldw	r3,8(r2)
1021ae34:	e0bffc17 	ldw	r2,-16(fp)
1021ae38:	10800317 	ldw	r2,12(r2)
1021ae3c:	18bfe51e 	bne	r3,r2,1021add4 <altera_avalon_uart_read+0x40>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
1021ae40:	e0bff517 	ldw	r2,-44(fp)
1021ae44:	1000251e 	bne	r2,zero,1021aedc <altera_avalon_uart_read+0x148>
1021ae48:	e0bffc17 	ldw	r2,-16(fp)
1021ae4c:	10c00217 	ldw	r3,8(r2)
1021ae50:	e0bffc17 	ldw	r2,-16(fp)
1021ae54:	10800317 	ldw	r2,12(r2)
1021ae58:	1880201e 	bne	r3,r2,1021aedc <altera_avalon_uart_read+0x148>
    {
      if (!block)
1021ae5c:	e0bff617 	ldw	r2,-40(fp)
1021ae60:	1000071e 	bne	r2,zero,1021ae80 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
1021ae64:	021ad440 	call	1021ad44 <alt_get_errno>
1021ae68:	1007883a 	mov	r3,r2
1021ae6c:	008002c4 	movi	r2,11
1021ae70:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
1021ae74:	00800044 	movi	r2,1
1021ae78:	e0bff405 	stb	r2,-48(fp)
        break;
1021ae7c:	00001b06 	br	1021aeec <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1021ae80:	0005303a 	rdctl	r2,status
1021ae84:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1021ae88:	e0fff817 	ldw	r3,-32(fp)
1021ae8c:	00bfff84 	movi	r2,-2
1021ae90:	1884703a 	and	r2,r3,r2
1021ae94:	1001703a 	wrctl	status,r2
  
  return context;
1021ae98:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
1021ae9c:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
1021aea0:	e0bffc17 	ldw	r2,-16(fp)
1021aea4:	10800117 	ldw	r2,4(r2)
1021aea8:	10c02014 	ori	r3,r2,128
1021aeac:	e0bffc17 	ldw	r2,-16(fp)
1021aeb0:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
1021aeb4:	e0bffc17 	ldw	r2,-16(fp)
1021aeb8:	10800017 	ldw	r2,0(r2)
1021aebc:	10800304 	addi	r2,r2,12
1021aec0:	e0fffc17 	ldw	r3,-16(fp)
1021aec4:	18c00117 	ldw	r3,4(r3)
1021aec8:	10c00035 	stwio	r3,0(r2)
1021aecc:	e0bff717 	ldw	r2,-36(fp)
1021aed0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1021aed4:	e0bff917 	ldw	r2,-28(fp)
1021aed8:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
1021aedc:	e0bff517 	ldw	r2,-44(fp)
1021aee0:	1000021e 	bne	r2,zero,1021aeec <altera_avalon_uart_read+0x158>
1021aee4:	e0bffe17 	ldw	r2,-8(fp)
1021aee8:	103fb91e 	bne	r2,zero,1021add0 <altera_avalon_uart_read+0x3c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1021aeec:	0005303a 	rdctl	r2,status
1021aef0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1021aef4:	e0fffa17 	ldw	r3,-24(fp)
1021aef8:	00bfff84 	movi	r2,-2
1021aefc:	1884703a 	and	r2,r3,r2
1021af00:	1001703a 	wrctl	status,r2
  
  return context;
1021af04:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
1021af08:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
1021af0c:	e0bffc17 	ldw	r2,-16(fp)
1021af10:	10800117 	ldw	r2,4(r2)
1021af14:	10c02014 	ori	r3,r2,128
1021af18:	e0bffc17 	ldw	r2,-16(fp)
1021af1c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
1021af20:	e0bffc17 	ldw	r2,-16(fp)
1021af24:	10800017 	ldw	r2,0(r2)
1021af28:	10800304 	addi	r2,r2,12
1021af2c:	e0fffc17 	ldw	r3,-16(fp)
1021af30:	18c00117 	ldw	r3,4(r3)
1021af34:	10c00035 	stwio	r3,0(r2)
1021af38:	e0bff717 	ldw	r2,-36(fp)
1021af3c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1021af40:	e0bffb17 	ldw	r2,-20(fp)
1021af44:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
1021af48:	e0bff403 	ldbu	r2,-48(fp)
1021af4c:	10000226 	beq	r2,zero,1021af58 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
1021af50:	00bffd44 	movi	r2,-11
1021af54:	00000106 	br	1021af5c <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
1021af58:	e0bff517 	ldw	r2,-44(fp)
  }
}
1021af5c:	e037883a 	mov	sp,fp
1021af60:	dfc00117 	ldw	ra,4(sp)
1021af64:	df000017 	ldw	fp,0(sp)
1021af68:	dec00204 	addi	sp,sp,8
1021af6c:	f800283a 	ret

1021af70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1021af70:	defffe04 	addi	sp,sp,-8
1021af74:	dfc00115 	stw	ra,4(sp)
1021af78:	df000015 	stw	fp,0(sp)
1021af7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1021af80:	008408b4 	movhi	r2,4130
1021af84:	10bd1204 	addi	r2,r2,-3000
1021af88:	10800017 	ldw	r2,0(r2)
1021af8c:	10000526 	beq	r2,zero,1021afa4 <alt_get_errno+0x34>
1021af90:	008408b4 	movhi	r2,4130
1021af94:	10bd1204 	addi	r2,r2,-3000
1021af98:	10800017 	ldw	r2,0(r2)
1021af9c:	103ee83a 	callr	r2
1021afa0:	00000206 	br	1021afac <alt_get_errno+0x3c>
1021afa4:	008408b4 	movhi	r2,4130
1021afa8:	10845804 	addi	r2,r2,4448
}
1021afac:	e037883a 	mov	sp,fp
1021afb0:	dfc00117 	ldw	ra,4(sp)
1021afb4:	df000017 	ldw	fp,0(sp)
1021afb8:	dec00204 	addi	sp,sp,8
1021afbc:	f800283a 	ret

1021afc0 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
1021afc0:	defff204 	addi	sp,sp,-56
1021afc4:	dfc00d15 	stw	ra,52(sp)
1021afc8:	df000c15 	stw	fp,48(sp)
1021afcc:	df000c04 	addi	fp,sp,48
1021afd0:	e13ffc15 	stw	r4,-16(fp)
1021afd4:	e17ffd15 	stw	r5,-12(fp)
1021afd8:	e1bffe15 	stw	r6,-8(fp)
1021afdc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
1021afe0:	e0bffe17 	ldw	r2,-8(fp)
1021afe4:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
1021afe8:	e0bfff17 	ldw	r2,-4(fp)
1021afec:	1090000c 	andi	r2,r2,16384
1021aff0:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
1021aff4:	00003c06 	br	1021b0e8 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
1021aff8:	e0bffc17 	ldw	r2,-16(fp)
1021affc:	10800517 	ldw	r2,20(r2)
1021b000:	10800044 	addi	r2,r2,1
1021b004:	10800fcc 	andi	r2,r2,63
1021b008:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
1021b00c:	e0bffc17 	ldw	r2,-16(fp)
1021b010:	10c00417 	ldw	r3,16(r2)
1021b014:	e0bff617 	ldw	r2,-40(fp)
1021b018:	1880221e 	bne	r3,r2,1021b0a4 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
1021b01c:	e0bff517 	ldw	r2,-44(fp)
1021b020:	10000526 	beq	r2,zero,1021b038 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
1021b024:	021af700 	call	1021af70 <alt_get_errno>
1021b028:	1007883a 	mov	r3,r2
1021b02c:	008002c4 	movi	r2,11
1021b030:	18800015 	stw	r2,0(r3)
        break;
1021b034:	00002e06 	br	1021b0f0 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1021b038:	0005303a 	rdctl	r2,status
1021b03c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1021b040:	e0fff817 	ldw	r3,-32(fp)
1021b044:	00bfff84 	movi	r2,-2
1021b048:	1884703a 	and	r2,r3,r2
1021b04c:	1001703a 	wrctl	status,r2
  
  return context;
1021b050:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
1021b054:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
1021b058:	e0bffc17 	ldw	r2,-16(fp)
1021b05c:	10800117 	ldw	r2,4(r2)
1021b060:	10c11014 	ori	r3,r2,1088
1021b064:	e0bffc17 	ldw	r2,-16(fp)
1021b068:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
1021b06c:	e0bffc17 	ldw	r2,-16(fp)
1021b070:	10800017 	ldw	r2,0(r2)
1021b074:	10800304 	addi	r2,r2,12
1021b078:	e0fffc17 	ldw	r3,-16(fp)
1021b07c:	18c00117 	ldw	r3,4(r3)
1021b080:	10c00035 	stwio	r3,0(r2)
1021b084:	e0bff717 	ldw	r2,-36(fp)
1021b088:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1021b08c:	e0bff917 	ldw	r2,-28(fp)
1021b090:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
1021b094:	e0bffc17 	ldw	r2,-16(fp)
1021b098:	10c00417 	ldw	r3,16(r2)
1021b09c:	e0bff617 	ldw	r2,-40(fp)
1021b0a0:	18bffc26 	beq	r3,r2,1021b094 <altera_avalon_uart_write+0xd4>
      }
    }

    count--;
1021b0a4:	e0bff417 	ldw	r2,-48(fp)
1021b0a8:	10bfffc4 	addi	r2,r2,-1
1021b0ac:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
1021b0b0:	e0bffc17 	ldw	r2,-16(fp)
1021b0b4:	10c00517 	ldw	r3,20(r2)
1021b0b8:	e0bffd17 	ldw	r2,-12(fp)
1021b0bc:	11000044 	addi	r4,r2,1
1021b0c0:	e13ffd15 	stw	r4,-12(fp)
1021b0c4:	10800003 	ldbu	r2,0(r2)
1021b0c8:	1009883a 	mov	r4,r2
1021b0cc:	e0bffc17 	ldw	r2,-16(fp)
1021b0d0:	10c5883a 	add	r2,r2,r3
1021b0d4:	10801704 	addi	r2,r2,92
1021b0d8:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
1021b0dc:	e0bffc17 	ldw	r2,-16(fp)
1021b0e0:	e0fff617 	ldw	r3,-40(fp)
1021b0e4:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
1021b0e8:	e0bff417 	ldw	r2,-48(fp)
1021b0ec:	103fc21e 	bne	r2,zero,1021aff8 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1021b0f0:	0005303a 	rdctl	r2,status
1021b0f4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1021b0f8:	e0fffa17 	ldw	r3,-24(fp)
1021b0fc:	00bfff84 	movi	r2,-2
1021b100:	1884703a 	and	r2,r3,r2
1021b104:	1001703a 	wrctl	status,r2
  
  return context;
1021b108:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
1021b10c:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
1021b110:	e0bffc17 	ldw	r2,-16(fp)
1021b114:	10800117 	ldw	r2,4(r2)
1021b118:	10c11014 	ori	r3,r2,1088
1021b11c:	e0bffc17 	ldw	r2,-16(fp)
1021b120:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
1021b124:	e0bffc17 	ldw	r2,-16(fp)
1021b128:	10800017 	ldw	r2,0(r2)
1021b12c:	10800304 	addi	r2,r2,12
1021b130:	e0fffc17 	ldw	r3,-16(fp)
1021b134:	18c00117 	ldw	r3,4(r3)
1021b138:	10c00035 	stwio	r3,0(r2)
1021b13c:	e0bff717 	ldw	r2,-36(fp)
1021b140:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1021b144:	e0bffb17 	ldw	r2,-20(fp)
1021b148:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
1021b14c:	e0fffe17 	ldw	r3,-8(fp)
1021b150:	e0bff417 	ldw	r2,-48(fp)
1021b154:	1885c83a 	sub	r2,r3,r2
}
1021b158:	e037883a 	mov	sp,fp
1021b15c:	dfc00117 	ldw	ra,4(sp)
1021b160:	df000017 	ldw	fp,0(sp)
1021b164:	dec00204 	addi	sp,sp,8
1021b168:	f800283a 	ret

1021b16c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1021b16c:	defff504 	addi	sp,sp,-44
1021b170:	df000a15 	stw	fp,40(sp)
1021b174:	df000a04 	addi	fp,sp,40
1021b178:	e13ffc15 	stw	r4,-16(fp)
1021b17c:	e17ffd15 	stw	r5,-12(fp)
1021b180:	e1bffe15 	stw	r6,-8(fp)
1021b184:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1021b188:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1021b18c:	008408b4 	movhi	r2,4130
1021b190:	10846004 	addi	r2,r2,4480
1021b194:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1021b198:	10003f26 	beq	r2,zero,1021b298 <alt_alarm_start+0x12c>
  {
    if (alarm)
1021b19c:	e0bffc17 	ldw	r2,-16(fp)
1021b1a0:	10003b26 	beq	r2,zero,1021b290 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
1021b1a4:	e0bffc17 	ldw	r2,-16(fp)
1021b1a8:	e0fffe17 	ldw	r3,-8(fp)
1021b1ac:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1021b1b0:	e0bffc17 	ldw	r2,-16(fp)
1021b1b4:	e0ffff17 	ldw	r3,-4(fp)
1021b1b8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1021b1bc:	0005303a 	rdctl	r2,status
1021b1c0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1021b1c4:	e0fff817 	ldw	r3,-32(fp)
1021b1c8:	00bfff84 	movi	r2,-2
1021b1cc:	1884703a 	and	r2,r3,r2
1021b1d0:	1001703a 	wrctl	status,r2
  
  return context;
1021b1d4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
1021b1d8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1021b1dc:	008408b4 	movhi	r2,4130
1021b1e0:	10846104 	addi	r2,r2,4484
1021b1e4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1021b1e8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1021b1ec:	e0fffd17 	ldw	r3,-12(fp)
1021b1f0:	e0bff617 	ldw	r2,-40(fp)
1021b1f4:	1885883a 	add	r2,r3,r2
1021b1f8:	10c00044 	addi	r3,r2,1
1021b1fc:	e0bffc17 	ldw	r2,-16(fp)
1021b200:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1021b204:	e0bffc17 	ldw	r2,-16(fp)
1021b208:	10c00217 	ldw	r3,8(r2)
1021b20c:	e0bff617 	ldw	r2,-40(fp)
1021b210:	1880042e 	bgeu	r3,r2,1021b224 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1021b214:	e0bffc17 	ldw	r2,-16(fp)
1021b218:	00c00044 	movi	r3,1
1021b21c:	10c00405 	stb	r3,16(r2)
1021b220:	00000206 	br	1021b22c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
1021b224:	e0bffc17 	ldw	r2,-16(fp)
1021b228:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1021b22c:	e0fffc17 	ldw	r3,-16(fp)
1021b230:	008408b4 	movhi	r2,4130
1021b234:	10bd1804 	addi	r2,r2,-2976
1021b238:	e0bff915 	stw	r2,-28(fp)
1021b23c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1021b240:	e0bffa17 	ldw	r2,-24(fp)
1021b244:	e0fff917 	ldw	r3,-28(fp)
1021b248:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1021b24c:	e0bff917 	ldw	r2,-28(fp)
1021b250:	10c00017 	ldw	r3,0(r2)
1021b254:	e0bffa17 	ldw	r2,-24(fp)
1021b258:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1021b25c:	e0bff917 	ldw	r2,-28(fp)
1021b260:	10800017 	ldw	r2,0(r2)
1021b264:	e0fffa17 	ldw	r3,-24(fp)
1021b268:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1021b26c:	e0bff917 	ldw	r2,-28(fp)
1021b270:	e0fffa17 	ldw	r3,-24(fp)
1021b274:	10c00015 	stw	r3,0(r2)
1021b278:	e0bff717 	ldw	r2,-36(fp)
1021b27c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1021b280:	e0bffb17 	ldw	r2,-20(fp)
1021b284:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1021b288:	0005883a 	mov	r2,zero
1021b28c:	00000306 	br	1021b29c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1021b290:	00bffa84 	movi	r2,-22
1021b294:	00000106 	br	1021b29c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
1021b298:	00bfde84 	movi	r2,-134
  }
}
1021b29c:	e037883a 	mov	sp,fp
1021b2a0:	df000017 	ldw	fp,0(sp)
1021b2a4:	dec00104 	addi	sp,sp,4
1021b2a8:	f800283a 	ret

1021b2ac <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1021b2ac:	defffe04 	addi	sp,sp,-8
1021b2b0:	df000115 	stw	fp,4(sp)
1021b2b4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
1021b2b8:	e03fff15 	stw	zero,-4(fp)
1021b2bc:	00000506 	br	1021b2d4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
1021b2c0:	e0bfff17 	ldw	r2,-4(fp)
1021b2c4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
1021b2c8:	e0bfff17 	ldw	r2,-4(fp)
1021b2cc:	10800804 	addi	r2,r2,32
1021b2d0:	e0bfff15 	stw	r2,-4(fp)
1021b2d4:	e0bfff17 	ldw	r2,-4(fp)
1021b2d8:	10820030 	cmpltui	r2,r2,2048
1021b2dc:	103ff81e 	bne	r2,zero,1021b2c0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1021b2e0:	e037883a 	mov	sp,fp
1021b2e4:	df000017 	ldw	fp,0(sp)
1021b2e8:	dec00104 	addi	sp,sp,4
1021b2ec:	f800283a 	ret

1021b2f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1021b2f0:	defffe04 	addi	sp,sp,-8
1021b2f4:	dfc00115 	stw	ra,4(sp)
1021b2f8:	df000015 	stw	fp,0(sp)
1021b2fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1021b300:	008408b4 	movhi	r2,4130
1021b304:	10bd1204 	addi	r2,r2,-3000
1021b308:	10800017 	ldw	r2,0(r2)
1021b30c:	10000526 	beq	r2,zero,1021b324 <alt_get_errno+0x34>
1021b310:	008408b4 	movhi	r2,4130
1021b314:	10bd1204 	addi	r2,r2,-3000
1021b318:	10800017 	ldw	r2,0(r2)
1021b31c:	103ee83a 	callr	r2
1021b320:	00000206 	br	1021b32c <alt_get_errno+0x3c>
1021b324:	008408b4 	movhi	r2,4130
1021b328:	10845804 	addi	r2,r2,4448
}
1021b32c:	e037883a 	mov	sp,fp
1021b330:	dfc00117 	ldw	ra,4(sp)
1021b334:	df000017 	ldw	fp,0(sp)
1021b338:	dec00204 	addi	sp,sp,8
1021b33c:	f800283a 	ret

1021b340 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1021b340:	defffa04 	addi	sp,sp,-24
1021b344:	dfc00515 	stw	ra,20(sp)
1021b348:	df000415 	stw	fp,16(sp)
1021b34c:	df000404 	addi	fp,sp,16
1021b350:	e13ffe15 	stw	r4,-8(fp)
1021b354:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1021b358:	e0bffe17 	ldw	r2,-8(fp)
1021b35c:	10000326 	beq	r2,zero,1021b36c <alt_dev_llist_insert+0x2c>
1021b360:	e0bffe17 	ldw	r2,-8(fp)
1021b364:	10800217 	ldw	r2,8(r2)
1021b368:	1000061e 	bne	r2,zero,1021b384 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1021b36c:	021b2f00 	call	1021b2f0 <alt_get_errno>
1021b370:	1007883a 	mov	r3,r2
1021b374:	00800584 	movi	r2,22
1021b378:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1021b37c:	00bffa84 	movi	r2,-22
1021b380:	00001306 	br	1021b3d0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1021b384:	e0bffe17 	ldw	r2,-8(fp)
1021b388:	e0ffff17 	ldw	r3,-4(fp)
1021b38c:	e0fffc15 	stw	r3,-16(fp)
1021b390:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1021b394:	e0bffd17 	ldw	r2,-12(fp)
1021b398:	e0fffc17 	ldw	r3,-16(fp)
1021b39c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1021b3a0:	e0bffc17 	ldw	r2,-16(fp)
1021b3a4:	10c00017 	ldw	r3,0(r2)
1021b3a8:	e0bffd17 	ldw	r2,-12(fp)
1021b3ac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1021b3b0:	e0bffc17 	ldw	r2,-16(fp)
1021b3b4:	10800017 	ldw	r2,0(r2)
1021b3b8:	e0fffd17 	ldw	r3,-12(fp)
1021b3bc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1021b3c0:	e0bffc17 	ldw	r2,-16(fp)
1021b3c4:	e0fffd17 	ldw	r3,-12(fp)
1021b3c8:	10c00015 	stw	r3,0(r2)

  return 0;  
1021b3cc:	0005883a 	mov	r2,zero
}
1021b3d0:	e037883a 	mov	sp,fp
1021b3d4:	dfc00117 	ldw	ra,4(sp)
1021b3d8:	df000017 	ldw	fp,0(sp)
1021b3dc:	dec00204 	addi	sp,sp,8
1021b3e0:	f800283a 	ret

1021b3e4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1021b3e4:	defffd04 	addi	sp,sp,-12
1021b3e8:	dfc00215 	stw	ra,8(sp)
1021b3ec:	df000115 	stw	fp,4(sp)
1021b3f0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1021b3f4:	008408b4 	movhi	r2,4130
1021b3f8:	10b14c04 	addi	r2,r2,-15056
1021b3fc:	e0bfff15 	stw	r2,-4(fp)
1021b400:	00000606 	br	1021b41c <_do_ctors+0x38>
        (*ctor) (); 
1021b404:	e0bfff17 	ldw	r2,-4(fp)
1021b408:	10800017 	ldw	r2,0(r2)
1021b40c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1021b410:	e0bfff17 	ldw	r2,-4(fp)
1021b414:	10bfff04 	addi	r2,r2,-4
1021b418:	e0bfff15 	stw	r2,-4(fp)
1021b41c:	e0ffff17 	ldw	r3,-4(fp)
1021b420:	008408b4 	movhi	r2,4130
1021b424:	10b14d04 	addi	r2,r2,-15052
1021b428:	18bff62e 	bgeu	r3,r2,1021b404 <_do_ctors+0x20>
        (*ctor) (); 
}
1021b42c:	e037883a 	mov	sp,fp
1021b430:	dfc00117 	ldw	ra,4(sp)
1021b434:	df000017 	ldw	fp,0(sp)
1021b438:	dec00204 	addi	sp,sp,8
1021b43c:	f800283a 	ret

1021b440 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1021b440:	defffd04 	addi	sp,sp,-12
1021b444:	dfc00215 	stw	ra,8(sp)
1021b448:	df000115 	stw	fp,4(sp)
1021b44c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1021b450:	008408b4 	movhi	r2,4130
1021b454:	10b14c04 	addi	r2,r2,-15056
1021b458:	e0bfff15 	stw	r2,-4(fp)
1021b45c:	00000606 	br	1021b478 <_do_dtors+0x38>
        (*dtor) (); 
1021b460:	e0bfff17 	ldw	r2,-4(fp)
1021b464:	10800017 	ldw	r2,0(r2)
1021b468:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1021b46c:	e0bfff17 	ldw	r2,-4(fp)
1021b470:	10bfff04 	addi	r2,r2,-4
1021b474:	e0bfff15 	stw	r2,-4(fp)
1021b478:	e0ffff17 	ldw	r3,-4(fp)
1021b47c:	008408b4 	movhi	r2,4130
1021b480:	10b14d04 	addi	r2,r2,-15052
1021b484:	18bff62e 	bgeu	r3,r2,1021b460 <_do_dtors+0x20>
        (*dtor) (); 
}
1021b488:	e037883a 	mov	sp,fp
1021b48c:	dfc00117 	ldw	ra,4(sp)
1021b490:	df000017 	ldw	fp,0(sp)
1021b494:	dec00204 	addi	sp,sp,8
1021b498:	f800283a 	ret

1021b49c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1021b49c:	defffa04 	addi	sp,sp,-24
1021b4a0:	dfc00515 	stw	ra,20(sp)
1021b4a4:	df000415 	stw	fp,16(sp)
1021b4a8:	df000404 	addi	fp,sp,16
1021b4ac:	e13ffe15 	stw	r4,-8(fp)
1021b4b0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1021b4b4:	e0bfff17 	ldw	r2,-4(fp)
1021b4b8:	10800017 	ldw	r2,0(r2)
1021b4bc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1021b4c0:	e13ffe17 	ldw	r4,-8(fp)
1021b4c4:	02033500 	call	10203350 <strlen>
1021b4c8:	10800044 	addi	r2,r2,1
1021b4cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1021b4d0:	00000d06 	br	1021b508 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1021b4d4:	e0bffc17 	ldw	r2,-16(fp)
1021b4d8:	10c00217 	ldw	r3,8(r2)
1021b4dc:	e0bffd17 	ldw	r2,-12(fp)
1021b4e0:	1809883a 	mov	r4,r3
1021b4e4:	e17ffe17 	ldw	r5,-8(fp)
1021b4e8:	100d883a 	mov	r6,r2
1021b4ec:	0202d4c0 	call	10202d4c <memcmp>
1021b4f0:	1000021e 	bne	r2,zero,1021b4fc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1021b4f4:	e0bffc17 	ldw	r2,-16(fp)
1021b4f8:	00000706 	br	1021b518 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1021b4fc:	e0bffc17 	ldw	r2,-16(fp)
1021b500:	10800017 	ldw	r2,0(r2)
1021b504:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1021b508:	e0fffc17 	ldw	r3,-16(fp)
1021b50c:	e0bfff17 	ldw	r2,-4(fp)
1021b510:	18bff01e 	bne	r3,r2,1021b4d4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1021b514:	0005883a 	mov	r2,zero
}
1021b518:	e037883a 	mov	sp,fp
1021b51c:	dfc00117 	ldw	ra,4(sp)
1021b520:	df000017 	ldw	fp,0(sp)
1021b524:	dec00204 	addi	sp,sp,8
1021b528:	f800283a 	ret

1021b52c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1021b52c:	defffe04 	addi	sp,sp,-8
1021b530:	dfc00115 	stw	ra,4(sp)
1021b534:	df000015 	stw	fp,0(sp)
1021b538:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
1021b53c:	0009883a 	mov	r4,zero
1021b540:	01440004 	movi	r5,4096
1021b544:	021c0e40 	call	1021c0e4 <alt_icache_flush>
#endif
}
1021b548:	e037883a 	mov	sp,fp
1021b54c:	dfc00117 	ldw	ra,4(sp)
1021b550:	df000017 	ldw	fp,0(sp)
1021b554:	dec00204 	addi	sp,sp,8
1021b558:	f800283a 	ret

1021b55c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1021b55c:	defff904 	addi	sp,sp,-28
1021b560:	dfc00615 	stw	ra,24(sp)
1021b564:	df000515 	stw	fp,20(sp)
1021b568:	df000504 	addi	fp,sp,20
1021b56c:	e13ffc15 	stw	r4,-16(fp)
1021b570:	e17ffd15 	stw	r5,-12(fp)
1021b574:	e1bffe15 	stw	r6,-8(fp)
1021b578:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1021b57c:	e0800217 	ldw	r2,8(fp)
1021b580:	d8800015 	stw	r2,0(sp)
1021b584:	e13ffc17 	ldw	r4,-16(fp)
1021b588:	e17ffd17 	ldw	r5,-12(fp)
1021b58c:	e1bffe17 	ldw	r6,-8(fp)
1021b590:	e1ffff17 	ldw	r7,-4(fp)
1021b594:	021b73c0 	call	1021b73c <alt_iic_isr_register>
}  
1021b598:	e037883a 	mov	sp,fp
1021b59c:	dfc00117 	ldw	ra,4(sp)
1021b5a0:	df000017 	ldw	fp,0(sp)
1021b5a4:	dec00204 	addi	sp,sp,8
1021b5a8:	f800283a 	ret

1021b5ac <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1021b5ac:	defff904 	addi	sp,sp,-28
1021b5b0:	df000615 	stw	fp,24(sp)
1021b5b4:	df000604 	addi	fp,sp,24
1021b5b8:	e13ffe15 	stw	r4,-8(fp)
1021b5bc:	e17fff15 	stw	r5,-4(fp)
1021b5c0:	e0bfff17 	ldw	r2,-4(fp)
1021b5c4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1021b5c8:	0005303a 	rdctl	r2,status
1021b5cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1021b5d0:	e0fffb17 	ldw	r3,-20(fp)
1021b5d4:	00bfff84 	movi	r2,-2
1021b5d8:	1884703a 	and	r2,r3,r2
1021b5dc:	1001703a 	wrctl	status,r2
  
  return context;
1021b5e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1021b5e4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1021b5e8:	e0bffa17 	ldw	r2,-24(fp)
1021b5ec:	00c00044 	movi	r3,1
1021b5f0:	1884983a 	sll	r2,r3,r2
1021b5f4:	1007883a 	mov	r3,r2
1021b5f8:	008408b4 	movhi	r2,4130
1021b5fc:	10845f04 	addi	r2,r2,4476
1021b600:	10800017 	ldw	r2,0(r2)
1021b604:	1886b03a 	or	r3,r3,r2
1021b608:	008408b4 	movhi	r2,4130
1021b60c:	10845f04 	addi	r2,r2,4476
1021b610:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1021b614:	008408b4 	movhi	r2,4130
1021b618:	10845f04 	addi	r2,r2,4476
1021b61c:	10800017 	ldw	r2,0(r2)
1021b620:	100170fa 	wrctl	ienable,r2
1021b624:	e0bffc17 	ldw	r2,-16(fp)
1021b628:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1021b62c:	e0bffd17 	ldw	r2,-12(fp)
1021b630:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1021b634:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1021b638:	0001883a 	nop
}
1021b63c:	e037883a 	mov	sp,fp
1021b640:	df000017 	ldw	fp,0(sp)
1021b644:	dec00104 	addi	sp,sp,4
1021b648:	f800283a 	ret

1021b64c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1021b64c:	defff904 	addi	sp,sp,-28
1021b650:	df000615 	stw	fp,24(sp)
1021b654:	df000604 	addi	fp,sp,24
1021b658:	e13ffe15 	stw	r4,-8(fp)
1021b65c:	e17fff15 	stw	r5,-4(fp)
1021b660:	e0bfff17 	ldw	r2,-4(fp)
1021b664:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1021b668:	0005303a 	rdctl	r2,status
1021b66c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1021b670:	e0fffb17 	ldw	r3,-20(fp)
1021b674:	00bfff84 	movi	r2,-2
1021b678:	1884703a 	and	r2,r3,r2
1021b67c:	1001703a 	wrctl	status,r2
  
  return context;
1021b680:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1021b684:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1021b688:	e0bffa17 	ldw	r2,-24(fp)
1021b68c:	00c00044 	movi	r3,1
1021b690:	1884983a 	sll	r2,r3,r2
1021b694:	0084303a 	nor	r2,zero,r2
1021b698:	1007883a 	mov	r3,r2
1021b69c:	008408b4 	movhi	r2,4130
1021b6a0:	10845f04 	addi	r2,r2,4476
1021b6a4:	10800017 	ldw	r2,0(r2)
1021b6a8:	1886703a 	and	r3,r3,r2
1021b6ac:	008408b4 	movhi	r2,4130
1021b6b0:	10845f04 	addi	r2,r2,4476
1021b6b4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1021b6b8:	008408b4 	movhi	r2,4130
1021b6bc:	10845f04 	addi	r2,r2,4476
1021b6c0:	10800017 	ldw	r2,0(r2)
1021b6c4:	100170fa 	wrctl	ienable,r2
1021b6c8:	e0bffc17 	ldw	r2,-16(fp)
1021b6cc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1021b6d0:	e0bffd17 	ldw	r2,-12(fp)
1021b6d4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1021b6d8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
1021b6dc:	0001883a 	nop
}
1021b6e0:	e037883a 	mov	sp,fp
1021b6e4:	df000017 	ldw	fp,0(sp)
1021b6e8:	dec00104 	addi	sp,sp,4
1021b6ec:	f800283a 	ret

1021b6f0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1021b6f0:	defffc04 	addi	sp,sp,-16
1021b6f4:	df000315 	stw	fp,12(sp)
1021b6f8:	df000304 	addi	fp,sp,12
1021b6fc:	e13ffe15 	stw	r4,-8(fp)
1021b700:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1021b704:	000530fa 	rdctl	r2,ienable
1021b708:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1021b70c:	e0bfff17 	ldw	r2,-4(fp)
1021b710:	00c00044 	movi	r3,1
1021b714:	1884983a 	sll	r2,r3,r2
1021b718:	1007883a 	mov	r3,r2
1021b71c:	e0bffd17 	ldw	r2,-12(fp)
1021b720:	1884703a 	and	r2,r3,r2
1021b724:	1004c03a 	cmpne	r2,r2,zero
1021b728:	10803fcc 	andi	r2,r2,255
}
1021b72c:	e037883a 	mov	sp,fp
1021b730:	df000017 	ldw	fp,0(sp)
1021b734:	dec00104 	addi	sp,sp,4
1021b738:	f800283a 	ret

1021b73c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1021b73c:	defff504 	addi	sp,sp,-44
1021b740:	dfc00a15 	stw	ra,40(sp)
1021b744:	df000915 	stw	fp,36(sp)
1021b748:	df000904 	addi	fp,sp,36
1021b74c:	e13ffc15 	stw	r4,-16(fp)
1021b750:	e17ffd15 	stw	r5,-12(fp)
1021b754:	e1bffe15 	stw	r6,-8(fp)
1021b758:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1021b75c:	00bffa84 	movi	r2,-22
1021b760:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1021b764:	e0bffd17 	ldw	r2,-12(fp)
1021b768:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1021b76c:	e0bff817 	ldw	r2,-32(fp)
1021b770:	10800808 	cmpgei	r2,r2,32
1021b774:	1000271e 	bne	r2,zero,1021b814 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1021b778:	0005303a 	rdctl	r2,status
1021b77c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1021b780:	e0fffa17 	ldw	r3,-24(fp)
1021b784:	00bfff84 	movi	r2,-2
1021b788:	1884703a 	and	r2,r3,r2
1021b78c:	1001703a 	wrctl	status,r2
  
  return context;
1021b790:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1021b794:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
1021b798:	008408b4 	movhi	r2,4130
1021b79c:	10846d04 	addi	r2,r2,4532
1021b7a0:	e0fff817 	ldw	r3,-32(fp)
1021b7a4:	180690fa 	slli	r3,r3,3
1021b7a8:	10c5883a 	add	r2,r2,r3
1021b7ac:	e0fffe17 	ldw	r3,-8(fp)
1021b7b0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1021b7b4:	008408b4 	movhi	r2,4130
1021b7b8:	10846d04 	addi	r2,r2,4532
1021b7bc:	e0fff817 	ldw	r3,-32(fp)
1021b7c0:	180690fa 	slli	r3,r3,3
1021b7c4:	18c00104 	addi	r3,r3,4
1021b7c8:	10c5883a 	add	r2,r2,r3
1021b7cc:	e0ffff17 	ldw	r3,-4(fp)
1021b7d0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1021b7d4:	e0bffe17 	ldw	r2,-8(fp)
1021b7d8:	10000526 	beq	r2,zero,1021b7f0 <alt_iic_isr_register+0xb4>
1021b7dc:	e0bff817 	ldw	r2,-32(fp)
1021b7e0:	e13ffc17 	ldw	r4,-16(fp)
1021b7e4:	100b883a 	mov	r5,r2
1021b7e8:	021b5ac0 	call	1021b5ac <alt_ic_irq_enable>
1021b7ec:	00000406 	br	1021b800 <alt_iic_isr_register+0xc4>
1021b7f0:	e0bff817 	ldw	r2,-32(fp)
1021b7f4:	e13ffc17 	ldw	r4,-16(fp)
1021b7f8:	100b883a 	mov	r5,r2
1021b7fc:	021b64c0 	call	1021b64c <alt_ic_irq_disable>
1021b800:	e0bff715 	stw	r2,-36(fp)
1021b804:	e0bff917 	ldw	r2,-28(fp)
1021b808:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1021b80c:	e0bffb17 	ldw	r2,-20(fp)
1021b810:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1021b814:	e0bff717 	ldw	r2,-36(fp)
}
1021b818:	e037883a 	mov	sp,fp
1021b81c:	dfc00117 	ldw	ra,4(sp)
1021b820:	df000017 	ldw	fp,0(sp)
1021b824:	dec00204 	addi	sp,sp,8
1021b828:	f800283a 	ret

1021b82c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1021b82c:	defff904 	addi	sp,sp,-28
1021b830:	dfc00615 	stw	ra,24(sp)
1021b834:	df000515 	stw	fp,20(sp)
1021b838:	df000504 	addi	fp,sp,20
1021b83c:	e13ffc15 	stw	r4,-16(fp)
1021b840:	e17ffd15 	stw	r5,-12(fp)
1021b844:	e1bffe15 	stw	r6,-8(fp)
1021b848:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
1021b84c:	e13ffd17 	ldw	r4,-12(fp)
1021b850:	e17ffe17 	ldw	r5,-8(fp)
1021b854:	e1bfff17 	ldw	r6,-4(fp)
1021b858:	021ba800 	call	1021ba80 <open>
1021b85c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
1021b860:	e0bffb17 	ldw	r2,-20(fp)
1021b864:	10001c16 	blt	r2,zero,1021b8d8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
1021b868:	008408b4 	movhi	r2,4130
1021b86c:	10b81404 	addi	r2,r2,-8112
1021b870:	e0fffb17 	ldw	r3,-20(fp)
1021b874:	18c00324 	muli	r3,r3,12
1021b878:	10c5883a 	add	r2,r2,r3
1021b87c:	10c00017 	ldw	r3,0(r2)
1021b880:	e0bffc17 	ldw	r2,-16(fp)
1021b884:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1021b888:	008408b4 	movhi	r2,4130
1021b88c:	10b81404 	addi	r2,r2,-8112
1021b890:	e0fffb17 	ldw	r3,-20(fp)
1021b894:	18c00324 	muli	r3,r3,12
1021b898:	18c00104 	addi	r3,r3,4
1021b89c:	10c5883a 	add	r2,r2,r3
1021b8a0:	10c00017 	ldw	r3,0(r2)
1021b8a4:	e0bffc17 	ldw	r2,-16(fp)
1021b8a8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1021b8ac:	008408b4 	movhi	r2,4130
1021b8b0:	10b81404 	addi	r2,r2,-8112
1021b8b4:	e0fffb17 	ldw	r3,-20(fp)
1021b8b8:	18c00324 	muli	r3,r3,12
1021b8bc:	18c00204 	addi	r3,r3,8
1021b8c0:	10c5883a 	add	r2,r2,r3
1021b8c4:	10c00017 	ldw	r3,0(r2)
1021b8c8:	e0bffc17 	ldw	r2,-16(fp)
1021b8cc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1021b8d0:	e13ffb17 	ldw	r4,-20(fp)
1021b8d4:	0218b080 	call	10218b08 <alt_release_fd>
  }
} 
1021b8d8:	e037883a 	mov	sp,fp
1021b8dc:	dfc00117 	ldw	ra,4(sp)
1021b8e0:	df000017 	ldw	fp,0(sp)
1021b8e4:	dec00204 	addi	sp,sp,8
1021b8e8:	f800283a 	ret

1021b8ec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1021b8ec:	defffb04 	addi	sp,sp,-20
1021b8f0:	dfc00415 	stw	ra,16(sp)
1021b8f4:	df000315 	stw	fp,12(sp)
1021b8f8:	df000304 	addi	fp,sp,12
1021b8fc:	e13ffd15 	stw	r4,-12(fp)
1021b900:	e17ffe15 	stw	r5,-8(fp)
1021b904:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1021b908:	010408b4 	movhi	r4,4130
1021b90c:	21381704 	addi	r4,r4,-8100
1021b910:	e17ffd17 	ldw	r5,-12(fp)
1021b914:	01800044 	movi	r6,1
1021b918:	01c07fc4 	movi	r7,511
1021b91c:	021b82c0 	call	1021b82c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1021b920:	010408b4 	movhi	r4,4130
1021b924:	21381404 	addi	r4,r4,-8112
1021b928:	e17ffe17 	ldw	r5,-8(fp)
1021b92c:	000d883a 	mov	r6,zero
1021b930:	01c07fc4 	movi	r7,511
1021b934:	021b82c0 	call	1021b82c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1021b938:	010408b4 	movhi	r4,4130
1021b93c:	21381a04 	addi	r4,r4,-8088
1021b940:	e17fff17 	ldw	r5,-4(fp)
1021b944:	01800044 	movi	r6,1
1021b948:	01c07fc4 	movi	r7,511
1021b94c:	021b82c0 	call	1021b82c <alt_open_fd>
}  
1021b950:	e037883a 	mov	sp,fp
1021b954:	dfc00117 	ldw	ra,4(sp)
1021b958:	df000017 	ldw	fp,0(sp)
1021b95c:	dec00204 	addi	sp,sp,8
1021b960:	f800283a 	ret

1021b964 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1021b964:	defffe04 	addi	sp,sp,-8
1021b968:	dfc00115 	stw	ra,4(sp)
1021b96c:	df000015 	stw	fp,0(sp)
1021b970:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1021b974:	008408b4 	movhi	r2,4130
1021b978:	10bd1204 	addi	r2,r2,-3000
1021b97c:	10800017 	ldw	r2,0(r2)
1021b980:	10000526 	beq	r2,zero,1021b998 <alt_get_errno+0x34>
1021b984:	008408b4 	movhi	r2,4130
1021b988:	10bd1204 	addi	r2,r2,-3000
1021b98c:	10800017 	ldw	r2,0(r2)
1021b990:	103ee83a 	callr	r2
1021b994:	00000206 	br	1021b9a0 <alt_get_errno+0x3c>
1021b998:	008408b4 	movhi	r2,4130
1021b99c:	10845804 	addi	r2,r2,4448
}
1021b9a0:	e037883a 	mov	sp,fp
1021b9a4:	dfc00117 	ldw	ra,4(sp)
1021b9a8:	df000017 	ldw	fp,0(sp)
1021b9ac:	dec00204 	addi	sp,sp,8
1021b9b0:	f800283a 	ret

1021b9b4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1021b9b4:	defffd04 	addi	sp,sp,-12
1021b9b8:	df000215 	stw	fp,8(sp)
1021b9bc:	df000204 	addi	fp,sp,8
1021b9c0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1021b9c4:	e0bfff17 	ldw	r2,-4(fp)
1021b9c8:	10800217 	ldw	r2,8(r2)
1021b9cc:	10d00034 	orhi	r3,r2,16384
1021b9d0:	e0bfff17 	ldw	r2,-4(fp)
1021b9d4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1021b9d8:	e03ffe15 	stw	zero,-8(fp)
1021b9dc:	00001d06 	br	1021ba54 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1021b9e0:	008408b4 	movhi	r2,4130
1021b9e4:	10b81404 	addi	r2,r2,-8112
1021b9e8:	e0fffe17 	ldw	r3,-8(fp)
1021b9ec:	18c00324 	muli	r3,r3,12
1021b9f0:	10c5883a 	add	r2,r2,r3
1021b9f4:	10c00017 	ldw	r3,0(r2)
1021b9f8:	e0bfff17 	ldw	r2,-4(fp)
1021b9fc:	10800017 	ldw	r2,0(r2)
1021ba00:	1880111e 	bne	r3,r2,1021ba48 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1021ba04:	008408b4 	movhi	r2,4130
1021ba08:	10b81404 	addi	r2,r2,-8112
1021ba0c:	e0fffe17 	ldw	r3,-8(fp)
1021ba10:	18c00324 	muli	r3,r3,12
1021ba14:	18c00204 	addi	r3,r3,8
1021ba18:	10c5883a 	add	r2,r2,r3
1021ba1c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1021ba20:	1000090e 	bge	r2,zero,1021ba48 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1021ba24:	e0bffe17 	ldw	r2,-8(fp)
1021ba28:	10c00324 	muli	r3,r2,12
1021ba2c:	008408b4 	movhi	r2,4130
1021ba30:	10b81404 	addi	r2,r2,-8112
1021ba34:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1021ba38:	e0bfff17 	ldw	r2,-4(fp)
1021ba3c:	18800226 	beq	r3,r2,1021ba48 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1021ba40:	00bffcc4 	movi	r2,-13
1021ba44:	00000a06 	br	1021ba70 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1021ba48:	e0bffe17 	ldw	r2,-8(fp)
1021ba4c:	10800044 	addi	r2,r2,1
1021ba50:	e0bffe15 	stw	r2,-8(fp)
1021ba54:	008408b4 	movhi	r2,4130
1021ba58:	10bd1104 	addi	r2,r2,-3004
1021ba5c:	10800017 	ldw	r2,0(r2)
1021ba60:	1007883a 	mov	r3,r2
1021ba64:	e0bffe17 	ldw	r2,-8(fp)
1021ba68:	18bfdd2e 	bgeu	r3,r2,1021b9e0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1021ba6c:	0005883a 	mov	r2,zero
}
1021ba70:	e037883a 	mov	sp,fp
1021ba74:	df000017 	ldw	fp,0(sp)
1021ba78:	dec00104 	addi	sp,sp,4
1021ba7c:	f800283a 	ret

1021ba80 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1021ba80:	defff604 	addi	sp,sp,-40
1021ba84:	dfc00915 	stw	ra,36(sp)
1021ba88:	df000815 	stw	fp,32(sp)
1021ba8c:	df000804 	addi	fp,sp,32
1021ba90:	e13ffd15 	stw	r4,-12(fp)
1021ba94:	e17ffe15 	stw	r5,-8(fp)
1021ba98:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1021ba9c:	00bfffc4 	movi	r2,-1
1021baa0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1021baa4:	00bffb44 	movi	r2,-19
1021baa8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1021baac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1021bab0:	e13ffd17 	ldw	r4,-12(fp)
1021bab4:	014408b4 	movhi	r5,4130
1021bab8:	297d0f04 	addi	r5,r5,-3012
1021babc:	021b49c0 	call	1021b49c <alt_find_dev>
1021bac0:	e0bff815 	stw	r2,-32(fp)
1021bac4:	e0bff817 	ldw	r2,-32(fp)
1021bac8:	1000051e 	bne	r2,zero,1021bae0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1021bacc:	e13ffd17 	ldw	r4,-12(fp)
1021bad0:	021bf1c0 	call	1021bf1c <alt_find_file>
1021bad4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1021bad8:	00800044 	movi	r2,1
1021badc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1021bae0:	e0bff817 	ldw	r2,-32(fp)
1021bae4:	10002926 	beq	r2,zero,1021bb8c <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
1021bae8:	e13ff817 	ldw	r4,-32(fp)
1021baec:	021c0300 	call	1021c030 <alt_get_fd>
1021baf0:	e0bff915 	stw	r2,-28(fp)
1021baf4:	e0bff917 	ldw	r2,-28(fp)
1021baf8:	1000030e 	bge	r2,zero,1021bb08 <open+0x88>
    {
      status = index;
1021bafc:	e0bff917 	ldw	r2,-28(fp)
1021bb00:	e0bffa15 	stw	r2,-24(fp)
1021bb04:	00002306 	br	1021bb94 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
1021bb08:	e0bff917 	ldw	r2,-28(fp)
1021bb0c:	10c00324 	muli	r3,r2,12
1021bb10:	008408b4 	movhi	r2,4130
1021bb14:	10b81404 	addi	r2,r2,-8112
1021bb18:	1885883a 	add	r2,r3,r2
1021bb1c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1021bb20:	e0fffe17 	ldw	r3,-8(fp)
1021bb24:	00900034 	movhi	r2,16384
1021bb28:	10bfffc4 	addi	r2,r2,-1
1021bb2c:	1886703a 	and	r3,r3,r2
1021bb30:	e0bffc17 	ldw	r2,-16(fp)
1021bb34:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1021bb38:	e0bffb17 	ldw	r2,-20(fp)
1021bb3c:	1000051e 	bne	r2,zero,1021bb54 <open+0xd4>
1021bb40:	e13ffc17 	ldw	r4,-16(fp)
1021bb44:	021b9b40 	call	1021b9b4 <alt_file_locked>
1021bb48:	e0bffa15 	stw	r2,-24(fp)
1021bb4c:	e0bffa17 	ldw	r2,-24(fp)
1021bb50:	10001016 	blt	r2,zero,1021bb94 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1021bb54:	e0bff817 	ldw	r2,-32(fp)
1021bb58:	10800317 	ldw	r2,12(r2)
1021bb5c:	10000826 	beq	r2,zero,1021bb80 <open+0x100>
1021bb60:	e0bff817 	ldw	r2,-32(fp)
1021bb64:	10800317 	ldw	r2,12(r2)
1021bb68:	e13ffc17 	ldw	r4,-16(fp)
1021bb6c:	e17ffd17 	ldw	r5,-12(fp)
1021bb70:	e1bffe17 	ldw	r6,-8(fp)
1021bb74:	e1ffff17 	ldw	r7,-4(fp)
1021bb78:	103ee83a 	callr	r2
1021bb7c:	00000106 	br	1021bb84 <open+0x104>
1021bb80:	0005883a 	mov	r2,zero
1021bb84:	e0bffa15 	stw	r2,-24(fp)
1021bb88:	00000206 	br	1021bb94 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
1021bb8c:	00bffb44 	movi	r2,-19
1021bb90:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1021bb94:	e0bffa17 	ldw	r2,-24(fp)
1021bb98:	1000090e 	bge	r2,zero,1021bbc0 <open+0x140>
  {
    alt_release_fd (index);  
1021bb9c:	e13ff917 	ldw	r4,-28(fp)
1021bba0:	0218b080 	call	10218b08 <alt_release_fd>
    ALT_ERRNO = -status;
1021bba4:	021b9640 	call	1021b964 <alt_get_errno>
1021bba8:	1007883a 	mov	r3,r2
1021bbac:	e0bffa17 	ldw	r2,-24(fp)
1021bbb0:	0085c83a 	sub	r2,zero,r2
1021bbb4:	18800015 	stw	r2,0(r3)
    return -1;
1021bbb8:	00bfffc4 	movi	r2,-1
1021bbbc:	00000106 	br	1021bbc4 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
1021bbc0:	e0bff917 	ldw	r2,-28(fp)
}
1021bbc4:	e037883a 	mov	sp,fp
1021bbc8:	dfc00117 	ldw	ra,4(sp)
1021bbcc:	df000017 	ldw	fp,0(sp)
1021bbd0:	dec00204 	addi	sp,sp,8
1021bbd4:	f800283a 	ret

1021bbd8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1021bbd8:	defffa04 	addi	sp,sp,-24
1021bbdc:	df000515 	stw	fp,20(sp)
1021bbe0:	df000504 	addi	fp,sp,20
1021bbe4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1021bbe8:	0005303a 	rdctl	r2,status
1021bbec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1021bbf0:	e0fffc17 	ldw	r3,-16(fp)
1021bbf4:	00bfff84 	movi	r2,-2
1021bbf8:	1884703a 	and	r2,r3,r2
1021bbfc:	1001703a 	wrctl	status,r2
  
  return context;
1021bc00:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1021bc04:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1021bc08:	e0bfff17 	ldw	r2,-4(fp)
1021bc0c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1021bc10:	e0bffd17 	ldw	r2,-12(fp)
1021bc14:	10800017 	ldw	r2,0(r2)
1021bc18:	e0fffd17 	ldw	r3,-12(fp)
1021bc1c:	18c00117 	ldw	r3,4(r3)
1021bc20:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1021bc24:	e0bffd17 	ldw	r2,-12(fp)
1021bc28:	10800117 	ldw	r2,4(r2)
1021bc2c:	e0fffd17 	ldw	r3,-12(fp)
1021bc30:	18c00017 	ldw	r3,0(r3)
1021bc34:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1021bc38:	e0bffd17 	ldw	r2,-12(fp)
1021bc3c:	e0fffd17 	ldw	r3,-12(fp)
1021bc40:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1021bc44:	e0bffd17 	ldw	r2,-12(fp)
1021bc48:	e0fffd17 	ldw	r3,-12(fp)
1021bc4c:	10c00015 	stw	r3,0(r2)
1021bc50:	e0bffb17 	ldw	r2,-20(fp)
1021bc54:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1021bc58:	e0bffe17 	ldw	r2,-8(fp)
1021bc5c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1021bc60:	e037883a 	mov	sp,fp
1021bc64:	df000017 	ldw	fp,0(sp)
1021bc68:	dec00104 	addi	sp,sp,4
1021bc6c:	f800283a 	ret

1021bc70 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1021bc70:	defffb04 	addi	sp,sp,-20
1021bc74:	dfc00415 	stw	ra,16(sp)
1021bc78:	df000315 	stw	fp,12(sp)
1021bc7c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1021bc80:	d0a01317 	ldw	r2,-32692(gp)
1021bc84:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1021bc88:	d0a75c17 	ldw	r2,-25232(gp)
1021bc8c:	10800044 	addi	r2,r2,1
1021bc90:	d0a75c15 	stw	r2,-25232(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1021bc94:	00002e06 	br	1021bd50 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1021bc98:	e0bffd17 	ldw	r2,-12(fp)
1021bc9c:	10800017 	ldw	r2,0(r2)
1021bca0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1021bca4:	e0bffd17 	ldw	r2,-12(fp)
1021bca8:	10800403 	ldbu	r2,16(r2)
1021bcac:	10803fcc 	andi	r2,r2,255
1021bcb0:	10000426 	beq	r2,zero,1021bcc4 <alt_tick+0x54>
1021bcb4:	d0a75c17 	ldw	r2,-25232(gp)
1021bcb8:	1000021e 	bne	r2,zero,1021bcc4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1021bcbc:	e0bffd17 	ldw	r2,-12(fp)
1021bcc0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1021bcc4:	e0bffd17 	ldw	r2,-12(fp)
1021bcc8:	10800217 	ldw	r2,8(r2)
1021bccc:	d0e75c17 	ldw	r3,-25232(gp)
1021bcd0:	18801d36 	bltu	r3,r2,1021bd48 <alt_tick+0xd8>
1021bcd4:	e0bffd17 	ldw	r2,-12(fp)
1021bcd8:	10800403 	ldbu	r2,16(r2)
1021bcdc:	10803fcc 	andi	r2,r2,255
1021bce0:	1000191e 	bne	r2,zero,1021bd48 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1021bce4:	e0bffd17 	ldw	r2,-12(fp)
1021bce8:	10800317 	ldw	r2,12(r2)
1021bcec:	e0fffd17 	ldw	r3,-12(fp)
1021bcf0:	18c00517 	ldw	r3,20(r3)
1021bcf4:	1809883a 	mov	r4,r3
1021bcf8:	103ee83a 	callr	r2
1021bcfc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1021bd00:	e0bfff17 	ldw	r2,-4(fp)
1021bd04:	1000031e 	bne	r2,zero,1021bd14 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1021bd08:	e13ffd17 	ldw	r4,-12(fp)
1021bd0c:	021bbd80 	call	1021bbd8 <alt_alarm_stop>
1021bd10:	00000d06 	br	1021bd48 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1021bd14:	e0bffd17 	ldw	r2,-12(fp)
1021bd18:	10c00217 	ldw	r3,8(r2)
1021bd1c:	e0bfff17 	ldw	r2,-4(fp)
1021bd20:	1887883a 	add	r3,r3,r2
1021bd24:	e0bffd17 	ldw	r2,-12(fp)
1021bd28:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1021bd2c:	e0bffd17 	ldw	r2,-12(fp)
1021bd30:	10c00217 	ldw	r3,8(r2)
1021bd34:	d0a75c17 	ldw	r2,-25232(gp)
1021bd38:	1880032e 	bgeu	r3,r2,1021bd48 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1021bd3c:	e0bffd17 	ldw	r2,-12(fp)
1021bd40:	00c00044 	movi	r3,1
1021bd44:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1021bd48:	e0bffe17 	ldw	r2,-8(fp)
1021bd4c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1021bd50:	e0fffd17 	ldw	r3,-12(fp)
1021bd54:	d0a01304 	addi	r2,gp,-32692
1021bd58:	18bfcf1e 	bne	r3,r2,1021bc98 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1021bd5c:	0001883a 	nop
}
1021bd60:	e037883a 	mov	sp,fp
1021bd64:	dfc00117 	ldw	ra,4(sp)
1021bd68:	df000017 	ldw	fp,0(sp)
1021bd6c:	dec00204 	addi	sp,sp,8
1021bd70:	f800283a 	ret

1021bd74 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1021bd74:	defffd04 	addi	sp,sp,-12
1021bd78:	dfc00215 	stw	ra,8(sp)
1021bd7c:	df000115 	stw	fp,4(sp)
1021bd80:	df000104 	addi	fp,sp,4
1021bd84:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1021bd88:	e13fff17 	ldw	r4,-4(fp)
1021bd8c:	021bdc40 	call	1021bdc4 <alt_busy_sleep>
}
1021bd90:	e037883a 	mov	sp,fp
1021bd94:	dfc00117 	ldw	ra,4(sp)
1021bd98:	df000017 	ldw	fp,0(sp)
1021bd9c:	dec00204 	addi	sp,sp,8
1021bda0:	f800283a 	ret

1021bda4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
1021bda4:	deffff04 	addi	sp,sp,-4
1021bda8:	df000015 	stw	fp,0(sp)
1021bdac:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1021bdb0:	000170fa 	wrctl	ienable,zero
}
1021bdb4:	e037883a 	mov	sp,fp
1021bdb8:	df000017 	ldw	fp,0(sp)
1021bdbc:	dec00104 	addi	sp,sp,4
1021bdc0:	f800283a 	ret

1021bdc4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
1021bdc4:	defffa04 	addi	sp,sp,-24
1021bdc8:	dfc00515 	stw	ra,20(sp)
1021bdcc:	df000415 	stw	fp,16(sp)
1021bdd0:	df000404 	addi	fp,sp,16
1021bdd4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
1021bdd8:	008000c4 	movi	r2,3
1021bddc:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
1021bde0:	e0fffd17 	ldw	r3,-12(fp)
1021bde4:	008003f4 	movhi	r2,15
1021bde8:	10909004 	addi	r2,r2,16960
1021bdec:	1885383a 	mul	r2,r3,r2
1021bdf0:	0100bef4 	movhi	r4,763
1021bdf4:	213c2004 	addi	r4,r4,-3968
1021bdf8:	100b883a 	mov	r5,r2
1021bdfc:	02024740 	call	10202474 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
1021be00:	01200034 	movhi	r4,32768
1021be04:	213fffc4 	addi	r4,r4,-1
1021be08:	100b883a 	mov	r5,r2
1021be0c:	02024740 	call	10202474 <__udivsi3>
1021be10:	e13fff17 	ldw	r4,-4(fp)
1021be14:	100b883a 	mov	r5,r2
1021be18:	02024740 	call	10202474 <__udivsi3>
1021be1c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
1021be20:	e0bffe17 	ldw	r2,-8(fp)
1021be24:	10002a26 	beq	r2,zero,1021bed0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
1021be28:	e03ffc15 	stw	zero,-16(fp)
1021be2c:	00001706 	br	1021be8c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
1021be30:	00a00034 	movhi	r2,32768
1021be34:	10bfffc4 	addi	r2,r2,-1
1021be38:	10bfffc4 	addi	r2,r2,-1
1021be3c:	103ffe1e 	bne	r2,zero,1021be38 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
1021be40:	e0fffd17 	ldw	r3,-12(fp)
1021be44:	008003f4 	movhi	r2,15
1021be48:	10909004 	addi	r2,r2,16960
1021be4c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
1021be50:	0100bef4 	movhi	r4,763
1021be54:	213c2004 	addi	r4,r4,-3968
1021be58:	100b883a 	mov	r5,r2
1021be5c:	02024740 	call	10202474 <__udivsi3>
1021be60:	01200034 	movhi	r4,32768
1021be64:	213fffc4 	addi	r4,r4,-1
1021be68:	100b883a 	mov	r5,r2
1021be6c:	02024740 	call	10202474 <__udivsi3>
1021be70:	1007883a 	mov	r3,r2
1021be74:	e0bfff17 	ldw	r2,-4(fp)
1021be78:	10c5c83a 	sub	r2,r2,r3
1021be7c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
1021be80:	e0bffc17 	ldw	r2,-16(fp)
1021be84:	10800044 	addi	r2,r2,1
1021be88:	e0bffc15 	stw	r2,-16(fp)
1021be8c:	e0fffc17 	ldw	r3,-16(fp)
1021be90:	e0bffe17 	ldw	r2,-8(fp)
1021be94:	18bfe616 	blt	r3,r2,1021be30 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1021be98:	e0fffd17 	ldw	r3,-12(fp)
1021be9c:	008003f4 	movhi	r2,15
1021bea0:	10909004 	addi	r2,r2,16960
1021bea4:	1885383a 	mul	r2,r3,r2
1021bea8:	0100bef4 	movhi	r4,763
1021beac:	213c2004 	addi	r4,r4,-3968
1021beb0:	100b883a 	mov	r5,r2
1021beb4:	02024740 	call	10202474 <__udivsi3>
1021beb8:	1007883a 	mov	r3,r2
1021bebc:	e0bfff17 	ldw	r2,-4(fp)
1021bec0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
1021bec4:	10bfffc4 	addi	r2,r2,-1
1021bec8:	103ffe1e 	bne	r2,zero,1021bec4 <alt_busy_sleep+0x100>
1021becc:	00000d06 	br	1021bf04 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1021bed0:	e0fffd17 	ldw	r3,-12(fp)
1021bed4:	008003f4 	movhi	r2,15
1021bed8:	10909004 	addi	r2,r2,16960
1021bedc:	1885383a 	mul	r2,r3,r2
1021bee0:	0100bef4 	movhi	r4,763
1021bee4:	213c2004 	addi	r4,r4,-3968
1021bee8:	100b883a 	mov	r5,r2
1021beec:	02024740 	call	10202474 <__udivsi3>
1021bef0:	1007883a 	mov	r3,r2
1021bef4:	e0bfff17 	ldw	r2,-4(fp)
1021bef8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
1021befc:	10bfffc4 	addi	r2,r2,-1
1021bf00:	00bffe16 	blt	zero,r2,1021befc <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
1021bf04:	0005883a 	mov	r2,zero
}
1021bf08:	e037883a 	mov	sp,fp
1021bf0c:	dfc00117 	ldw	ra,4(sp)
1021bf10:	df000017 	ldw	fp,0(sp)
1021bf14:	dec00204 	addi	sp,sp,8
1021bf18:	f800283a 	ret

1021bf1c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1021bf1c:	defffb04 	addi	sp,sp,-20
1021bf20:	dfc00415 	stw	ra,16(sp)
1021bf24:	df000315 	stw	fp,12(sp)
1021bf28:	df000304 	addi	fp,sp,12
1021bf2c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1021bf30:	008408b4 	movhi	r2,4130
1021bf34:	10bd0d04 	addi	r2,r2,-3020
1021bf38:	10800017 	ldw	r2,0(r2)
1021bf3c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1021bf40:	00003106 	br	1021c008 <alt_find_file+0xec>
  {
    len = strlen(next->name);
1021bf44:	e0bffd17 	ldw	r2,-12(fp)
1021bf48:	10800217 	ldw	r2,8(r2)
1021bf4c:	1009883a 	mov	r4,r2
1021bf50:	02033500 	call	10203350 <strlen>
1021bf54:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1021bf58:	e0bffd17 	ldw	r2,-12(fp)
1021bf5c:	10c00217 	ldw	r3,8(r2)
1021bf60:	e0bffe17 	ldw	r2,-8(fp)
1021bf64:	10bfffc4 	addi	r2,r2,-1
1021bf68:	1885883a 	add	r2,r3,r2
1021bf6c:	10800003 	ldbu	r2,0(r2)
1021bf70:	10803fcc 	andi	r2,r2,255
1021bf74:	1080201c 	xori	r2,r2,128
1021bf78:	10bfe004 	addi	r2,r2,-128
1021bf7c:	10800bd8 	cmpnei	r2,r2,47
1021bf80:	1000031e 	bne	r2,zero,1021bf90 <alt_find_file+0x74>
    {
      len -= 1;
1021bf84:	e0bffe17 	ldw	r2,-8(fp)
1021bf88:	10bfffc4 	addi	r2,r2,-1
1021bf8c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1021bf90:	e0bffe17 	ldw	r2,-8(fp)
1021bf94:	e0ffff17 	ldw	r3,-4(fp)
1021bf98:	1885883a 	add	r2,r3,r2
1021bf9c:	10800003 	ldbu	r2,0(r2)
1021bfa0:	10803fcc 	andi	r2,r2,255
1021bfa4:	1080201c 	xori	r2,r2,128
1021bfa8:	10bfe004 	addi	r2,r2,-128
1021bfac:	10800be0 	cmpeqi	r2,r2,47
1021bfb0:	1000081e 	bne	r2,zero,1021bfd4 <alt_find_file+0xb8>
1021bfb4:	e0bffe17 	ldw	r2,-8(fp)
1021bfb8:	e0ffff17 	ldw	r3,-4(fp)
1021bfbc:	1885883a 	add	r2,r3,r2
1021bfc0:	10800003 	ldbu	r2,0(r2)
1021bfc4:	10803fcc 	andi	r2,r2,255
1021bfc8:	1080201c 	xori	r2,r2,128
1021bfcc:	10bfe004 	addi	r2,r2,-128
1021bfd0:	10000a1e 	bne	r2,zero,1021bffc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
1021bfd4:	e0bffd17 	ldw	r2,-12(fp)
1021bfd8:	10c00217 	ldw	r3,8(r2)
1021bfdc:	e0bffe17 	ldw	r2,-8(fp)
1021bfe0:	1809883a 	mov	r4,r3
1021bfe4:	e17fff17 	ldw	r5,-4(fp)
1021bfe8:	100d883a 	mov	r6,r2
1021bfec:	0202d4c0 	call	10202d4c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1021bff0:	1000021e 	bne	r2,zero,1021bffc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1021bff4:	e0bffd17 	ldw	r2,-12(fp)
1021bff8:	00000806 	br	1021c01c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
1021bffc:	e0bffd17 	ldw	r2,-12(fp)
1021c000:	10800017 	ldw	r2,0(r2)
1021c004:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1021c008:	e0fffd17 	ldw	r3,-12(fp)
1021c00c:	008408b4 	movhi	r2,4130
1021c010:	10bd0d04 	addi	r2,r2,-3020
1021c014:	18bfcb1e 	bne	r3,r2,1021bf44 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1021c018:	0005883a 	mov	r2,zero
}
1021c01c:	e037883a 	mov	sp,fp
1021c020:	dfc00117 	ldw	ra,4(sp)
1021c024:	df000017 	ldw	fp,0(sp)
1021c028:	dec00204 	addi	sp,sp,8
1021c02c:	f800283a 	ret

1021c030 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1021c030:	defffc04 	addi	sp,sp,-16
1021c034:	df000315 	stw	fp,12(sp)
1021c038:	df000304 	addi	fp,sp,12
1021c03c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
1021c040:	00bffa04 	movi	r2,-24
1021c044:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1021c048:	e03ffd15 	stw	zero,-12(fp)
1021c04c:	00001d06 	br	1021c0c4 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
1021c050:	008408b4 	movhi	r2,4130
1021c054:	10b81404 	addi	r2,r2,-8112
1021c058:	e0fffd17 	ldw	r3,-12(fp)
1021c05c:	18c00324 	muli	r3,r3,12
1021c060:	10c5883a 	add	r2,r2,r3
1021c064:	10800017 	ldw	r2,0(r2)
1021c068:	1000131e 	bne	r2,zero,1021c0b8 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
1021c06c:	008408b4 	movhi	r2,4130
1021c070:	10b81404 	addi	r2,r2,-8112
1021c074:	e0fffd17 	ldw	r3,-12(fp)
1021c078:	18c00324 	muli	r3,r3,12
1021c07c:	10c5883a 	add	r2,r2,r3
1021c080:	e0ffff17 	ldw	r3,-4(fp)
1021c084:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1021c088:	008408b4 	movhi	r2,4130
1021c08c:	10bd1104 	addi	r2,r2,-3004
1021c090:	10c00017 	ldw	r3,0(r2)
1021c094:	e0bffd17 	ldw	r2,-12(fp)
1021c098:	1880040e 	bge	r3,r2,1021c0ac <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
1021c09c:	008408b4 	movhi	r2,4130
1021c0a0:	10bd1104 	addi	r2,r2,-3004
1021c0a4:	e0fffd17 	ldw	r3,-12(fp)
1021c0a8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
1021c0ac:	e0bffd17 	ldw	r2,-12(fp)
1021c0b0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
1021c0b4:	00000606 	br	1021c0d0 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1021c0b8:	e0bffd17 	ldw	r2,-12(fp)
1021c0bc:	10800044 	addi	r2,r2,1
1021c0c0:	e0bffd15 	stw	r2,-12(fp)
1021c0c4:	e0bffd17 	ldw	r2,-12(fp)
1021c0c8:	10800810 	cmplti	r2,r2,32
1021c0cc:	103fe01e 	bne	r2,zero,1021c050 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1021c0d0:	e0bffe17 	ldw	r2,-8(fp)
}
1021c0d4:	e037883a 	mov	sp,fp
1021c0d8:	df000017 	ldw	fp,0(sp)
1021c0dc:	dec00104 	addi	sp,sp,4
1021c0e0:	f800283a 	ret

1021c0e4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
1021c0e4:	defffb04 	addi	sp,sp,-20
1021c0e8:	df000415 	stw	fp,16(sp)
1021c0ec:	df000404 	addi	fp,sp,16
1021c0f0:	e13ffe15 	stw	r4,-8(fp)
1021c0f4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
1021c0f8:	e0bfff17 	ldw	r2,-4(fp)
1021c0fc:	10840070 	cmpltui	r2,r2,4097
1021c100:	1000021e 	bne	r2,zero,1021c10c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
1021c104:	00840004 	movi	r2,4096
1021c108:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
1021c10c:	e0fffe17 	ldw	r3,-8(fp)
1021c110:	e0bfff17 	ldw	r2,-4(fp)
1021c114:	1885883a 	add	r2,r3,r2
1021c118:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
1021c11c:	e0bffe17 	ldw	r2,-8(fp)
1021c120:	e0bffc15 	stw	r2,-16(fp)
1021c124:	00000506 	br	1021c13c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
1021c128:	e0bffc17 	ldw	r2,-16(fp)
1021c12c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
1021c130:	e0bffc17 	ldw	r2,-16(fp)
1021c134:	10800804 	addi	r2,r2,32
1021c138:	e0bffc15 	stw	r2,-16(fp)
1021c13c:	e0fffc17 	ldw	r3,-16(fp)
1021c140:	e0bffd17 	ldw	r2,-12(fp)
1021c144:	18bff836 	bltu	r3,r2,1021c128 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
1021c148:	e0bffe17 	ldw	r2,-8(fp)
1021c14c:	108007cc 	andi	r2,r2,31
1021c150:	10000226 	beq	r2,zero,1021c15c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
1021c154:	e0bffc17 	ldw	r2,-16(fp)
1021c158:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
1021c15c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
1021c160:	e037883a 	mov	sp,fp
1021c164:	df000017 	ldw	fp,0(sp)
1021c168:	dec00104 	addi	sp,sp,4
1021c16c:	f800283a 	ret

1021c170 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
1021c170:	defffe04 	addi	sp,sp,-8
1021c174:	df000115 	stw	fp,4(sp)
1021c178:	df000104 	addi	fp,sp,4
1021c17c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
1021c180:	e0bfff17 	ldw	r2,-4(fp)
1021c184:	10bffe84 	addi	r2,r2,-6
1021c188:	10c00428 	cmpgeui	r3,r2,16
1021c18c:	18001a1e 	bne	r3,zero,1021c1f8 <alt_exception_cause_generated_bad_addr+0x88>
1021c190:	100690ba 	slli	r3,r2,2
1021c194:	008408b4 	movhi	r2,4130
1021c198:	10b06a04 	addi	r2,r2,-15960
1021c19c:	1885883a 	add	r2,r3,r2
1021c1a0:	10800017 	ldw	r2,0(r2)
1021c1a4:	1000683a 	jmp	r2
1021c1a8:	1021c1e8 	cmpgeui	zero,r2,34567
1021c1ac:	1021c1e8 	cmpgeui	zero,r2,34567
1021c1b0:	1021c1f8 	rdprs	zero,r2,-30969
1021c1b4:	1021c1f8 	rdprs	zero,r2,-30969
1021c1b8:	1021c1f8 	rdprs	zero,r2,-30969
1021c1bc:	1021c1e8 	cmpgeui	zero,r2,34567
1021c1c0:	1021c1f0 	cmpltui	zero,r2,34567
1021c1c4:	1021c1f8 	rdprs	zero,r2,-30969
1021c1c8:	1021c1e8 	cmpgeui	zero,r2,34567
1021c1cc:	1021c1e8 	cmpgeui	zero,r2,34567
1021c1d0:	1021c1f8 	rdprs	zero,r2,-30969
1021c1d4:	1021c1e8 	cmpgeui	zero,r2,34567
1021c1d8:	1021c1f0 	cmpltui	zero,r2,34567
1021c1dc:	1021c1f8 	rdprs	zero,r2,-30969
1021c1e0:	1021c1f8 	rdprs	zero,r2,-30969
1021c1e4:	1021c1e8 	cmpgeui	zero,r2,34567
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
1021c1e8:	00800044 	movi	r2,1
1021c1ec:	00000306 	br	1021c1fc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
1021c1f0:	0005883a 	mov	r2,zero
1021c1f4:	00000106 	br	1021c1fc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
1021c1f8:	0005883a 	mov	r2,zero
  }
}
1021c1fc:	e037883a 	mov	sp,fp
1021c200:	df000017 	ldw	fp,0(sp)
1021c204:	dec00104 	addi	sp,sp,4
1021c208:	f800283a 	ret

1021c20c <atexit>:
1021c20c:	200b883a 	mov	r5,r4
1021c210:	000d883a 	mov	r6,zero
1021c214:	0009883a 	mov	r4,zero
1021c218:	000f883a 	mov	r7,zero
1021c21c:	021c2581 	jmpi	1021c258 <__register_exitproc>

1021c220 <exit>:
1021c220:	defffe04 	addi	sp,sp,-8
1021c224:	000b883a 	mov	r5,zero
1021c228:	dc000015 	stw	r16,0(sp)
1021c22c:	dfc00115 	stw	ra,4(sp)
1021c230:	2021883a 	mov	r16,r4
1021c234:	021c36c0 	call	1021c36c <__call_exitprocs>
1021c238:	008408b4 	movhi	r2,4130
1021c23c:	10bd0504 	addi	r2,r2,-3052
1021c240:	11000017 	ldw	r4,0(r2)
1021c244:	20800f17 	ldw	r2,60(r4)
1021c248:	10000126 	beq	r2,zero,1021c250 <exit+0x30>
1021c24c:	103ee83a 	callr	r2
1021c250:	8009883a 	mov	r4,r16
1021c254:	021c5000 	call	1021c500 <_exit>

1021c258 <__register_exitproc>:
1021c258:	008408b4 	movhi	r2,4130
1021c25c:	defffa04 	addi	sp,sp,-24
1021c260:	10bd0504 	addi	r2,r2,-3052
1021c264:	dc000315 	stw	r16,12(sp)
1021c268:	14000017 	ldw	r16,0(r2)
1021c26c:	dc400415 	stw	r17,16(sp)
1021c270:	dfc00515 	stw	ra,20(sp)
1021c274:	80805217 	ldw	r2,328(r16)
1021c278:	2023883a 	mov	r17,r4
1021c27c:	10003626 	beq	r2,zero,1021c358 <__register_exitproc+0x100>
1021c280:	10c00117 	ldw	r3,4(r2)
1021c284:	010007c4 	movi	r4,31
1021c288:	20c00e16 	blt	r4,r3,1021c2c4 <__register_exitproc+0x6c>
1021c28c:	1a400044 	addi	r9,r3,1
1021c290:	8800211e 	bne	r17,zero,1021c318 <__register_exitproc+0xc0>
1021c294:	18c00084 	addi	r3,r3,2
1021c298:	18c7883a 	add	r3,r3,r3
1021c29c:	18c7883a 	add	r3,r3,r3
1021c2a0:	12400115 	stw	r9,4(r2)
1021c2a4:	10c7883a 	add	r3,r2,r3
1021c2a8:	19400015 	stw	r5,0(r3)
1021c2ac:	0005883a 	mov	r2,zero
1021c2b0:	dfc00517 	ldw	ra,20(sp)
1021c2b4:	dc400417 	ldw	r17,16(sp)
1021c2b8:	dc000317 	ldw	r16,12(sp)
1021c2bc:	dec00604 	addi	sp,sp,24
1021c2c0:	f800283a 	ret
1021c2c4:	00840834 	movhi	r2,4128
1021c2c8:	10895f04 	addi	r2,r2,9596
1021c2cc:	10002526 	beq	r2,zero,1021c364 <__register_exitproc+0x10c>
1021c2d0:	01006404 	movi	r4,400
1021c2d4:	d9400015 	stw	r5,0(sp)
1021c2d8:	d9800115 	stw	r6,4(sp)
1021c2dc:	d9c00215 	stw	r7,8(sp)
1021c2e0:	020257c0 	call	1020257c <malloc>
1021c2e4:	d9400017 	ldw	r5,0(sp)
1021c2e8:	d9800117 	ldw	r6,4(sp)
1021c2ec:	d9c00217 	ldw	r7,8(sp)
1021c2f0:	10001c26 	beq	r2,zero,1021c364 <__register_exitproc+0x10c>
1021c2f4:	80c05217 	ldw	r3,328(r16)
1021c2f8:	10000115 	stw	zero,4(r2)
1021c2fc:	02400044 	movi	r9,1
1021c300:	10c00015 	stw	r3,0(r2)
1021c304:	80805215 	stw	r2,328(r16)
1021c308:	10006215 	stw	zero,392(r2)
1021c30c:	10006315 	stw	zero,396(r2)
1021c310:	0007883a 	mov	r3,zero
1021c314:	883fdf26 	beq	r17,zero,1021c294 <__register_exitproc+0x3c>
1021c318:	18d1883a 	add	r8,r3,r3
1021c31c:	4211883a 	add	r8,r8,r8
1021c320:	1211883a 	add	r8,r2,r8
1021c324:	41802215 	stw	r6,136(r8)
1021c328:	01000044 	movi	r4,1
1021c32c:	11806217 	ldw	r6,392(r2)
1021c330:	20c8983a 	sll	r4,r4,r3
1021c334:	310cb03a 	or	r6,r6,r4
1021c338:	11806215 	stw	r6,392(r2)
1021c33c:	41c04215 	stw	r7,264(r8)
1021c340:	01800084 	movi	r6,2
1021c344:	89bfd31e 	bne	r17,r6,1021c294 <__register_exitproc+0x3c>
1021c348:	11806317 	ldw	r6,396(r2)
1021c34c:	3108b03a 	or	r4,r6,r4
1021c350:	11006315 	stw	r4,396(r2)
1021c354:	003fcf06 	br	1021c294 <__register_exitproc+0x3c>
1021c358:	80805304 	addi	r2,r16,332
1021c35c:	80805215 	stw	r2,328(r16)
1021c360:	003fc706 	br	1021c280 <__register_exitproc+0x28>
1021c364:	00bfffc4 	movi	r2,-1
1021c368:	003fd106 	br	1021c2b0 <__register_exitproc+0x58>

1021c36c <__call_exitprocs>:
1021c36c:	008408b4 	movhi	r2,4130
1021c370:	10bd0504 	addi	r2,r2,-3052
1021c374:	10800017 	ldw	r2,0(r2)
1021c378:	defff404 	addi	sp,sp,-48
1021c37c:	dd800815 	stw	r22,32(sp)
1021c380:	d8800015 	stw	r2,0(sp)
1021c384:	10805204 	addi	r2,r2,328
1021c388:	dd000615 	stw	r20,24(sp)
1021c38c:	dc800415 	stw	r18,16(sp)
1021c390:	dfc00b15 	stw	ra,44(sp)
1021c394:	df000a15 	stw	fp,40(sp)
1021c398:	ddc00915 	stw	r23,36(sp)
1021c39c:	dd400715 	stw	r21,28(sp)
1021c3a0:	dcc00515 	stw	r19,20(sp)
1021c3a4:	dc400315 	stw	r17,12(sp)
1021c3a8:	dc000215 	stw	r16,8(sp)
1021c3ac:	2025883a 	mov	r18,r4
1021c3b0:	2829883a 	mov	r20,r5
1021c3b4:	d8800115 	stw	r2,4(sp)
1021c3b8:	05bfffc4 	movi	r22,-1
1021c3bc:	d8800017 	ldw	r2,0(sp)
1021c3c0:	14c05217 	ldw	r19,328(r2)
1021c3c4:	98001d26 	beq	r19,zero,1021c43c <__call_exitprocs+0xd0>
1021c3c8:	dd400117 	ldw	r21,4(sp)
1021c3cc:	98800117 	ldw	r2,4(r19)
1021c3d0:	173fffc4 	addi	fp,r2,-1
1021c3d4:	e0000d16 	blt	fp,zero,1021c40c <__call_exitprocs+0xa0>
1021c3d8:	14000044 	addi	r16,r2,1
1021c3dc:	8421883a 	add	r16,r16,r16
1021c3e0:	8421883a 	add	r16,r16,r16
1021c3e4:	84402004 	addi	r17,r16,128
1021c3e8:	9c63883a 	add	r17,r19,r17
1021c3ec:	9c21883a 	add	r16,r19,r16
1021c3f0:	a0001e26 	beq	r20,zero,1021c46c <__call_exitprocs+0x100>
1021c3f4:	80804017 	ldw	r2,256(r16)
1021c3f8:	15001c26 	beq	r2,r20,1021c46c <__call_exitprocs+0x100>
1021c3fc:	e73fffc4 	addi	fp,fp,-1
1021c400:	843fff04 	addi	r16,r16,-4
1021c404:	8c7fff04 	addi	r17,r17,-4
1021c408:	e5bff91e 	bne	fp,r22,1021c3f0 <__call_exitprocs+0x84>
1021c40c:	00840834 	movhi	r2,4128
1021c410:	10896404 	addi	r2,r2,9616
1021c414:	10000926 	beq	r2,zero,1021c43c <__call_exitprocs+0xd0>
1021c418:	98800117 	ldw	r2,4(r19)
1021c41c:	1000311e 	bne	r2,zero,1021c4e4 <__call_exitprocs+0x178>
1021c420:	98800017 	ldw	r2,0(r19)
1021c424:	10003426 	beq	r2,zero,1021c4f8 <__call_exitprocs+0x18c>
1021c428:	9809883a 	mov	r4,r19
1021c42c:	a8800015 	stw	r2,0(r21)
1021c430:	02025900 	call	10202590 <free>
1021c434:	acc00017 	ldw	r19,0(r21)
1021c438:	983fe41e 	bne	r19,zero,1021c3cc <__call_exitprocs+0x60>
1021c43c:	dfc00b17 	ldw	ra,44(sp)
1021c440:	df000a17 	ldw	fp,40(sp)
1021c444:	ddc00917 	ldw	r23,36(sp)
1021c448:	dd800817 	ldw	r22,32(sp)
1021c44c:	dd400717 	ldw	r21,28(sp)
1021c450:	dd000617 	ldw	r20,24(sp)
1021c454:	dcc00517 	ldw	r19,20(sp)
1021c458:	dc800417 	ldw	r18,16(sp)
1021c45c:	dc400317 	ldw	r17,12(sp)
1021c460:	dc000217 	ldw	r16,8(sp)
1021c464:	dec00c04 	addi	sp,sp,48
1021c468:	f800283a 	ret
1021c46c:	98800117 	ldw	r2,4(r19)
1021c470:	80c00017 	ldw	r3,0(r16)
1021c474:	10bfffc4 	addi	r2,r2,-1
1021c478:	17001526 	beq	r2,fp,1021c4d0 <__call_exitprocs+0x164>
1021c47c:	80000015 	stw	zero,0(r16)
1021c480:	183fde26 	beq	r3,zero,1021c3fc <__call_exitprocs+0x90>
1021c484:	00800044 	movi	r2,1
1021c488:	1708983a 	sll	r4,r2,fp
1021c48c:	98806217 	ldw	r2,392(r19)
1021c490:	9dc00117 	ldw	r23,4(r19)
1021c494:	2084703a 	and	r2,r4,r2
1021c498:	1000061e 	bne	r2,zero,1021c4b4 <__call_exitprocs+0x148>
1021c49c:	183ee83a 	callr	r3
1021c4a0:	98800117 	ldw	r2,4(r19)
1021c4a4:	15ffc51e 	bne	r2,r23,1021c3bc <__call_exitprocs+0x50>
1021c4a8:	a8800017 	ldw	r2,0(r21)
1021c4ac:	14ffd326 	beq	r2,r19,1021c3fc <__call_exitprocs+0x90>
1021c4b0:	003fc206 	br	1021c3bc <__call_exitprocs+0x50>
1021c4b4:	98806317 	ldw	r2,396(r19)
1021c4b8:	2084703a 	and	r2,r4,r2
1021c4bc:	1000061e 	bne	r2,zero,1021c4d8 <__call_exitprocs+0x16c>
1021c4c0:	89400017 	ldw	r5,0(r17)
1021c4c4:	9009883a 	mov	r4,r18
1021c4c8:	183ee83a 	callr	r3
1021c4cc:	003ff406 	br	1021c4a0 <__call_exitprocs+0x134>
1021c4d0:	9f000115 	stw	fp,4(r19)
1021c4d4:	003fea06 	br	1021c480 <__call_exitprocs+0x114>
1021c4d8:	89000017 	ldw	r4,0(r17)
1021c4dc:	183ee83a 	callr	r3
1021c4e0:	003fef06 	br	1021c4a0 <__call_exitprocs+0x134>
1021c4e4:	98800017 	ldw	r2,0(r19)
1021c4e8:	982b883a 	mov	r21,r19
1021c4ec:	1027883a 	mov	r19,r2
1021c4f0:	983fb61e 	bne	r19,zero,1021c3cc <__call_exitprocs+0x60>
1021c4f4:	003fd106 	br	1021c43c <__call_exitprocs+0xd0>
1021c4f8:	0005883a 	mov	r2,zero
1021c4fc:	003ffa06 	br	1021c4e8 <__call_exitprocs+0x17c>

1021c500 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1021c500:	defffd04 	addi	sp,sp,-12
1021c504:	df000215 	stw	fp,8(sp)
1021c508:	df000204 	addi	fp,sp,8
1021c50c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1021c510:	0001883a 	nop
1021c514:	e0bfff17 	ldw	r2,-4(fp)
1021c518:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1021c51c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1021c520:	10000226 	beq	r2,zero,1021c52c <_exit+0x2c>
    ALT_SIM_FAIL();
1021c524:	002af070 	cmpltui	zero,zero,43969
1021c528:	00000106 	br	1021c530 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
1021c52c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1021c530:	003fff06 	br	1021c530 <_exit+0x30>
