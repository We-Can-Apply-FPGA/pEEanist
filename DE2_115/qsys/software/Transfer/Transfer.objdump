
Transfer.elf:     file format elf32-littlenios2
Transfer.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000220

Program Header:
    LOAD off    0x00001020 vaddr 0x10408020 paddr 0x08000000 align 2**12
         filesz 0x00000220 memsz 0x00000220 flags r-x
    LOAD off    0x00002220 vaddr 0x08000220 paddr 0x08000220 align 2**12
         filesz 0x00007274 memsz 0x00007274 flags r-x
    LOAD off    0x00009494 vaddr 0x08007494 paddr 0x080090ec align 2**12
         filesz 0x00001c58 memsz 0x00001c58 flags rw-
    LOAD off    0x0000bd44 vaddr 0x0800ad44 paddr 0x0800ad44 align 2**12
         filesz 0x00000000 memsz 0x0000054c flags rw-
    LOAD off    0x0000c000 vaddr 0x10408000 paddr 0x10408000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10408000  10408000  0000c000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  10408020  08000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006fa0  08000220  08000220  00002220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002d4  080071c0  080071c0  000091c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c58  08007494  080090ec  00009494  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000054c  0800ad44  0800ad44  0000bd44  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0800b290  0800b290  0000c020  2**0
                  CONTENTS
  7 .sram         00000000  10200000  10200000  0000c020  2**0
                  CONTENTS
  8 .onchip_memory 00000000  10408240  10408240  0000c020  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  0000c020  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000b68  00000000  00000000  0000c048  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00018ba9  00000000  00000000  0000cbb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00006c5c  00000000  00000000  00025759  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000076ec  00000000  00000000  0002c3b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001a40  00000000  00000000  00033aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002d57  00000000  00000000  000354e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00004903  00000000  00000000  0003823b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000060  00000000  00000000  0003cb40  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000005f0  00000000  00000000  0003cba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  0003fd90  2**0
                  CONTENTS, READONLY
 20 .cpu          00000003  00000000  00000000  0003fd93  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0003fd96  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0003fd97  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000004  00000000  00000000  0003fd98  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000004  00000000  00000000  0003fd9c  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000004  00000000  00000000  0003fda0  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000004  00000000  00000000  0003fda4  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001f  00000000  00000000  0003fda8  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0007c5d6  00000000  00000000  0003fdc7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10408000 l    d  .entry	00000000 .entry
10408020 l    d  .exceptions	00000000 .exceptions
08000220 l    d  .text	00000000 .text
080071c0 l    d  .rodata	00000000 .rodata
08007494 l    d  .rwdata	00000000 .rwdata
0800ad44 l    d  .bss	00000000 .bss
0800b290 l    d  .sdram	00000000 .sdram
10200000 l    d  .sram	00000000 .sram
10408240 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Transfer_bsp//obj/HAL/src/crt0.o
08000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
08007494 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 findfp.c
08000418 l     F .text	00000008 __fp_lock
08000420 l     F .text	00000008 __fp_unlock
08000434 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
08002e0c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
08002f38 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08003058 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08003084 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
08003184 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08003278 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800335c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08003538 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
080090d4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
08003794 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
080038dc l     F .text	00000038 alt_dev_reg
08007e68 l     O .rwdata	00001060 jtag
08008ec8 l     O .rwdata	00000120 lcd
08008fe8 l     O .rwdata	000000c4 rs232
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08003c04 l     F .text	00000204 altera_avalon_jtag_uart_irq
08003e08 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
080090d8 l     O .rwdata	00000004 colstart
08004428 l     F .text	000000b4 lcd_write_command
080044dc l     F .text	000000d4 lcd_write_data
080045b0 l     F .text	000000cc lcd_clear_screen
0800467c l     F .text	000001e8 lcd_repaint_screen
08004864 l     F .text	000000c8 lcd_scroll_up
0800492c l     F .text	000002a0 lcd_handle_escape
080050b4 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
080052f8 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
080055ac l     F .text	00000098 altera_avalon_uart_irq
08005644 l     F .text	000000e0 altera_avalon_uart_rxirq
08005724 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
080058bc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
08005ae8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08005e68 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08006314 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0800644c l     F .text	00000050 alt_get_errno
0800649c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
08007311 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0800ad7c g     O .bss	00000004 alt_instruction_exception_handler
08002db8 g     F .text	00000054 _isatty_r
08003480 g     F .text	00000078 alt_main
0800b190 g     O .bss	00000100 alt_irq
08002af0 g     F .text	0000005c _lseek_r
080090ec g       *ABS*	00000000 __flash_rwdata_start
0800b290 g       *ABS*	00000000 __alt_heap_start
10200000 g       *ABS*	00000000 __alt_mem_sram
080020dc g     F .text	0000005c __sseek
08000768 g     F .text	00000010 __sinit
0800ad44 g     O .bss	00000004 lcd
080005d0 g     F .text	00000068 __sfmoreglue
08003518 g     F .text	00000020 __malloc_unlock
080017c8 g     F .text	0000015c memmove
08000750 g     F .text	00000018 _cleanup
0800688c g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10408000 g     F .entry	0000001c __reset
0800ad48 g     O .bss	00000004 edge_capture
08000000 g       *ABS*	00000000 __flash_exceptions_start
08002d60 g     F .text	00000058 _fstat_r
0800ad60 g     O .bss	00000004 errno
08002058 g     F .text	00000008 __seofread
0800ad68 g     O .bss	00000004 alt_argv
080110ac g       *ABS*	00000000 _gp
0800685c g     F .text	00000030 usleep
08007ce8 g     O .rwdata	00000180 alt_fd_list
08006a04 g     F .text	00000090 alt_find_dev
08001690 g     F .text	00000138 memcpy
08000428 g     F .text	0000000c _cleanup_r
080063d4 g     F .text	00000078 alt_io_redirect
080071c0 g       *ABS*	00000000 __DTOR_END__
08006ce8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08004004 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
08002f28 g     F .text	00000008 .hidden __udivsi3
080031d4 g     F .text	000000a4 isatty
08006c5c g     F .text	0000008c alt_icache_flush
0800ad5c g     O .bss	00000004 __malloc_top_pad
080007b8 g     F .text	000004c0 __sfvwrite_r
08001fb0 g     F .text	00000054 _sbrk_r
08002d04 g     F .text	0000005c _read_r
080090cc g     O .rwdata	00000004 alt_max_fd
08002344 g     F .text	000000f0 _fclose_r
080026ac g     F .text	00000030 fflush
0800ad58 g     O .bss	00000004 __malloc_max_sbrked_mem
080033ac g     F .text	000000d4 lseek
080090ac g     O .rwdata	00000004 _global_impure_ptr
08001a48 g     F .text	00000568 _realloc_r
0800b290 g       *ABS*	00000000 __bss_end
08006224 g     F .text	000000f0 alt_iic_isr_register
08006758 g     F .text	00000104 alt_tick
08005504 g     F .text	000000a8 altera_avalon_uart_init
08000788 g     F .text	00000018 __fp_lock_all
0800ad4c g     O .bss	00000004 rs232t
080061d8 g     F .text	0000004c alt_ic_irq_enabled
080066c0 g     F .text	00000098 alt_alarm_stop
0800ad70 g     O .bss	00000004 alt_irq_active
104080fc g     F .exceptions	000000d0 alt_irq_handler
08007cc0 g     O .rwdata	00000028 alt_dev_null
08005e24 g     F .text	00000044 alt_dcache_flush_all
080090ec g       *ABS*	00000000 __ram_rwdata_end
10408000 g       *ABS*	00000000 __alt_mem_onchip_memory
080090c4 g     O .rwdata	00000008 alt_dev_list
080037e4 g     F .text	000000f8 write
08007494 g       *ABS*	00000000 __ram_rodata_end
080030d4 g     F .text	000000b0 fstat
08002f30 g     F .text	00000008 .hidden __umodsi3
0800b290 g       *ABS*	00000000 end
08004bcc g     F .text	000004e8 altera_avalon_lcd_16207_write
08005b38 g     F .text	000001ac altera_avalon_uart_write
08003b40 g     F .text	000000c4 altera_avalon_jtag_uart_init
104081cc g     F .exceptions	00000074 alt_instruction_exception_entry
080071c0 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0800536c g     F .text	00000088 alt_avalon_timer_sc_init
08005454 g     F .text	00000060 altera_avalon_uart_write_fd
080054b4 g     F .text	00000050 altera_avalon_uart_close_fd
08004210 g     F .text	00000218 altera_avalon_jtag_uart_write
08000778 g     F .text	00000004 __sfp_lock_acquire
080015a8 g     F .text	000000e8 memchr
08002800 g     F .text	000002f0 _free_r
08006ff8 g     F .text	00000194 __call_exitprocs
080090b4 g     O .rwdata	00000004 __malloc_sbrk_base
08000220 g     F .text	0000004c _start
0800ad74 g     O .bss	00000004 _alt_tick_rate
0800ad78 g     O .bss	00000004 _alt_nticks
08003588 g     F .text	000000fc read
08003948 g     F .text	00000094 alt_sys_init
08006ee4 g     F .text	00000114 __register_exitproc
0800ada8 g     O .bss	000003e8 buffer
08003eb0 g     F .text	00000068 altera_avalon_jtag_uart_close
08007494 g       *ABS*	00000000 __ram_rwdata_start
080071c0 g       *ABS*	00000000 __ram_rodata_start
0800ad80 g     O .bss	00000028 __malloc_current_mallinfo
080039dc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08006ba8 g     F .text	000000b4 alt_get_fd
080068ac g     F .text	00000158 alt_busy_sleep
080022f0 g     F .text	00000054 _close_r
08006dd0 g     F .text	0000007c memcmp
08003a9c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0800b290 g       *ABS*	00000000 __alt_stack_base
08003aec g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0800030c g     F .text	000000cc _fwrite_r
0800219c g     F .text	00000154 __swsetup_r
08000638 g     F .text	00000118 __sfp
080078b8 g     O .rwdata	00000408 __malloc_av_
08000784 g     F .text	00000004 __sinit_lock_release
08002004 g     F .text	00000054 __sread
08006a94 g     F .text	00000114 alt_find_file
08005eb8 g     F .text	000000a4 alt_dev_llist_insert
080034f8 g     F .text	00000020 __malloc_lock
080036e4 g     F .text	000000b0 sbrk
08002650 g     F .text	0000005c _fflush_r
0800ad44 g       *ABS*	00000000 __bss_start
08001924 g     F .text	00000124 memset
080002b8 g     F .text	00000054 main
0800ad6c g     O .bss	00000004 alt_envp
0800ad54 g     O .bss	00000004 __malloc_max_total_mem
08003a3c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08005160 g     F .text	00000138 altera_avalon_lcd_16207_init
08002138 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
08002434 g     F .text	00000014 fclose
08000e00 g     F .text	000007a8 _malloc_r
080090d0 g     O .rwdata	00000004 alt_errno
08000c78 g     F .text	000000c4 _fwalk
08002e78 g     F .text	00000054 .hidden __divsi3
080026dc g     F .text	00000124 _malloc_trim_r
080071c0 g       *ABS*	00000000 __CTOR_END__
080071c0 g       *ABS*	00000000 __flash_rodata_start
080071c0 g       *ABS*	00000000 __DTOR_LIST__
08003914 g     F .text	00000034 alt_irq_init
08003684 g     F .text	00000060 alt_release_fd
08006d84 g     F .text	00000014 atexit
08002140 g     F .text	0000005c _write_r
080090b0 g     O .rwdata	00000004 _impure_ptr
0800ad64 g     O .bss	00000004 alt_argc
08002448 g     F .text	00000208 __sflush_r
08005fb8 g     F .text	0000005c _do_dtors
10408020 g       .exceptions	00000000 alt_irq_entry
080007a0 g     F .text	00000018 __fp_unlock_all
08005298 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
080090bc g     O .rwdata	00000008 alt_fs_list
10408020 g       *ABS*	00000000 __ram_exceptions_start
08006044 g     F .text	00000050 alt_ic_isr_register
080003d8 g     F .text	00000040 fwrite
080090ec g       *ABS*	00000000 _edata
080053f4 g     F .text	00000060 altera_avalon_uart_read_fd
0800b290 g       *ABS*	00000000 _end
10408240 g       *ABS*	00000000 __ram_exceptions_end
08003f18 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
08006134 g     F .text	000000a4 alt_ic_irq_disable
08002060 g     F .text	0000007c __swrite
080090b8 g     O .rwdata	00000004 __malloc_trim_threshold
08006d98 g     F .text	00000038 exit
08000d3c g     F .text	000000c4 _fwalk_reent
08002ecc g     F .text	0000005c .hidden __modsi3
080090e8 g     O .rwdata	00000004 __ctype_ptr__
10000000 g       *ABS*	00000000 __alt_data_end
10408020 g     F .exceptions	00000000 alt_exception
0800077c g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
08007210 g     O .rodata	00000101 _ctype_
0800026c g     F .text	0000004c initial
08005868 g     F .text	00000054 altera_avalon_uart_close
0800718c g     F .text	00000034 _exit
08005ce4 g     F .text	00000140 alt_alarm_start
08002b4c g     F .text	000001b8 __smakebuf_r
08006e4c g     F .text	00000098 strlen
08006568 g     F .text	00000158 open
08006014 g     F .text	00000030 alt_icache_flush_all
080090dc g     O .rwdata	00000004 alt_priority_mask
0800ad50 g     O .bss	00000004 rs232r
08006094 g     F .text	000000a0 alt_ic_irq_enable
0800590c g     F .text	000001dc altera_avalon_uart_read
080090e0 g     O .rwdata	00000008 alt_alarm_list
08005f5c g     F .text	0000005c _do_ctors
08002f88 g     F .text	000000d0 close
080032dc g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
08000780 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

10408000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10408000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10408004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10408008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1040800c:	00bffd16 	blt	zero,r2,10408004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10408010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
10408014:	08408814 	ori	at,at,544
    jmp r1
10408018:	0800683a 	jmp	at
1040801c:	00000000 	call	10000000 <__alt_data_end>

Disassembly of section .exceptions:

10408020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10408020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10408024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10408028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1040802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10408030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10408034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10408038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1040803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10408040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10408044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10408048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1040804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10408050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10408054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10408058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1040805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10408060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10408064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10408068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1040806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10408070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10408074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10408078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1040807c:	10000326 	beq	r2,zero,1040808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10408080:	20000226 	beq	r4,zero,1040808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10408084:	04080fc0 	call	104080fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10408088:	00000706 	br	104080a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1040808c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10408090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10408094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10408098:	04081cc0 	call	104081cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1040809c:	1000021e 	bne	r2,zero,104080a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
104080a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
104080a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
104080a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
104080ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
104080b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
104080b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
104080b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
104080bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
104080c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
104080c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
104080c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
104080cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
104080d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
104080d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
104080d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
104080dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
104080e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
104080e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
104080e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
104080ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
104080f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
104080f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
104080f8:	ef80083a 	eret

104080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
104080fc:	defff904 	addi	sp,sp,-28
10408100:	dfc00615 	stw	ra,24(sp)
10408104:	df000515 	stw	fp,20(sp)
10408108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1040810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10408110:	0005313a 	rdctl	r2,ipending
10408114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10408118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1040811c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10408120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10408124:	00800044 	movi	r2,1
10408128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1040812c:	e0fffb17 	ldw	r3,-20(fp)
10408130:	e0bffc17 	ldw	r2,-16(fp)
10408134:	1884703a 	and	r2,r3,r2
10408138:	10001426 	beq	r2,zero,1040818c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1040813c:	00820074 	movhi	r2,2049
10408140:	10ac6404 	addi	r2,r2,-20080
10408144:	e0fffd17 	ldw	r3,-12(fp)
10408148:	180690fa 	slli	r3,r3,3
1040814c:	10c5883a 	add	r2,r2,r3
10408150:	10c00017 	ldw	r3,0(r2)
10408154:	00820074 	movhi	r2,2049
10408158:	10ac6404 	addi	r2,r2,-20080
1040815c:	e13ffd17 	ldw	r4,-12(fp)
10408160:	200890fa 	slli	r4,r4,3
10408164:	21000104 	addi	r4,r4,4
10408168:	1105883a 	add	r2,r2,r4
1040816c:	10800017 	ldw	r2,0(r2)
10408170:	1009883a 	mov	r4,r2
10408174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10408178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1040817c:	0005313a 	rdctl	r2,ipending
10408180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10408184:	e0bfff17 	ldw	r2,-4(fp)
10408188:	00000706 	br	104081a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1040818c:	e0bffc17 	ldw	r2,-16(fp)
10408190:	1085883a 	add	r2,r2,r2
10408194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10408198:	e0bffd17 	ldw	r2,-12(fp)
1040819c:	10800044 	addi	r2,r2,1
104081a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
104081a4:	003fe106 	br	1040812c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
104081a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
104081ac:	e0bffb17 	ldw	r2,-20(fp)
104081b0:	103fdb1e 	bne	r2,zero,10408120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
104081b4:	0001883a 	nop
}
104081b8:	e037883a 	mov	sp,fp
104081bc:	dfc00117 	ldw	ra,4(sp)
104081c0:	df000017 	ldw	fp,0(sp)
104081c4:	dec00204 	addi	sp,sp,8
104081c8:	f800283a 	ret

104081cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
104081cc:	defffb04 	addi	sp,sp,-20
104081d0:	dfc00415 	stw	ra,16(sp)
104081d4:	df000315 	stw	fp,12(sp)
104081d8:	df000304 	addi	fp,sp,12
104081dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
104081e0:	000531fa 	rdctl	r2,exception
104081e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
104081e8:	e0bffd17 	ldw	r2,-12(fp)
104081ec:	10801f0c 	andi	r2,r2,124
104081f0:	1004d0ba 	srli	r2,r2,2
104081f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
104081f8:	0005333a 	rdctl	r2,badaddr
104081fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
10408200:	d0a73417 	ldw	r2,-25392(gp)
10408204:	10000726 	beq	r2,zero,10408224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
10408208:	d0a73417 	ldw	r2,-25392(gp)
1040820c:	e0fffd17 	ldw	r3,-12(fp)
10408210:	1809883a 	mov	r4,r3
10408214:	e17fff17 	ldw	r5,-4(fp)
10408218:	e1bffe17 	ldw	r6,-8(fp)
1040821c:	103ee83a 	callr	r2
10408220:	00000206 	br	1040822c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10408224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10408228:	0005883a 	mov	r2,zero
}
1040822c:	e037883a 	mov	sp,fp
10408230:	dfc00117 	ldw	ra,4(sp)
10408234:	df000017 	ldw	fp,0(sp)
10408238:	dec00204 	addi	sp,sp,8
1040823c:	f800283a 	ret

Disassembly of section .text:

08000220 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000220:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 8000224:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 8000228:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 800022c:	00bffd16 	blt	zero,r2,8000224 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000230:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 8000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000238:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 800023c:	d6842b14 	ori	gp,gp,4268
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000240:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8000244:	10ab5114 	ori	r2,r2,44356

    movhi r3, %hi(__bss_end)
 8000248:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 800024c:	18eca414 	ori	r3,r3,45712

    beq r2, r3, 1f
 8000250:	10c00326 	beq	r2,r3,8000260 <_start+0x40>

0:
    stw zero, (r2)
 8000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800025c:	10fffd36 	bltu	r2,r3,8000254 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000260:	80032dc0 	call	80032dc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000264:	80034800 	call	8003480 <alt_main>

08000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000268:	003fff06 	br	8000268 <alt_after_alt_main>

0800026c <initial>:

	IOWR(FFT_START_BASE, 2, 1);
	IOWR(FFT_START_BASE, 3, 0);
}*/

void initial() {
 800026c:	defffe04 	addi	sp,sp,-8
 8000270:	dfc00115 	stw	ra,4(sp)
 8000274:	df000015 	stw	fp,0(sp)
 8000278:	d839883a 	mov	fp,sp
	fprintf(stderr,"TEST");
 800027c:	00820074 	movhi	r2,2049
 8000280:	10a42c04 	addi	r2,r2,-28496
 8000284:	10800017 	ldw	r2,0(r2)
 8000288:	10800317 	ldw	r2,12(r2)
 800028c:	01020034 	movhi	r4,2048
 8000290:	211c7004 	addi	r4,r4,29120
 8000294:	01400044 	movi	r5,1
 8000298:	01800104 	movi	r6,4
 800029c:	100f883a 	mov	r7,r2
 80002a0:	80003d80 	call	80003d8 <fwrite>
	if (!rs232r) fprintf(stderr, "rs232r failed\n");
	void* edge_capture_ptr = (void*) &edge_capture;
	IOWR(FFT_START_BASE, 3, 0);
	IOWR(FFT_START_BASE, 2, 1);
	alt_irq_register(FFT_START_IRQ, edge_capture_ptr, fft_interrupts);*/
}
 80002a4:	e037883a 	mov	sp,fp
 80002a8:	dfc00117 	ldw	ra,4(sp)
 80002ac:	df000017 	ldw	fp,0(sp)
 80002b0:	dec00204 	addi	sp,sp,8
 80002b4:	f800283a 	ret

080002b8 <main>:

//int tmp = IORD(PIO_INPUT_BASE, 0);
//IOWR(PIO_OUTPUT_BASE, 0, tmp);

int main(){
 80002b8:	defffe04 	addi	sp,sp,-8
 80002bc:	dfc00115 	stw	ra,4(sp)
 80002c0:	df000015 	stw	fp,0(sp)
 80002c4:	d839883a 	mov	fp,sp
	fprintf(stderr,"TEST1");
 80002c8:	00820074 	movhi	r2,2049
 80002cc:	10a42c04 	addi	r2,r2,-28496
 80002d0:	10800017 	ldw	r2,0(r2)
 80002d4:	10800317 	ldw	r2,12(r2)
 80002d8:	01020034 	movhi	r4,2048
 80002dc:	211c7204 	addi	r4,r4,29128
 80002e0:	01400044 	movi	r5,1
 80002e4:	01800144 	movi	r6,5
 80002e8:	100f883a 	mov	r7,r2
 80002ec:	80003d80 	call	80003d8 <fwrite>
	initial();
 80002f0:	800026c0 	call	800026c <initial>
		int start = IORD(FFT_START_BASE, 0);
		int cnt = IORD(FFT_CNT_BASE, 0);
		fprintf(stderr, "%d %d %d %d\n", real, img, start, cnt);
	}
	fprintf(stderr, "start%d %d\n", IORD(FFT_START_BASE, 2), IORD(FFT_START_BASE, 3));*/
	return 0;
 80002f4:	0005883a 	mov	r2,zero
}
 80002f8:	e037883a 	mov	sp,fp
 80002fc:	dfc00117 	ldw	ra,4(sp)
 8000300:	df000017 	ldw	fp,0(sp)
 8000304:	dec00204 	addi	sp,sp,8
 8000308:	f800283a 	ret

0800030c <_fwrite_r>:
 800030c:	defff504 	addi	sp,sp,-44
 8000310:	dcc00815 	stw	r19,32(sp)
 8000314:	39a7383a 	mul	r19,r7,r6
 8000318:	d8800304 	addi	r2,sp,12
 800031c:	d8800015 	stw	r2,0(sp)
 8000320:	00800044 	movi	r2,1
 8000324:	dd000915 	stw	r20,36(sp)
 8000328:	dc800715 	stw	r18,28(sp)
 800032c:	dc400615 	stw	r17,24(sp)
 8000330:	d9400315 	stw	r5,12(sp)
 8000334:	dfc00a15 	stw	ra,40(sp)
 8000338:	dcc00415 	stw	r19,16(sp)
 800033c:	dcc00215 	stw	r19,8(sp)
 8000340:	d8800115 	stw	r2,4(sp)
 8000344:	3029883a 	mov	r20,r6
 8000348:	3823883a 	mov	r17,r7
 800034c:	2025883a 	mov	r18,r4
 8000350:	d9400b17 	ldw	r5,44(sp)
 8000354:	20000226 	beq	r4,zero,8000360 <_fwrite_r+0x54>
 8000358:	20800e17 	ldw	r2,56(r4)
 800035c:	10001a26 	beq	r2,zero,80003c8 <_fwrite_r+0xbc>
 8000360:	2880030b 	ldhu	r2,12(r5)
 8000364:	10c8000c 	andi	r3,r2,8192
 8000368:	1800061e 	bne	r3,zero,8000384 <_fwrite_r+0x78>
 800036c:	29001917 	ldw	r4,100(r5)
 8000370:	00f7ffc4 	movi	r3,-8193
 8000374:	10880014 	ori	r2,r2,8192
 8000378:	20c6703a 	and	r3,r4,r3
 800037c:	2880030d 	sth	r2,12(r5)
 8000380:	28c01915 	stw	r3,100(r5)
 8000384:	9009883a 	mov	r4,r18
 8000388:	d80d883a 	mov	r6,sp
 800038c:	80007b80 	call	80007b8 <__sfvwrite_r>
 8000390:	10000b26 	beq	r2,zero,80003c0 <_fwrite_r+0xb4>
 8000394:	d9000217 	ldw	r4,8(sp)
 8000398:	a00b883a 	mov	r5,r20
 800039c:	9909c83a 	sub	r4,r19,r4
 80003a0:	8002f280 	call	8002f28 <__udivsi3>
 80003a4:	dfc00a17 	ldw	ra,40(sp)
 80003a8:	dd000917 	ldw	r20,36(sp)
 80003ac:	dcc00817 	ldw	r19,32(sp)
 80003b0:	dc800717 	ldw	r18,28(sp)
 80003b4:	dc400617 	ldw	r17,24(sp)
 80003b8:	dec00b04 	addi	sp,sp,44
 80003bc:	f800283a 	ret
 80003c0:	8805883a 	mov	r2,r17
 80003c4:	003ff706 	br	80003a4 <_fwrite_r+0x98>
 80003c8:	d9400515 	stw	r5,20(sp)
 80003cc:	80007680 	call	8000768 <__sinit>
 80003d0:	d9400517 	ldw	r5,20(sp)
 80003d4:	003fe206 	br	8000360 <_fwrite_r+0x54>

080003d8 <fwrite>:
 80003d8:	00820074 	movhi	r2,2049
 80003dc:	10a42c04 	addi	r2,r2,-28496
 80003e0:	2011883a 	mov	r8,r4
 80003e4:	11000017 	ldw	r4,0(r2)
 80003e8:	defffe04 	addi	sp,sp,-8
 80003ec:	2807883a 	mov	r3,r5
 80003f0:	3005883a 	mov	r2,r6
 80003f4:	d9c00015 	stw	r7,0(sp)
 80003f8:	400b883a 	mov	r5,r8
 80003fc:	180d883a 	mov	r6,r3
 8000400:	100f883a 	mov	r7,r2
 8000404:	dfc00115 	stw	ra,4(sp)
 8000408:	800030c0 	call	800030c <_fwrite_r>
 800040c:	dfc00117 	ldw	ra,4(sp)
 8000410:	dec00204 	addi	sp,sp,8
 8000414:	f800283a 	ret

08000418 <__fp_lock>:
 8000418:	0005883a 	mov	r2,zero
 800041c:	f800283a 	ret

08000420 <__fp_unlock>:
 8000420:	0005883a 	mov	r2,zero
 8000424:	f800283a 	ret

08000428 <_cleanup_r>:
 8000428:	01420034 	movhi	r5,2048
 800042c:	2948d104 	addi	r5,r5,9028
 8000430:	8000d3c1 	jmpi	8000d3c <_fwalk_reent>

08000434 <__sinit.part.1>:
 8000434:	defff704 	addi	sp,sp,-36
 8000438:	00c20034 	movhi	r3,2048
 800043c:	dfc00815 	stw	ra,32(sp)
 8000440:	ddc00715 	stw	r23,28(sp)
 8000444:	dd800615 	stw	r22,24(sp)
 8000448:	dd400515 	stw	r21,20(sp)
 800044c:	dd000415 	stw	r20,16(sp)
 8000450:	dcc00315 	stw	r19,12(sp)
 8000454:	dc800215 	stw	r18,8(sp)
 8000458:	dc400115 	stw	r17,4(sp)
 800045c:	dc000015 	stw	r16,0(sp)
 8000460:	18c10a04 	addi	r3,r3,1064
 8000464:	24000117 	ldw	r16,4(r4)
 8000468:	20c00f15 	stw	r3,60(r4)
 800046c:	2080bb04 	addi	r2,r4,748
 8000470:	00c000c4 	movi	r3,3
 8000474:	20c0b915 	stw	r3,740(r4)
 8000478:	2080ba15 	stw	r2,744(r4)
 800047c:	2000b815 	stw	zero,736(r4)
 8000480:	05c00204 	movi	r23,8
 8000484:	00800104 	movi	r2,4
 8000488:	2025883a 	mov	r18,r4
 800048c:	b80d883a 	mov	r6,r23
 8000490:	81001704 	addi	r4,r16,92
 8000494:	000b883a 	mov	r5,zero
 8000498:	80000015 	stw	zero,0(r16)
 800049c:	80000115 	stw	zero,4(r16)
 80004a0:	80000215 	stw	zero,8(r16)
 80004a4:	8080030d 	sth	r2,12(r16)
 80004a8:	80001915 	stw	zero,100(r16)
 80004ac:	8000038d 	sth	zero,14(r16)
 80004b0:	80000415 	stw	zero,16(r16)
 80004b4:	80000515 	stw	zero,20(r16)
 80004b8:	80000615 	stw	zero,24(r16)
 80004bc:	80019240 	call	8001924 <memset>
 80004c0:	05820034 	movhi	r22,2048
 80004c4:	94400217 	ldw	r17,8(r18)
 80004c8:	05420034 	movhi	r21,2048
 80004cc:	05020034 	movhi	r20,2048
 80004d0:	04c20034 	movhi	r19,2048
 80004d4:	b5880104 	addi	r22,r22,8196
 80004d8:	ad481804 	addi	r21,r21,8288
 80004dc:	a5083704 	addi	r20,r20,8412
 80004e0:	9cc84e04 	addi	r19,r19,8504
 80004e4:	85800815 	stw	r22,32(r16)
 80004e8:	85400915 	stw	r21,36(r16)
 80004ec:	85000a15 	stw	r20,40(r16)
 80004f0:	84c00b15 	stw	r19,44(r16)
 80004f4:	84000715 	stw	r16,28(r16)
 80004f8:	00800284 	movi	r2,10
 80004fc:	8880030d 	sth	r2,12(r17)
 8000500:	00800044 	movi	r2,1
 8000504:	89001704 	addi	r4,r17,92
 8000508:	b80d883a 	mov	r6,r23
 800050c:	000b883a 	mov	r5,zero
 8000510:	88000015 	stw	zero,0(r17)
 8000514:	88000115 	stw	zero,4(r17)
 8000518:	88000215 	stw	zero,8(r17)
 800051c:	88001915 	stw	zero,100(r17)
 8000520:	8880038d 	sth	r2,14(r17)
 8000524:	88000415 	stw	zero,16(r17)
 8000528:	88000515 	stw	zero,20(r17)
 800052c:	88000615 	stw	zero,24(r17)
 8000530:	80019240 	call	8001924 <memset>
 8000534:	94000317 	ldw	r16,12(r18)
 8000538:	00800484 	movi	r2,18
 800053c:	8c400715 	stw	r17,28(r17)
 8000540:	8d800815 	stw	r22,32(r17)
 8000544:	8d400915 	stw	r21,36(r17)
 8000548:	8d000a15 	stw	r20,40(r17)
 800054c:	8cc00b15 	stw	r19,44(r17)
 8000550:	8080030d 	sth	r2,12(r16)
 8000554:	00800084 	movi	r2,2
 8000558:	80000015 	stw	zero,0(r16)
 800055c:	80000115 	stw	zero,4(r16)
 8000560:	80000215 	stw	zero,8(r16)
 8000564:	80001915 	stw	zero,100(r16)
 8000568:	8080038d 	sth	r2,14(r16)
 800056c:	80000415 	stw	zero,16(r16)
 8000570:	80000515 	stw	zero,20(r16)
 8000574:	80000615 	stw	zero,24(r16)
 8000578:	81001704 	addi	r4,r16,92
 800057c:	000b883a 	mov	r5,zero
 8000580:	b80d883a 	mov	r6,r23
 8000584:	80019240 	call	8001924 <memset>
 8000588:	00800044 	movi	r2,1
 800058c:	84000715 	stw	r16,28(r16)
 8000590:	85800815 	stw	r22,32(r16)
 8000594:	85400915 	stw	r21,36(r16)
 8000598:	85000a15 	stw	r20,40(r16)
 800059c:	84c00b15 	stw	r19,44(r16)
 80005a0:	90800e15 	stw	r2,56(r18)
 80005a4:	dfc00817 	ldw	ra,32(sp)
 80005a8:	ddc00717 	ldw	r23,28(sp)
 80005ac:	dd800617 	ldw	r22,24(sp)
 80005b0:	dd400517 	ldw	r21,20(sp)
 80005b4:	dd000417 	ldw	r20,16(sp)
 80005b8:	dcc00317 	ldw	r19,12(sp)
 80005bc:	dc800217 	ldw	r18,8(sp)
 80005c0:	dc400117 	ldw	r17,4(sp)
 80005c4:	dc000017 	ldw	r16,0(sp)
 80005c8:	dec00904 	addi	sp,sp,36
 80005cc:	f800283a 	ret

080005d0 <__sfmoreglue>:
 80005d0:	defffc04 	addi	sp,sp,-16
 80005d4:	dc400115 	stw	r17,4(sp)
 80005d8:	2c7fffc4 	addi	r17,r5,-1
 80005dc:	8c401a24 	muli	r17,r17,104
 80005e0:	dc800215 	stw	r18,8(sp)
 80005e4:	2825883a 	mov	r18,r5
 80005e8:	89401d04 	addi	r5,r17,116
 80005ec:	dc000015 	stw	r16,0(sp)
 80005f0:	dfc00315 	stw	ra,12(sp)
 80005f4:	8000e000 	call	8000e00 <_malloc_r>
 80005f8:	1021883a 	mov	r16,r2
 80005fc:	10000726 	beq	r2,zero,800061c <__sfmoreglue+0x4c>
 8000600:	11000304 	addi	r4,r2,12
 8000604:	10000015 	stw	zero,0(r2)
 8000608:	14800115 	stw	r18,4(r2)
 800060c:	11000215 	stw	r4,8(r2)
 8000610:	000b883a 	mov	r5,zero
 8000614:	89801a04 	addi	r6,r17,104
 8000618:	80019240 	call	8001924 <memset>
 800061c:	8005883a 	mov	r2,r16
 8000620:	dfc00317 	ldw	ra,12(sp)
 8000624:	dc800217 	ldw	r18,8(sp)
 8000628:	dc400117 	ldw	r17,4(sp)
 800062c:	dc000017 	ldw	r16,0(sp)
 8000630:	dec00404 	addi	sp,sp,16
 8000634:	f800283a 	ret

08000638 <__sfp>:
 8000638:	00820074 	movhi	r2,2049
 800063c:	defffb04 	addi	sp,sp,-20
 8000640:	10a42b04 	addi	r2,r2,-28500
 8000644:	dc800215 	stw	r18,8(sp)
 8000648:	14800017 	ldw	r18,0(r2)
 800064c:	dcc00315 	stw	r19,12(sp)
 8000650:	dfc00415 	stw	ra,16(sp)
 8000654:	90800e17 	ldw	r2,56(r18)
 8000658:	dc400115 	stw	r17,4(sp)
 800065c:	dc000015 	stw	r16,0(sp)
 8000660:	2027883a 	mov	r19,r4
 8000664:	1000021e 	bne	r2,zero,8000670 <__sfp+0x38>
 8000668:	9009883a 	mov	r4,r18
 800066c:	80004340 	call	8000434 <__sinit.part.1>
 8000670:	9480b804 	addi	r18,r18,736
 8000674:	047fffc4 	movi	r17,-1
 8000678:	91400117 	ldw	r5,4(r18)
 800067c:	94000217 	ldw	r16,8(r18)
 8000680:	297fffc4 	addi	r5,r5,-1
 8000684:	28000a16 	blt	r5,zero,80006b0 <__sfp+0x78>
 8000688:	8080030f 	ldh	r2,12(r16)
 800068c:	10000c26 	beq	r2,zero,80006c0 <__sfp+0x88>
 8000690:	80c01d04 	addi	r3,r16,116
 8000694:	00000206 	br	80006a0 <__sfp+0x68>
 8000698:	18bfe60f 	ldh	r2,-104(r3)
 800069c:	10000826 	beq	r2,zero,80006c0 <__sfp+0x88>
 80006a0:	297fffc4 	addi	r5,r5,-1
 80006a4:	1c3ffd04 	addi	r16,r3,-12
 80006a8:	18c01a04 	addi	r3,r3,104
 80006ac:	2c7ffa1e 	bne	r5,r17,8000698 <__sfp+0x60>
 80006b0:	90800017 	ldw	r2,0(r18)
 80006b4:	10001d26 	beq	r2,zero,800072c <__sfp+0xf4>
 80006b8:	1025883a 	mov	r18,r2
 80006bc:	003fee06 	br	8000678 <__sfp+0x40>
 80006c0:	00bfffc4 	movi	r2,-1
 80006c4:	8080038d 	sth	r2,14(r16)
 80006c8:	00800044 	movi	r2,1
 80006cc:	8080030d 	sth	r2,12(r16)
 80006d0:	80001915 	stw	zero,100(r16)
 80006d4:	80000015 	stw	zero,0(r16)
 80006d8:	80000215 	stw	zero,8(r16)
 80006dc:	80000115 	stw	zero,4(r16)
 80006e0:	80000415 	stw	zero,16(r16)
 80006e4:	80000515 	stw	zero,20(r16)
 80006e8:	80000615 	stw	zero,24(r16)
 80006ec:	81001704 	addi	r4,r16,92
 80006f0:	000b883a 	mov	r5,zero
 80006f4:	01800204 	movi	r6,8
 80006f8:	80019240 	call	8001924 <memset>
 80006fc:	8005883a 	mov	r2,r16
 8000700:	80000c15 	stw	zero,48(r16)
 8000704:	80000d15 	stw	zero,52(r16)
 8000708:	80001115 	stw	zero,68(r16)
 800070c:	80001215 	stw	zero,72(r16)
 8000710:	dfc00417 	ldw	ra,16(sp)
 8000714:	dcc00317 	ldw	r19,12(sp)
 8000718:	dc800217 	ldw	r18,8(sp)
 800071c:	dc400117 	ldw	r17,4(sp)
 8000720:	dc000017 	ldw	r16,0(sp)
 8000724:	dec00504 	addi	sp,sp,20
 8000728:	f800283a 	ret
 800072c:	9809883a 	mov	r4,r19
 8000730:	01400104 	movi	r5,4
 8000734:	80005d00 	call	80005d0 <__sfmoreglue>
 8000738:	90800015 	stw	r2,0(r18)
 800073c:	103fde1e 	bne	r2,zero,80006b8 <__sfp+0x80>
 8000740:	00800304 	movi	r2,12
 8000744:	98800015 	stw	r2,0(r19)
 8000748:	0005883a 	mov	r2,zero
 800074c:	003ff006 	br	8000710 <__sfp+0xd8>

08000750 <_cleanup>:
 8000750:	00820074 	movhi	r2,2049
 8000754:	10a42b04 	addi	r2,r2,-28500
 8000758:	11000017 	ldw	r4,0(r2)
 800075c:	01420034 	movhi	r5,2048
 8000760:	2948d104 	addi	r5,r5,9028
 8000764:	8000d3c1 	jmpi	8000d3c <_fwalk_reent>

08000768 <__sinit>:
 8000768:	20800e17 	ldw	r2,56(r4)
 800076c:	10000126 	beq	r2,zero,8000774 <__sinit+0xc>
 8000770:	f800283a 	ret
 8000774:	80004341 	jmpi	8000434 <__sinit.part.1>

08000778 <__sfp_lock_acquire>:
 8000778:	f800283a 	ret

0800077c <__sfp_lock_release>:
 800077c:	f800283a 	ret

08000780 <__sinit_lock_acquire>:
 8000780:	f800283a 	ret

08000784 <__sinit_lock_release>:
 8000784:	f800283a 	ret

08000788 <__fp_lock_all>:
 8000788:	00820074 	movhi	r2,2049
 800078c:	10a42c04 	addi	r2,r2,-28496
 8000790:	11000017 	ldw	r4,0(r2)
 8000794:	01420034 	movhi	r5,2048
 8000798:	29410604 	addi	r5,r5,1048
 800079c:	8000c781 	jmpi	8000c78 <_fwalk>

080007a0 <__fp_unlock_all>:
 80007a0:	00820074 	movhi	r2,2049
 80007a4:	10a42c04 	addi	r2,r2,-28496
 80007a8:	11000017 	ldw	r4,0(r2)
 80007ac:	01420034 	movhi	r5,2048
 80007b0:	29410804 	addi	r5,r5,1056
 80007b4:	8000c781 	jmpi	8000c78 <_fwalk>

080007b8 <__sfvwrite_r>:
 80007b8:	30800217 	ldw	r2,8(r6)
 80007bc:	10006726 	beq	r2,zero,800095c <__sfvwrite_r+0x1a4>
 80007c0:	defff404 	addi	sp,sp,-48
 80007c4:	dd000615 	stw	r20,24(sp)
 80007c8:	2029883a 	mov	r20,r4
 80007cc:	2900030b 	ldhu	r4,12(r5)
 80007d0:	ddc00915 	stw	r23,36(sp)
 80007d4:	dc000215 	stw	r16,8(sp)
 80007d8:	dfc00b15 	stw	ra,44(sp)
 80007dc:	df000a15 	stw	fp,40(sp)
 80007e0:	dd800815 	stw	r22,32(sp)
 80007e4:	dd400715 	stw	r21,28(sp)
 80007e8:	dcc00515 	stw	r19,20(sp)
 80007ec:	dc800415 	stw	r18,16(sp)
 80007f0:	dc400315 	stw	r17,12(sp)
 80007f4:	2080020c 	andi	r2,r4,8
 80007f8:	2821883a 	mov	r16,r5
 80007fc:	302f883a 	mov	r23,r6
 8000800:	10002726 	beq	r2,zero,80008a0 <__sfvwrite_r+0xe8>
 8000804:	28800417 	ldw	r2,16(r5)
 8000808:	10002526 	beq	r2,zero,80008a0 <__sfvwrite_r+0xe8>
 800080c:	2080008c 	andi	r2,r4,2
 8000810:	bc400017 	ldw	r17,0(r23)
 8000814:	10002a26 	beq	r2,zero,80008c0 <__sfvwrite_r+0x108>
 8000818:	05600034 	movhi	r21,32768
 800081c:	0027883a 	mov	r19,zero
 8000820:	0025883a 	mov	r18,zero
 8000824:	ad7f0004 	addi	r21,r21,-1024
 8000828:	980d883a 	mov	r6,r19
 800082c:	a009883a 	mov	r4,r20
 8000830:	90004626 	beq	r18,zero,800094c <__sfvwrite_r+0x194>
 8000834:	900f883a 	mov	r7,r18
 8000838:	81400717 	ldw	r5,28(r16)
 800083c:	ac80022e 	bgeu	r21,r18,8000848 <__sfvwrite_r+0x90>
 8000840:	01e00034 	movhi	r7,32768
 8000844:	39ff0004 	addi	r7,r7,-1024
 8000848:	80800917 	ldw	r2,36(r16)
 800084c:	103ee83a 	callr	r2
 8000850:	0080520e 	bge	zero,r2,800099c <__sfvwrite_r+0x1e4>
 8000854:	b8c00217 	ldw	r3,8(r23)
 8000858:	98a7883a 	add	r19,r19,r2
 800085c:	90a5c83a 	sub	r18,r18,r2
 8000860:	1885c83a 	sub	r2,r3,r2
 8000864:	b8800215 	stw	r2,8(r23)
 8000868:	103fef1e 	bne	r2,zero,8000828 <__sfvwrite_r+0x70>
 800086c:	0005883a 	mov	r2,zero
 8000870:	dfc00b17 	ldw	ra,44(sp)
 8000874:	df000a17 	ldw	fp,40(sp)
 8000878:	ddc00917 	ldw	r23,36(sp)
 800087c:	dd800817 	ldw	r22,32(sp)
 8000880:	dd400717 	ldw	r21,28(sp)
 8000884:	dd000617 	ldw	r20,24(sp)
 8000888:	dcc00517 	ldw	r19,20(sp)
 800088c:	dc800417 	ldw	r18,16(sp)
 8000890:	dc400317 	ldw	r17,12(sp)
 8000894:	dc000217 	ldw	r16,8(sp)
 8000898:	dec00c04 	addi	sp,sp,48
 800089c:	f800283a 	ret
 80008a0:	a009883a 	mov	r4,r20
 80008a4:	800b883a 	mov	r5,r16
 80008a8:	800219c0 	call	800219c <__swsetup_r>
 80008ac:	1000ec1e 	bne	r2,zero,8000c60 <__sfvwrite_r+0x4a8>
 80008b0:	8100030b 	ldhu	r4,12(r16)
 80008b4:	bc400017 	ldw	r17,0(r23)
 80008b8:	2080008c 	andi	r2,r4,2
 80008bc:	103fd61e 	bne	r2,zero,8000818 <__sfvwrite_r+0x60>
 80008c0:	2080004c 	andi	r2,r4,1
 80008c4:	10003a1e 	bne	r2,zero,80009b0 <__sfvwrite_r+0x1f8>
 80008c8:	0039883a 	mov	fp,zero
 80008cc:	0025883a 	mov	r18,zero
 80008d0:	90001a26 	beq	r18,zero,800093c <__sfvwrite_r+0x184>
 80008d4:	2080800c 	andi	r2,r4,512
 80008d8:	85800217 	ldw	r22,8(r16)
 80008dc:	10007626 	beq	r2,zero,8000ab8 <__sfvwrite_r+0x300>
 80008e0:	b027883a 	mov	r19,r22
 80008e4:	95809436 	bltu	r18,r22,8000b38 <__sfvwrite_r+0x380>
 80008e8:	2081200c 	andi	r2,r4,1152
 80008ec:	10009f1e 	bne	r2,zero,8000b6c <__sfvwrite_r+0x3b4>
 80008f0:	81000017 	ldw	r4,0(r16)
 80008f4:	e00b883a 	mov	r5,fp
 80008f8:	980d883a 	mov	r6,r19
 80008fc:	80017c80 	call	80017c8 <memmove>
 8000900:	81000217 	ldw	r4,8(r16)
 8000904:	81400017 	ldw	r5,0(r16)
 8000908:	9005883a 	mov	r2,r18
 800090c:	2587c83a 	sub	r3,r4,r22
 8000910:	2ce7883a 	add	r19,r5,r19
 8000914:	80c00215 	stw	r3,8(r16)
 8000918:	84c00015 	stw	r19,0(r16)
 800091c:	b8c00217 	ldw	r3,8(r23)
 8000920:	e0b9883a 	add	fp,fp,r2
 8000924:	90a5c83a 	sub	r18,r18,r2
 8000928:	1885c83a 	sub	r2,r3,r2
 800092c:	b8800215 	stw	r2,8(r23)
 8000930:	103fce26 	beq	r2,zero,800086c <__sfvwrite_r+0xb4>
 8000934:	8100030b 	ldhu	r4,12(r16)
 8000938:	903fe61e 	bne	r18,zero,80008d4 <__sfvwrite_r+0x11c>
 800093c:	8f000017 	ldw	fp,0(r17)
 8000940:	8c800117 	ldw	r18,4(r17)
 8000944:	8c400204 	addi	r17,r17,8
 8000948:	003fe106 	br	80008d0 <__sfvwrite_r+0x118>
 800094c:	8cc00017 	ldw	r19,0(r17)
 8000950:	8c800117 	ldw	r18,4(r17)
 8000954:	8c400204 	addi	r17,r17,8
 8000958:	003fb306 	br	8000828 <__sfvwrite_r+0x70>
 800095c:	0005883a 	mov	r2,zero
 8000960:	f800283a 	ret
 8000964:	00a00034 	movhi	r2,32768
 8000968:	10bfffc4 	addi	r2,r2,-1
 800096c:	9009883a 	mov	r4,r18
 8000970:	1480012e 	bgeu	r2,r18,8000978 <__sfvwrite_r+0x1c0>
 8000974:	1009883a 	mov	r4,r2
 8000978:	980b883a 	mov	r5,r19
 800097c:	8002e780 	call	8002e78 <__divsi3>
 8000980:	81400717 	ldw	r5,28(r16)
 8000984:	80c00917 	ldw	r3,36(r16)
 8000988:	988f383a 	mul	r7,r19,r2
 800098c:	a009883a 	mov	r4,r20
 8000990:	e00d883a 	mov	r6,fp
 8000994:	183ee83a 	callr	r3
 8000998:	00bfe016 	blt	zero,r2,800091c <__sfvwrite_r+0x164>
 800099c:	8080030b 	ldhu	r2,12(r16)
 80009a0:	10801014 	ori	r2,r2,64
 80009a4:	8080030d 	sth	r2,12(r16)
 80009a8:	00bfffc4 	movi	r2,-1
 80009ac:	003fb006 	br	8000870 <__sfvwrite_r+0xb8>
 80009b0:	0027883a 	mov	r19,zero
 80009b4:	0011883a 	mov	r8,zero
 80009b8:	0039883a 	mov	fp,zero
 80009bc:	0025883a 	mov	r18,zero
 80009c0:	90001f26 	beq	r18,zero,8000a40 <__sfvwrite_r+0x288>
 80009c4:	40006026 	beq	r8,zero,8000b48 <__sfvwrite_r+0x390>
 80009c8:	982b883a 	mov	r21,r19
 80009cc:	94c0012e 	bgeu	r18,r19,80009d4 <__sfvwrite_r+0x21c>
 80009d0:	902b883a 	mov	r21,r18
 80009d4:	81000017 	ldw	r4,0(r16)
 80009d8:	80800417 	ldw	r2,16(r16)
 80009dc:	a82d883a 	mov	r22,r21
 80009e0:	81800217 	ldw	r6,8(r16)
 80009e4:	81c00517 	ldw	r7,20(r16)
 80009e8:	1100022e 	bgeu	r2,r4,80009f4 <__sfvwrite_r+0x23c>
 80009ec:	31c7883a 	add	r3,r6,r7
 80009f0:	1d401816 	blt	r3,r21,8000a54 <__sfvwrite_r+0x29c>
 80009f4:	a9c04416 	blt	r21,r7,8000b08 <__sfvwrite_r+0x350>
 80009f8:	80800917 	ldw	r2,36(r16)
 80009fc:	81400717 	ldw	r5,28(r16)
 8000a00:	a009883a 	mov	r4,r20
 8000a04:	da000115 	stw	r8,4(sp)
 8000a08:	e00d883a 	mov	r6,fp
 8000a0c:	103ee83a 	callr	r2
 8000a10:	102d883a 	mov	r22,r2
 8000a14:	da000117 	ldw	r8,4(sp)
 8000a18:	00bfe00e 	bge	zero,r2,800099c <__sfvwrite_r+0x1e4>
 8000a1c:	9da7c83a 	sub	r19,r19,r22
 8000a20:	98001f26 	beq	r19,zero,8000aa0 <__sfvwrite_r+0x2e8>
 8000a24:	b8800217 	ldw	r2,8(r23)
 8000a28:	e5b9883a 	add	fp,fp,r22
 8000a2c:	95a5c83a 	sub	r18,r18,r22
 8000a30:	15adc83a 	sub	r22,r2,r22
 8000a34:	bd800215 	stw	r22,8(r23)
 8000a38:	b03f8c26 	beq	r22,zero,800086c <__sfvwrite_r+0xb4>
 8000a3c:	903fe11e 	bne	r18,zero,80009c4 <__sfvwrite_r+0x20c>
 8000a40:	8f000017 	ldw	fp,0(r17)
 8000a44:	8c800117 	ldw	r18,4(r17)
 8000a48:	0011883a 	mov	r8,zero
 8000a4c:	8c400204 	addi	r17,r17,8
 8000a50:	003fdb06 	br	80009c0 <__sfvwrite_r+0x208>
 8000a54:	180d883a 	mov	r6,r3
 8000a58:	e00b883a 	mov	r5,fp
 8000a5c:	da000115 	stw	r8,4(sp)
 8000a60:	d8c00015 	stw	r3,0(sp)
 8000a64:	80017c80 	call	80017c8 <memmove>
 8000a68:	d8c00017 	ldw	r3,0(sp)
 8000a6c:	80800017 	ldw	r2,0(r16)
 8000a70:	a009883a 	mov	r4,r20
 8000a74:	800b883a 	mov	r5,r16
 8000a78:	10c5883a 	add	r2,r2,r3
 8000a7c:	80800015 	stw	r2,0(r16)
 8000a80:	d8c00015 	stw	r3,0(sp)
 8000a84:	80026500 	call	8002650 <_fflush_r>
 8000a88:	d8c00017 	ldw	r3,0(sp)
 8000a8c:	da000117 	ldw	r8,4(sp)
 8000a90:	103fc21e 	bne	r2,zero,800099c <__sfvwrite_r+0x1e4>
 8000a94:	182d883a 	mov	r22,r3
 8000a98:	9da7c83a 	sub	r19,r19,r22
 8000a9c:	983fe11e 	bne	r19,zero,8000a24 <__sfvwrite_r+0x26c>
 8000aa0:	a009883a 	mov	r4,r20
 8000aa4:	800b883a 	mov	r5,r16
 8000aa8:	80026500 	call	8002650 <_fflush_r>
 8000aac:	103fbb1e 	bne	r2,zero,800099c <__sfvwrite_r+0x1e4>
 8000ab0:	0011883a 	mov	r8,zero
 8000ab4:	003fdb06 	br	8000a24 <__sfvwrite_r+0x26c>
 8000ab8:	81000017 	ldw	r4,0(r16)
 8000abc:	80800417 	ldw	r2,16(r16)
 8000ac0:	11000236 	bltu	r2,r4,8000acc <__sfvwrite_r+0x314>
 8000ac4:	84c00517 	ldw	r19,20(r16)
 8000ac8:	94ffa62e 	bgeu	r18,r19,8000964 <__sfvwrite_r+0x1ac>
 8000acc:	9027883a 	mov	r19,r18
 8000ad0:	b480012e 	bgeu	r22,r18,8000ad8 <__sfvwrite_r+0x320>
 8000ad4:	b027883a 	mov	r19,r22
 8000ad8:	e00b883a 	mov	r5,fp
 8000adc:	980d883a 	mov	r6,r19
 8000ae0:	80017c80 	call	80017c8 <memmove>
 8000ae4:	80800217 	ldw	r2,8(r16)
 8000ae8:	80c00017 	ldw	r3,0(r16)
 8000aec:	14c5c83a 	sub	r2,r2,r19
 8000af0:	1cc7883a 	add	r3,r3,r19
 8000af4:	80800215 	stw	r2,8(r16)
 8000af8:	80c00015 	stw	r3,0(r16)
 8000afc:	10004326 	beq	r2,zero,8000c0c <__sfvwrite_r+0x454>
 8000b00:	9805883a 	mov	r2,r19
 8000b04:	003f8506 	br	800091c <__sfvwrite_r+0x164>
 8000b08:	a80d883a 	mov	r6,r21
 8000b0c:	e00b883a 	mov	r5,fp
 8000b10:	da000115 	stw	r8,4(sp)
 8000b14:	80017c80 	call	80017c8 <memmove>
 8000b18:	80800217 	ldw	r2,8(r16)
 8000b1c:	80c00017 	ldw	r3,0(r16)
 8000b20:	da000117 	ldw	r8,4(sp)
 8000b24:	1545c83a 	sub	r2,r2,r21
 8000b28:	1d6b883a 	add	r21,r3,r21
 8000b2c:	80800215 	stw	r2,8(r16)
 8000b30:	85400015 	stw	r21,0(r16)
 8000b34:	003fb906 	br	8000a1c <__sfvwrite_r+0x264>
 8000b38:	81000017 	ldw	r4,0(r16)
 8000b3c:	902d883a 	mov	r22,r18
 8000b40:	9027883a 	mov	r19,r18
 8000b44:	003f6b06 	br	80008f4 <__sfvwrite_r+0x13c>
 8000b48:	e009883a 	mov	r4,fp
 8000b4c:	01400284 	movi	r5,10
 8000b50:	900d883a 	mov	r6,r18
 8000b54:	80015a80 	call	80015a8 <memchr>
 8000b58:	10003e26 	beq	r2,zero,8000c54 <__sfvwrite_r+0x49c>
 8000b5c:	10800044 	addi	r2,r2,1
 8000b60:	1727c83a 	sub	r19,r2,fp
 8000b64:	02000044 	movi	r8,1
 8000b68:	003f9706 	br	80009c8 <__sfvwrite_r+0x210>
 8000b6c:	80800517 	ldw	r2,20(r16)
 8000b70:	81400417 	ldw	r5,16(r16)
 8000b74:	80c00017 	ldw	r3,0(r16)
 8000b78:	10a7883a 	add	r19,r2,r2
 8000b7c:	9885883a 	add	r2,r19,r2
 8000b80:	1026d7fa 	srli	r19,r2,31
 8000b84:	196bc83a 	sub	r21,r3,r5
 8000b88:	a9800044 	addi	r6,r21,1
 8000b8c:	9885883a 	add	r2,r19,r2
 8000b90:	1027d07a 	srai	r19,r2,1
 8000b94:	3485883a 	add	r2,r6,r18
 8000b98:	980d883a 	mov	r6,r19
 8000b9c:	9880022e 	bgeu	r19,r2,8000ba8 <__sfvwrite_r+0x3f0>
 8000ba0:	1027883a 	mov	r19,r2
 8000ba4:	100d883a 	mov	r6,r2
 8000ba8:	2101000c 	andi	r4,r4,1024
 8000bac:	20001c26 	beq	r4,zero,8000c20 <__sfvwrite_r+0x468>
 8000bb0:	a009883a 	mov	r4,r20
 8000bb4:	300b883a 	mov	r5,r6
 8000bb8:	8000e000 	call	8000e00 <_malloc_r>
 8000bbc:	102d883a 	mov	r22,r2
 8000bc0:	10002926 	beq	r2,zero,8000c68 <__sfvwrite_r+0x4b0>
 8000bc4:	81400417 	ldw	r5,16(r16)
 8000bc8:	1009883a 	mov	r4,r2
 8000bcc:	a80d883a 	mov	r6,r21
 8000bd0:	80016900 	call	8001690 <memcpy>
 8000bd4:	8080030b 	ldhu	r2,12(r16)
 8000bd8:	00fedfc4 	movi	r3,-1153
 8000bdc:	10c4703a 	and	r2,r2,r3
 8000be0:	10802014 	ori	r2,r2,128
 8000be4:	8080030d 	sth	r2,12(r16)
 8000be8:	b549883a 	add	r4,r22,r21
 8000bec:	9d4bc83a 	sub	r5,r19,r21
 8000bf0:	85800415 	stw	r22,16(r16)
 8000bf4:	84c00515 	stw	r19,20(r16)
 8000bf8:	81000015 	stw	r4,0(r16)
 8000bfc:	902d883a 	mov	r22,r18
 8000c00:	81400215 	stw	r5,8(r16)
 8000c04:	9027883a 	mov	r19,r18
 8000c08:	003f3a06 	br	80008f4 <__sfvwrite_r+0x13c>
 8000c0c:	a009883a 	mov	r4,r20
 8000c10:	800b883a 	mov	r5,r16
 8000c14:	80026500 	call	8002650 <_fflush_r>
 8000c18:	103fb926 	beq	r2,zero,8000b00 <__sfvwrite_r+0x348>
 8000c1c:	003f5f06 	br	800099c <__sfvwrite_r+0x1e4>
 8000c20:	a009883a 	mov	r4,r20
 8000c24:	8001a480 	call	8001a48 <_realloc_r>
 8000c28:	102d883a 	mov	r22,r2
 8000c2c:	103fee1e 	bne	r2,zero,8000be8 <__sfvwrite_r+0x430>
 8000c30:	81400417 	ldw	r5,16(r16)
 8000c34:	a009883a 	mov	r4,r20
 8000c38:	80028000 	call	8002800 <_free_r>
 8000c3c:	8080030b 	ldhu	r2,12(r16)
 8000c40:	00ffdfc4 	movi	r3,-129
 8000c44:	1884703a 	and	r2,r3,r2
 8000c48:	00c00304 	movi	r3,12
 8000c4c:	a0c00015 	stw	r3,0(r20)
 8000c50:	003f5306 	br	80009a0 <__sfvwrite_r+0x1e8>
 8000c54:	94c00044 	addi	r19,r18,1
 8000c58:	02000044 	movi	r8,1
 8000c5c:	003f5a06 	br	80009c8 <__sfvwrite_r+0x210>
 8000c60:	00bfffc4 	movi	r2,-1
 8000c64:	003f0206 	br	8000870 <__sfvwrite_r+0xb8>
 8000c68:	00800304 	movi	r2,12
 8000c6c:	a0800015 	stw	r2,0(r20)
 8000c70:	8080030b 	ldhu	r2,12(r16)
 8000c74:	003f4a06 	br	80009a0 <__sfvwrite_r+0x1e8>

08000c78 <_fwalk>:
 8000c78:	defff704 	addi	sp,sp,-36
 8000c7c:	dd000415 	stw	r20,16(sp)
 8000c80:	dfc00815 	stw	ra,32(sp)
 8000c84:	ddc00715 	stw	r23,28(sp)
 8000c88:	dd800615 	stw	r22,24(sp)
 8000c8c:	dd400515 	stw	r21,20(sp)
 8000c90:	dcc00315 	stw	r19,12(sp)
 8000c94:	dc800215 	stw	r18,8(sp)
 8000c98:	dc400115 	stw	r17,4(sp)
 8000c9c:	dc000015 	stw	r16,0(sp)
 8000ca0:	2500b804 	addi	r20,r4,736
 8000ca4:	a0002326 	beq	r20,zero,8000d34 <_fwalk+0xbc>
 8000ca8:	282b883a 	mov	r21,r5
 8000cac:	002f883a 	mov	r23,zero
 8000cb0:	05800044 	movi	r22,1
 8000cb4:	04ffffc4 	movi	r19,-1
 8000cb8:	a4400117 	ldw	r17,4(r20)
 8000cbc:	a4800217 	ldw	r18,8(r20)
 8000cc0:	8c7fffc4 	addi	r17,r17,-1
 8000cc4:	88000d16 	blt	r17,zero,8000cfc <_fwalk+0x84>
 8000cc8:	94000304 	addi	r16,r18,12
 8000ccc:	94800384 	addi	r18,r18,14
 8000cd0:	80c0000b 	ldhu	r3,0(r16)
 8000cd4:	8c7fffc4 	addi	r17,r17,-1
 8000cd8:	813ffd04 	addi	r4,r16,-12
 8000cdc:	b0c0042e 	bgeu	r22,r3,8000cf0 <_fwalk+0x78>
 8000ce0:	90c0000f 	ldh	r3,0(r18)
 8000ce4:	1cc00226 	beq	r3,r19,8000cf0 <_fwalk+0x78>
 8000ce8:	a83ee83a 	callr	r21
 8000cec:	b8aeb03a 	or	r23,r23,r2
 8000cf0:	84001a04 	addi	r16,r16,104
 8000cf4:	94801a04 	addi	r18,r18,104
 8000cf8:	8cfff51e 	bne	r17,r19,8000cd0 <_fwalk+0x58>
 8000cfc:	a5000017 	ldw	r20,0(r20)
 8000d00:	a03fed1e 	bne	r20,zero,8000cb8 <_fwalk+0x40>
 8000d04:	b805883a 	mov	r2,r23
 8000d08:	dfc00817 	ldw	ra,32(sp)
 8000d0c:	ddc00717 	ldw	r23,28(sp)
 8000d10:	dd800617 	ldw	r22,24(sp)
 8000d14:	dd400517 	ldw	r21,20(sp)
 8000d18:	dd000417 	ldw	r20,16(sp)
 8000d1c:	dcc00317 	ldw	r19,12(sp)
 8000d20:	dc800217 	ldw	r18,8(sp)
 8000d24:	dc400117 	ldw	r17,4(sp)
 8000d28:	dc000017 	ldw	r16,0(sp)
 8000d2c:	dec00904 	addi	sp,sp,36
 8000d30:	f800283a 	ret
 8000d34:	002f883a 	mov	r23,zero
 8000d38:	003ff206 	br	8000d04 <_fwalk+0x8c>

08000d3c <_fwalk_reent>:
 8000d3c:	defff704 	addi	sp,sp,-36
 8000d40:	dd400515 	stw	r21,20(sp)
 8000d44:	dfc00815 	stw	ra,32(sp)
 8000d48:	ddc00715 	stw	r23,28(sp)
 8000d4c:	dd800615 	stw	r22,24(sp)
 8000d50:	dd000415 	stw	r20,16(sp)
 8000d54:	dcc00315 	stw	r19,12(sp)
 8000d58:	dc800215 	stw	r18,8(sp)
 8000d5c:	dc400115 	stw	r17,4(sp)
 8000d60:	dc000015 	stw	r16,0(sp)
 8000d64:	2540b804 	addi	r21,r4,736
 8000d68:	a8002326 	beq	r21,zero,8000df8 <_fwalk_reent+0xbc>
 8000d6c:	2829883a 	mov	r20,r5
 8000d70:	202d883a 	mov	r22,r4
 8000d74:	002f883a 	mov	r23,zero
 8000d78:	04c00044 	movi	r19,1
 8000d7c:	04bfffc4 	movi	r18,-1
 8000d80:	ac400117 	ldw	r17,4(r21)
 8000d84:	ac000217 	ldw	r16,8(r21)
 8000d88:	8c7fffc4 	addi	r17,r17,-1
 8000d8c:	88000c16 	blt	r17,zero,8000dc0 <_fwalk_reent+0x84>
 8000d90:	84000304 	addi	r16,r16,12
 8000d94:	80c0000b 	ldhu	r3,0(r16)
 8000d98:	8c7fffc4 	addi	r17,r17,-1
 8000d9c:	817ffd04 	addi	r5,r16,-12
 8000da0:	98c0052e 	bgeu	r19,r3,8000db8 <_fwalk_reent+0x7c>
 8000da4:	80c0008f 	ldh	r3,2(r16)
 8000da8:	b009883a 	mov	r4,r22
 8000dac:	1c800226 	beq	r3,r18,8000db8 <_fwalk_reent+0x7c>
 8000db0:	a03ee83a 	callr	r20
 8000db4:	b8aeb03a 	or	r23,r23,r2
 8000db8:	84001a04 	addi	r16,r16,104
 8000dbc:	8cbff51e 	bne	r17,r18,8000d94 <_fwalk_reent+0x58>
 8000dc0:	ad400017 	ldw	r21,0(r21)
 8000dc4:	a83fee1e 	bne	r21,zero,8000d80 <_fwalk_reent+0x44>
 8000dc8:	b805883a 	mov	r2,r23
 8000dcc:	dfc00817 	ldw	ra,32(sp)
 8000dd0:	ddc00717 	ldw	r23,28(sp)
 8000dd4:	dd800617 	ldw	r22,24(sp)
 8000dd8:	dd400517 	ldw	r21,20(sp)
 8000ddc:	dd000417 	ldw	r20,16(sp)
 8000de0:	dcc00317 	ldw	r19,12(sp)
 8000de4:	dc800217 	ldw	r18,8(sp)
 8000de8:	dc400117 	ldw	r17,4(sp)
 8000dec:	dc000017 	ldw	r16,0(sp)
 8000df0:	dec00904 	addi	sp,sp,36
 8000df4:	f800283a 	ret
 8000df8:	002f883a 	mov	r23,zero
 8000dfc:	003ff206 	br	8000dc8 <_fwalk_reent+0x8c>

08000e00 <_malloc_r>:
 8000e00:	defff504 	addi	sp,sp,-44
 8000e04:	dc800315 	stw	r18,12(sp)
 8000e08:	dfc00a15 	stw	ra,40(sp)
 8000e0c:	df000915 	stw	fp,36(sp)
 8000e10:	ddc00815 	stw	r23,32(sp)
 8000e14:	dd800715 	stw	r22,28(sp)
 8000e18:	dd400615 	stw	r21,24(sp)
 8000e1c:	dd000515 	stw	r20,20(sp)
 8000e20:	dcc00415 	stw	r19,16(sp)
 8000e24:	dc400215 	stw	r17,8(sp)
 8000e28:	dc000115 	stw	r16,4(sp)
 8000e2c:	288002c4 	addi	r2,r5,11
 8000e30:	00c00584 	movi	r3,22
 8000e34:	2025883a 	mov	r18,r4
 8000e38:	18802a2e 	bgeu	r3,r2,8000ee4 <_malloc_r+0xe4>
 8000e3c:	047ffe04 	movi	r17,-8
 8000e40:	1462703a 	and	r17,r2,r17
 8000e44:	88009e16 	blt	r17,zero,80010c0 <_malloc_r+0x2c0>
 8000e48:	89409d36 	bltu	r17,r5,80010c0 <_malloc_r+0x2c0>
 8000e4c:	80034f80 	call	80034f8 <__malloc_lock>
 8000e50:	00807dc4 	movi	r2,503
 8000e54:	14402736 	bltu	r2,r17,8000ef4 <_malloc_r+0xf4>
 8000e58:	8806d0fa 	srli	r3,r17,3
 8000e5c:	04c20034 	movhi	r19,2048
 8000e60:	9cde2e04 	addi	r19,r19,30904
 8000e64:	18c5883a 	add	r2,r3,r3
 8000e68:	1085883a 	add	r2,r2,r2
 8000e6c:	1085883a 	add	r2,r2,r2
 8000e70:	9885883a 	add	r2,r19,r2
 8000e74:	14000317 	ldw	r16,12(r2)
 8000e78:	80814a26 	beq	r16,r2,80013a4 <_malloc_r+0x5a4>
 8000e7c:	80c00117 	ldw	r3,4(r16)
 8000e80:	81000317 	ldw	r4,12(r16)
 8000e84:	00bfff04 	movi	r2,-4
 8000e88:	1884703a 	and	r2,r3,r2
 8000e8c:	81400217 	ldw	r5,8(r16)
 8000e90:	8085883a 	add	r2,r16,r2
 8000e94:	10c00117 	ldw	r3,4(r2)
 8000e98:	29000315 	stw	r4,12(r5)
 8000e9c:	21400215 	stw	r5,8(r4)
 8000ea0:	18c00054 	ori	r3,r3,1
 8000ea4:	10c00115 	stw	r3,4(r2)
 8000ea8:	9009883a 	mov	r4,r18
 8000eac:	80035180 	call	8003518 <__malloc_unlock>
 8000eb0:	80800204 	addi	r2,r16,8
 8000eb4:	dfc00a17 	ldw	ra,40(sp)
 8000eb8:	df000917 	ldw	fp,36(sp)
 8000ebc:	ddc00817 	ldw	r23,32(sp)
 8000ec0:	dd800717 	ldw	r22,28(sp)
 8000ec4:	dd400617 	ldw	r21,24(sp)
 8000ec8:	dd000517 	ldw	r20,20(sp)
 8000ecc:	dcc00417 	ldw	r19,16(sp)
 8000ed0:	dc800317 	ldw	r18,12(sp)
 8000ed4:	dc400217 	ldw	r17,8(sp)
 8000ed8:	dc000117 	ldw	r16,4(sp)
 8000edc:	dec00b04 	addi	sp,sp,44
 8000ee0:	f800283a 	ret
 8000ee4:	04400404 	movi	r17,16
 8000ee8:	89407536 	bltu	r17,r5,80010c0 <_malloc_r+0x2c0>
 8000eec:	80034f80 	call	80034f8 <__malloc_lock>
 8000ef0:	003fd906 	br	8000e58 <_malloc_r+0x58>
 8000ef4:	8806d27a 	srli	r3,r17,9
 8000ef8:	18007526 	beq	r3,zero,80010d0 <_malloc_r+0x2d0>
 8000efc:	00800104 	movi	r2,4
 8000f00:	10c0ef36 	bltu	r2,r3,80012c0 <_malloc_r+0x4c0>
 8000f04:	8806d1ba 	srli	r3,r17,6
 8000f08:	19c00e04 	addi	r7,r3,56
 8000f0c:	39cb883a 	add	r5,r7,r7
 8000f10:	04c20034 	movhi	r19,2048
 8000f14:	294b883a 	add	r5,r5,r5
 8000f18:	9cde2e04 	addi	r19,r19,30904
 8000f1c:	294b883a 	add	r5,r5,r5
 8000f20:	994b883a 	add	r5,r19,r5
 8000f24:	2c000317 	ldw	r16,12(r5)
 8000f28:	2c000e26 	beq	r5,r16,8000f64 <_malloc_r+0x164>
 8000f2c:	80800117 	ldw	r2,4(r16)
 8000f30:	01bfff04 	movi	r6,-4
 8000f34:	010003c4 	movi	r4,15
 8000f38:	1184703a 	and	r2,r2,r6
 8000f3c:	1447c83a 	sub	r3,r2,r17
 8000f40:	20c00716 	blt	r4,r3,8000f60 <_malloc_r+0x160>
 8000f44:	1800650e 	bge	r3,zero,80010dc <_malloc_r+0x2dc>
 8000f48:	84000317 	ldw	r16,12(r16)
 8000f4c:	2c000526 	beq	r5,r16,8000f64 <_malloc_r+0x164>
 8000f50:	80800117 	ldw	r2,4(r16)
 8000f54:	1184703a 	and	r2,r2,r6
 8000f58:	1447c83a 	sub	r3,r2,r17
 8000f5c:	20fff90e 	bge	r4,r3,8000f44 <_malloc_r+0x144>
 8000f60:	39ffffc4 	addi	r7,r7,-1
 8000f64:	38c00044 	addi	r3,r7,1
 8000f68:	01820034 	movhi	r6,2048
 8000f6c:	9c000417 	ldw	r16,16(r19)
 8000f70:	319e2e04 	addi	r6,r6,30904
 8000f74:	32400204 	addi	r9,r6,8
 8000f78:	82410326 	beq	r16,r9,8001388 <_malloc_r+0x588>
 8000f7c:	81000117 	ldw	r4,4(r16)
 8000f80:	00bfff04 	movi	r2,-4
 8000f84:	208e703a 	and	r7,r4,r2
 8000f88:	3c45c83a 	sub	r2,r7,r17
 8000f8c:	010003c4 	movi	r4,15
 8000f90:	2080ee16 	blt	r4,r2,800134c <_malloc_r+0x54c>
 8000f94:	32400515 	stw	r9,20(r6)
 8000f98:	32400415 	stw	r9,16(r6)
 8000f9c:	1000510e 	bge	r2,zero,80010e4 <_malloc_r+0x2e4>
 8000fa0:	00807fc4 	movi	r2,511
 8000fa4:	11c0ce36 	bltu	r2,r7,80012e0 <_malloc_r+0x4e0>
 8000fa8:	3808d0fa 	srli	r4,r7,3
 8000fac:	01c00044 	movi	r7,1
 8000fb0:	30800117 	ldw	r2,4(r6)
 8000fb4:	210b883a 	add	r5,r4,r4
 8000fb8:	294b883a 	add	r5,r5,r5
 8000fbc:	2009d0ba 	srai	r4,r4,2
 8000fc0:	294b883a 	add	r5,r5,r5
 8000fc4:	298b883a 	add	r5,r5,r6
 8000fc8:	2a000217 	ldw	r8,8(r5)
 8000fcc:	3908983a 	sll	r4,r7,r4
 8000fd0:	81400315 	stw	r5,12(r16)
 8000fd4:	82000215 	stw	r8,8(r16)
 8000fd8:	2088b03a 	or	r4,r4,r2
 8000fdc:	2c000215 	stw	r16,8(r5)
 8000fe0:	31000115 	stw	r4,4(r6)
 8000fe4:	44000315 	stw	r16,12(r8)
 8000fe8:	1805d0ba 	srai	r2,r3,2
 8000fec:	01400044 	movi	r5,1
 8000ff0:	288a983a 	sll	r5,r5,r2
 8000ff4:	21404336 	bltu	r4,r5,8001104 <_malloc_r+0x304>
 8000ff8:	2144703a 	and	r2,r4,r5
 8000ffc:	10000a1e 	bne	r2,zero,8001028 <_malloc_r+0x228>
 8001000:	00bfff04 	movi	r2,-4
 8001004:	294b883a 	add	r5,r5,r5
 8001008:	1886703a 	and	r3,r3,r2
 800100c:	2144703a 	and	r2,r4,r5
 8001010:	18c00104 	addi	r3,r3,4
 8001014:	1000041e 	bne	r2,zero,8001028 <_malloc_r+0x228>
 8001018:	294b883a 	add	r5,r5,r5
 800101c:	2144703a 	and	r2,r4,r5
 8001020:	18c00104 	addi	r3,r3,4
 8001024:	103ffc26 	beq	r2,zero,8001018 <_malloc_r+0x218>
 8001028:	023fff04 	movi	r8,-4
 800102c:	01c003c4 	movi	r7,15
 8001030:	18c5883a 	add	r2,r3,r3
 8001034:	1085883a 	add	r2,r2,r2
 8001038:	1085883a 	add	r2,r2,r2
 800103c:	9895883a 	add	r10,r19,r2
 8001040:	52c00304 	addi	r11,r10,12
 8001044:	1819883a 	mov	r12,r3
 8001048:	5c000017 	ldw	r16,0(r11)
 800104c:	59bffd04 	addi	r6,r11,-12
 8001050:	8180041e 	bne	r16,r6,8001064 <_malloc_r+0x264>
 8001054:	0000ce06 	br	8001390 <_malloc_r+0x590>
 8001058:	2000d70e 	bge	r4,zero,80013b8 <_malloc_r+0x5b8>
 800105c:	84000317 	ldw	r16,12(r16)
 8001060:	8180cb26 	beq	r16,r6,8001390 <_malloc_r+0x590>
 8001064:	80800117 	ldw	r2,4(r16)
 8001068:	1204703a 	and	r2,r2,r8
 800106c:	1449c83a 	sub	r4,r2,r17
 8001070:	393ff90e 	bge	r7,r4,8001058 <_malloc_r+0x258>
 8001074:	80800317 	ldw	r2,12(r16)
 8001078:	80c00217 	ldw	r3,8(r16)
 800107c:	89400054 	ori	r5,r17,1
 8001080:	81400115 	stw	r5,4(r16)
 8001084:	18800315 	stw	r2,12(r3)
 8001088:	10c00215 	stw	r3,8(r2)
 800108c:	8463883a 	add	r17,r16,r17
 8001090:	9c400515 	stw	r17,20(r19)
 8001094:	9c400415 	stw	r17,16(r19)
 8001098:	20800054 	ori	r2,r4,1
 800109c:	88800115 	stw	r2,4(r17)
 80010a0:	8a400315 	stw	r9,12(r17)
 80010a4:	8a400215 	stw	r9,8(r17)
 80010a8:	8923883a 	add	r17,r17,r4
 80010ac:	89000015 	stw	r4,0(r17)
 80010b0:	9009883a 	mov	r4,r18
 80010b4:	80035180 	call	8003518 <__malloc_unlock>
 80010b8:	80800204 	addi	r2,r16,8
 80010bc:	003f7d06 	br	8000eb4 <_malloc_r+0xb4>
 80010c0:	00800304 	movi	r2,12
 80010c4:	90800015 	stw	r2,0(r18)
 80010c8:	0005883a 	mov	r2,zero
 80010cc:	003f7906 	br	8000eb4 <_malloc_r+0xb4>
 80010d0:	01401f84 	movi	r5,126
 80010d4:	01c00fc4 	movi	r7,63
 80010d8:	003f8d06 	br	8000f10 <_malloc_r+0x110>
 80010dc:	81000317 	ldw	r4,12(r16)
 80010e0:	003f6a06 	br	8000e8c <_malloc_r+0x8c>
 80010e4:	81c5883a 	add	r2,r16,r7
 80010e8:	10c00117 	ldw	r3,4(r2)
 80010ec:	9009883a 	mov	r4,r18
 80010f0:	18c00054 	ori	r3,r3,1
 80010f4:	10c00115 	stw	r3,4(r2)
 80010f8:	80035180 	call	8003518 <__malloc_unlock>
 80010fc:	80800204 	addi	r2,r16,8
 8001100:	003f6c06 	br	8000eb4 <_malloc_r+0xb4>
 8001104:	9c000217 	ldw	r16,8(r19)
 8001108:	00bfff04 	movi	r2,-4
 800110c:	85800117 	ldw	r22,4(r16)
 8001110:	b0ac703a 	and	r22,r22,r2
 8001114:	b4400336 	bltu	r22,r17,8001124 <_malloc_r+0x324>
 8001118:	b445c83a 	sub	r2,r22,r17
 800111c:	00c003c4 	movi	r3,15
 8001120:	18805d16 	blt	r3,r2,8001298 <_malloc_r+0x498>
 8001124:	05c20074 	movhi	r23,2049
 8001128:	00820074 	movhi	r2,2049
 800112c:	bde42d04 	addi	r23,r23,-28492
 8001130:	10ab5704 	addi	r2,r2,-21156
 8001134:	15400017 	ldw	r21,0(r2)
 8001138:	b9000017 	ldw	r4,0(r23)
 800113c:	00ffffc4 	movi	r3,-1
 8001140:	858d883a 	add	r6,r16,r22
 8001144:	8d6b883a 	add	r21,r17,r21
 8001148:	20c0e426 	beq	r4,r3,80014dc <_malloc_r+0x6dc>
 800114c:	ad4403c4 	addi	r21,r21,4111
 8001150:	00fc0004 	movi	r3,-4096
 8001154:	a8ea703a 	and	r21,r21,r3
 8001158:	9009883a 	mov	r4,r18
 800115c:	a80b883a 	mov	r5,r21
 8001160:	d9800015 	stw	r6,0(sp)
 8001164:	8001fb00 	call	8001fb0 <_sbrk_r>
 8001168:	00ffffc4 	movi	r3,-1
 800116c:	1029883a 	mov	r20,r2
 8001170:	d9800017 	ldw	r6,0(sp)
 8001174:	10c0a426 	beq	r2,r3,8001408 <_malloc_r+0x608>
 8001178:	1180a236 	bltu	r2,r6,8001404 <_malloc_r+0x604>
 800117c:	07020074 	movhi	fp,2049
 8001180:	e72b6004 	addi	fp,fp,-21120
 8001184:	e0c00017 	ldw	r3,0(fp)
 8001188:	a8c7883a 	add	r3,r21,r3
 800118c:	e0c00015 	stw	r3,0(fp)
 8001190:	3500da26 	beq	r6,r20,80014fc <_malloc_r+0x6fc>
 8001194:	b9000017 	ldw	r4,0(r23)
 8001198:	00bfffc4 	movi	r2,-1
 800119c:	2080e426 	beq	r4,r2,8001530 <_malloc_r+0x730>
 80011a0:	a185c83a 	sub	r2,r20,r6
 80011a4:	1885883a 	add	r2,r3,r2
 80011a8:	e0800015 	stw	r2,0(fp)
 80011ac:	a0c001cc 	andi	r3,r20,7
 80011b0:	1800b526 	beq	r3,zero,8001488 <_malloc_r+0x688>
 80011b4:	a0e9c83a 	sub	r20,r20,r3
 80011b8:	00840204 	movi	r2,4104
 80011bc:	a5000204 	addi	r20,r20,8
 80011c0:	10c7c83a 	sub	r3,r2,r3
 80011c4:	a545883a 	add	r2,r20,r21
 80011c8:	1083ffcc 	andi	r2,r2,4095
 80011cc:	18abc83a 	sub	r21,r3,r2
 80011d0:	9009883a 	mov	r4,r18
 80011d4:	a80b883a 	mov	r5,r21
 80011d8:	8001fb00 	call	8001fb0 <_sbrk_r>
 80011dc:	00ffffc4 	movi	r3,-1
 80011e0:	10c0d026 	beq	r2,r3,8001524 <_malloc_r+0x724>
 80011e4:	1507c83a 	sub	r3,r2,r20
 80011e8:	a8c7883a 	add	r3,r21,r3
 80011ec:	18c00054 	ori	r3,r3,1
 80011f0:	e0800017 	ldw	r2,0(fp)
 80011f4:	9d000215 	stw	r20,8(r19)
 80011f8:	a0c00115 	stw	r3,4(r20)
 80011fc:	a887883a 	add	r3,r21,r2
 8001200:	e0c00015 	stw	r3,0(fp)
 8001204:	84c00e26 	beq	r16,r19,8001240 <_malloc_r+0x440>
 8001208:	018003c4 	movi	r6,15
 800120c:	3580a02e 	bgeu	r6,r22,8001490 <_malloc_r+0x690>
 8001210:	81400117 	ldw	r5,4(r16)
 8001214:	013ffe04 	movi	r4,-8
 8001218:	b0bffd04 	addi	r2,r22,-12
 800121c:	1104703a 	and	r2,r2,r4
 8001220:	2900004c 	andi	r4,r5,1
 8001224:	1108b03a 	or	r4,r2,r4
 8001228:	81000115 	stw	r4,4(r16)
 800122c:	01400144 	movi	r5,5
 8001230:	8089883a 	add	r4,r16,r2
 8001234:	21400115 	stw	r5,4(r4)
 8001238:	21400215 	stw	r5,8(r4)
 800123c:	3080c036 	bltu	r6,r2,8001540 <_malloc_r+0x740>
 8001240:	00820074 	movhi	r2,2049
 8001244:	10ab5604 	addi	r2,r2,-21160
 8001248:	11000017 	ldw	r4,0(r2)
 800124c:	20c0012e 	bgeu	r4,r3,8001254 <_malloc_r+0x454>
 8001250:	10c00015 	stw	r3,0(r2)
 8001254:	00820074 	movhi	r2,2049
 8001258:	10ab5504 	addi	r2,r2,-21164
 800125c:	11000017 	ldw	r4,0(r2)
 8001260:	9c000217 	ldw	r16,8(r19)
 8001264:	20c0012e 	bgeu	r4,r3,800126c <_malloc_r+0x46c>
 8001268:	10c00015 	stw	r3,0(r2)
 800126c:	80c00117 	ldw	r3,4(r16)
 8001270:	00bfff04 	movi	r2,-4
 8001274:	1886703a 	and	r3,r3,r2
 8001278:	1c45c83a 	sub	r2,r3,r17
 800127c:	1c400236 	bltu	r3,r17,8001288 <_malloc_r+0x488>
 8001280:	00c003c4 	movi	r3,15
 8001284:	18800416 	blt	r3,r2,8001298 <_malloc_r+0x498>
 8001288:	9009883a 	mov	r4,r18
 800128c:	80035180 	call	8003518 <__malloc_unlock>
 8001290:	0005883a 	mov	r2,zero
 8001294:	003f0706 	br	8000eb4 <_malloc_r+0xb4>
 8001298:	88c00054 	ori	r3,r17,1
 800129c:	80c00115 	stw	r3,4(r16)
 80012a0:	8463883a 	add	r17,r16,r17
 80012a4:	10800054 	ori	r2,r2,1
 80012a8:	9c400215 	stw	r17,8(r19)
 80012ac:	88800115 	stw	r2,4(r17)
 80012b0:	9009883a 	mov	r4,r18
 80012b4:	80035180 	call	8003518 <__malloc_unlock>
 80012b8:	80800204 	addi	r2,r16,8
 80012bc:	003efd06 	br	8000eb4 <_malloc_r+0xb4>
 80012c0:	00800504 	movi	r2,20
 80012c4:	10c0482e 	bgeu	r2,r3,80013e8 <_malloc_r+0x5e8>
 80012c8:	00801504 	movi	r2,84
 80012cc:	10c06836 	bltu	r2,r3,8001470 <_malloc_r+0x670>
 80012d0:	8806d33a 	srli	r3,r17,12
 80012d4:	19c01b84 	addi	r7,r3,110
 80012d8:	39cb883a 	add	r5,r7,r7
 80012dc:	003f0c06 	br	8000f10 <_malloc_r+0x110>
 80012e0:	3804d27a 	srli	r2,r7,9
 80012e4:	01000104 	movi	r4,4
 80012e8:	2080422e 	bgeu	r4,r2,80013f4 <_malloc_r+0x5f4>
 80012ec:	01000504 	movi	r4,20
 80012f0:	20807c36 	bltu	r4,r2,80014e4 <_malloc_r+0x6e4>
 80012f4:	110016c4 	addi	r4,r2,91
 80012f8:	210b883a 	add	r5,r4,r4
 80012fc:	294b883a 	add	r5,r5,r5
 8001300:	294b883a 	add	r5,r5,r5
 8001304:	994b883a 	add	r5,r19,r5
 8001308:	28800217 	ldw	r2,8(r5)
 800130c:	02020034 	movhi	r8,2048
 8001310:	421e2e04 	addi	r8,r8,30904
 8001314:	11406326 	beq	r2,r5,80014a4 <_malloc_r+0x6a4>
 8001318:	01bfff04 	movi	r6,-4
 800131c:	11000117 	ldw	r4,4(r2)
 8001320:	2188703a 	and	r4,r4,r6
 8001324:	3900022e 	bgeu	r7,r4,8001330 <_malloc_r+0x530>
 8001328:	10800217 	ldw	r2,8(r2)
 800132c:	28bffb1e 	bne	r5,r2,800131c <_malloc_r+0x51c>
 8001330:	11800317 	ldw	r6,12(r2)
 8001334:	99000117 	ldw	r4,4(r19)
 8001338:	81800315 	stw	r6,12(r16)
 800133c:	80800215 	stw	r2,8(r16)
 8001340:	34000215 	stw	r16,8(r6)
 8001344:	14000315 	stw	r16,12(r2)
 8001348:	003f2706 	br	8000fe8 <_malloc_r+0x1e8>
 800134c:	88c00054 	ori	r3,r17,1
 8001350:	80c00115 	stw	r3,4(r16)
 8001354:	8463883a 	add	r17,r16,r17
 8001358:	34400515 	stw	r17,20(r6)
 800135c:	34400415 	stw	r17,16(r6)
 8001360:	10c00054 	ori	r3,r2,1
 8001364:	8a400315 	stw	r9,12(r17)
 8001368:	8a400215 	stw	r9,8(r17)
 800136c:	88c00115 	stw	r3,4(r17)
 8001370:	88a3883a 	add	r17,r17,r2
 8001374:	88800015 	stw	r2,0(r17)
 8001378:	9009883a 	mov	r4,r18
 800137c:	80035180 	call	8003518 <__malloc_unlock>
 8001380:	80800204 	addi	r2,r16,8
 8001384:	003ecb06 	br	8000eb4 <_malloc_r+0xb4>
 8001388:	31000117 	ldw	r4,4(r6)
 800138c:	003f1606 	br	8000fe8 <_malloc_r+0x1e8>
 8001390:	63000044 	addi	r12,r12,1
 8001394:	608000cc 	andi	r2,r12,3
 8001398:	5ac00204 	addi	r11,r11,8
 800139c:	103f2a1e 	bne	r2,zero,8001048 <_malloc_r+0x248>
 80013a0:	00002106 	br	8001428 <_malloc_r+0x628>
 80013a4:	80800204 	addi	r2,r16,8
 80013a8:	84000517 	ldw	r16,20(r16)
 80013ac:	143eb31e 	bne	r2,r16,8000e7c <_malloc_r+0x7c>
 80013b0:	18c00084 	addi	r3,r3,2
 80013b4:	003eec06 	br	8000f68 <_malloc_r+0x168>
 80013b8:	8085883a 	add	r2,r16,r2
 80013bc:	10c00117 	ldw	r3,4(r2)
 80013c0:	81000317 	ldw	r4,12(r16)
 80013c4:	81400217 	ldw	r5,8(r16)
 80013c8:	18c00054 	ori	r3,r3,1
 80013cc:	10c00115 	stw	r3,4(r2)
 80013d0:	29000315 	stw	r4,12(r5)
 80013d4:	21400215 	stw	r5,8(r4)
 80013d8:	9009883a 	mov	r4,r18
 80013dc:	80035180 	call	8003518 <__malloc_unlock>
 80013e0:	80800204 	addi	r2,r16,8
 80013e4:	003eb306 	br	8000eb4 <_malloc_r+0xb4>
 80013e8:	19c016c4 	addi	r7,r3,91
 80013ec:	39cb883a 	add	r5,r7,r7
 80013f0:	003ec706 	br	8000f10 <_malloc_r+0x110>
 80013f4:	3804d1ba 	srli	r2,r7,6
 80013f8:	11000e04 	addi	r4,r2,56
 80013fc:	210b883a 	add	r5,r4,r4
 8001400:	003fbe06 	br	80012fc <_malloc_r+0x4fc>
 8001404:	84ff5d26 	beq	r16,r19,800117c <_malloc_r+0x37c>
 8001408:	9c000217 	ldw	r16,8(r19)
 800140c:	00bfff04 	movi	r2,-4
 8001410:	80c00117 	ldw	r3,4(r16)
 8001414:	1886703a 	and	r3,r3,r2
 8001418:	003f9706 	br	8001278 <_malloc_r+0x478>
 800141c:	52800017 	ldw	r10,0(r10)
 8001420:	18ffffc4 	addi	r3,r3,-1
 8001424:	50805c1e 	bne	r10,r2,8001598 <_malloc_r+0x798>
 8001428:	190000cc 	andi	r4,r3,3
 800142c:	50bffe04 	addi	r2,r10,-8
 8001430:	203ffa1e 	bne	r4,zero,800141c <_malloc_r+0x61c>
 8001434:	98800117 	ldw	r2,4(r19)
 8001438:	0146303a 	nor	r3,zero,r5
 800143c:	1884703a 	and	r2,r3,r2
 8001440:	98800115 	stw	r2,4(r19)
 8001444:	294b883a 	add	r5,r5,r5
 8001448:	117f2e36 	bltu	r2,r5,8001104 <_malloc_r+0x304>
 800144c:	283f2d26 	beq	r5,zero,8001104 <_malloc_r+0x304>
 8001450:	1146703a 	and	r3,r2,r5
 8001454:	1800521e 	bne	r3,zero,80015a0 <_malloc_r+0x7a0>
 8001458:	6007883a 	mov	r3,r12
 800145c:	294b883a 	add	r5,r5,r5
 8001460:	1148703a 	and	r4,r2,r5
 8001464:	18c00104 	addi	r3,r3,4
 8001468:	203ffc26 	beq	r4,zero,800145c <_malloc_r+0x65c>
 800146c:	003ef006 	br	8001030 <_malloc_r+0x230>
 8001470:	00805504 	movi	r2,340
 8001474:	10c01336 	bltu	r2,r3,80014c4 <_malloc_r+0x6c4>
 8001478:	8806d3fa 	srli	r3,r17,15
 800147c:	19c01dc4 	addi	r7,r3,119
 8001480:	39cb883a 	add	r5,r7,r7
 8001484:	003ea206 	br	8000f10 <_malloc_r+0x110>
 8001488:	00c40004 	movi	r3,4096
 800148c:	003f4d06 	br	80011c4 <_malloc_r+0x3c4>
 8001490:	00800044 	movi	r2,1
 8001494:	a0800115 	stw	r2,4(r20)
 8001498:	a021883a 	mov	r16,r20
 800149c:	0007883a 	mov	r3,zero
 80014a0:	003f7506 	br	8001278 <_malloc_r+0x478>
 80014a4:	200bd0ba 	srai	r5,r4,2
 80014a8:	01800044 	movi	r6,1
 80014ac:	41000117 	ldw	r4,4(r8)
 80014b0:	314a983a 	sll	r5,r6,r5
 80014b4:	100d883a 	mov	r6,r2
 80014b8:	2908b03a 	or	r4,r5,r4
 80014bc:	41000115 	stw	r4,4(r8)
 80014c0:	003f9d06 	br	8001338 <_malloc_r+0x538>
 80014c4:	00815504 	movi	r2,1364
 80014c8:	10c01336 	bltu	r2,r3,8001518 <_malloc_r+0x718>
 80014cc:	8806d4ba 	srli	r3,r17,18
 80014d0:	19c01f04 	addi	r7,r3,124
 80014d4:	39cb883a 	add	r5,r7,r7
 80014d8:	003e8d06 	br	8000f10 <_malloc_r+0x110>
 80014dc:	ad400404 	addi	r21,r21,16
 80014e0:	003f1d06 	br	8001158 <_malloc_r+0x358>
 80014e4:	01001504 	movi	r4,84
 80014e8:	20801c36 	bltu	r4,r2,800155c <_malloc_r+0x75c>
 80014ec:	3804d33a 	srli	r2,r7,12
 80014f0:	11001b84 	addi	r4,r2,110
 80014f4:	210b883a 	add	r5,r4,r4
 80014f8:	003f8006 	br	80012fc <_malloc_r+0x4fc>
 80014fc:	3083ffcc 	andi	r2,r6,4095
 8001500:	103f241e 	bne	r2,zero,8001194 <_malloc_r+0x394>
 8001504:	99000217 	ldw	r4,8(r19)
 8001508:	ad85883a 	add	r2,r21,r22
 800150c:	10800054 	ori	r2,r2,1
 8001510:	20800115 	stw	r2,4(r4)
 8001514:	003f4a06 	br	8001240 <_malloc_r+0x440>
 8001518:	01403f04 	movi	r5,252
 800151c:	01c01f84 	movi	r7,126
 8001520:	003e7b06 	br	8000f10 <_malloc_r+0x110>
 8001524:	00c00044 	movi	r3,1
 8001528:	002b883a 	mov	r21,zero
 800152c:	003f3006 	br	80011f0 <_malloc_r+0x3f0>
 8001530:	00820074 	movhi	r2,2049
 8001534:	10a42d04 	addi	r2,r2,-28492
 8001538:	15000015 	stw	r20,0(r2)
 800153c:	003f1b06 	br	80011ac <_malloc_r+0x3ac>
 8001540:	9009883a 	mov	r4,r18
 8001544:	81400204 	addi	r5,r16,8
 8001548:	80028000 	call	8002800 <_free_r>
 800154c:	00820074 	movhi	r2,2049
 8001550:	10ab6004 	addi	r2,r2,-21120
 8001554:	10c00017 	ldw	r3,0(r2)
 8001558:	003f3906 	br	8001240 <_malloc_r+0x440>
 800155c:	01005504 	movi	r4,340
 8001560:	20800436 	bltu	r4,r2,8001574 <_malloc_r+0x774>
 8001564:	3804d3fa 	srli	r2,r7,15
 8001568:	11001dc4 	addi	r4,r2,119
 800156c:	210b883a 	add	r5,r4,r4
 8001570:	003f6206 	br	80012fc <_malloc_r+0x4fc>
 8001574:	01015504 	movi	r4,1364
 8001578:	20800436 	bltu	r4,r2,800158c <_malloc_r+0x78c>
 800157c:	3804d4ba 	srli	r2,r7,18
 8001580:	11001f04 	addi	r4,r2,124
 8001584:	210b883a 	add	r5,r4,r4
 8001588:	003f5c06 	br	80012fc <_malloc_r+0x4fc>
 800158c:	01403f04 	movi	r5,252
 8001590:	01001f84 	movi	r4,126
 8001594:	003f5906 	br	80012fc <_malloc_r+0x4fc>
 8001598:	98800117 	ldw	r2,4(r19)
 800159c:	003fa906 	br	8001444 <_malloc_r+0x644>
 80015a0:	6007883a 	mov	r3,r12
 80015a4:	003ea206 	br	8001030 <_malloc_r+0x230>

080015a8 <memchr>:
 80015a8:	208000cc 	andi	r2,r4,3
 80015ac:	280f883a 	mov	r7,r5
 80015b0:	10003526 	beq	r2,zero,8001688 <memchr+0xe0>
 80015b4:	30bfffc4 	addi	r2,r6,-1
 80015b8:	30001b26 	beq	r6,zero,8001628 <memchr+0x80>
 80015bc:	21800003 	ldbu	r6,0(r4)
 80015c0:	28c03fcc 	andi	r3,r5,255
 80015c4:	30c01a26 	beq	r6,r3,8001630 <memchr+0x88>
 80015c8:	180d883a 	mov	r6,r3
 80015cc:	00000406 	br	80015e0 <memchr+0x38>
 80015d0:	10001526 	beq	r2,zero,8001628 <memchr+0x80>
 80015d4:	20c00003 	ldbu	r3,0(r4)
 80015d8:	10bfffc4 	addi	r2,r2,-1
 80015dc:	19801426 	beq	r3,r6,8001630 <memchr+0x88>
 80015e0:	21000044 	addi	r4,r4,1
 80015e4:	20c000cc 	andi	r3,r4,3
 80015e8:	183ff91e 	bne	r3,zero,80015d0 <memchr+0x28>
 80015ec:	024000c4 	movi	r9,3
 80015f0:	48801136 	bltu	r9,r2,8001638 <memchr+0x90>
 80015f4:	10000c26 	beq	r2,zero,8001628 <memchr+0x80>
 80015f8:	20c00003 	ldbu	r3,0(r4)
 80015fc:	29403fcc 	andi	r5,r5,255
 8001600:	19400b26 	beq	r3,r5,8001630 <memchr+0x88>
 8001604:	20c00044 	addi	r3,r4,1
 8001608:	2085883a 	add	r2,r4,r2
 800160c:	39803fcc 	andi	r6,r7,255
 8001610:	00000306 	br	8001620 <memchr+0x78>
 8001614:	18c00044 	addi	r3,r3,1
 8001618:	197fffc3 	ldbu	r5,-1(r3)
 800161c:	29800426 	beq	r5,r6,8001630 <memchr+0x88>
 8001620:	1809883a 	mov	r4,r3
 8001624:	18bffb1e 	bne	r3,r2,8001614 <memchr+0x6c>
 8001628:	0005883a 	mov	r2,zero
 800162c:	f800283a 	ret
 8001630:	2005883a 	mov	r2,r4
 8001634:	f800283a 	ret
 8001638:	28c03fcc 	andi	r3,r5,255
 800163c:	1810923a 	slli	r8,r3,8
 8001640:	02ffbff4 	movhi	r11,65279
 8001644:	02a02074 	movhi	r10,32897
 8001648:	40c6b03a 	or	r3,r8,r3
 800164c:	1810943a 	slli	r8,r3,16
 8001650:	5affbfc4 	addi	r11,r11,-257
 8001654:	52a02004 	addi	r10,r10,-32640
 8001658:	40d0b03a 	or	r8,r8,r3
 800165c:	20c00017 	ldw	r3,0(r4)
 8001660:	40c6f03a 	xor	r3,r8,r3
 8001664:	1acd883a 	add	r6,r3,r11
 8001668:	00c6303a 	nor	r3,zero,r3
 800166c:	30c6703a 	and	r3,r6,r3
 8001670:	1a86703a 	and	r3,r3,r10
 8001674:	183fdf1e 	bne	r3,zero,80015f4 <memchr+0x4c>
 8001678:	10bfff04 	addi	r2,r2,-4
 800167c:	21000104 	addi	r4,r4,4
 8001680:	48bff636 	bltu	r9,r2,800165c <memchr+0xb4>
 8001684:	003fdb06 	br	80015f4 <memchr+0x4c>
 8001688:	3005883a 	mov	r2,r6
 800168c:	003fd706 	br	80015ec <memchr+0x44>

08001690 <memcpy>:
 8001690:	deffff04 	addi	sp,sp,-4
 8001694:	dc000015 	stw	r16,0(sp)
 8001698:	00c003c4 	movi	r3,15
 800169c:	2005883a 	mov	r2,r4
 80016a0:	1980432e 	bgeu	r3,r6,80017b0 <memcpy+0x120>
 80016a4:	2146b03a 	or	r3,r4,r5
 80016a8:	18c000cc 	andi	r3,r3,3
 80016ac:	1800421e 	bne	r3,zero,80017b8 <memcpy+0x128>
 80016b0:	343ffc04 	addi	r16,r6,-16
 80016b4:	8020d13a 	srli	r16,r16,4
 80016b8:	28c00104 	addi	r3,r5,4
 80016bc:	23400104 	addi	r13,r4,4
 80016c0:	801e913a 	slli	r15,r16,4
 80016c4:	2b000204 	addi	r12,r5,8
 80016c8:	22c00204 	addi	r11,r4,8
 80016cc:	7bc00504 	addi	r15,r15,20
 80016d0:	2a800304 	addi	r10,r5,12
 80016d4:	22400304 	addi	r9,r4,12
 80016d8:	2bdf883a 	add	r15,r5,r15
 80016dc:	2811883a 	mov	r8,r5
 80016e0:	200f883a 	mov	r7,r4
 80016e4:	41000017 	ldw	r4,0(r8)
 80016e8:	39c00404 	addi	r7,r7,16
 80016ec:	18c00404 	addi	r3,r3,16
 80016f0:	393ffc15 	stw	r4,-16(r7)
 80016f4:	1bbffc17 	ldw	r14,-16(r3)
 80016f8:	6b400404 	addi	r13,r13,16
 80016fc:	5ac00404 	addi	r11,r11,16
 8001700:	6bbffc15 	stw	r14,-16(r13)
 8001704:	63800017 	ldw	r14,0(r12)
 8001708:	4a400404 	addi	r9,r9,16
 800170c:	42000404 	addi	r8,r8,16
 8001710:	5bbffc15 	stw	r14,-16(r11)
 8001714:	53800017 	ldw	r14,0(r10)
 8001718:	63000404 	addi	r12,r12,16
 800171c:	52800404 	addi	r10,r10,16
 8001720:	4bbffc15 	stw	r14,-16(r9)
 8001724:	1bffef1e 	bne	r3,r15,80016e4 <memcpy+0x54>
 8001728:	81c00044 	addi	r7,r16,1
 800172c:	380e913a 	slli	r7,r7,4
 8001730:	310003cc 	andi	r4,r6,15
 8001734:	02c000c4 	movi	r11,3
 8001738:	11c7883a 	add	r3,r2,r7
 800173c:	29cb883a 	add	r5,r5,r7
 8001740:	59001f2e 	bgeu	r11,r4,80017c0 <memcpy+0x130>
 8001744:	1813883a 	mov	r9,r3
 8001748:	2811883a 	mov	r8,r5
 800174c:	200f883a 	mov	r7,r4
 8001750:	42800017 	ldw	r10,0(r8)
 8001754:	4a400104 	addi	r9,r9,4
 8001758:	39ffff04 	addi	r7,r7,-4
 800175c:	4abfff15 	stw	r10,-4(r9)
 8001760:	42000104 	addi	r8,r8,4
 8001764:	59fffa36 	bltu	r11,r7,8001750 <memcpy+0xc0>
 8001768:	213fff04 	addi	r4,r4,-4
 800176c:	2008d0ba 	srli	r4,r4,2
 8001770:	318000cc 	andi	r6,r6,3
 8001774:	21000044 	addi	r4,r4,1
 8001778:	2109883a 	add	r4,r4,r4
 800177c:	2109883a 	add	r4,r4,r4
 8001780:	1907883a 	add	r3,r3,r4
 8001784:	290b883a 	add	r5,r5,r4
 8001788:	30000626 	beq	r6,zero,80017a4 <memcpy+0x114>
 800178c:	198d883a 	add	r6,r3,r6
 8001790:	29c00003 	ldbu	r7,0(r5)
 8001794:	18c00044 	addi	r3,r3,1
 8001798:	29400044 	addi	r5,r5,1
 800179c:	19ffffc5 	stb	r7,-1(r3)
 80017a0:	19bffb1e 	bne	r3,r6,8001790 <memcpy+0x100>
 80017a4:	dc000017 	ldw	r16,0(sp)
 80017a8:	dec00104 	addi	sp,sp,4
 80017ac:	f800283a 	ret
 80017b0:	2007883a 	mov	r3,r4
 80017b4:	003ff406 	br	8001788 <memcpy+0xf8>
 80017b8:	2007883a 	mov	r3,r4
 80017bc:	003ff306 	br	800178c <memcpy+0xfc>
 80017c0:	200d883a 	mov	r6,r4
 80017c4:	003ff006 	br	8001788 <memcpy+0xf8>

080017c8 <memmove>:
 80017c8:	2005883a 	mov	r2,r4
 80017cc:	29000b2e 	bgeu	r5,r4,80017fc <memmove+0x34>
 80017d0:	298f883a 	add	r7,r5,r6
 80017d4:	21c0092e 	bgeu	r4,r7,80017fc <memmove+0x34>
 80017d8:	2187883a 	add	r3,r4,r6
 80017dc:	198bc83a 	sub	r5,r3,r6
 80017e0:	30004b26 	beq	r6,zero,8001910 <memmove+0x148>
 80017e4:	39ffffc4 	addi	r7,r7,-1
 80017e8:	39000003 	ldbu	r4,0(r7)
 80017ec:	18ffffc4 	addi	r3,r3,-1
 80017f0:	19000005 	stb	r4,0(r3)
 80017f4:	197ffb1e 	bne	r3,r5,80017e4 <memmove+0x1c>
 80017f8:	f800283a 	ret
 80017fc:	00c003c4 	movi	r3,15
 8001800:	1980412e 	bgeu	r3,r6,8001908 <memmove+0x140>
 8001804:	1146b03a 	or	r3,r2,r5
 8001808:	18c000cc 	andi	r3,r3,3
 800180c:	1800411e 	bne	r3,zero,8001914 <memmove+0x14c>
 8001810:	33fffc04 	addi	r15,r6,-16
 8001814:	781ed13a 	srli	r15,r15,4
 8001818:	28c00104 	addi	r3,r5,4
 800181c:	13400104 	addi	r13,r2,4
 8001820:	781c913a 	slli	r14,r15,4
 8001824:	2b000204 	addi	r12,r5,8
 8001828:	12c00204 	addi	r11,r2,8
 800182c:	73800504 	addi	r14,r14,20
 8001830:	2a800304 	addi	r10,r5,12
 8001834:	12400304 	addi	r9,r2,12
 8001838:	2b9d883a 	add	r14,r5,r14
 800183c:	2811883a 	mov	r8,r5
 8001840:	100f883a 	mov	r7,r2
 8001844:	41000017 	ldw	r4,0(r8)
 8001848:	39c00404 	addi	r7,r7,16
 800184c:	18c00404 	addi	r3,r3,16
 8001850:	393ffc15 	stw	r4,-16(r7)
 8001854:	193ffc17 	ldw	r4,-16(r3)
 8001858:	6b400404 	addi	r13,r13,16
 800185c:	5ac00404 	addi	r11,r11,16
 8001860:	693ffc15 	stw	r4,-16(r13)
 8001864:	61000017 	ldw	r4,0(r12)
 8001868:	4a400404 	addi	r9,r9,16
 800186c:	42000404 	addi	r8,r8,16
 8001870:	593ffc15 	stw	r4,-16(r11)
 8001874:	51000017 	ldw	r4,0(r10)
 8001878:	63000404 	addi	r12,r12,16
 800187c:	52800404 	addi	r10,r10,16
 8001880:	493ffc15 	stw	r4,-16(r9)
 8001884:	1bbfef1e 	bne	r3,r14,8001844 <memmove+0x7c>
 8001888:	79000044 	addi	r4,r15,1
 800188c:	2008913a 	slli	r4,r4,4
 8001890:	328003cc 	andi	r10,r6,15
 8001894:	02c000c4 	movi	r11,3
 8001898:	1107883a 	add	r3,r2,r4
 800189c:	290b883a 	add	r5,r5,r4
 80018a0:	5a801e2e 	bgeu	r11,r10,800191c <memmove+0x154>
 80018a4:	1813883a 	mov	r9,r3
 80018a8:	2811883a 	mov	r8,r5
 80018ac:	500f883a 	mov	r7,r10
 80018b0:	41000017 	ldw	r4,0(r8)
 80018b4:	4a400104 	addi	r9,r9,4
 80018b8:	39ffff04 	addi	r7,r7,-4
 80018bc:	493fff15 	stw	r4,-4(r9)
 80018c0:	42000104 	addi	r8,r8,4
 80018c4:	59fffa36 	bltu	r11,r7,80018b0 <memmove+0xe8>
 80018c8:	513fff04 	addi	r4,r10,-4
 80018cc:	2008d0ba 	srli	r4,r4,2
 80018d0:	318000cc 	andi	r6,r6,3
 80018d4:	21000044 	addi	r4,r4,1
 80018d8:	2109883a 	add	r4,r4,r4
 80018dc:	2109883a 	add	r4,r4,r4
 80018e0:	1907883a 	add	r3,r3,r4
 80018e4:	290b883a 	add	r5,r5,r4
 80018e8:	30000926 	beq	r6,zero,8001910 <memmove+0x148>
 80018ec:	198d883a 	add	r6,r3,r6
 80018f0:	29c00003 	ldbu	r7,0(r5)
 80018f4:	18c00044 	addi	r3,r3,1
 80018f8:	29400044 	addi	r5,r5,1
 80018fc:	19ffffc5 	stb	r7,-1(r3)
 8001900:	19bffb1e 	bne	r3,r6,80018f0 <memmove+0x128>
 8001904:	f800283a 	ret
 8001908:	1007883a 	mov	r3,r2
 800190c:	003ff606 	br	80018e8 <memmove+0x120>
 8001910:	f800283a 	ret
 8001914:	1007883a 	mov	r3,r2
 8001918:	003ff406 	br	80018ec <memmove+0x124>
 800191c:	500d883a 	mov	r6,r10
 8001920:	003ff106 	br	80018e8 <memmove+0x120>

08001924 <memset>:
 8001924:	20c000cc 	andi	r3,r4,3
 8001928:	2005883a 	mov	r2,r4
 800192c:	18004326 	beq	r3,zero,8001a3c <memset+0x118>
 8001930:	31ffffc4 	addi	r7,r6,-1
 8001934:	30004026 	beq	r6,zero,8001a38 <memset+0x114>
 8001938:	2813883a 	mov	r9,r5
 800193c:	200d883a 	mov	r6,r4
 8001940:	2007883a 	mov	r3,r4
 8001944:	00000406 	br	8001958 <memset+0x34>
 8001948:	3a3fffc4 	addi	r8,r7,-1
 800194c:	31800044 	addi	r6,r6,1
 8001950:	38003926 	beq	r7,zero,8001a38 <memset+0x114>
 8001954:	400f883a 	mov	r7,r8
 8001958:	18c00044 	addi	r3,r3,1
 800195c:	32400005 	stb	r9,0(r6)
 8001960:	1a0000cc 	andi	r8,r3,3
 8001964:	403ff81e 	bne	r8,zero,8001948 <memset+0x24>
 8001968:	010000c4 	movi	r4,3
 800196c:	21c02d2e 	bgeu	r4,r7,8001a24 <memset+0x100>
 8001970:	29803fcc 	andi	r6,r5,255
 8001974:	3008923a 	slli	r4,r6,8
 8001978:	218cb03a 	or	r6,r4,r6
 800197c:	3008943a 	slli	r4,r6,16
 8001980:	218cb03a 	or	r6,r4,r6
 8001984:	010003c4 	movi	r4,15
 8001988:	21c0182e 	bgeu	r4,r7,80019ec <memset+0xc8>
 800198c:	3b3ffc04 	addi	r12,r7,-16
 8001990:	6018d13a 	srli	r12,r12,4
 8001994:	1a000104 	addi	r8,r3,4
 8001998:	1ac00204 	addi	r11,r3,8
 800199c:	6008913a 	slli	r4,r12,4
 80019a0:	1a800304 	addi	r10,r3,12
 80019a4:	1813883a 	mov	r9,r3
 80019a8:	21000504 	addi	r4,r4,20
 80019ac:	1909883a 	add	r4,r3,r4
 80019b0:	49800015 	stw	r6,0(r9)
 80019b4:	41800015 	stw	r6,0(r8)
 80019b8:	59800015 	stw	r6,0(r11)
 80019bc:	51800015 	stw	r6,0(r10)
 80019c0:	42000404 	addi	r8,r8,16
 80019c4:	4a400404 	addi	r9,r9,16
 80019c8:	5ac00404 	addi	r11,r11,16
 80019cc:	52800404 	addi	r10,r10,16
 80019d0:	413ff71e 	bne	r8,r4,80019b0 <memset+0x8c>
 80019d4:	63000044 	addi	r12,r12,1
 80019d8:	6018913a 	slli	r12,r12,4
 80019dc:	39c003cc 	andi	r7,r7,15
 80019e0:	010000c4 	movi	r4,3
 80019e4:	1b07883a 	add	r3,r3,r12
 80019e8:	21c00e2e 	bgeu	r4,r7,8001a24 <memset+0x100>
 80019ec:	1813883a 	mov	r9,r3
 80019f0:	3811883a 	mov	r8,r7
 80019f4:	010000c4 	movi	r4,3
 80019f8:	49800015 	stw	r6,0(r9)
 80019fc:	423fff04 	addi	r8,r8,-4
 8001a00:	4a400104 	addi	r9,r9,4
 8001a04:	223ffc36 	bltu	r4,r8,80019f8 <memset+0xd4>
 8001a08:	393fff04 	addi	r4,r7,-4
 8001a0c:	2008d0ba 	srli	r4,r4,2
 8001a10:	39c000cc 	andi	r7,r7,3
 8001a14:	21000044 	addi	r4,r4,1
 8001a18:	2109883a 	add	r4,r4,r4
 8001a1c:	2109883a 	add	r4,r4,r4
 8001a20:	1907883a 	add	r3,r3,r4
 8001a24:	38000426 	beq	r7,zero,8001a38 <memset+0x114>
 8001a28:	19cf883a 	add	r7,r3,r7
 8001a2c:	19400005 	stb	r5,0(r3)
 8001a30:	18c00044 	addi	r3,r3,1
 8001a34:	19fffd1e 	bne	r3,r7,8001a2c <memset+0x108>
 8001a38:	f800283a 	ret
 8001a3c:	2007883a 	mov	r3,r4
 8001a40:	300f883a 	mov	r7,r6
 8001a44:	003fc806 	br	8001968 <memset+0x44>

08001a48 <_realloc_r>:
 8001a48:	defff604 	addi	sp,sp,-40
 8001a4c:	dd000415 	stw	r20,16(sp)
 8001a50:	dc400115 	stw	r17,4(sp)
 8001a54:	dfc00915 	stw	ra,36(sp)
 8001a58:	df000815 	stw	fp,32(sp)
 8001a5c:	ddc00715 	stw	r23,28(sp)
 8001a60:	dd800615 	stw	r22,24(sp)
 8001a64:	dd400515 	stw	r21,20(sp)
 8001a68:	dcc00315 	stw	r19,12(sp)
 8001a6c:	dc800215 	stw	r18,8(sp)
 8001a70:	dc000015 	stw	r16,0(sp)
 8001a74:	2829883a 	mov	r20,r5
 8001a78:	3023883a 	mov	r17,r6
 8001a7c:	2800ad26 	beq	r5,zero,8001d34 <_realloc_r+0x2ec>
 8001a80:	2025883a 	mov	r18,r4
 8001a84:	80034f80 	call	80034f8 <__malloc_lock>
 8001a88:	a0ffff17 	ldw	r3,-4(r20)
 8001a8c:	043fff04 	movi	r16,-4
 8001a90:	890002c4 	addi	r4,r17,11
 8001a94:	01c00584 	movi	r7,22
 8001a98:	a57ffe04 	addi	r21,r20,-8
 8001a9c:	1c20703a 	and	r16,r3,r16
 8001aa0:	39001d2e 	bgeu	r7,r4,8001b18 <_realloc_r+0xd0>
 8001aa4:	05bffe04 	movi	r22,-8
 8001aa8:	25ac703a 	and	r22,r4,r22
 8001aac:	b00f883a 	mov	r7,r22
 8001ab0:	b0006516 	blt	r22,zero,8001c48 <_realloc_r+0x200>
 8001ab4:	b4406436 	bltu	r22,r17,8001c48 <_realloc_r+0x200>
 8001ab8:	81c01a0e 	bge	r16,r7,8001b24 <_realloc_r+0xdc>
 8001abc:	07020034 	movhi	fp,2048
 8001ac0:	e71e2e04 	addi	fp,fp,30904
 8001ac4:	e1400217 	ldw	r5,8(fp)
 8001ac8:	ac11883a 	add	r8,r21,r16
 8001acc:	2a006226 	beq	r5,r8,8001c58 <_realloc_r+0x210>
 8001ad0:	41800117 	ldw	r6,4(r8)
 8001ad4:	027fff84 	movi	r9,-2
 8001ad8:	3252703a 	and	r9,r6,r9
 8001adc:	4253883a 	add	r9,r8,r9
 8001ae0:	49000117 	ldw	r4,4(r9)
 8001ae4:	2100004c 	andi	r4,r4,1
 8001ae8:	2000281e 	bne	r4,zero,8001b8c <_realloc_r+0x144>
 8001aec:	00bfff04 	movi	r2,-4
 8001af0:	3084703a 	and	r2,r6,r2
 8001af4:	1409883a 	add	r4,r2,r16
 8001af8:	21c05e16 	blt	r4,r7,8001c74 <_realloc_r+0x22c>
 8001afc:	40800317 	ldw	r2,12(r8)
 8001b00:	41400217 	ldw	r5,8(r8)
 8001b04:	a023883a 	mov	r17,r20
 8001b08:	2021883a 	mov	r16,r4
 8001b0c:	28800315 	stw	r2,12(r5)
 8001b10:	11400215 	stw	r5,8(r2)
 8001b14:	00000406 	br	8001b28 <_realloc_r+0xe0>
 8001b18:	01c00404 	movi	r7,16
 8001b1c:	382d883a 	mov	r22,r7
 8001b20:	003fe406 	br	8001ab4 <_realloc_r+0x6c>
 8001b24:	a023883a 	mov	r17,r20
 8001b28:	858fc83a 	sub	r7,r16,r22
 8001b2c:	008003c4 	movi	r2,15
 8001b30:	18c0004c 	andi	r3,r3,1
 8001b34:	11c07236 	bltu	r2,r7,8001d00 <_realloc_r+0x2b8>
 8001b38:	1c06b03a 	or	r3,r3,r16
 8001b3c:	a8c00115 	stw	r3,4(r21)
 8001b40:	ac21883a 	add	r16,r21,r16
 8001b44:	80800117 	ldw	r2,4(r16)
 8001b48:	10800054 	ori	r2,r2,1
 8001b4c:	80800115 	stw	r2,4(r16)
 8001b50:	9009883a 	mov	r4,r18
 8001b54:	80035180 	call	8003518 <__malloc_unlock>
 8001b58:	8805883a 	mov	r2,r17
 8001b5c:	dfc00917 	ldw	ra,36(sp)
 8001b60:	df000817 	ldw	fp,32(sp)
 8001b64:	ddc00717 	ldw	r23,28(sp)
 8001b68:	dd800617 	ldw	r22,24(sp)
 8001b6c:	dd400517 	ldw	r21,20(sp)
 8001b70:	dd000417 	ldw	r20,16(sp)
 8001b74:	dcc00317 	ldw	r19,12(sp)
 8001b78:	dc800217 	ldw	r18,8(sp)
 8001b7c:	dc400117 	ldw	r17,4(sp)
 8001b80:	dc000017 	ldw	r16,0(sp)
 8001b84:	dec00a04 	addi	sp,sp,40
 8001b88:	f800283a 	ret
 8001b8c:	18c0004c 	andi	r3,r3,1
 8001b90:	1800081e 	bne	r3,zero,8001bb4 <_realloc_r+0x16c>
 8001b94:	a4fffe17 	ldw	r19,-8(r20)
 8001b98:	00bfff04 	movi	r2,-4
 8001b9c:	ace7c83a 	sub	r19,r21,r19
 8001ba0:	98c00117 	ldw	r3,4(r19)
 8001ba4:	1886703a 	and	r3,r3,r2
 8001ba8:	98000226 	beq	r19,zero,8001bb4 <_realloc_r+0x16c>
 8001bac:	1c2f883a 	add	r23,r3,r16
 8001bb0:	b9c06d0e 	bge	r23,r7,8001d68 <_realloc_r+0x320>
 8001bb4:	880b883a 	mov	r5,r17
 8001bb8:	9009883a 	mov	r4,r18
 8001bbc:	8000e000 	call	8000e00 <_malloc_r>
 8001bc0:	1023883a 	mov	r17,r2
 8001bc4:	1000ef26 	beq	r2,zero,8001f84 <_realloc_r+0x53c>
 8001bc8:	a0ffff17 	ldw	r3,-4(r20)
 8001bcc:	113ffe04 	addi	r4,r2,-8
 8001bd0:	00bfff84 	movi	r2,-2
 8001bd4:	1884703a 	and	r2,r3,r2
 8001bd8:	a885883a 	add	r2,r21,r2
 8001bdc:	2080bf26 	beq	r4,r2,8001edc <_realloc_r+0x494>
 8001be0:	81bfff04 	addi	r6,r16,-4
 8001be4:	00800904 	movi	r2,36
 8001be8:	11808936 	bltu	r2,r6,8001e10 <_realloc_r+0x3c8>
 8001bec:	00c004c4 	movi	r3,19
 8001bf0:	19806c2e 	bgeu	r3,r6,8001da4 <_realloc_r+0x35c>
 8001bf4:	a0c00017 	ldw	r3,0(r20)
 8001bf8:	88c00015 	stw	r3,0(r17)
 8001bfc:	a0c00117 	ldw	r3,4(r20)
 8001c00:	88c00115 	stw	r3,4(r17)
 8001c04:	00c006c4 	movi	r3,27
 8001c08:	1980ac36 	bltu	r3,r6,8001ebc <_realloc_r+0x474>
 8001c0c:	88800204 	addi	r2,r17,8
 8001c10:	a0c00204 	addi	r3,r20,8
 8001c14:	19000017 	ldw	r4,0(r3)
 8001c18:	11000015 	stw	r4,0(r2)
 8001c1c:	19000117 	ldw	r4,4(r3)
 8001c20:	11000115 	stw	r4,4(r2)
 8001c24:	18c00217 	ldw	r3,8(r3)
 8001c28:	10c00215 	stw	r3,8(r2)
 8001c2c:	a00b883a 	mov	r5,r20
 8001c30:	9009883a 	mov	r4,r18
 8001c34:	80028000 	call	8002800 <_free_r>
 8001c38:	9009883a 	mov	r4,r18
 8001c3c:	80035180 	call	8003518 <__malloc_unlock>
 8001c40:	8805883a 	mov	r2,r17
 8001c44:	003fc506 	br	8001b5c <_realloc_r+0x114>
 8001c48:	00800304 	movi	r2,12
 8001c4c:	90800015 	stw	r2,0(r18)
 8001c50:	0005883a 	mov	r2,zero
 8001c54:	003fc106 	br	8001b5c <_realloc_r+0x114>
 8001c58:	29800117 	ldw	r6,4(r5)
 8001c5c:	00bfff04 	movi	r2,-4
 8001c60:	b1000404 	addi	r4,r22,16
 8001c64:	3084703a 	and	r2,r6,r2
 8001c68:	140d883a 	add	r6,r2,r16
 8001c6c:	31005b0e 	bge	r6,r4,8001ddc <_realloc_r+0x394>
 8001c70:	2811883a 	mov	r8,r5
 8001c74:	18c0004c 	andi	r3,r3,1
 8001c78:	183fce1e 	bne	r3,zero,8001bb4 <_realloc_r+0x16c>
 8001c7c:	a4fffe17 	ldw	r19,-8(r20)
 8001c80:	00ffff04 	movi	r3,-4
 8001c84:	ace7c83a 	sub	r19,r21,r19
 8001c88:	99000117 	ldw	r4,4(r19)
 8001c8c:	20c6703a 	and	r3,r4,r3
 8001c90:	403fc526 	beq	r8,zero,8001ba8 <_realloc_r+0x160>
 8001c94:	1c2f883a 	add	r23,r3,r16
 8001c98:	b8af883a 	add	r23,r23,r2
 8001c9c:	41406026 	beq	r8,r5,8001e20 <_realloc_r+0x3d8>
 8001ca0:	b9ffc116 	blt	r23,r7,8001ba8 <_realloc_r+0x160>
 8001ca4:	40c00217 	ldw	r3,8(r8)
 8001ca8:	40800317 	ldw	r2,12(r8)
 8001cac:	81bfff04 	addi	r6,r16,-4
 8001cb0:	01000904 	movi	r4,36
 8001cb4:	18800315 	stw	r2,12(r3)
 8001cb8:	10c00215 	stw	r3,8(r2)
 8001cbc:	99400217 	ldw	r5,8(r19)
 8001cc0:	98c00317 	ldw	r3,12(r19)
 8001cc4:	9c400204 	addi	r17,r19,8
 8001cc8:	28c00315 	stw	r3,12(r5)
 8001ccc:	19400215 	stw	r5,8(r3)
 8001cd0:	21802d36 	bltu	r4,r6,8001d88 <_realloc_r+0x340>
 8001cd4:	008004c4 	movi	r2,19
 8001cd8:	1180352e 	bgeu	r2,r6,8001db0 <_realloc_r+0x368>
 8001cdc:	a0800017 	ldw	r2,0(r20)
 8001ce0:	98800215 	stw	r2,8(r19)
 8001ce4:	a0800117 	ldw	r2,4(r20)
 8001ce8:	98800315 	stw	r2,12(r19)
 8001cec:	008006c4 	movi	r2,27
 8001cf0:	11808036 	bltu	r2,r6,8001ef4 <_realloc_r+0x4ac>
 8001cf4:	98c00404 	addi	r3,r19,16
 8001cf8:	a5000204 	addi	r20,r20,8
 8001cfc:	00002d06 	br	8001db4 <_realloc_r+0x36c>
 8001d00:	1d86b03a 	or	r3,r3,r22
 8001d04:	ad8b883a 	add	r5,r21,r22
 8001d08:	a8c00115 	stw	r3,4(r21)
 8001d0c:	38800054 	ori	r2,r7,1
 8001d10:	28800115 	stw	r2,4(r5)
 8001d14:	29cf883a 	add	r7,r5,r7
 8001d18:	38800117 	ldw	r2,4(r7)
 8001d1c:	9009883a 	mov	r4,r18
 8001d20:	29400204 	addi	r5,r5,8
 8001d24:	10800054 	ori	r2,r2,1
 8001d28:	38800115 	stw	r2,4(r7)
 8001d2c:	80028000 	call	8002800 <_free_r>
 8001d30:	003f8706 	br	8001b50 <_realloc_r+0x108>
 8001d34:	300b883a 	mov	r5,r6
 8001d38:	dfc00917 	ldw	ra,36(sp)
 8001d3c:	df000817 	ldw	fp,32(sp)
 8001d40:	ddc00717 	ldw	r23,28(sp)
 8001d44:	dd800617 	ldw	r22,24(sp)
 8001d48:	dd400517 	ldw	r21,20(sp)
 8001d4c:	dd000417 	ldw	r20,16(sp)
 8001d50:	dcc00317 	ldw	r19,12(sp)
 8001d54:	dc800217 	ldw	r18,8(sp)
 8001d58:	dc400117 	ldw	r17,4(sp)
 8001d5c:	dc000017 	ldw	r16,0(sp)
 8001d60:	dec00a04 	addi	sp,sp,40
 8001d64:	8000e001 	jmpi	8000e00 <_malloc_r>
 8001d68:	98800317 	ldw	r2,12(r19)
 8001d6c:	98c00217 	ldw	r3,8(r19)
 8001d70:	81bfff04 	addi	r6,r16,-4
 8001d74:	01000904 	movi	r4,36
 8001d78:	18800315 	stw	r2,12(r3)
 8001d7c:	10c00215 	stw	r3,8(r2)
 8001d80:	9c400204 	addi	r17,r19,8
 8001d84:	21bfd32e 	bgeu	r4,r6,8001cd4 <_realloc_r+0x28c>
 8001d88:	8809883a 	mov	r4,r17
 8001d8c:	a00b883a 	mov	r5,r20
 8001d90:	80017c80 	call	80017c8 <memmove>
 8001d94:	98c00117 	ldw	r3,4(r19)
 8001d98:	b821883a 	mov	r16,r23
 8001d9c:	982b883a 	mov	r21,r19
 8001da0:	003f6106 	br	8001b28 <_realloc_r+0xe0>
 8001da4:	8805883a 	mov	r2,r17
 8001da8:	a007883a 	mov	r3,r20
 8001dac:	003f9906 	br	8001c14 <_realloc_r+0x1cc>
 8001db0:	8807883a 	mov	r3,r17
 8001db4:	a0800017 	ldw	r2,0(r20)
 8001db8:	b821883a 	mov	r16,r23
 8001dbc:	982b883a 	mov	r21,r19
 8001dc0:	18800015 	stw	r2,0(r3)
 8001dc4:	a0800117 	ldw	r2,4(r20)
 8001dc8:	18800115 	stw	r2,4(r3)
 8001dcc:	a0800217 	ldw	r2,8(r20)
 8001dd0:	18800215 	stw	r2,8(r3)
 8001dd4:	98c00117 	ldw	r3,4(r19)
 8001dd8:	003f5306 	br	8001b28 <_realloc_r+0xe0>
 8001ddc:	adab883a 	add	r21,r21,r22
 8001de0:	3585c83a 	sub	r2,r6,r22
 8001de4:	e5400215 	stw	r21,8(fp)
 8001de8:	10800054 	ori	r2,r2,1
 8001dec:	a8800115 	stw	r2,4(r21)
 8001df0:	a0bfff17 	ldw	r2,-4(r20)
 8001df4:	9009883a 	mov	r4,r18
 8001df8:	1080004c 	andi	r2,r2,1
 8001dfc:	b0acb03a 	or	r22,r22,r2
 8001e00:	a5bfff15 	stw	r22,-4(r20)
 8001e04:	80035180 	call	8003518 <__malloc_unlock>
 8001e08:	a005883a 	mov	r2,r20
 8001e0c:	003f5306 	br	8001b5c <_realloc_r+0x114>
 8001e10:	8809883a 	mov	r4,r17
 8001e14:	a00b883a 	mov	r5,r20
 8001e18:	80017c80 	call	80017c8 <memmove>
 8001e1c:	003f8306 	br	8001c2c <_realloc_r+0x1e4>
 8001e20:	b0800404 	addi	r2,r22,16
 8001e24:	b8bf6016 	blt	r23,r2,8001ba8 <_realloc_r+0x160>
 8001e28:	98800317 	ldw	r2,12(r19)
 8001e2c:	98c00217 	ldw	r3,8(r19)
 8001e30:	81bfff04 	addi	r6,r16,-4
 8001e34:	01000904 	movi	r4,36
 8001e38:	18800315 	stw	r2,12(r3)
 8001e3c:	10c00215 	stw	r3,8(r2)
 8001e40:	9c400204 	addi	r17,r19,8
 8001e44:	21804336 	bltu	r4,r6,8001f54 <_realloc_r+0x50c>
 8001e48:	008004c4 	movi	r2,19
 8001e4c:	11803f2e 	bgeu	r2,r6,8001f4c <_realloc_r+0x504>
 8001e50:	a0800017 	ldw	r2,0(r20)
 8001e54:	98800215 	stw	r2,8(r19)
 8001e58:	a0800117 	ldw	r2,4(r20)
 8001e5c:	98800315 	stw	r2,12(r19)
 8001e60:	008006c4 	movi	r2,27
 8001e64:	11803f36 	bltu	r2,r6,8001f64 <_realloc_r+0x51c>
 8001e68:	98800404 	addi	r2,r19,16
 8001e6c:	a5000204 	addi	r20,r20,8
 8001e70:	a0c00017 	ldw	r3,0(r20)
 8001e74:	10c00015 	stw	r3,0(r2)
 8001e78:	a0c00117 	ldw	r3,4(r20)
 8001e7c:	10c00115 	stw	r3,4(r2)
 8001e80:	a0c00217 	ldw	r3,8(r20)
 8001e84:	10c00215 	stw	r3,8(r2)
 8001e88:	9d87883a 	add	r3,r19,r22
 8001e8c:	bd85c83a 	sub	r2,r23,r22
 8001e90:	e0c00215 	stw	r3,8(fp)
 8001e94:	10800054 	ori	r2,r2,1
 8001e98:	18800115 	stw	r2,4(r3)
 8001e9c:	98800117 	ldw	r2,4(r19)
 8001ea0:	9009883a 	mov	r4,r18
 8001ea4:	1080004c 	andi	r2,r2,1
 8001ea8:	b0acb03a 	or	r22,r22,r2
 8001eac:	9d800115 	stw	r22,4(r19)
 8001eb0:	80035180 	call	8003518 <__malloc_unlock>
 8001eb4:	8805883a 	mov	r2,r17
 8001eb8:	003f2806 	br	8001b5c <_realloc_r+0x114>
 8001ebc:	a0c00217 	ldw	r3,8(r20)
 8001ec0:	88c00215 	stw	r3,8(r17)
 8001ec4:	a0c00317 	ldw	r3,12(r20)
 8001ec8:	88c00315 	stw	r3,12(r17)
 8001ecc:	30801126 	beq	r6,r2,8001f14 <_realloc_r+0x4cc>
 8001ed0:	88800404 	addi	r2,r17,16
 8001ed4:	a0c00404 	addi	r3,r20,16
 8001ed8:	003f4e06 	br	8001c14 <_realloc_r+0x1cc>
 8001edc:	893fff17 	ldw	r4,-4(r17)
 8001ee0:	00bfff04 	movi	r2,-4
 8001ee4:	a023883a 	mov	r17,r20
 8001ee8:	2084703a 	and	r2,r4,r2
 8001eec:	80a1883a 	add	r16,r16,r2
 8001ef0:	003f0d06 	br	8001b28 <_realloc_r+0xe0>
 8001ef4:	a0800217 	ldw	r2,8(r20)
 8001ef8:	98800415 	stw	r2,16(r19)
 8001efc:	a0800317 	ldw	r2,12(r20)
 8001f00:	98800515 	stw	r2,20(r19)
 8001f04:	31000a26 	beq	r6,r4,8001f30 <_realloc_r+0x4e8>
 8001f08:	98c00604 	addi	r3,r19,24
 8001f0c:	a5000404 	addi	r20,r20,16
 8001f10:	003fa806 	br	8001db4 <_realloc_r+0x36c>
 8001f14:	a1000417 	ldw	r4,16(r20)
 8001f18:	88800604 	addi	r2,r17,24
 8001f1c:	a0c00604 	addi	r3,r20,24
 8001f20:	89000415 	stw	r4,16(r17)
 8001f24:	a1000517 	ldw	r4,20(r20)
 8001f28:	89000515 	stw	r4,20(r17)
 8001f2c:	003f3906 	br	8001c14 <_realloc_r+0x1cc>
 8001f30:	a0800417 	ldw	r2,16(r20)
 8001f34:	a5000604 	addi	r20,r20,24
 8001f38:	98c00804 	addi	r3,r19,32
 8001f3c:	98800615 	stw	r2,24(r19)
 8001f40:	a0bfff17 	ldw	r2,-4(r20)
 8001f44:	98800715 	stw	r2,28(r19)
 8001f48:	003f9a06 	br	8001db4 <_realloc_r+0x36c>
 8001f4c:	8805883a 	mov	r2,r17
 8001f50:	003fc706 	br	8001e70 <_realloc_r+0x428>
 8001f54:	8809883a 	mov	r4,r17
 8001f58:	a00b883a 	mov	r5,r20
 8001f5c:	80017c80 	call	80017c8 <memmove>
 8001f60:	003fc906 	br	8001e88 <_realloc_r+0x440>
 8001f64:	a0800217 	ldw	r2,8(r20)
 8001f68:	98800415 	stw	r2,16(r19)
 8001f6c:	a0800317 	ldw	r2,12(r20)
 8001f70:	98800515 	stw	r2,20(r19)
 8001f74:	31000726 	beq	r6,r4,8001f94 <_realloc_r+0x54c>
 8001f78:	98800604 	addi	r2,r19,24
 8001f7c:	a5000404 	addi	r20,r20,16
 8001f80:	003fbb06 	br	8001e70 <_realloc_r+0x428>
 8001f84:	9009883a 	mov	r4,r18
 8001f88:	80035180 	call	8003518 <__malloc_unlock>
 8001f8c:	0005883a 	mov	r2,zero
 8001f90:	003ef206 	br	8001b5c <_realloc_r+0x114>
 8001f94:	a0c00417 	ldw	r3,16(r20)
 8001f98:	a5000604 	addi	r20,r20,24
 8001f9c:	98800804 	addi	r2,r19,32
 8001fa0:	98c00615 	stw	r3,24(r19)
 8001fa4:	a0ffff17 	ldw	r3,-4(r20)
 8001fa8:	98c00715 	stw	r3,28(r19)
 8001fac:	003fb006 	br	8001e70 <_realloc_r+0x428>

08001fb0 <_sbrk_r>:
 8001fb0:	defffd04 	addi	sp,sp,-12
 8001fb4:	dc000015 	stw	r16,0(sp)
 8001fb8:	04020074 	movhi	r16,2049
 8001fbc:	dc400115 	stw	r17,4(sp)
 8001fc0:	842b5804 	addi	r16,r16,-21152
 8001fc4:	2023883a 	mov	r17,r4
 8001fc8:	2809883a 	mov	r4,r5
 8001fcc:	dfc00215 	stw	ra,8(sp)
 8001fd0:	80000015 	stw	zero,0(r16)
 8001fd4:	80036e40 	call	80036e4 <sbrk>
 8001fd8:	00ffffc4 	movi	r3,-1
 8001fdc:	10c00526 	beq	r2,r3,8001ff4 <_sbrk_r+0x44>
 8001fe0:	dfc00217 	ldw	ra,8(sp)
 8001fe4:	dc400117 	ldw	r17,4(sp)
 8001fe8:	dc000017 	ldw	r16,0(sp)
 8001fec:	dec00304 	addi	sp,sp,12
 8001ff0:	f800283a 	ret
 8001ff4:	80c00017 	ldw	r3,0(r16)
 8001ff8:	183ff926 	beq	r3,zero,8001fe0 <_sbrk_r+0x30>
 8001ffc:	88c00015 	stw	r3,0(r17)
 8002000:	003ff706 	br	8001fe0 <_sbrk_r+0x30>

08002004 <__sread>:
 8002004:	defffe04 	addi	sp,sp,-8
 8002008:	dc000015 	stw	r16,0(sp)
 800200c:	2821883a 	mov	r16,r5
 8002010:	2940038f 	ldh	r5,14(r5)
 8002014:	dfc00115 	stw	ra,4(sp)
 8002018:	8002d040 	call	8002d04 <_read_r>
 800201c:	10000716 	blt	r2,zero,800203c <__sread+0x38>
 8002020:	80c01417 	ldw	r3,80(r16)
 8002024:	1887883a 	add	r3,r3,r2
 8002028:	80c01415 	stw	r3,80(r16)
 800202c:	dfc00117 	ldw	ra,4(sp)
 8002030:	dc000017 	ldw	r16,0(sp)
 8002034:	dec00204 	addi	sp,sp,8
 8002038:	f800283a 	ret
 800203c:	80c0030b 	ldhu	r3,12(r16)
 8002040:	18fbffcc 	andi	r3,r3,61439
 8002044:	80c0030d 	sth	r3,12(r16)
 8002048:	dfc00117 	ldw	ra,4(sp)
 800204c:	dc000017 	ldw	r16,0(sp)
 8002050:	dec00204 	addi	sp,sp,8
 8002054:	f800283a 	ret

08002058 <__seofread>:
 8002058:	0005883a 	mov	r2,zero
 800205c:	f800283a 	ret

08002060 <__swrite>:
 8002060:	2880030b 	ldhu	r2,12(r5)
 8002064:	defffb04 	addi	sp,sp,-20
 8002068:	dcc00315 	stw	r19,12(sp)
 800206c:	dc800215 	stw	r18,8(sp)
 8002070:	dc400115 	stw	r17,4(sp)
 8002074:	dc000015 	stw	r16,0(sp)
 8002078:	dfc00415 	stw	ra,16(sp)
 800207c:	10c0400c 	andi	r3,r2,256
 8002080:	2821883a 	mov	r16,r5
 8002084:	2027883a 	mov	r19,r4
 8002088:	3025883a 	mov	r18,r6
 800208c:	3823883a 	mov	r17,r7
 8002090:	18000526 	beq	r3,zero,80020a8 <__swrite+0x48>
 8002094:	2940038f 	ldh	r5,14(r5)
 8002098:	000d883a 	mov	r6,zero
 800209c:	01c00084 	movi	r7,2
 80020a0:	8002af00 	call	8002af0 <_lseek_r>
 80020a4:	8080030b 	ldhu	r2,12(r16)
 80020a8:	8140038f 	ldh	r5,14(r16)
 80020ac:	10bbffcc 	andi	r2,r2,61439
 80020b0:	9809883a 	mov	r4,r19
 80020b4:	900d883a 	mov	r6,r18
 80020b8:	880f883a 	mov	r7,r17
 80020bc:	8080030d 	sth	r2,12(r16)
 80020c0:	dfc00417 	ldw	ra,16(sp)
 80020c4:	dcc00317 	ldw	r19,12(sp)
 80020c8:	dc800217 	ldw	r18,8(sp)
 80020cc:	dc400117 	ldw	r17,4(sp)
 80020d0:	dc000017 	ldw	r16,0(sp)
 80020d4:	dec00504 	addi	sp,sp,20
 80020d8:	80021401 	jmpi	8002140 <_write_r>

080020dc <__sseek>:
 80020dc:	defffe04 	addi	sp,sp,-8
 80020e0:	dc000015 	stw	r16,0(sp)
 80020e4:	2821883a 	mov	r16,r5
 80020e8:	2940038f 	ldh	r5,14(r5)
 80020ec:	dfc00115 	stw	ra,4(sp)
 80020f0:	8002af00 	call	8002af0 <_lseek_r>
 80020f4:	00ffffc4 	movi	r3,-1
 80020f8:	10c00826 	beq	r2,r3,800211c <__sseek+0x40>
 80020fc:	80c0030b 	ldhu	r3,12(r16)
 8002100:	80801415 	stw	r2,80(r16)
 8002104:	18c40014 	ori	r3,r3,4096
 8002108:	80c0030d 	sth	r3,12(r16)
 800210c:	dfc00117 	ldw	ra,4(sp)
 8002110:	dc000017 	ldw	r16,0(sp)
 8002114:	dec00204 	addi	sp,sp,8
 8002118:	f800283a 	ret
 800211c:	80c0030b 	ldhu	r3,12(r16)
 8002120:	18fbffcc 	andi	r3,r3,61439
 8002124:	80c0030d 	sth	r3,12(r16)
 8002128:	dfc00117 	ldw	ra,4(sp)
 800212c:	dc000017 	ldw	r16,0(sp)
 8002130:	dec00204 	addi	sp,sp,8
 8002134:	f800283a 	ret

08002138 <__sclose>:
 8002138:	2940038f 	ldh	r5,14(r5)
 800213c:	80022f01 	jmpi	80022f0 <_close_r>

08002140 <_write_r>:
 8002140:	defffd04 	addi	sp,sp,-12
 8002144:	dc000015 	stw	r16,0(sp)
 8002148:	04020074 	movhi	r16,2049
 800214c:	dc400115 	stw	r17,4(sp)
 8002150:	842b5804 	addi	r16,r16,-21152
 8002154:	2023883a 	mov	r17,r4
 8002158:	2809883a 	mov	r4,r5
 800215c:	300b883a 	mov	r5,r6
 8002160:	380d883a 	mov	r6,r7
 8002164:	dfc00215 	stw	ra,8(sp)
 8002168:	80000015 	stw	zero,0(r16)
 800216c:	80037e40 	call	80037e4 <write>
 8002170:	00ffffc4 	movi	r3,-1
 8002174:	10c00526 	beq	r2,r3,800218c <_write_r+0x4c>
 8002178:	dfc00217 	ldw	ra,8(sp)
 800217c:	dc400117 	ldw	r17,4(sp)
 8002180:	dc000017 	ldw	r16,0(sp)
 8002184:	dec00304 	addi	sp,sp,12
 8002188:	f800283a 	ret
 800218c:	80c00017 	ldw	r3,0(r16)
 8002190:	183ff926 	beq	r3,zero,8002178 <_write_r+0x38>
 8002194:	88c00015 	stw	r3,0(r17)
 8002198:	003ff706 	br	8002178 <_write_r+0x38>

0800219c <__swsetup_r>:
 800219c:	00820074 	movhi	r2,2049
 80021a0:	defffd04 	addi	sp,sp,-12
 80021a4:	10a42c04 	addi	r2,r2,-28496
 80021a8:	dc400115 	stw	r17,4(sp)
 80021ac:	2023883a 	mov	r17,r4
 80021b0:	11000017 	ldw	r4,0(r2)
 80021b4:	dc000015 	stw	r16,0(sp)
 80021b8:	dfc00215 	stw	ra,8(sp)
 80021bc:	2821883a 	mov	r16,r5
 80021c0:	20000226 	beq	r4,zero,80021cc <__swsetup_r+0x30>
 80021c4:	20c00e17 	ldw	r3,56(r4)
 80021c8:	18003126 	beq	r3,zero,8002290 <__swsetup_r+0xf4>
 80021cc:	8080030b 	ldhu	r2,12(r16)
 80021d0:	10c0020c 	andi	r3,r2,8
 80021d4:	100d883a 	mov	r6,r2
 80021d8:	18000f26 	beq	r3,zero,8002218 <__swsetup_r+0x7c>
 80021dc:	80c00417 	ldw	r3,16(r16)
 80021e0:	18001526 	beq	r3,zero,8002238 <__swsetup_r+0x9c>
 80021e4:	1100004c 	andi	r4,r2,1
 80021e8:	20001c1e 	bne	r4,zero,800225c <__swsetup_r+0xc0>
 80021ec:	1080008c 	andi	r2,r2,2
 80021f0:	1000291e 	bne	r2,zero,8002298 <__swsetup_r+0xfc>
 80021f4:	80800517 	ldw	r2,20(r16)
 80021f8:	80800215 	stw	r2,8(r16)
 80021fc:	18001c26 	beq	r3,zero,8002270 <__swsetup_r+0xd4>
 8002200:	0005883a 	mov	r2,zero
 8002204:	dfc00217 	ldw	ra,8(sp)
 8002208:	dc400117 	ldw	r17,4(sp)
 800220c:	dc000017 	ldw	r16,0(sp)
 8002210:	dec00304 	addi	sp,sp,12
 8002214:	f800283a 	ret
 8002218:	3080040c 	andi	r2,r6,16
 800221c:	10002e26 	beq	r2,zero,80022d8 <__swsetup_r+0x13c>
 8002220:	3080010c 	andi	r2,r6,4
 8002224:	10001e1e 	bne	r2,zero,80022a0 <__swsetup_r+0x104>
 8002228:	80c00417 	ldw	r3,16(r16)
 800222c:	30800214 	ori	r2,r6,8
 8002230:	8080030d 	sth	r2,12(r16)
 8002234:	183feb1e 	bne	r3,zero,80021e4 <__swsetup_r+0x48>
 8002238:	1140a00c 	andi	r5,r2,640
 800223c:	01008004 	movi	r4,512
 8002240:	293fe826 	beq	r5,r4,80021e4 <__swsetup_r+0x48>
 8002244:	8809883a 	mov	r4,r17
 8002248:	800b883a 	mov	r5,r16
 800224c:	8002b4c0 	call	8002b4c <__smakebuf_r>
 8002250:	8080030b 	ldhu	r2,12(r16)
 8002254:	80c00417 	ldw	r3,16(r16)
 8002258:	003fe206 	br	80021e4 <__swsetup_r+0x48>
 800225c:	80800517 	ldw	r2,20(r16)
 8002260:	80000215 	stw	zero,8(r16)
 8002264:	0085c83a 	sub	r2,zero,r2
 8002268:	80800615 	stw	r2,24(r16)
 800226c:	183fe41e 	bne	r3,zero,8002200 <__swsetup_r+0x64>
 8002270:	80c0030b 	ldhu	r3,12(r16)
 8002274:	0005883a 	mov	r2,zero
 8002278:	1900200c 	andi	r4,r3,128
 800227c:	203fe126 	beq	r4,zero,8002204 <__swsetup_r+0x68>
 8002280:	18c01014 	ori	r3,r3,64
 8002284:	80c0030d 	sth	r3,12(r16)
 8002288:	00bfffc4 	movi	r2,-1
 800228c:	003fdd06 	br	8002204 <__swsetup_r+0x68>
 8002290:	80007680 	call	8000768 <__sinit>
 8002294:	003fcd06 	br	80021cc <__swsetup_r+0x30>
 8002298:	0005883a 	mov	r2,zero
 800229c:	003fd606 	br	80021f8 <__swsetup_r+0x5c>
 80022a0:	81400c17 	ldw	r5,48(r16)
 80022a4:	28000626 	beq	r5,zero,80022c0 <__swsetup_r+0x124>
 80022a8:	80801004 	addi	r2,r16,64
 80022ac:	28800326 	beq	r5,r2,80022bc <__swsetup_r+0x120>
 80022b0:	8809883a 	mov	r4,r17
 80022b4:	80028000 	call	8002800 <_free_r>
 80022b8:	8180030b 	ldhu	r6,12(r16)
 80022bc:	80000c15 	stw	zero,48(r16)
 80022c0:	80c00417 	ldw	r3,16(r16)
 80022c4:	00bff6c4 	movi	r2,-37
 80022c8:	118c703a 	and	r6,r2,r6
 80022cc:	80000115 	stw	zero,4(r16)
 80022d0:	80c00015 	stw	r3,0(r16)
 80022d4:	003fd506 	br	800222c <__swsetup_r+0x90>
 80022d8:	00800244 	movi	r2,9
 80022dc:	88800015 	stw	r2,0(r17)
 80022e0:	30801014 	ori	r2,r6,64
 80022e4:	8080030d 	sth	r2,12(r16)
 80022e8:	00bfffc4 	movi	r2,-1
 80022ec:	003fc506 	br	8002204 <__swsetup_r+0x68>

080022f0 <_close_r>:
 80022f0:	defffd04 	addi	sp,sp,-12
 80022f4:	dc000015 	stw	r16,0(sp)
 80022f8:	04020074 	movhi	r16,2049
 80022fc:	dc400115 	stw	r17,4(sp)
 8002300:	842b5804 	addi	r16,r16,-21152
 8002304:	2023883a 	mov	r17,r4
 8002308:	2809883a 	mov	r4,r5
 800230c:	dfc00215 	stw	ra,8(sp)
 8002310:	80000015 	stw	zero,0(r16)
 8002314:	8002f880 	call	8002f88 <close>
 8002318:	00ffffc4 	movi	r3,-1
 800231c:	10c00526 	beq	r2,r3,8002334 <_close_r+0x44>
 8002320:	dfc00217 	ldw	ra,8(sp)
 8002324:	dc400117 	ldw	r17,4(sp)
 8002328:	dc000017 	ldw	r16,0(sp)
 800232c:	dec00304 	addi	sp,sp,12
 8002330:	f800283a 	ret
 8002334:	80c00017 	ldw	r3,0(r16)
 8002338:	183ff926 	beq	r3,zero,8002320 <_close_r+0x30>
 800233c:	88c00015 	stw	r3,0(r17)
 8002340:	003ff706 	br	8002320 <_close_r+0x30>

08002344 <_fclose_r>:
 8002344:	28003926 	beq	r5,zero,800242c <_fclose_r+0xe8>
 8002348:	defffc04 	addi	sp,sp,-16
 800234c:	dc400115 	stw	r17,4(sp)
 8002350:	dc000015 	stw	r16,0(sp)
 8002354:	dfc00315 	stw	ra,12(sp)
 8002358:	dc800215 	stw	r18,8(sp)
 800235c:	2023883a 	mov	r17,r4
 8002360:	2821883a 	mov	r16,r5
 8002364:	20000226 	beq	r4,zero,8002370 <_fclose_r+0x2c>
 8002368:	20800e17 	ldw	r2,56(r4)
 800236c:	10002726 	beq	r2,zero,800240c <_fclose_r+0xc8>
 8002370:	8080030f 	ldh	r2,12(r16)
 8002374:	1000071e 	bne	r2,zero,8002394 <_fclose_r+0x50>
 8002378:	0005883a 	mov	r2,zero
 800237c:	dfc00317 	ldw	ra,12(sp)
 8002380:	dc800217 	ldw	r18,8(sp)
 8002384:	dc400117 	ldw	r17,4(sp)
 8002388:	dc000017 	ldw	r16,0(sp)
 800238c:	dec00404 	addi	sp,sp,16
 8002390:	f800283a 	ret
 8002394:	8809883a 	mov	r4,r17
 8002398:	800b883a 	mov	r5,r16
 800239c:	80024480 	call	8002448 <__sflush_r>
 80023a0:	1025883a 	mov	r18,r2
 80023a4:	80800b17 	ldw	r2,44(r16)
 80023a8:	10000426 	beq	r2,zero,80023bc <_fclose_r+0x78>
 80023ac:	81400717 	ldw	r5,28(r16)
 80023b0:	8809883a 	mov	r4,r17
 80023b4:	103ee83a 	callr	r2
 80023b8:	10001616 	blt	r2,zero,8002414 <_fclose_r+0xd0>
 80023bc:	8080030b 	ldhu	r2,12(r16)
 80023c0:	1080200c 	andi	r2,r2,128
 80023c4:	1000151e 	bne	r2,zero,800241c <_fclose_r+0xd8>
 80023c8:	81400c17 	ldw	r5,48(r16)
 80023cc:	28000526 	beq	r5,zero,80023e4 <_fclose_r+0xa0>
 80023d0:	80801004 	addi	r2,r16,64
 80023d4:	28800226 	beq	r5,r2,80023e0 <_fclose_r+0x9c>
 80023d8:	8809883a 	mov	r4,r17
 80023dc:	80028000 	call	8002800 <_free_r>
 80023e0:	80000c15 	stw	zero,48(r16)
 80023e4:	81401117 	ldw	r5,68(r16)
 80023e8:	28000326 	beq	r5,zero,80023f8 <_fclose_r+0xb4>
 80023ec:	8809883a 	mov	r4,r17
 80023f0:	80028000 	call	8002800 <_free_r>
 80023f4:	80001115 	stw	zero,68(r16)
 80023f8:	80007780 	call	8000778 <__sfp_lock_acquire>
 80023fc:	8000030d 	sth	zero,12(r16)
 8002400:	800077c0 	call	800077c <__sfp_lock_release>
 8002404:	9005883a 	mov	r2,r18
 8002408:	003fdc06 	br	800237c <_fclose_r+0x38>
 800240c:	80007680 	call	8000768 <__sinit>
 8002410:	003fd706 	br	8002370 <_fclose_r+0x2c>
 8002414:	04bfffc4 	movi	r18,-1
 8002418:	003fe806 	br	80023bc <_fclose_r+0x78>
 800241c:	81400417 	ldw	r5,16(r16)
 8002420:	8809883a 	mov	r4,r17
 8002424:	80028000 	call	8002800 <_free_r>
 8002428:	003fe706 	br	80023c8 <_fclose_r+0x84>
 800242c:	0005883a 	mov	r2,zero
 8002430:	f800283a 	ret

08002434 <fclose>:
 8002434:	00820074 	movhi	r2,2049
 8002438:	10a42c04 	addi	r2,r2,-28496
 800243c:	200b883a 	mov	r5,r4
 8002440:	11000017 	ldw	r4,0(r2)
 8002444:	80023441 	jmpi	8002344 <_fclose_r>

08002448 <__sflush_r>:
 8002448:	2880030b 	ldhu	r2,12(r5)
 800244c:	defffb04 	addi	sp,sp,-20
 8002450:	dcc00315 	stw	r19,12(sp)
 8002454:	dc400115 	stw	r17,4(sp)
 8002458:	dfc00415 	stw	ra,16(sp)
 800245c:	dc800215 	stw	r18,8(sp)
 8002460:	dc000015 	stw	r16,0(sp)
 8002464:	10c0020c 	andi	r3,r2,8
 8002468:	2823883a 	mov	r17,r5
 800246c:	2027883a 	mov	r19,r4
 8002470:	1800311e 	bne	r3,zero,8002538 <__sflush_r+0xf0>
 8002474:	28c00117 	ldw	r3,4(r5)
 8002478:	10820014 	ori	r2,r2,2048
 800247c:	2880030d 	sth	r2,12(r5)
 8002480:	00c04b0e 	bge	zero,r3,80025b0 <__sflush_r+0x168>
 8002484:	8a000a17 	ldw	r8,40(r17)
 8002488:	40002326 	beq	r8,zero,8002518 <__sflush_r+0xd0>
 800248c:	9c000017 	ldw	r16,0(r19)
 8002490:	10c4000c 	andi	r3,r2,4096
 8002494:	98000015 	stw	zero,0(r19)
 8002498:	18004826 	beq	r3,zero,80025bc <__sflush_r+0x174>
 800249c:	89801417 	ldw	r6,80(r17)
 80024a0:	10c0010c 	andi	r3,r2,4
 80024a4:	18000626 	beq	r3,zero,80024c0 <__sflush_r+0x78>
 80024a8:	88c00117 	ldw	r3,4(r17)
 80024ac:	88800c17 	ldw	r2,48(r17)
 80024b0:	30cdc83a 	sub	r6,r6,r3
 80024b4:	10000226 	beq	r2,zero,80024c0 <__sflush_r+0x78>
 80024b8:	88800f17 	ldw	r2,60(r17)
 80024bc:	308dc83a 	sub	r6,r6,r2
 80024c0:	89400717 	ldw	r5,28(r17)
 80024c4:	9809883a 	mov	r4,r19
 80024c8:	000f883a 	mov	r7,zero
 80024cc:	403ee83a 	callr	r8
 80024d0:	00ffffc4 	movi	r3,-1
 80024d4:	10c04426 	beq	r2,r3,80025e8 <__sflush_r+0x1a0>
 80024d8:	88c0030b 	ldhu	r3,12(r17)
 80024dc:	89000417 	ldw	r4,16(r17)
 80024e0:	88000115 	stw	zero,4(r17)
 80024e4:	197dffcc 	andi	r5,r3,63487
 80024e8:	8940030d 	sth	r5,12(r17)
 80024ec:	89000015 	stw	r4,0(r17)
 80024f0:	18c4000c 	andi	r3,r3,4096
 80024f4:	18002c1e 	bne	r3,zero,80025a8 <__sflush_r+0x160>
 80024f8:	89400c17 	ldw	r5,48(r17)
 80024fc:	9c000015 	stw	r16,0(r19)
 8002500:	28000526 	beq	r5,zero,8002518 <__sflush_r+0xd0>
 8002504:	88801004 	addi	r2,r17,64
 8002508:	28800226 	beq	r5,r2,8002514 <__sflush_r+0xcc>
 800250c:	9809883a 	mov	r4,r19
 8002510:	80028000 	call	8002800 <_free_r>
 8002514:	88000c15 	stw	zero,48(r17)
 8002518:	0005883a 	mov	r2,zero
 800251c:	dfc00417 	ldw	ra,16(sp)
 8002520:	dcc00317 	ldw	r19,12(sp)
 8002524:	dc800217 	ldw	r18,8(sp)
 8002528:	dc400117 	ldw	r17,4(sp)
 800252c:	dc000017 	ldw	r16,0(sp)
 8002530:	dec00504 	addi	sp,sp,20
 8002534:	f800283a 	ret
 8002538:	2c800417 	ldw	r18,16(r5)
 800253c:	903ff626 	beq	r18,zero,8002518 <__sflush_r+0xd0>
 8002540:	2c000017 	ldw	r16,0(r5)
 8002544:	108000cc 	andi	r2,r2,3
 8002548:	2c800015 	stw	r18,0(r5)
 800254c:	84a1c83a 	sub	r16,r16,r18
 8002550:	1000131e 	bne	r2,zero,80025a0 <__sflush_r+0x158>
 8002554:	28800517 	ldw	r2,20(r5)
 8002558:	88800215 	stw	r2,8(r17)
 800255c:	04000316 	blt	zero,r16,800256c <__sflush_r+0x124>
 8002560:	003fed06 	br	8002518 <__sflush_r+0xd0>
 8002564:	90a5883a 	add	r18,r18,r2
 8002568:	043feb0e 	bge	zero,r16,8002518 <__sflush_r+0xd0>
 800256c:	88800917 	ldw	r2,36(r17)
 8002570:	89400717 	ldw	r5,28(r17)
 8002574:	800f883a 	mov	r7,r16
 8002578:	900d883a 	mov	r6,r18
 800257c:	9809883a 	mov	r4,r19
 8002580:	103ee83a 	callr	r2
 8002584:	80a1c83a 	sub	r16,r16,r2
 8002588:	00bff616 	blt	zero,r2,8002564 <__sflush_r+0x11c>
 800258c:	88c0030b 	ldhu	r3,12(r17)
 8002590:	00bfffc4 	movi	r2,-1
 8002594:	18c01014 	ori	r3,r3,64
 8002598:	88c0030d 	sth	r3,12(r17)
 800259c:	003fdf06 	br	800251c <__sflush_r+0xd4>
 80025a0:	0005883a 	mov	r2,zero
 80025a4:	003fec06 	br	8002558 <__sflush_r+0x110>
 80025a8:	88801415 	stw	r2,80(r17)
 80025ac:	003fd206 	br	80024f8 <__sflush_r+0xb0>
 80025b0:	28c00f17 	ldw	r3,60(r5)
 80025b4:	00ffb316 	blt	zero,r3,8002484 <__sflush_r+0x3c>
 80025b8:	003fd706 	br	8002518 <__sflush_r+0xd0>
 80025bc:	89400717 	ldw	r5,28(r17)
 80025c0:	000d883a 	mov	r6,zero
 80025c4:	9809883a 	mov	r4,r19
 80025c8:	01c00044 	movi	r7,1
 80025cc:	403ee83a 	callr	r8
 80025d0:	100d883a 	mov	r6,r2
 80025d4:	00bfffc4 	movi	r2,-1
 80025d8:	30801426 	beq	r6,r2,800262c <__sflush_r+0x1e4>
 80025dc:	8880030b 	ldhu	r2,12(r17)
 80025e0:	8a000a17 	ldw	r8,40(r17)
 80025e4:	003fae06 	br	80024a0 <__sflush_r+0x58>
 80025e8:	98c00017 	ldw	r3,0(r19)
 80025ec:	183fba26 	beq	r3,zero,80024d8 <__sflush_r+0x90>
 80025f0:	01000744 	movi	r4,29
 80025f4:	19000626 	beq	r3,r4,8002610 <__sflush_r+0x1c8>
 80025f8:	01000584 	movi	r4,22
 80025fc:	19000426 	beq	r3,r4,8002610 <__sflush_r+0x1c8>
 8002600:	88c0030b 	ldhu	r3,12(r17)
 8002604:	18c01014 	ori	r3,r3,64
 8002608:	88c0030d 	sth	r3,12(r17)
 800260c:	003fc306 	br	800251c <__sflush_r+0xd4>
 8002610:	8880030b 	ldhu	r2,12(r17)
 8002614:	88c00417 	ldw	r3,16(r17)
 8002618:	88000115 	stw	zero,4(r17)
 800261c:	10bdffcc 	andi	r2,r2,63487
 8002620:	8880030d 	sth	r2,12(r17)
 8002624:	88c00015 	stw	r3,0(r17)
 8002628:	003fb306 	br	80024f8 <__sflush_r+0xb0>
 800262c:	98800017 	ldw	r2,0(r19)
 8002630:	103fea26 	beq	r2,zero,80025dc <__sflush_r+0x194>
 8002634:	00c00744 	movi	r3,29
 8002638:	10c00226 	beq	r2,r3,8002644 <__sflush_r+0x1fc>
 800263c:	00c00584 	movi	r3,22
 8002640:	10ffd21e 	bne	r2,r3,800258c <__sflush_r+0x144>
 8002644:	9c000015 	stw	r16,0(r19)
 8002648:	0005883a 	mov	r2,zero
 800264c:	003fb306 	br	800251c <__sflush_r+0xd4>

08002650 <_fflush_r>:
 8002650:	defffd04 	addi	sp,sp,-12
 8002654:	dc000115 	stw	r16,4(sp)
 8002658:	dfc00215 	stw	ra,8(sp)
 800265c:	2021883a 	mov	r16,r4
 8002660:	20000226 	beq	r4,zero,800266c <_fflush_r+0x1c>
 8002664:	20800e17 	ldw	r2,56(r4)
 8002668:	10000c26 	beq	r2,zero,800269c <_fflush_r+0x4c>
 800266c:	2880030f 	ldh	r2,12(r5)
 8002670:	1000051e 	bne	r2,zero,8002688 <_fflush_r+0x38>
 8002674:	0005883a 	mov	r2,zero
 8002678:	dfc00217 	ldw	ra,8(sp)
 800267c:	dc000117 	ldw	r16,4(sp)
 8002680:	dec00304 	addi	sp,sp,12
 8002684:	f800283a 	ret
 8002688:	8009883a 	mov	r4,r16
 800268c:	dfc00217 	ldw	ra,8(sp)
 8002690:	dc000117 	ldw	r16,4(sp)
 8002694:	dec00304 	addi	sp,sp,12
 8002698:	80024481 	jmpi	8002448 <__sflush_r>
 800269c:	d9400015 	stw	r5,0(sp)
 80026a0:	80007680 	call	8000768 <__sinit>
 80026a4:	d9400017 	ldw	r5,0(sp)
 80026a8:	003ff006 	br	800266c <_fflush_r+0x1c>

080026ac <fflush>:
 80026ac:	20000526 	beq	r4,zero,80026c4 <fflush+0x18>
 80026b0:	00820074 	movhi	r2,2049
 80026b4:	10a42c04 	addi	r2,r2,-28496
 80026b8:	200b883a 	mov	r5,r4
 80026bc:	11000017 	ldw	r4,0(r2)
 80026c0:	80026501 	jmpi	8002650 <_fflush_r>
 80026c4:	00820074 	movhi	r2,2049
 80026c8:	10a42b04 	addi	r2,r2,-28500
 80026cc:	11000017 	ldw	r4,0(r2)
 80026d0:	01420034 	movhi	r5,2048
 80026d4:	29499404 	addi	r5,r5,9808
 80026d8:	8000d3c1 	jmpi	8000d3c <_fwalk_reent>

080026dc <_malloc_trim_r>:
 80026dc:	defffb04 	addi	sp,sp,-20
 80026e0:	dcc00315 	stw	r19,12(sp)
 80026e4:	04c20034 	movhi	r19,2048
 80026e8:	dc800215 	stw	r18,8(sp)
 80026ec:	dc400115 	stw	r17,4(sp)
 80026f0:	dc000015 	stw	r16,0(sp)
 80026f4:	dfc00415 	stw	ra,16(sp)
 80026f8:	2821883a 	mov	r16,r5
 80026fc:	9cde2e04 	addi	r19,r19,30904
 8002700:	2025883a 	mov	r18,r4
 8002704:	80034f80 	call	80034f8 <__malloc_lock>
 8002708:	98800217 	ldw	r2,8(r19)
 800270c:	14400117 	ldw	r17,4(r2)
 8002710:	00bfff04 	movi	r2,-4
 8002714:	88a2703a 	and	r17,r17,r2
 8002718:	8c21c83a 	sub	r16,r17,r16
 800271c:	8403fbc4 	addi	r16,r16,4079
 8002720:	8020d33a 	srli	r16,r16,12
 8002724:	0083ffc4 	movi	r2,4095
 8002728:	843fffc4 	addi	r16,r16,-1
 800272c:	8020933a 	slli	r16,r16,12
 8002730:	1400060e 	bge	r2,r16,800274c <_malloc_trim_r+0x70>
 8002734:	9009883a 	mov	r4,r18
 8002738:	000b883a 	mov	r5,zero
 800273c:	8001fb00 	call	8001fb0 <_sbrk_r>
 8002740:	98c00217 	ldw	r3,8(r19)
 8002744:	1c47883a 	add	r3,r3,r17
 8002748:	10c00a26 	beq	r2,r3,8002774 <_malloc_trim_r+0x98>
 800274c:	9009883a 	mov	r4,r18
 8002750:	80035180 	call	8003518 <__malloc_unlock>
 8002754:	0005883a 	mov	r2,zero
 8002758:	dfc00417 	ldw	ra,16(sp)
 800275c:	dcc00317 	ldw	r19,12(sp)
 8002760:	dc800217 	ldw	r18,8(sp)
 8002764:	dc400117 	ldw	r17,4(sp)
 8002768:	dc000017 	ldw	r16,0(sp)
 800276c:	dec00504 	addi	sp,sp,20
 8002770:	f800283a 	ret
 8002774:	9009883a 	mov	r4,r18
 8002778:	040bc83a 	sub	r5,zero,r16
 800277c:	8001fb00 	call	8001fb0 <_sbrk_r>
 8002780:	00ffffc4 	movi	r3,-1
 8002784:	10c00d26 	beq	r2,r3,80027bc <_malloc_trim_r+0xe0>
 8002788:	00c20074 	movhi	r3,2049
 800278c:	18eb6004 	addi	r3,r3,-21120
 8002790:	18800017 	ldw	r2,0(r3)
 8002794:	99000217 	ldw	r4,8(r19)
 8002798:	8c23c83a 	sub	r17,r17,r16
 800279c:	8c400054 	ori	r17,r17,1
 80027a0:	1421c83a 	sub	r16,r2,r16
 80027a4:	24400115 	stw	r17,4(r4)
 80027a8:	9009883a 	mov	r4,r18
 80027ac:	1c000015 	stw	r16,0(r3)
 80027b0:	80035180 	call	8003518 <__malloc_unlock>
 80027b4:	00800044 	movi	r2,1
 80027b8:	003fe706 	br	8002758 <_malloc_trim_r+0x7c>
 80027bc:	9009883a 	mov	r4,r18
 80027c0:	000b883a 	mov	r5,zero
 80027c4:	8001fb00 	call	8001fb0 <_sbrk_r>
 80027c8:	99000217 	ldw	r4,8(r19)
 80027cc:	014003c4 	movi	r5,15
 80027d0:	1107c83a 	sub	r3,r2,r4
 80027d4:	28ffdd0e 	bge	r5,r3,800274c <_malloc_trim_r+0x70>
 80027d8:	01420074 	movhi	r5,2049
 80027dc:	29642d04 	addi	r5,r5,-28492
 80027e0:	29400017 	ldw	r5,0(r5)
 80027e4:	18c00054 	ori	r3,r3,1
 80027e8:	20c00115 	stw	r3,4(r4)
 80027ec:	00c20074 	movhi	r3,2049
 80027f0:	1145c83a 	sub	r2,r2,r5
 80027f4:	18eb6004 	addi	r3,r3,-21120
 80027f8:	18800015 	stw	r2,0(r3)
 80027fc:	003fd306 	br	800274c <_malloc_trim_r+0x70>

08002800 <_free_r>:
 8002800:	28004c26 	beq	r5,zero,8002934 <_free_r+0x134>
 8002804:	defffd04 	addi	sp,sp,-12
 8002808:	dc400115 	stw	r17,4(sp)
 800280c:	dc000015 	stw	r16,0(sp)
 8002810:	2023883a 	mov	r17,r4
 8002814:	2821883a 	mov	r16,r5
 8002818:	dfc00215 	stw	ra,8(sp)
 800281c:	80034f80 	call	80034f8 <__malloc_lock>
 8002820:	813fff17 	ldw	r4,-4(r16)
 8002824:	00bfff84 	movi	r2,-2
 8002828:	02420034 	movhi	r9,2048
 800282c:	81bffe04 	addi	r6,r16,-8
 8002830:	2084703a 	and	r2,r4,r2
 8002834:	4a5e2e04 	addi	r9,r9,30904
 8002838:	308b883a 	add	r5,r6,r2
 800283c:	2a000117 	ldw	r8,4(r5)
 8002840:	49c00217 	ldw	r7,8(r9)
 8002844:	00ffff04 	movi	r3,-4
 8002848:	40c6703a 	and	r3,r8,r3
 800284c:	39405326 	beq	r7,r5,800299c <_free_r+0x19c>
 8002850:	28c00115 	stw	r3,4(r5)
 8002854:	2100004c 	andi	r4,r4,1
 8002858:	2000091e 	bne	r4,zero,8002880 <_free_r+0x80>
 800285c:	81fffe17 	ldw	r7,-8(r16)
 8002860:	4a000204 	addi	r8,r9,8
 8002864:	31cdc83a 	sub	r6,r6,r7
 8002868:	31000217 	ldw	r4,8(r6)
 800286c:	11c5883a 	add	r2,r2,r7
 8002870:	22006126 	beq	r4,r8,80029f8 <_free_r+0x1f8>
 8002874:	31c00317 	ldw	r7,12(r6)
 8002878:	21c00315 	stw	r7,12(r4)
 800287c:	39000215 	stw	r4,8(r7)
 8002880:	28c9883a 	add	r4,r5,r3
 8002884:	21c00117 	ldw	r7,4(r4)
 8002888:	39c0004c 	andi	r7,r7,1
 800288c:	38000d1e 	bne	r7,zero,80028c4 <_free_r+0xc4>
 8002890:	29000217 	ldw	r4,8(r5)
 8002894:	10c5883a 	add	r2,r2,r3
 8002898:	00c20034 	movhi	r3,2048
 800289c:	18de3004 	addi	r3,r3,30912
 80028a0:	20c07526 	beq	r4,r3,8002a78 <_free_r+0x278>
 80028a4:	29c00317 	ldw	r7,12(r5)
 80028a8:	11400054 	ori	r5,r2,1
 80028ac:	3087883a 	add	r3,r6,r2
 80028b0:	21c00315 	stw	r7,12(r4)
 80028b4:	39000215 	stw	r4,8(r7)
 80028b8:	31400115 	stw	r5,4(r6)
 80028bc:	18800015 	stw	r2,0(r3)
 80028c0:	00000406 	br	80028d4 <_free_r+0xd4>
 80028c4:	10c00054 	ori	r3,r2,1
 80028c8:	30c00115 	stw	r3,4(r6)
 80028cc:	3087883a 	add	r3,r6,r2
 80028d0:	18800015 	stw	r2,0(r3)
 80028d4:	00c07fc4 	movi	r3,511
 80028d8:	18801736 	bltu	r3,r2,8002938 <_free_r+0x138>
 80028dc:	1004d0fa 	srli	r2,r2,3
 80028e0:	01400044 	movi	r5,1
 80028e4:	49000117 	ldw	r4,4(r9)
 80028e8:	1087883a 	add	r3,r2,r2
 80028ec:	18c7883a 	add	r3,r3,r3
 80028f0:	1005d0ba 	srai	r2,r2,2
 80028f4:	18c7883a 	add	r3,r3,r3
 80028f8:	1a47883a 	add	r3,r3,r9
 80028fc:	19c00217 	ldw	r7,8(r3)
 8002900:	2884983a 	sll	r2,r5,r2
 8002904:	30c00315 	stw	r3,12(r6)
 8002908:	31c00215 	stw	r7,8(r6)
 800290c:	1104b03a 	or	r2,r2,r4
 8002910:	19800215 	stw	r6,8(r3)
 8002914:	48800115 	stw	r2,4(r9)
 8002918:	39800315 	stw	r6,12(r7)
 800291c:	8809883a 	mov	r4,r17
 8002920:	dfc00217 	ldw	ra,8(sp)
 8002924:	dc400117 	ldw	r17,4(sp)
 8002928:	dc000017 	ldw	r16,0(sp)
 800292c:	dec00304 	addi	sp,sp,12
 8002930:	80035181 	jmpi	8003518 <__malloc_unlock>
 8002934:	f800283a 	ret
 8002938:	1006d27a 	srli	r3,r2,9
 800293c:	01000104 	movi	r4,4
 8002940:	20c04036 	bltu	r4,r3,8002a44 <_free_r+0x244>
 8002944:	1006d1ba 	srli	r3,r2,6
 8002948:	19400e04 	addi	r5,r3,56
 800294c:	2947883a 	add	r3,r5,r5
 8002950:	18c7883a 	add	r3,r3,r3
 8002954:	18c7883a 	add	r3,r3,r3
 8002958:	1a49883a 	add	r4,r3,r9
 800295c:	20c00217 	ldw	r3,8(r4)
 8002960:	01c20034 	movhi	r7,2048
 8002964:	39de2e04 	addi	r7,r7,30904
 8002968:	19003b26 	beq	r3,r4,8002a58 <_free_r+0x258>
 800296c:	01ffff04 	movi	r7,-4
 8002970:	19400117 	ldw	r5,4(r3)
 8002974:	29ca703a 	and	r5,r5,r7
 8002978:	1140022e 	bgeu	r2,r5,8002984 <_free_r+0x184>
 800297c:	18c00217 	ldw	r3,8(r3)
 8002980:	20fffb1e 	bne	r4,r3,8002970 <_free_r+0x170>
 8002984:	18800317 	ldw	r2,12(r3)
 8002988:	30800315 	stw	r2,12(r6)
 800298c:	30c00215 	stw	r3,8(r6)
 8002990:	11800215 	stw	r6,8(r2)
 8002994:	19800315 	stw	r6,12(r3)
 8002998:	003fe006 	br	800291c <_free_r+0x11c>
 800299c:	2100004c 	andi	r4,r4,1
 80029a0:	1885883a 	add	r2,r3,r2
 80029a4:	2000071e 	bne	r4,zero,80029c4 <_free_r+0x1c4>
 80029a8:	817ffe17 	ldw	r5,-8(r16)
 80029ac:	314dc83a 	sub	r6,r6,r5
 80029b0:	30c00317 	ldw	r3,12(r6)
 80029b4:	31000217 	ldw	r4,8(r6)
 80029b8:	1145883a 	add	r2,r2,r5
 80029bc:	20c00315 	stw	r3,12(r4)
 80029c0:	19000215 	stw	r4,8(r3)
 80029c4:	10c00054 	ori	r3,r2,1
 80029c8:	30c00115 	stw	r3,4(r6)
 80029cc:	00c20074 	movhi	r3,2049
 80029d0:	18e42e04 	addi	r3,r3,-28488
 80029d4:	18c00017 	ldw	r3,0(r3)
 80029d8:	49800215 	stw	r6,8(r9)
 80029dc:	10ffcf36 	bltu	r2,r3,800291c <_free_r+0x11c>
 80029e0:	00820074 	movhi	r2,2049
 80029e4:	10ab5704 	addi	r2,r2,-21156
 80029e8:	11400017 	ldw	r5,0(r2)
 80029ec:	8809883a 	mov	r4,r17
 80029f0:	80026dc0 	call	80026dc <_malloc_trim_r>
 80029f4:	003fc906 	br	800291c <_free_r+0x11c>
 80029f8:	28c9883a 	add	r4,r5,r3
 80029fc:	21000117 	ldw	r4,4(r4)
 8002a00:	2100004c 	andi	r4,r4,1
 8002a04:	20000a1e 	bne	r4,zero,8002a30 <_free_r+0x230>
 8002a08:	29000317 	ldw	r4,12(r5)
 8002a0c:	29400217 	ldw	r5,8(r5)
 8002a10:	10c5883a 	add	r2,r2,r3
 8002a14:	10c00054 	ori	r3,r2,1
 8002a18:	29000315 	stw	r4,12(r5)
 8002a1c:	21400215 	stw	r5,8(r4)
 8002a20:	30c00115 	stw	r3,4(r6)
 8002a24:	308d883a 	add	r6,r6,r2
 8002a28:	30800015 	stw	r2,0(r6)
 8002a2c:	003fbb06 	br	800291c <_free_r+0x11c>
 8002a30:	10c00054 	ori	r3,r2,1
 8002a34:	30c00115 	stw	r3,4(r6)
 8002a38:	308d883a 	add	r6,r6,r2
 8002a3c:	30800015 	stw	r2,0(r6)
 8002a40:	003fb606 	br	800291c <_free_r+0x11c>
 8002a44:	01000504 	movi	r4,20
 8002a48:	20c01436 	bltu	r4,r3,8002a9c <_free_r+0x29c>
 8002a4c:	194016c4 	addi	r5,r3,91
 8002a50:	2947883a 	add	r3,r5,r5
 8002a54:	003fbe06 	br	8002950 <_free_r+0x150>
 8002a58:	280bd0ba 	srai	r5,r5,2
 8002a5c:	00800044 	movi	r2,1
 8002a60:	39000117 	ldw	r4,4(r7)
 8002a64:	114a983a 	sll	r5,r2,r5
 8002a68:	1805883a 	mov	r2,r3
 8002a6c:	2908b03a 	or	r4,r5,r4
 8002a70:	39000115 	stw	r4,4(r7)
 8002a74:	003fc406 	br	8002988 <_free_r+0x188>
 8002a78:	49800515 	stw	r6,20(r9)
 8002a7c:	49800415 	stw	r6,16(r9)
 8002a80:	10c00054 	ori	r3,r2,1
 8002a84:	31000315 	stw	r4,12(r6)
 8002a88:	31000215 	stw	r4,8(r6)
 8002a8c:	30c00115 	stw	r3,4(r6)
 8002a90:	308d883a 	add	r6,r6,r2
 8002a94:	30800015 	stw	r2,0(r6)
 8002a98:	003fa006 	br	800291c <_free_r+0x11c>
 8002a9c:	01001504 	movi	r4,84
 8002aa0:	20c00436 	bltu	r4,r3,8002ab4 <_free_r+0x2b4>
 8002aa4:	1006d33a 	srli	r3,r2,12
 8002aa8:	19401b84 	addi	r5,r3,110
 8002aac:	2947883a 	add	r3,r5,r5
 8002ab0:	003fa706 	br	8002950 <_free_r+0x150>
 8002ab4:	01005504 	movi	r4,340
 8002ab8:	20c00436 	bltu	r4,r3,8002acc <_free_r+0x2cc>
 8002abc:	1006d3fa 	srli	r3,r2,15
 8002ac0:	19401dc4 	addi	r5,r3,119
 8002ac4:	2947883a 	add	r3,r5,r5
 8002ac8:	003fa106 	br	8002950 <_free_r+0x150>
 8002acc:	01015504 	movi	r4,1364
 8002ad0:	20c00436 	bltu	r4,r3,8002ae4 <_free_r+0x2e4>
 8002ad4:	1006d4ba 	srli	r3,r2,18
 8002ad8:	19401f04 	addi	r5,r3,124
 8002adc:	2947883a 	add	r3,r5,r5
 8002ae0:	003f9b06 	br	8002950 <_free_r+0x150>
 8002ae4:	00c03f04 	movi	r3,252
 8002ae8:	01401f84 	movi	r5,126
 8002aec:	003f9806 	br	8002950 <_free_r+0x150>

08002af0 <_lseek_r>:
 8002af0:	defffd04 	addi	sp,sp,-12
 8002af4:	dc000015 	stw	r16,0(sp)
 8002af8:	04020074 	movhi	r16,2049
 8002afc:	dc400115 	stw	r17,4(sp)
 8002b00:	842b5804 	addi	r16,r16,-21152
 8002b04:	2023883a 	mov	r17,r4
 8002b08:	2809883a 	mov	r4,r5
 8002b0c:	300b883a 	mov	r5,r6
 8002b10:	380d883a 	mov	r6,r7
 8002b14:	dfc00215 	stw	ra,8(sp)
 8002b18:	80000015 	stw	zero,0(r16)
 8002b1c:	80033ac0 	call	80033ac <lseek>
 8002b20:	00ffffc4 	movi	r3,-1
 8002b24:	10c00526 	beq	r2,r3,8002b3c <_lseek_r+0x4c>
 8002b28:	dfc00217 	ldw	ra,8(sp)
 8002b2c:	dc400117 	ldw	r17,4(sp)
 8002b30:	dc000017 	ldw	r16,0(sp)
 8002b34:	dec00304 	addi	sp,sp,12
 8002b38:	f800283a 	ret
 8002b3c:	80c00017 	ldw	r3,0(r16)
 8002b40:	183ff926 	beq	r3,zero,8002b28 <_lseek_r+0x38>
 8002b44:	88c00015 	stw	r3,0(r17)
 8002b48:	003ff706 	br	8002b28 <_lseek_r+0x38>

08002b4c <__smakebuf_r>:
 8002b4c:	2880030b 	ldhu	r2,12(r5)
 8002b50:	10c0008c 	andi	r3,r2,2
 8002b54:	1800401e 	bne	r3,zero,8002c58 <__smakebuf_r+0x10c>
 8002b58:	deffec04 	addi	sp,sp,-80
 8002b5c:	dc000f15 	stw	r16,60(sp)
 8002b60:	2821883a 	mov	r16,r5
 8002b64:	2940038f 	ldh	r5,14(r5)
 8002b68:	dc401015 	stw	r17,64(sp)
 8002b6c:	dfc01315 	stw	ra,76(sp)
 8002b70:	dcc01215 	stw	r19,72(sp)
 8002b74:	dc801115 	stw	r18,68(sp)
 8002b78:	2023883a 	mov	r17,r4
 8002b7c:	28001b16 	blt	r5,zero,8002bec <__smakebuf_r+0xa0>
 8002b80:	d80d883a 	mov	r6,sp
 8002b84:	8002d600 	call	8002d60 <_fstat_r>
 8002b88:	10001716 	blt	r2,zero,8002be8 <__smakebuf_r+0x9c>
 8002b8c:	d8800117 	ldw	r2,4(sp)
 8002b90:	00e00014 	movui	r3,32768
 8002b94:	10bc000c 	andi	r2,r2,61440
 8002b98:	10c03726 	beq	r2,r3,8002c78 <__smakebuf_r+0x12c>
 8002b9c:	80c0030b 	ldhu	r3,12(r16)
 8002ba0:	18c20014 	ori	r3,r3,2048
 8002ba4:	80c0030d 	sth	r3,12(r16)
 8002ba8:	00c80004 	movi	r3,8192
 8002bac:	10c03c1e 	bne	r2,r3,8002ca0 <__smakebuf_r+0x154>
 8002bb0:	8140038f 	ldh	r5,14(r16)
 8002bb4:	8809883a 	mov	r4,r17
 8002bb8:	8002db80 	call	8002db8 <_isatty_r>
 8002bbc:	10004e26 	beq	r2,zero,8002cf8 <__smakebuf_r+0x1ac>
 8002bc0:	8080030b 	ldhu	r2,12(r16)
 8002bc4:	04c00044 	movi	r19,1
 8002bc8:	80c010c4 	addi	r3,r16,67
 8002bcc:	14c4b03a 	or	r2,r2,r19
 8002bd0:	8080030d 	sth	r2,12(r16)
 8002bd4:	80c00015 	stw	r3,0(r16)
 8002bd8:	80c00415 	stw	r3,16(r16)
 8002bdc:	84c00515 	stw	r19,20(r16)
 8002be0:	04810004 	movi	r18,1024
 8002be4:	00000706 	br	8002c04 <__smakebuf_r+0xb8>
 8002be8:	8080030b 	ldhu	r2,12(r16)
 8002bec:	10c0200c 	andi	r3,r2,128
 8002bf0:	18001f1e 	bne	r3,zero,8002c70 <__smakebuf_r+0x124>
 8002bf4:	04810004 	movi	r18,1024
 8002bf8:	10820014 	ori	r2,r2,2048
 8002bfc:	8080030d 	sth	r2,12(r16)
 8002c00:	0027883a 	mov	r19,zero
 8002c04:	8809883a 	mov	r4,r17
 8002c08:	900b883a 	mov	r5,r18
 8002c0c:	8000e000 	call	8000e00 <_malloc_r>
 8002c10:	10002e26 	beq	r2,zero,8002ccc <__smakebuf_r+0x180>
 8002c14:	80c0030b 	ldhu	r3,12(r16)
 8002c18:	01020034 	movhi	r4,2048
 8002c1c:	21010a04 	addi	r4,r4,1064
 8002c20:	89000f15 	stw	r4,60(r17)
 8002c24:	18c02014 	ori	r3,r3,128
 8002c28:	80c0030d 	sth	r3,12(r16)
 8002c2c:	80800015 	stw	r2,0(r16)
 8002c30:	80800415 	stw	r2,16(r16)
 8002c34:	84800515 	stw	r18,20(r16)
 8002c38:	98001c1e 	bne	r19,zero,8002cac <__smakebuf_r+0x160>
 8002c3c:	dfc01317 	ldw	ra,76(sp)
 8002c40:	dcc01217 	ldw	r19,72(sp)
 8002c44:	dc801117 	ldw	r18,68(sp)
 8002c48:	dc401017 	ldw	r17,64(sp)
 8002c4c:	dc000f17 	ldw	r16,60(sp)
 8002c50:	dec01404 	addi	sp,sp,80
 8002c54:	f800283a 	ret
 8002c58:	288010c4 	addi	r2,r5,67
 8002c5c:	28800015 	stw	r2,0(r5)
 8002c60:	28800415 	stw	r2,16(r5)
 8002c64:	00800044 	movi	r2,1
 8002c68:	28800515 	stw	r2,20(r5)
 8002c6c:	f800283a 	ret
 8002c70:	04801004 	movi	r18,64
 8002c74:	003fe006 	br	8002bf8 <__smakebuf_r+0xac>
 8002c78:	81000a17 	ldw	r4,40(r16)
 8002c7c:	00c20034 	movhi	r3,2048
 8002c80:	18c83704 	addi	r3,r3,8412
 8002c84:	20ffc51e 	bne	r4,r3,8002b9c <__smakebuf_r+0x50>
 8002c88:	80c0030b 	ldhu	r3,12(r16)
 8002c8c:	01010004 	movi	r4,1024
 8002c90:	81001315 	stw	r4,76(r16)
 8002c94:	1906b03a 	or	r3,r3,r4
 8002c98:	80c0030d 	sth	r3,12(r16)
 8002c9c:	003fc206 	br	8002ba8 <__smakebuf_r+0x5c>
 8002ca0:	0027883a 	mov	r19,zero
 8002ca4:	04810004 	movi	r18,1024
 8002ca8:	003fd606 	br	8002c04 <__smakebuf_r+0xb8>
 8002cac:	8140038f 	ldh	r5,14(r16)
 8002cb0:	8809883a 	mov	r4,r17
 8002cb4:	8002db80 	call	8002db8 <_isatty_r>
 8002cb8:	103fe026 	beq	r2,zero,8002c3c <__smakebuf_r+0xf0>
 8002cbc:	8080030b 	ldhu	r2,12(r16)
 8002cc0:	10800054 	ori	r2,r2,1
 8002cc4:	8080030d 	sth	r2,12(r16)
 8002cc8:	003fdc06 	br	8002c3c <__smakebuf_r+0xf0>
 8002ccc:	8080030b 	ldhu	r2,12(r16)
 8002cd0:	10c0800c 	andi	r3,r2,512
 8002cd4:	183fd91e 	bne	r3,zero,8002c3c <__smakebuf_r+0xf0>
 8002cd8:	10800094 	ori	r2,r2,2
 8002cdc:	80c010c4 	addi	r3,r16,67
 8002ce0:	8080030d 	sth	r2,12(r16)
 8002ce4:	00800044 	movi	r2,1
 8002ce8:	80c00015 	stw	r3,0(r16)
 8002cec:	80c00415 	stw	r3,16(r16)
 8002cf0:	80800515 	stw	r2,20(r16)
 8002cf4:	003fd106 	br	8002c3c <__smakebuf_r+0xf0>
 8002cf8:	04c00044 	movi	r19,1
 8002cfc:	04810004 	movi	r18,1024
 8002d00:	003fc006 	br	8002c04 <__smakebuf_r+0xb8>

08002d04 <_read_r>:
 8002d04:	defffd04 	addi	sp,sp,-12
 8002d08:	dc000015 	stw	r16,0(sp)
 8002d0c:	04020074 	movhi	r16,2049
 8002d10:	dc400115 	stw	r17,4(sp)
 8002d14:	842b5804 	addi	r16,r16,-21152
 8002d18:	2023883a 	mov	r17,r4
 8002d1c:	2809883a 	mov	r4,r5
 8002d20:	300b883a 	mov	r5,r6
 8002d24:	380d883a 	mov	r6,r7
 8002d28:	dfc00215 	stw	ra,8(sp)
 8002d2c:	80000015 	stw	zero,0(r16)
 8002d30:	80035880 	call	8003588 <read>
 8002d34:	00ffffc4 	movi	r3,-1
 8002d38:	10c00526 	beq	r2,r3,8002d50 <_read_r+0x4c>
 8002d3c:	dfc00217 	ldw	ra,8(sp)
 8002d40:	dc400117 	ldw	r17,4(sp)
 8002d44:	dc000017 	ldw	r16,0(sp)
 8002d48:	dec00304 	addi	sp,sp,12
 8002d4c:	f800283a 	ret
 8002d50:	80c00017 	ldw	r3,0(r16)
 8002d54:	183ff926 	beq	r3,zero,8002d3c <_read_r+0x38>
 8002d58:	88c00015 	stw	r3,0(r17)
 8002d5c:	003ff706 	br	8002d3c <_read_r+0x38>

08002d60 <_fstat_r>:
 8002d60:	defffd04 	addi	sp,sp,-12
 8002d64:	dc000015 	stw	r16,0(sp)
 8002d68:	04020074 	movhi	r16,2049
 8002d6c:	dc400115 	stw	r17,4(sp)
 8002d70:	842b5804 	addi	r16,r16,-21152
 8002d74:	2023883a 	mov	r17,r4
 8002d78:	2809883a 	mov	r4,r5
 8002d7c:	300b883a 	mov	r5,r6
 8002d80:	dfc00215 	stw	ra,8(sp)
 8002d84:	80000015 	stw	zero,0(r16)
 8002d88:	80030d40 	call	80030d4 <fstat>
 8002d8c:	00ffffc4 	movi	r3,-1
 8002d90:	10c00526 	beq	r2,r3,8002da8 <_fstat_r+0x48>
 8002d94:	dfc00217 	ldw	ra,8(sp)
 8002d98:	dc400117 	ldw	r17,4(sp)
 8002d9c:	dc000017 	ldw	r16,0(sp)
 8002da0:	dec00304 	addi	sp,sp,12
 8002da4:	f800283a 	ret
 8002da8:	80c00017 	ldw	r3,0(r16)
 8002dac:	183ff926 	beq	r3,zero,8002d94 <_fstat_r+0x34>
 8002db0:	88c00015 	stw	r3,0(r17)
 8002db4:	003ff706 	br	8002d94 <_fstat_r+0x34>

08002db8 <_isatty_r>:
 8002db8:	defffd04 	addi	sp,sp,-12
 8002dbc:	dc000015 	stw	r16,0(sp)
 8002dc0:	04020074 	movhi	r16,2049
 8002dc4:	dc400115 	stw	r17,4(sp)
 8002dc8:	842b5804 	addi	r16,r16,-21152
 8002dcc:	2023883a 	mov	r17,r4
 8002dd0:	2809883a 	mov	r4,r5
 8002dd4:	dfc00215 	stw	ra,8(sp)
 8002dd8:	80000015 	stw	zero,0(r16)
 8002ddc:	80031d40 	call	80031d4 <isatty>
 8002de0:	00ffffc4 	movi	r3,-1
 8002de4:	10c00526 	beq	r2,r3,8002dfc <_isatty_r+0x44>
 8002de8:	dfc00217 	ldw	ra,8(sp)
 8002dec:	dc400117 	ldw	r17,4(sp)
 8002df0:	dc000017 	ldw	r16,0(sp)
 8002df4:	dec00304 	addi	sp,sp,12
 8002df8:	f800283a 	ret
 8002dfc:	80c00017 	ldw	r3,0(r16)
 8002e00:	183ff926 	beq	r3,zero,8002de8 <_isatty_r+0x30>
 8002e04:	88c00015 	stw	r3,0(r17)
 8002e08:	003ff706 	br	8002de8 <_isatty_r+0x30>

08002e0c <udivmodsi4>:
 8002e0c:	2900182e 	bgeu	r5,r4,8002e70 <udivmodsi4+0x64>
 8002e10:	28001716 	blt	r5,zero,8002e70 <udivmodsi4+0x64>
 8002e14:	00800804 	movi	r2,32
 8002e18:	00c00044 	movi	r3,1
 8002e1c:	00000206 	br	8002e28 <udivmodsi4+0x1c>
 8002e20:	10001126 	beq	r2,zero,8002e68 <udivmodsi4+0x5c>
 8002e24:	28000516 	blt	r5,zero,8002e3c <udivmodsi4+0x30>
 8002e28:	294b883a 	add	r5,r5,r5
 8002e2c:	10bfffc4 	addi	r2,r2,-1
 8002e30:	18c7883a 	add	r3,r3,r3
 8002e34:	293ffa36 	bltu	r5,r4,8002e20 <udivmodsi4+0x14>
 8002e38:	18000b26 	beq	r3,zero,8002e68 <udivmodsi4+0x5c>
 8002e3c:	0005883a 	mov	r2,zero
 8002e40:	21400236 	bltu	r4,r5,8002e4c <udivmodsi4+0x40>
 8002e44:	2149c83a 	sub	r4,r4,r5
 8002e48:	10c4b03a 	or	r2,r2,r3
 8002e4c:	1806d07a 	srli	r3,r3,1
 8002e50:	280ad07a 	srli	r5,r5,1
 8002e54:	183ffa1e 	bne	r3,zero,8002e40 <udivmodsi4+0x34>
 8002e58:	3000011e 	bne	r6,zero,8002e60 <udivmodsi4+0x54>
 8002e5c:	f800283a 	ret
 8002e60:	2005883a 	mov	r2,r4
 8002e64:	f800283a 	ret
 8002e68:	0005883a 	mov	r2,zero
 8002e6c:	003ffa06 	br	8002e58 <udivmodsi4+0x4c>
 8002e70:	00c00044 	movi	r3,1
 8002e74:	003ff106 	br	8002e3c <udivmodsi4+0x30>

08002e78 <__divsi3>:
 8002e78:	defffe04 	addi	sp,sp,-8
 8002e7c:	dfc00115 	stw	ra,4(sp)
 8002e80:	dc000015 	stw	r16,0(sp)
 8002e84:	20000b16 	blt	r4,zero,8002eb4 <__divsi3+0x3c>
 8002e88:	0021883a 	mov	r16,zero
 8002e8c:	28000c16 	blt	r5,zero,8002ec0 <__divsi3+0x48>
 8002e90:	000d883a 	mov	r6,zero
 8002e94:	8002e0c0 	call	8002e0c <udivmodsi4>
 8002e98:	0407c83a 	sub	r3,zero,r16
 8002e9c:	1884f03a 	xor	r2,r3,r2
 8002ea0:	1405883a 	add	r2,r2,r16
 8002ea4:	dfc00117 	ldw	ra,4(sp)
 8002ea8:	dc000017 	ldw	r16,0(sp)
 8002eac:	dec00204 	addi	sp,sp,8
 8002eb0:	f800283a 	ret
 8002eb4:	0109c83a 	sub	r4,zero,r4
 8002eb8:	04000044 	movi	r16,1
 8002ebc:	283ff40e 	bge	r5,zero,8002e90 <__divsi3+0x18>
 8002ec0:	014bc83a 	sub	r5,zero,r5
 8002ec4:	8400005c 	xori	r16,r16,1
 8002ec8:	003ff106 	br	8002e90 <__divsi3+0x18>

08002ecc <__modsi3>:
 8002ecc:	defffd04 	addi	sp,sp,-12
 8002ed0:	dfc00215 	stw	ra,8(sp)
 8002ed4:	dc400115 	stw	r17,4(sp)
 8002ed8:	dc000015 	stw	r16,0(sp)
 8002edc:	20000c16 	blt	r4,zero,8002f10 <__modsi3+0x44>
 8002ee0:	0023883a 	mov	r17,zero
 8002ee4:	0021883a 	mov	r16,zero
 8002ee8:	28000d16 	blt	r5,zero,8002f20 <__modsi3+0x54>
 8002eec:	01800044 	movi	r6,1
 8002ef0:	8002e0c0 	call	8002e0c <udivmodsi4>
 8002ef4:	1404f03a 	xor	r2,r2,r16
 8002ef8:	8885883a 	add	r2,r17,r2
 8002efc:	dfc00217 	ldw	ra,8(sp)
 8002f00:	dc400117 	ldw	r17,4(sp)
 8002f04:	dc000017 	ldw	r16,0(sp)
 8002f08:	dec00304 	addi	sp,sp,12
 8002f0c:	f800283a 	ret
 8002f10:	0109c83a 	sub	r4,zero,r4
 8002f14:	04400044 	movi	r17,1
 8002f18:	043fffc4 	movi	r16,-1
 8002f1c:	283ff30e 	bge	r5,zero,8002eec <__modsi3+0x20>
 8002f20:	014bc83a 	sub	r5,zero,r5
 8002f24:	003ff106 	br	8002eec <__modsi3+0x20>

08002f28 <__udivsi3>:
 8002f28:	000d883a 	mov	r6,zero
 8002f2c:	8002e0c1 	jmpi	8002e0c <udivmodsi4>

08002f30 <__umodsi3>:
 8002f30:	01800044 	movi	r6,1
 8002f34:	8002e0c1 	jmpi	8002e0c <udivmodsi4>

08002f38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8002f38:	defffe04 	addi	sp,sp,-8
 8002f3c:	dfc00115 	stw	ra,4(sp)
 8002f40:	df000015 	stw	fp,0(sp)
 8002f44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8002f48:	00820074 	movhi	r2,2049
 8002f4c:	10a43404 	addi	r2,r2,-28464
 8002f50:	10800017 	ldw	r2,0(r2)
 8002f54:	10000526 	beq	r2,zero,8002f6c <alt_get_errno+0x34>
 8002f58:	00820074 	movhi	r2,2049
 8002f5c:	10a43404 	addi	r2,r2,-28464
 8002f60:	10800017 	ldw	r2,0(r2)
 8002f64:	103ee83a 	callr	r2
 8002f68:	00000206 	br	8002f74 <alt_get_errno+0x3c>
 8002f6c:	00820074 	movhi	r2,2049
 8002f70:	10ab5804 	addi	r2,r2,-21152
}
 8002f74:	e037883a 	mov	sp,fp
 8002f78:	dfc00117 	ldw	ra,4(sp)
 8002f7c:	df000017 	ldw	fp,0(sp)
 8002f80:	dec00204 	addi	sp,sp,8
 8002f84:	f800283a 	ret

08002f88 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8002f88:	defffb04 	addi	sp,sp,-20
 8002f8c:	dfc00415 	stw	ra,16(sp)
 8002f90:	df000315 	stw	fp,12(sp)
 8002f94:	df000304 	addi	fp,sp,12
 8002f98:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8002f9c:	e0bfff17 	ldw	r2,-4(fp)
 8002fa0:	10000616 	blt	r2,zero,8002fbc <close+0x34>
 8002fa4:	e0bfff17 	ldw	r2,-4(fp)
 8002fa8:	10c00324 	muli	r3,r2,12
 8002fac:	00820034 	movhi	r2,2048
 8002fb0:	109f3a04 	addi	r2,r2,31976
 8002fb4:	1885883a 	add	r2,r3,r2
 8002fb8:	00000106 	br	8002fc0 <close+0x38>
 8002fbc:	0005883a 	mov	r2,zero
 8002fc0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8002fc4:	e0bffd17 	ldw	r2,-12(fp)
 8002fc8:	10001926 	beq	r2,zero,8003030 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8002fcc:	e0bffd17 	ldw	r2,-12(fp)
 8002fd0:	10800017 	ldw	r2,0(r2)
 8002fd4:	10800417 	ldw	r2,16(r2)
 8002fd8:	10000626 	beq	r2,zero,8002ff4 <close+0x6c>
 8002fdc:	e0bffd17 	ldw	r2,-12(fp)
 8002fe0:	10800017 	ldw	r2,0(r2)
 8002fe4:	10800417 	ldw	r2,16(r2)
 8002fe8:	e13ffd17 	ldw	r4,-12(fp)
 8002fec:	103ee83a 	callr	r2
 8002ff0:	00000106 	br	8002ff8 <close+0x70>
 8002ff4:	0005883a 	mov	r2,zero
 8002ff8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8002ffc:	e13fff17 	ldw	r4,-4(fp)
 8003000:	80036840 	call	8003684 <alt_release_fd>
    if (rval < 0)
 8003004:	e0bffe17 	ldw	r2,-8(fp)
 8003008:	1000070e 	bge	r2,zero,8003028 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 800300c:	8002f380 	call	8002f38 <alt_get_errno>
 8003010:	1007883a 	mov	r3,r2
 8003014:	e0bffe17 	ldw	r2,-8(fp)
 8003018:	0085c83a 	sub	r2,zero,r2
 800301c:	18800015 	stw	r2,0(r3)
      return -1;
 8003020:	00bfffc4 	movi	r2,-1
 8003024:	00000706 	br	8003044 <close+0xbc>
    }
    return 0;
 8003028:	0005883a 	mov	r2,zero
 800302c:	00000506 	br	8003044 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8003030:	8002f380 	call	8002f38 <alt_get_errno>
 8003034:	1007883a 	mov	r3,r2
 8003038:	00801444 	movi	r2,81
 800303c:	18800015 	stw	r2,0(r3)
    return -1;
 8003040:	00bfffc4 	movi	r2,-1
  }
}
 8003044:	e037883a 	mov	sp,fp
 8003048:	dfc00117 	ldw	ra,4(sp)
 800304c:	df000017 	ldw	fp,0(sp)
 8003050:	dec00204 	addi	sp,sp,8
 8003054:	f800283a 	ret

08003058 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8003058:	defffc04 	addi	sp,sp,-16
 800305c:	df000315 	stw	fp,12(sp)
 8003060:	df000304 	addi	fp,sp,12
 8003064:	e13ffd15 	stw	r4,-12(fp)
 8003068:	e17ffe15 	stw	r5,-8(fp)
 800306c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8003070:	e0bfff17 	ldw	r2,-4(fp)
}
 8003074:	e037883a 	mov	sp,fp
 8003078:	df000017 	ldw	fp,0(sp)
 800307c:	dec00104 	addi	sp,sp,4
 8003080:	f800283a 	ret

08003084 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8003084:	defffe04 	addi	sp,sp,-8
 8003088:	dfc00115 	stw	ra,4(sp)
 800308c:	df000015 	stw	fp,0(sp)
 8003090:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8003094:	00820074 	movhi	r2,2049
 8003098:	10a43404 	addi	r2,r2,-28464
 800309c:	10800017 	ldw	r2,0(r2)
 80030a0:	10000526 	beq	r2,zero,80030b8 <alt_get_errno+0x34>
 80030a4:	00820074 	movhi	r2,2049
 80030a8:	10a43404 	addi	r2,r2,-28464
 80030ac:	10800017 	ldw	r2,0(r2)
 80030b0:	103ee83a 	callr	r2
 80030b4:	00000206 	br	80030c0 <alt_get_errno+0x3c>
 80030b8:	00820074 	movhi	r2,2049
 80030bc:	10ab5804 	addi	r2,r2,-21152
}
 80030c0:	e037883a 	mov	sp,fp
 80030c4:	dfc00117 	ldw	ra,4(sp)
 80030c8:	df000017 	ldw	fp,0(sp)
 80030cc:	dec00204 	addi	sp,sp,8
 80030d0:	f800283a 	ret

080030d4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 80030d4:	defffb04 	addi	sp,sp,-20
 80030d8:	dfc00415 	stw	ra,16(sp)
 80030dc:	df000315 	stw	fp,12(sp)
 80030e0:	df000304 	addi	fp,sp,12
 80030e4:	e13ffe15 	stw	r4,-8(fp)
 80030e8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80030ec:	e0bffe17 	ldw	r2,-8(fp)
 80030f0:	10000616 	blt	r2,zero,800310c <fstat+0x38>
 80030f4:	e0bffe17 	ldw	r2,-8(fp)
 80030f8:	10c00324 	muli	r3,r2,12
 80030fc:	00820034 	movhi	r2,2048
 8003100:	109f3a04 	addi	r2,r2,31976
 8003104:	1885883a 	add	r2,r3,r2
 8003108:	00000106 	br	8003110 <fstat+0x3c>
 800310c:	0005883a 	mov	r2,zero
 8003110:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8003114:	e0bffd17 	ldw	r2,-12(fp)
 8003118:	10001026 	beq	r2,zero,800315c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800311c:	e0bffd17 	ldw	r2,-12(fp)
 8003120:	10800017 	ldw	r2,0(r2)
 8003124:	10800817 	ldw	r2,32(r2)
 8003128:	10000726 	beq	r2,zero,8003148 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 800312c:	e0bffd17 	ldw	r2,-12(fp)
 8003130:	10800017 	ldw	r2,0(r2)
 8003134:	10800817 	ldw	r2,32(r2)
 8003138:	e13ffd17 	ldw	r4,-12(fp)
 800313c:	e17fff17 	ldw	r5,-4(fp)
 8003140:	103ee83a 	callr	r2
 8003144:	00000a06 	br	8003170 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8003148:	e0bfff17 	ldw	r2,-4(fp)
 800314c:	00c80004 	movi	r3,8192
 8003150:	10c00115 	stw	r3,4(r2)
      return 0;
 8003154:	0005883a 	mov	r2,zero
 8003158:	00000506 	br	8003170 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800315c:	80030840 	call	8003084 <alt_get_errno>
 8003160:	1007883a 	mov	r3,r2
 8003164:	00801444 	movi	r2,81
 8003168:	18800015 	stw	r2,0(r3)
    return -1;
 800316c:	00bfffc4 	movi	r2,-1
  }
}
 8003170:	e037883a 	mov	sp,fp
 8003174:	dfc00117 	ldw	ra,4(sp)
 8003178:	df000017 	ldw	fp,0(sp)
 800317c:	dec00204 	addi	sp,sp,8
 8003180:	f800283a 	ret

08003184 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8003184:	defffe04 	addi	sp,sp,-8
 8003188:	dfc00115 	stw	ra,4(sp)
 800318c:	df000015 	stw	fp,0(sp)
 8003190:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8003194:	00820074 	movhi	r2,2049
 8003198:	10a43404 	addi	r2,r2,-28464
 800319c:	10800017 	ldw	r2,0(r2)
 80031a0:	10000526 	beq	r2,zero,80031b8 <alt_get_errno+0x34>
 80031a4:	00820074 	movhi	r2,2049
 80031a8:	10a43404 	addi	r2,r2,-28464
 80031ac:	10800017 	ldw	r2,0(r2)
 80031b0:	103ee83a 	callr	r2
 80031b4:	00000206 	br	80031c0 <alt_get_errno+0x3c>
 80031b8:	00820074 	movhi	r2,2049
 80031bc:	10ab5804 	addi	r2,r2,-21152
}
 80031c0:	e037883a 	mov	sp,fp
 80031c4:	dfc00117 	ldw	ra,4(sp)
 80031c8:	df000017 	ldw	fp,0(sp)
 80031cc:	dec00204 	addi	sp,sp,8
 80031d0:	f800283a 	ret

080031d4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 80031d4:	deffed04 	addi	sp,sp,-76
 80031d8:	dfc01215 	stw	ra,72(sp)
 80031dc:	df001115 	stw	fp,68(sp)
 80031e0:	df001104 	addi	fp,sp,68
 80031e4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80031e8:	e0bfff17 	ldw	r2,-4(fp)
 80031ec:	10000616 	blt	r2,zero,8003208 <isatty+0x34>
 80031f0:	e0bfff17 	ldw	r2,-4(fp)
 80031f4:	10c00324 	muli	r3,r2,12
 80031f8:	00820034 	movhi	r2,2048
 80031fc:	109f3a04 	addi	r2,r2,31976
 8003200:	1885883a 	add	r2,r3,r2
 8003204:	00000106 	br	800320c <isatty+0x38>
 8003208:	0005883a 	mov	r2,zero
 800320c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8003210:	e0bfef17 	ldw	r2,-68(fp)
 8003214:	10000e26 	beq	r2,zero,8003250 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8003218:	e0bfef17 	ldw	r2,-68(fp)
 800321c:	10800017 	ldw	r2,0(r2)
 8003220:	10800817 	ldw	r2,32(r2)
 8003224:	1000021e 	bne	r2,zero,8003230 <isatty+0x5c>
    {
      return 1;
 8003228:	00800044 	movi	r2,1
 800322c:	00000d06 	br	8003264 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8003230:	e0bff004 	addi	r2,fp,-64
 8003234:	e13fff17 	ldw	r4,-4(fp)
 8003238:	100b883a 	mov	r5,r2
 800323c:	80030d40 	call	80030d4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8003240:	e0bff117 	ldw	r2,-60(fp)
 8003244:	10880020 	cmpeqi	r2,r2,8192
 8003248:	10803fcc 	andi	r2,r2,255
 800324c:	00000506 	br	8003264 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8003250:	80031840 	call	8003184 <alt_get_errno>
 8003254:	1007883a 	mov	r3,r2
 8003258:	00801444 	movi	r2,81
 800325c:	18800015 	stw	r2,0(r3)
    return 0;
 8003260:	0005883a 	mov	r2,zero
  }
}
 8003264:	e037883a 	mov	sp,fp
 8003268:	dfc00117 	ldw	ra,4(sp)
 800326c:	df000017 	ldw	fp,0(sp)
 8003270:	dec00204 	addi	sp,sp,8
 8003274:	f800283a 	ret

08003278 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8003278:	defffc04 	addi	sp,sp,-16
 800327c:	df000315 	stw	fp,12(sp)
 8003280:	df000304 	addi	fp,sp,12
 8003284:	e13ffd15 	stw	r4,-12(fp)
 8003288:	e17ffe15 	stw	r5,-8(fp)
 800328c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8003290:	e0fffe17 	ldw	r3,-8(fp)
 8003294:	e0bffd17 	ldw	r2,-12(fp)
 8003298:	18800c26 	beq	r3,r2,80032cc <alt_load_section+0x54>
  {
    while( to != end )
 800329c:	00000806 	br	80032c0 <alt_load_section+0x48>
    {
      *to++ = *from++;
 80032a0:	e0bffe17 	ldw	r2,-8(fp)
 80032a4:	10c00104 	addi	r3,r2,4
 80032a8:	e0fffe15 	stw	r3,-8(fp)
 80032ac:	e0fffd17 	ldw	r3,-12(fp)
 80032b0:	19000104 	addi	r4,r3,4
 80032b4:	e13ffd15 	stw	r4,-12(fp)
 80032b8:	18c00017 	ldw	r3,0(r3)
 80032bc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 80032c0:	e0fffe17 	ldw	r3,-8(fp)
 80032c4:	e0bfff17 	ldw	r2,-4(fp)
 80032c8:	18bff51e 	bne	r3,r2,80032a0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 80032cc:	e037883a 	mov	sp,fp
 80032d0:	df000017 	ldw	fp,0(sp)
 80032d4:	dec00104 	addi	sp,sp,4
 80032d8:	f800283a 	ret

080032dc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 80032dc:	defffe04 	addi	sp,sp,-8
 80032e0:	dfc00115 	stw	ra,4(sp)
 80032e4:	df000015 	stw	fp,0(sp)
 80032e8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 80032ec:	01020074 	movhi	r4,2049
 80032f0:	21243b04 	addi	r4,r4,-28436
 80032f4:	01420034 	movhi	r5,2048
 80032f8:	295d2504 	addi	r5,r5,29844
 80032fc:	01820074 	movhi	r6,2049
 8003300:	31a43b04 	addi	r6,r6,-28436
 8003304:	80032780 	call	8003278 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8003308:	01020034 	movhi	r4,2048
 800330c:	21000004 	addi	r4,r4,0
 8003310:	01441074 	movhi	r5,4161
 8003314:	29600804 	addi	r5,r5,-32736
 8003318:	01841074 	movhi	r6,4161
 800331c:	31a09004 	addi	r6,r6,-32192
 8003320:	80032780 	call	8003278 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8003324:	01020034 	movhi	r4,2048
 8003328:	211c7004 	addi	r4,r4,29120
 800332c:	01420034 	movhi	r5,2048
 8003330:	295c7004 	addi	r5,r5,29120
 8003334:	01820034 	movhi	r6,2048
 8003338:	319d2504 	addi	r6,r6,29844
 800333c:	80032780 	call	8003278 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8003340:	8005e240 	call	8005e24 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8003344:	80060140 	call	8006014 <alt_icache_flush_all>
}
 8003348:	e037883a 	mov	sp,fp
 800334c:	dfc00117 	ldw	ra,4(sp)
 8003350:	df000017 	ldw	fp,0(sp)
 8003354:	dec00204 	addi	sp,sp,8
 8003358:	f800283a 	ret

0800335c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800335c:	defffe04 	addi	sp,sp,-8
 8003360:	dfc00115 	stw	ra,4(sp)
 8003364:	df000015 	stw	fp,0(sp)
 8003368:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800336c:	00820074 	movhi	r2,2049
 8003370:	10a43404 	addi	r2,r2,-28464
 8003374:	10800017 	ldw	r2,0(r2)
 8003378:	10000526 	beq	r2,zero,8003390 <alt_get_errno+0x34>
 800337c:	00820074 	movhi	r2,2049
 8003380:	10a43404 	addi	r2,r2,-28464
 8003384:	10800017 	ldw	r2,0(r2)
 8003388:	103ee83a 	callr	r2
 800338c:	00000206 	br	8003398 <alt_get_errno+0x3c>
 8003390:	00820074 	movhi	r2,2049
 8003394:	10ab5804 	addi	r2,r2,-21152
}
 8003398:	e037883a 	mov	sp,fp
 800339c:	dfc00117 	ldw	ra,4(sp)
 80033a0:	df000017 	ldw	fp,0(sp)
 80033a4:	dec00204 	addi	sp,sp,8
 80033a8:	f800283a 	ret

080033ac <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 80033ac:	defff904 	addi	sp,sp,-28
 80033b0:	dfc00615 	stw	ra,24(sp)
 80033b4:	df000515 	stw	fp,20(sp)
 80033b8:	df000504 	addi	fp,sp,20
 80033bc:	e13ffd15 	stw	r4,-12(fp)
 80033c0:	e17ffe15 	stw	r5,-8(fp)
 80033c4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 80033c8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80033cc:	e0bffd17 	ldw	r2,-12(fp)
 80033d0:	10000616 	blt	r2,zero,80033ec <lseek+0x40>
 80033d4:	e0bffd17 	ldw	r2,-12(fp)
 80033d8:	10c00324 	muli	r3,r2,12
 80033dc:	00820034 	movhi	r2,2048
 80033e0:	109f3a04 	addi	r2,r2,31976
 80033e4:	1885883a 	add	r2,r3,r2
 80033e8:	00000106 	br	80033f0 <lseek+0x44>
 80033ec:	0005883a 	mov	r2,zero
 80033f0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 80033f4:	e0bffc17 	ldw	r2,-16(fp)
 80033f8:	10001026 	beq	r2,zero,800343c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 80033fc:	e0bffc17 	ldw	r2,-16(fp)
 8003400:	10800017 	ldw	r2,0(r2)
 8003404:	10800717 	ldw	r2,28(r2)
 8003408:	10000926 	beq	r2,zero,8003430 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800340c:	e0bffc17 	ldw	r2,-16(fp)
 8003410:	10800017 	ldw	r2,0(r2)
 8003414:	10800717 	ldw	r2,28(r2)
 8003418:	e13ffc17 	ldw	r4,-16(fp)
 800341c:	e17ffe17 	ldw	r5,-8(fp)
 8003420:	e1bfff17 	ldw	r6,-4(fp)
 8003424:	103ee83a 	callr	r2
 8003428:	e0bffb15 	stw	r2,-20(fp)
 800342c:	00000506 	br	8003444 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8003430:	00bfde84 	movi	r2,-134
 8003434:	e0bffb15 	stw	r2,-20(fp)
 8003438:	00000206 	br	8003444 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 800343c:	00bfebc4 	movi	r2,-81
 8003440:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8003444:	e0bffb17 	ldw	r2,-20(fp)
 8003448:	1000070e 	bge	r2,zero,8003468 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 800344c:	800335c0 	call	800335c <alt_get_errno>
 8003450:	1007883a 	mov	r3,r2
 8003454:	e0bffb17 	ldw	r2,-20(fp)
 8003458:	0085c83a 	sub	r2,zero,r2
 800345c:	18800015 	stw	r2,0(r3)
    rc = -1;
 8003460:	00bfffc4 	movi	r2,-1
 8003464:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 8003468:	e0bffb17 	ldw	r2,-20(fp)
}
 800346c:	e037883a 	mov	sp,fp
 8003470:	dfc00117 	ldw	ra,4(sp)
 8003474:	df000017 	ldw	fp,0(sp)
 8003478:	dec00204 	addi	sp,sp,8
 800347c:	f800283a 	ret

08003480 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8003480:	defffd04 	addi	sp,sp,-12
 8003484:	dfc00215 	stw	ra,8(sp)
 8003488:	df000115 	stw	fp,4(sp)
 800348c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8003490:	0009883a 	mov	r4,zero
 8003494:	80039140 	call	8003914 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8003498:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800349c:	80039480 	call	8003948 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 80034a0:	01020034 	movhi	r4,2048
 80034a4:	211c7804 	addi	r4,r4,29152
 80034a8:	01420034 	movhi	r5,2048
 80034ac:	295c7804 	addi	r5,r5,29152
 80034b0:	01820034 	movhi	r6,2048
 80034b4:	319c7804 	addi	r6,r6,29152
 80034b8:	80063d40 	call	80063d4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 80034bc:	8005f5c0 	call	8005f5c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 80034c0:	01020034 	movhi	r4,2048
 80034c4:	2117ee04 	addi	r4,r4,24504
 80034c8:	8006d840 	call	8006d84 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 80034cc:	d1272e17 	ldw	r4,-25416(gp)
 80034d0:	d0e72f17 	ldw	r3,-25412(gp)
 80034d4:	d0a73017 	ldw	r2,-25408(gp)
 80034d8:	180b883a 	mov	r5,r3
 80034dc:	100d883a 	mov	r6,r2
 80034e0:	80002b80 	call	80002b8 <main>
 80034e4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 80034e8:	01000044 	movi	r4,1
 80034ec:	8002f880 	call	8002f88 <close>
  exit (result);
 80034f0:	e13fff17 	ldw	r4,-4(fp)
 80034f4:	8006d980 	call	8006d98 <exit>

080034f8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 80034f8:	defffe04 	addi	sp,sp,-8
 80034fc:	df000115 	stw	fp,4(sp)
 8003500:	df000104 	addi	fp,sp,4
 8003504:	e13fff15 	stw	r4,-4(fp)
}
 8003508:	e037883a 	mov	sp,fp
 800350c:	df000017 	ldw	fp,0(sp)
 8003510:	dec00104 	addi	sp,sp,4
 8003514:	f800283a 	ret

08003518 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8003518:	defffe04 	addi	sp,sp,-8
 800351c:	df000115 	stw	fp,4(sp)
 8003520:	df000104 	addi	fp,sp,4
 8003524:	e13fff15 	stw	r4,-4(fp)
}
 8003528:	e037883a 	mov	sp,fp
 800352c:	df000017 	ldw	fp,0(sp)
 8003530:	dec00104 	addi	sp,sp,4
 8003534:	f800283a 	ret

08003538 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8003538:	defffe04 	addi	sp,sp,-8
 800353c:	dfc00115 	stw	ra,4(sp)
 8003540:	df000015 	stw	fp,0(sp)
 8003544:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8003548:	00820074 	movhi	r2,2049
 800354c:	10a43404 	addi	r2,r2,-28464
 8003550:	10800017 	ldw	r2,0(r2)
 8003554:	10000526 	beq	r2,zero,800356c <alt_get_errno+0x34>
 8003558:	00820074 	movhi	r2,2049
 800355c:	10a43404 	addi	r2,r2,-28464
 8003560:	10800017 	ldw	r2,0(r2)
 8003564:	103ee83a 	callr	r2
 8003568:	00000206 	br	8003574 <alt_get_errno+0x3c>
 800356c:	00820074 	movhi	r2,2049
 8003570:	10ab5804 	addi	r2,r2,-21152
}
 8003574:	e037883a 	mov	sp,fp
 8003578:	dfc00117 	ldw	ra,4(sp)
 800357c:	df000017 	ldw	fp,0(sp)
 8003580:	dec00204 	addi	sp,sp,8
 8003584:	f800283a 	ret

08003588 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8003588:	defff904 	addi	sp,sp,-28
 800358c:	dfc00615 	stw	ra,24(sp)
 8003590:	df000515 	stw	fp,20(sp)
 8003594:	df000504 	addi	fp,sp,20
 8003598:	e13ffd15 	stw	r4,-12(fp)
 800359c:	e17ffe15 	stw	r5,-8(fp)
 80035a0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80035a4:	e0bffd17 	ldw	r2,-12(fp)
 80035a8:	10000616 	blt	r2,zero,80035c4 <read+0x3c>
 80035ac:	e0bffd17 	ldw	r2,-12(fp)
 80035b0:	10c00324 	muli	r3,r2,12
 80035b4:	00820034 	movhi	r2,2048
 80035b8:	109f3a04 	addi	r2,r2,31976
 80035bc:	1885883a 	add	r2,r3,r2
 80035c0:	00000106 	br	80035c8 <read+0x40>
 80035c4:	0005883a 	mov	r2,zero
 80035c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 80035cc:	e0bffb17 	ldw	r2,-20(fp)
 80035d0:	10002226 	beq	r2,zero,800365c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 80035d4:	e0bffb17 	ldw	r2,-20(fp)
 80035d8:	10800217 	ldw	r2,8(r2)
 80035dc:	108000cc 	andi	r2,r2,3
 80035e0:	10800060 	cmpeqi	r2,r2,1
 80035e4:	1000181e 	bne	r2,zero,8003648 <read+0xc0>
        (fd->dev->read))
 80035e8:	e0bffb17 	ldw	r2,-20(fp)
 80035ec:	10800017 	ldw	r2,0(r2)
 80035f0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 80035f4:	10001426 	beq	r2,zero,8003648 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 80035f8:	e0bffb17 	ldw	r2,-20(fp)
 80035fc:	10800017 	ldw	r2,0(r2)
 8003600:	10800517 	ldw	r2,20(r2)
 8003604:	e0ffff17 	ldw	r3,-4(fp)
 8003608:	e13ffb17 	ldw	r4,-20(fp)
 800360c:	e17ffe17 	ldw	r5,-8(fp)
 8003610:	180d883a 	mov	r6,r3
 8003614:	103ee83a 	callr	r2
 8003618:	e0bffc15 	stw	r2,-16(fp)
 800361c:	e0bffc17 	ldw	r2,-16(fp)
 8003620:	1000070e 	bge	r2,zero,8003640 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 8003624:	80035380 	call	8003538 <alt_get_errno>
 8003628:	1007883a 	mov	r3,r2
 800362c:	e0bffc17 	ldw	r2,-16(fp)
 8003630:	0085c83a 	sub	r2,zero,r2
 8003634:	18800015 	stw	r2,0(r3)
          return -1;
 8003638:	00bfffc4 	movi	r2,-1
 800363c:	00000c06 	br	8003670 <read+0xe8>
        }
        return rval;
 8003640:	e0bffc17 	ldw	r2,-16(fp)
 8003644:	00000a06 	br	8003670 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8003648:	80035380 	call	8003538 <alt_get_errno>
 800364c:	1007883a 	mov	r3,r2
 8003650:	00800344 	movi	r2,13
 8003654:	18800015 	stw	r2,0(r3)
 8003658:	00000406 	br	800366c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800365c:	80035380 	call	8003538 <alt_get_errno>
 8003660:	1007883a 	mov	r3,r2
 8003664:	00801444 	movi	r2,81
 8003668:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800366c:	00bfffc4 	movi	r2,-1
}
 8003670:	e037883a 	mov	sp,fp
 8003674:	dfc00117 	ldw	ra,4(sp)
 8003678:	df000017 	ldw	fp,0(sp)
 800367c:	dec00204 	addi	sp,sp,8
 8003680:	f800283a 	ret

08003684 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8003684:	defffe04 	addi	sp,sp,-8
 8003688:	df000115 	stw	fp,4(sp)
 800368c:	df000104 	addi	fp,sp,4
 8003690:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8003694:	e0bfff17 	ldw	r2,-4(fp)
 8003698:	108000d0 	cmplti	r2,r2,3
 800369c:	10000d1e 	bne	r2,zero,80036d4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 80036a0:	00820034 	movhi	r2,2048
 80036a4:	109f3a04 	addi	r2,r2,31976
 80036a8:	e0ffff17 	ldw	r3,-4(fp)
 80036ac:	18c00324 	muli	r3,r3,12
 80036b0:	18c00204 	addi	r3,r3,8
 80036b4:	10c5883a 	add	r2,r2,r3
 80036b8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 80036bc:	00820034 	movhi	r2,2048
 80036c0:	109f3a04 	addi	r2,r2,31976
 80036c4:	e0ffff17 	ldw	r3,-4(fp)
 80036c8:	18c00324 	muli	r3,r3,12
 80036cc:	10c5883a 	add	r2,r2,r3
 80036d0:	10000015 	stw	zero,0(r2)
  }
}
 80036d4:	e037883a 	mov	sp,fp
 80036d8:	df000017 	ldw	fp,0(sp)
 80036dc:	dec00104 	addi	sp,sp,4
 80036e0:	f800283a 	ret

080036e4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 80036e4:	defff904 	addi	sp,sp,-28
 80036e8:	df000615 	stw	fp,24(sp)
 80036ec:	df000604 	addi	fp,sp,24
 80036f0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80036f4:	0005303a 	rdctl	r2,status
 80036f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80036fc:	e0fffc17 	ldw	r3,-16(fp)
 8003700:	00bfff84 	movi	r2,-2
 8003704:	1884703a 	and	r2,r3,r2
 8003708:	1001703a 	wrctl	status,r2
  
  return context;
 800370c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8003710:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8003714:	d0a00a17 	ldw	r2,-32728(gp)
 8003718:	10c000c4 	addi	r3,r2,3
 800371c:	00bfff04 	movi	r2,-4
 8003720:	1884703a 	and	r2,r3,r2
 8003724:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8003728:	d0e00a17 	ldw	r3,-32728(gp)
 800372c:	e0bfff17 	ldw	r2,-4(fp)
 8003730:	1887883a 	add	r3,r3,r2
 8003734:	00840034 	movhi	r2,4096
 8003738:	10800004 	addi	r2,r2,0
 800373c:	10c0062e 	bgeu	r2,r3,8003758 <sbrk+0x74>
 8003740:	e0bffa17 	ldw	r2,-24(fp)
 8003744:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8003748:	e0bffd17 	ldw	r2,-12(fp)
 800374c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8003750:	00bfffc4 	movi	r2,-1
 8003754:	00000b06 	br	8003784 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8003758:	d0a00a17 	ldw	r2,-32728(gp)
 800375c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 8003760:	d0e00a17 	ldw	r3,-32728(gp)
 8003764:	e0bfff17 	ldw	r2,-4(fp)
 8003768:	1885883a 	add	r2,r3,r2
 800376c:	d0a00a15 	stw	r2,-32728(gp)
 8003770:	e0bffa17 	ldw	r2,-24(fp)
 8003774:	e0bffe15 	stw	r2,-8(fp)
 8003778:	e0bffe17 	ldw	r2,-8(fp)
 800377c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8003780:	e0bffb17 	ldw	r2,-20(fp)
} 
 8003784:	e037883a 	mov	sp,fp
 8003788:	df000017 	ldw	fp,0(sp)
 800378c:	dec00104 	addi	sp,sp,4
 8003790:	f800283a 	ret

08003794 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8003794:	defffe04 	addi	sp,sp,-8
 8003798:	dfc00115 	stw	ra,4(sp)
 800379c:	df000015 	stw	fp,0(sp)
 80037a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80037a4:	00820074 	movhi	r2,2049
 80037a8:	10a43404 	addi	r2,r2,-28464
 80037ac:	10800017 	ldw	r2,0(r2)
 80037b0:	10000526 	beq	r2,zero,80037c8 <alt_get_errno+0x34>
 80037b4:	00820074 	movhi	r2,2049
 80037b8:	10a43404 	addi	r2,r2,-28464
 80037bc:	10800017 	ldw	r2,0(r2)
 80037c0:	103ee83a 	callr	r2
 80037c4:	00000206 	br	80037d0 <alt_get_errno+0x3c>
 80037c8:	00820074 	movhi	r2,2049
 80037cc:	10ab5804 	addi	r2,r2,-21152
}
 80037d0:	e037883a 	mov	sp,fp
 80037d4:	dfc00117 	ldw	ra,4(sp)
 80037d8:	df000017 	ldw	fp,0(sp)
 80037dc:	dec00204 	addi	sp,sp,8
 80037e0:	f800283a 	ret

080037e4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 80037e4:	defff904 	addi	sp,sp,-28
 80037e8:	dfc00615 	stw	ra,24(sp)
 80037ec:	df000515 	stw	fp,20(sp)
 80037f0:	df000504 	addi	fp,sp,20
 80037f4:	e13ffd15 	stw	r4,-12(fp)
 80037f8:	e17ffe15 	stw	r5,-8(fp)
 80037fc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8003800:	e0bffd17 	ldw	r2,-12(fp)
 8003804:	10000616 	blt	r2,zero,8003820 <write+0x3c>
 8003808:	e0bffd17 	ldw	r2,-12(fp)
 800380c:	10c00324 	muli	r3,r2,12
 8003810:	00820034 	movhi	r2,2048
 8003814:	109f3a04 	addi	r2,r2,31976
 8003818:	1885883a 	add	r2,r3,r2
 800381c:	00000106 	br	8003824 <write+0x40>
 8003820:	0005883a 	mov	r2,zero
 8003824:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8003828:	e0bffb17 	ldw	r2,-20(fp)
 800382c:	10002126 	beq	r2,zero,80038b4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8003830:	e0bffb17 	ldw	r2,-20(fp)
 8003834:	10800217 	ldw	r2,8(r2)
 8003838:	108000cc 	andi	r2,r2,3
 800383c:	10001826 	beq	r2,zero,80038a0 <write+0xbc>
 8003840:	e0bffb17 	ldw	r2,-20(fp)
 8003844:	10800017 	ldw	r2,0(r2)
 8003848:	10800617 	ldw	r2,24(r2)
 800384c:	10001426 	beq	r2,zero,80038a0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8003850:	e0bffb17 	ldw	r2,-20(fp)
 8003854:	10800017 	ldw	r2,0(r2)
 8003858:	10800617 	ldw	r2,24(r2)
 800385c:	e0ffff17 	ldw	r3,-4(fp)
 8003860:	e13ffb17 	ldw	r4,-20(fp)
 8003864:	e17ffe17 	ldw	r5,-8(fp)
 8003868:	180d883a 	mov	r6,r3
 800386c:	103ee83a 	callr	r2
 8003870:	e0bffc15 	stw	r2,-16(fp)
 8003874:	e0bffc17 	ldw	r2,-16(fp)
 8003878:	1000070e 	bge	r2,zero,8003898 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 800387c:	80037940 	call	8003794 <alt_get_errno>
 8003880:	1007883a 	mov	r3,r2
 8003884:	e0bffc17 	ldw	r2,-16(fp)
 8003888:	0085c83a 	sub	r2,zero,r2
 800388c:	18800015 	stw	r2,0(r3)
        return -1;
 8003890:	00bfffc4 	movi	r2,-1
 8003894:	00000c06 	br	80038c8 <write+0xe4>
      }
      return rval;
 8003898:	e0bffc17 	ldw	r2,-16(fp)
 800389c:	00000a06 	br	80038c8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 80038a0:	80037940 	call	8003794 <alt_get_errno>
 80038a4:	1007883a 	mov	r3,r2
 80038a8:	00800344 	movi	r2,13
 80038ac:	18800015 	stw	r2,0(r3)
 80038b0:	00000406 	br	80038c4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 80038b4:	80037940 	call	8003794 <alt_get_errno>
 80038b8:	1007883a 	mov	r3,r2
 80038bc:	00801444 	movi	r2,81
 80038c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 80038c4:	00bfffc4 	movi	r2,-1
}
 80038c8:	e037883a 	mov	sp,fp
 80038cc:	dfc00117 	ldw	ra,4(sp)
 80038d0:	df000017 	ldw	fp,0(sp)
 80038d4:	dec00204 	addi	sp,sp,8
 80038d8:	f800283a 	ret

080038dc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 80038dc:	defffd04 	addi	sp,sp,-12
 80038e0:	dfc00215 	stw	ra,8(sp)
 80038e4:	df000115 	stw	fp,4(sp)
 80038e8:	df000104 	addi	fp,sp,4
 80038ec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 80038f0:	e13fff17 	ldw	r4,-4(fp)
 80038f4:	01420074 	movhi	r5,2049
 80038f8:	29643104 	addi	r5,r5,-28476
 80038fc:	8005eb80 	call	8005eb8 <alt_dev_llist_insert>
}
 8003900:	e037883a 	mov	sp,fp
 8003904:	dfc00117 	ldw	ra,4(sp)
 8003908:	df000017 	ldw	fp,0(sp)
 800390c:	dec00204 	addi	sp,sp,8
 8003910:	f800283a 	ret

08003914 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8003914:	defffd04 	addi	sp,sp,-12
 8003918:	dfc00215 	stw	ra,8(sp)
 800391c:	df000115 	stw	fp,4(sp)
 8003920:	df000104 	addi	fp,sp,4
 8003924:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 8003928:	800688c0 	call	800688c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800392c:	00800044 	movi	r2,1
 8003930:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8003934:	e037883a 	mov	sp,fp
 8003938:	dfc00117 	ldw	ra,4(sp)
 800393c:	df000017 	ldw	fp,0(sp)
 8003940:	dec00204 	addi	sp,sp,8
 8003944:	f800283a 	ret

08003948 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8003948:	defffe04 	addi	sp,sp,-8
 800394c:	dfc00115 	stw	ra,4(sp)
 8003950:	df000015 	stw	fp,0(sp)
 8003954:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 8003958:	01041074 	movhi	r4,4161
 800395c:	21040004 	addi	r4,r4,4096
 8003960:	000b883a 	mov	r5,zero
 8003964:	01800084 	movi	r6,2
 8003968:	01c0fa04 	movi	r7,1000
 800396c:	800536c0 	call	800536c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
 8003970:	01020034 	movhi	r4,2048
 8003974:	211fa404 	addi	r4,r4,32400
 8003978:	000b883a 	mov	r5,zero
 800397c:	000d883a 	mov	r6,zero
 8003980:	8003b400 	call	8003b40 <altera_avalon_jtag_uart_init>
 8003984:	01020034 	movhi	r4,2048
 8003988:	211f9a04 	addi	r4,r4,32360
 800398c:	80038dc0 	call	80038dc <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
 8003990:	01020074 	movhi	r4,2049
 8003994:	2123bc04 	addi	r4,r4,-28944
 8003998:	80051600 	call	8005160 <altera_avalon_lcd_16207_init>
 800399c:	01020074 	movhi	r4,2049
 80039a0:	2123b204 	addi	r4,r4,-28984
 80039a4:	80038dc0 	call	80038dc <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( RS232, rs232);
 80039a8:	01020074 	movhi	r4,2049
 80039ac:	21240404 	addi	r4,r4,-28656
 80039b0:	000b883a 	mov	r5,zero
 80039b4:	01800044 	movi	r6,1
 80039b8:	80055040 	call	8005504 <altera_avalon_uart_init>
 80039bc:	01020074 	movhi	r4,2049
 80039c0:	2123fa04 	addi	r4,r4,-28696
 80039c4:	80038dc0 	call	80038dc <alt_dev_reg>
}
 80039c8:	e037883a 	mov	sp,fp
 80039cc:	dfc00117 	ldw	ra,4(sp)
 80039d0:	df000017 	ldw	fp,0(sp)
 80039d4:	dec00204 	addi	sp,sp,8
 80039d8:	f800283a 	ret

080039dc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 80039dc:	defffa04 	addi	sp,sp,-24
 80039e0:	dfc00515 	stw	ra,20(sp)
 80039e4:	df000415 	stw	fp,16(sp)
 80039e8:	df000404 	addi	fp,sp,16
 80039ec:	e13ffd15 	stw	r4,-12(fp)
 80039f0:	e17ffe15 	stw	r5,-8(fp)
 80039f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80039f8:	e0bffd17 	ldw	r2,-12(fp)
 80039fc:	10800017 	ldw	r2,0(r2)
 8003a00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8003a04:	e0bffc17 	ldw	r2,-16(fp)
 8003a08:	10c00a04 	addi	r3,r2,40
 8003a0c:	e0bffd17 	ldw	r2,-12(fp)
 8003a10:	10800217 	ldw	r2,8(r2)
 8003a14:	1809883a 	mov	r4,r3
 8003a18:	e17ffe17 	ldw	r5,-8(fp)
 8003a1c:	e1bfff17 	ldw	r6,-4(fp)
 8003a20:	100f883a 	mov	r7,r2
 8003a24:	80040040 	call	8004004 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8003a28:	e037883a 	mov	sp,fp
 8003a2c:	dfc00117 	ldw	ra,4(sp)
 8003a30:	df000017 	ldw	fp,0(sp)
 8003a34:	dec00204 	addi	sp,sp,8
 8003a38:	f800283a 	ret

08003a3c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8003a3c:	defffa04 	addi	sp,sp,-24
 8003a40:	dfc00515 	stw	ra,20(sp)
 8003a44:	df000415 	stw	fp,16(sp)
 8003a48:	df000404 	addi	fp,sp,16
 8003a4c:	e13ffd15 	stw	r4,-12(fp)
 8003a50:	e17ffe15 	stw	r5,-8(fp)
 8003a54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8003a58:	e0bffd17 	ldw	r2,-12(fp)
 8003a5c:	10800017 	ldw	r2,0(r2)
 8003a60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8003a64:	e0bffc17 	ldw	r2,-16(fp)
 8003a68:	10c00a04 	addi	r3,r2,40
 8003a6c:	e0bffd17 	ldw	r2,-12(fp)
 8003a70:	10800217 	ldw	r2,8(r2)
 8003a74:	1809883a 	mov	r4,r3
 8003a78:	e17ffe17 	ldw	r5,-8(fp)
 8003a7c:	e1bfff17 	ldw	r6,-4(fp)
 8003a80:	100f883a 	mov	r7,r2
 8003a84:	80042100 	call	8004210 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8003a88:	e037883a 	mov	sp,fp
 8003a8c:	dfc00117 	ldw	ra,4(sp)
 8003a90:	df000017 	ldw	fp,0(sp)
 8003a94:	dec00204 	addi	sp,sp,8
 8003a98:	f800283a 	ret

08003a9c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8003a9c:	defffc04 	addi	sp,sp,-16
 8003aa0:	dfc00315 	stw	ra,12(sp)
 8003aa4:	df000215 	stw	fp,8(sp)
 8003aa8:	df000204 	addi	fp,sp,8
 8003aac:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8003ab0:	e0bfff17 	ldw	r2,-4(fp)
 8003ab4:	10800017 	ldw	r2,0(r2)
 8003ab8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8003abc:	e0bffe17 	ldw	r2,-8(fp)
 8003ac0:	10c00a04 	addi	r3,r2,40
 8003ac4:	e0bfff17 	ldw	r2,-4(fp)
 8003ac8:	10800217 	ldw	r2,8(r2)
 8003acc:	1809883a 	mov	r4,r3
 8003ad0:	100b883a 	mov	r5,r2
 8003ad4:	8003eb00 	call	8003eb0 <altera_avalon_jtag_uart_close>
}
 8003ad8:	e037883a 	mov	sp,fp
 8003adc:	dfc00117 	ldw	ra,4(sp)
 8003ae0:	df000017 	ldw	fp,0(sp)
 8003ae4:	dec00204 	addi	sp,sp,8
 8003ae8:	f800283a 	ret

08003aec <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8003aec:	defffa04 	addi	sp,sp,-24
 8003af0:	dfc00515 	stw	ra,20(sp)
 8003af4:	df000415 	stw	fp,16(sp)
 8003af8:	df000404 	addi	fp,sp,16
 8003afc:	e13ffd15 	stw	r4,-12(fp)
 8003b00:	e17ffe15 	stw	r5,-8(fp)
 8003b04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8003b08:	e0bffd17 	ldw	r2,-12(fp)
 8003b0c:	10800017 	ldw	r2,0(r2)
 8003b10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8003b14:	e0bffc17 	ldw	r2,-16(fp)
 8003b18:	10800a04 	addi	r2,r2,40
 8003b1c:	1009883a 	mov	r4,r2
 8003b20:	e17ffe17 	ldw	r5,-8(fp)
 8003b24:	e1bfff17 	ldw	r6,-4(fp)
 8003b28:	8003f180 	call	8003f18 <altera_avalon_jtag_uart_ioctl>
}
 8003b2c:	e037883a 	mov	sp,fp
 8003b30:	dfc00117 	ldw	ra,4(sp)
 8003b34:	df000017 	ldw	fp,0(sp)
 8003b38:	dec00204 	addi	sp,sp,8
 8003b3c:	f800283a 	ret

08003b40 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8003b40:	defffa04 	addi	sp,sp,-24
 8003b44:	dfc00515 	stw	ra,20(sp)
 8003b48:	df000415 	stw	fp,16(sp)
 8003b4c:	df000404 	addi	fp,sp,16
 8003b50:	e13ffd15 	stw	r4,-12(fp)
 8003b54:	e17ffe15 	stw	r5,-8(fp)
 8003b58:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8003b5c:	e0bffd17 	ldw	r2,-12(fp)
 8003b60:	00c00044 	movi	r3,1
 8003b64:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8003b68:	e0bffd17 	ldw	r2,-12(fp)
 8003b6c:	10800017 	ldw	r2,0(r2)
 8003b70:	10800104 	addi	r2,r2,4
 8003b74:	1007883a 	mov	r3,r2
 8003b78:	e0bffd17 	ldw	r2,-12(fp)
 8003b7c:	10800817 	ldw	r2,32(r2)
 8003b80:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8003b84:	e0fffe17 	ldw	r3,-8(fp)
 8003b88:	e0bfff17 	ldw	r2,-4(fp)
 8003b8c:	d8000015 	stw	zero,0(sp)
 8003b90:	1809883a 	mov	r4,r3
 8003b94:	100b883a 	mov	r5,r2
 8003b98:	01820034 	movhi	r6,2048
 8003b9c:	318f0104 	addi	r6,r6,15364
 8003ba0:	e1fffd17 	ldw	r7,-12(fp)
 8003ba4:	80060440 	call	8006044 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8003ba8:	e0bffd17 	ldw	r2,-12(fp)
 8003bac:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8003bb0:	e0bffd17 	ldw	r2,-12(fp)
 8003bb4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8003bb8:	00820074 	movhi	r2,2049
 8003bbc:	10ab5d04 	addi	r2,r2,-21132
 8003bc0:	10800017 	ldw	r2,0(r2)
 8003bc4:	1809883a 	mov	r4,r3
 8003bc8:	100b883a 	mov	r5,r2
 8003bcc:	01820034 	movhi	r6,2048
 8003bd0:	318f8204 	addi	r6,r6,15880
 8003bd4:	e1fffd17 	ldw	r7,-12(fp)
 8003bd8:	8005ce40 	call	8005ce4 <alt_alarm_start>
 8003bdc:	1000040e 	bge	r2,zero,8003bf0 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8003be0:	e0fffd17 	ldw	r3,-12(fp)
 8003be4:	00a00034 	movhi	r2,32768
 8003be8:	10bfffc4 	addi	r2,r2,-1
 8003bec:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8003bf0:	e037883a 	mov	sp,fp
 8003bf4:	dfc00117 	ldw	ra,4(sp)
 8003bf8:	df000017 	ldw	fp,0(sp)
 8003bfc:	dec00204 	addi	sp,sp,8
 8003c00:	f800283a 	ret

08003c04 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8003c04:	defff804 	addi	sp,sp,-32
 8003c08:	df000715 	stw	fp,28(sp)
 8003c0c:	df000704 	addi	fp,sp,28
 8003c10:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8003c14:	e0bfff17 	ldw	r2,-4(fp)
 8003c18:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8003c1c:	e0bffb17 	ldw	r2,-20(fp)
 8003c20:	10800017 	ldw	r2,0(r2)
 8003c24:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8003c28:	e0bffc17 	ldw	r2,-16(fp)
 8003c2c:	10800104 	addi	r2,r2,4
 8003c30:	10800037 	ldwio	r2,0(r2)
 8003c34:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8003c38:	e0bffd17 	ldw	r2,-12(fp)
 8003c3c:	1080c00c 	andi	r2,r2,768
 8003c40:	1000011e 	bne	r2,zero,8003c48 <altera_avalon_jtag_uart_irq+0x44>
      break;
 8003c44:	00006c06 	br	8003df8 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8003c48:	e0bffd17 	ldw	r2,-12(fp)
 8003c4c:	1080400c 	andi	r2,r2,256
 8003c50:	10003426 	beq	r2,zero,8003d24 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8003c54:	00800074 	movhi	r2,1
 8003c58:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003c5c:	e0bffb17 	ldw	r2,-20(fp)
 8003c60:	10800a17 	ldw	r2,40(r2)
 8003c64:	10800044 	addi	r2,r2,1
 8003c68:	1081ffcc 	andi	r2,r2,2047
 8003c6c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8003c70:	e0bffb17 	ldw	r2,-20(fp)
 8003c74:	10c00b17 	ldw	r3,44(r2)
 8003c78:	e0bffe17 	ldw	r2,-8(fp)
 8003c7c:	1880011e 	bne	r3,r2,8003c84 <altera_avalon_jtag_uart_irq+0x80>
          break;
 8003c80:	00001606 	br	8003cdc <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8003c84:	e0bffc17 	ldw	r2,-16(fp)
 8003c88:	10800037 	ldwio	r2,0(r2)
 8003c8c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8003c90:	e0bff917 	ldw	r2,-28(fp)
 8003c94:	10a0000c 	andi	r2,r2,32768
 8003c98:	1000011e 	bne	r2,zero,8003ca0 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 8003c9c:	00000f06 	br	8003cdc <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8003ca0:	e0bffb17 	ldw	r2,-20(fp)
 8003ca4:	10800a17 	ldw	r2,40(r2)
 8003ca8:	e0fff917 	ldw	r3,-28(fp)
 8003cac:	1809883a 	mov	r4,r3
 8003cb0:	e0fffb17 	ldw	r3,-20(fp)
 8003cb4:	1885883a 	add	r2,r3,r2
 8003cb8:	10800e04 	addi	r2,r2,56
 8003cbc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003cc0:	e0bffb17 	ldw	r2,-20(fp)
 8003cc4:	10800a17 	ldw	r2,40(r2)
 8003cc8:	10800044 	addi	r2,r2,1
 8003ccc:	10c1ffcc 	andi	r3,r2,2047
 8003cd0:	e0bffb17 	ldw	r2,-20(fp)
 8003cd4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8003cd8:	003fe006 	br	8003c5c <altera_avalon_jtag_uart_irq+0x58>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8003cdc:	e0bff917 	ldw	r2,-28(fp)
 8003ce0:	10bfffec 	andhi	r2,r2,65535
 8003ce4:	10000f26 	beq	r2,zero,8003d24 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8003ce8:	e0bffb17 	ldw	r2,-20(fp)
 8003cec:	10c00817 	ldw	r3,32(r2)
 8003cf0:	00bfff84 	movi	r2,-2
 8003cf4:	1886703a 	and	r3,r3,r2
 8003cf8:	e0bffb17 	ldw	r2,-20(fp)
 8003cfc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8003d00:	e0bffc17 	ldw	r2,-16(fp)
 8003d04:	10800104 	addi	r2,r2,4
 8003d08:	1007883a 	mov	r3,r2
 8003d0c:	e0bffb17 	ldw	r2,-20(fp)
 8003d10:	10800817 	ldw	r2,32(r2)
 8003d14:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8003d18:	e0bffc17 	ldw	r2,-16(fp)
 8003d1c:	10800104 	addi	r2,r2,4
 8003d20:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8003d24:	e0bffd17 	ldw	r2,-12(fp)
 8003d28:	1080800c 	andi	r2,r2,512
 8003d2c:	10003126 	beq	r2,zero,8003df4 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8003d30:	e0bffd17 	ldw	r2,-12(fp)
 8003d34:	1004d43a 	srli	r2,r2,16
 8003d38:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8003d3c:	00001406 	br	8003d90 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8003d40:	e0bffc17 	ldw	r2,-16(fp)
 8003d44:	e0fffb17 	ldw	r3,-20(fp)
 8003d48:	18c00d17 	ldw	r3,52(r3)
 8003d4c:	e13ffb17 	ldw	r4,-20(fp)
 8003d50:	20c7883a 	add	r3,r4,r3
 8003d54:	18c20e04 	addi	r3,r3,2104
 8003d58:	18c00003 	ldbu	r3,0(r3)
 8003d5c:	18c03fcc 	andi	r3,r3,255
 8003d60:	18c0201c 	xori	r3,r3,128
 8003d64:	18ffe004 	addi	r3,r3,-128
 8003d68:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003d6c:	e0bffb17 	ldw	r2,-20(fp)
 8003d70:	10800d17 	ldw	r2,52(r2)
 8003d74:	10800044 	addi	r2,r2,1
 8003d78:	10c1ffcc 	andi	r3,r2,2047
 8003d7c:	e0bffb17 	ldw	r2,-20(fp)
 8003d80:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8003d84:	e0bffa17 	ldw	r2,-24(fp)
 8003d88:	10bfffc4 	addi	r2,r2,-1
 8003d8c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8003d90:	e0bffa17 	ldw	r2,-24(fp)
 8003d94:	10000526 	beq	r2,zero,8003dac <altera_avalon_jtag_uart_irq+0x1a8>
 8003d98:	e0bffb17 	ldw	r2,-20(fp)
 8003d9c:	10c00d17 	ldw	r3,52(r2)
 8003da0:	e0bffb17 	ldw	r2,-20(fp)
 8003da4:	10800c17 	ldw	r2,48(r2)
 8003da8:	18bfe51e 	bne	r3,r2,8003d40 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8003dac:	e0bffa17 	ldw	r2,-24(fp)
 8003db0:	10001026 	beq	r2,zero,8003df4 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8003db4:	e0bffb17 	ldw	r2,-20(fp)
 8003db8:	10c00817 	ldw	r3,32(r2)
 8003dbc:	00bfff44 	movi	r2,-3
 8003dc0:	1886703a 	and	r3,r3,r2
 8003dc4:	e0bffb17 	ldw	r2,-20(fp)
 8003dc8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8003dcc:	e0bffb17 	ldw	r2,-20(fp)
 8003dd0:	10800017 	ldw	r2,0(r2)
 8003dd4:	10800104 	addi	r2,r2,4
 8003dd8:	1007883a 	mov	r3,r2
 8003ddc:	e0bffb17 	ldw	r2,-20(fp)
 8003de0:	10800817 	ldw	r2,32(r2)
 8003de4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8003de8:	e0bffc17 	ldw	r2,-16(fp)
 8003dec:	10800104 	addi	r2,r2,4
 8003df0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8003df4:	003f8c06 	br	8003c28 <altera_avalon_jtag_uart_irq+0x24>
}
 8003df8:	e037883a 	mov	sp,fp
 8003dfc:	df000017 	ldw	fp,0(sp)
 8003e00:	dec00104 	addi	sp,sp,4
 8003e04:	f800283a 	ret

08003e08 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8003e08:	defff804 	addi	sp,sp,-32
 8003e0c:	df000715 	stw	fp,28(sp)
 8003e10:	df000704 	addi	fp,sp,28
 8003e14:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8003e18:	e0bffb17 	ldw	r2,-20(fp)
 8003e1c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8003e20:	e0bff917 	ldw	r2,-28(fp)
 8003e24:	10800017 	ldw	r2,0(r2)
 8003e28:	10800104 	addi	r2,r2,4
 8003e2c:	10800037 	ldwio	r2,0(r2)
 8003e30:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8003e34:	e0bffa17 	ldw	r2,-24(fp)
 8003e38:	1081000c 	andi	r2,r2,1024
 8003e3c:	10000b26 	beq	r2,zero,8003e6c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8003e40:	e0bff917 	ldw	r2,-28(fp)
 8003e44:	10800017 	ldw	r2,0(r2)
 8003e48:	10800104 	addi	r2,r2,4
 8003e4c:	1007883a 	mov	r3,r2
 8003e50:	e0bff917 	ldw	r2,-28(fp)
 8003e54:	10800817 	ldw	r2,32(r2)
 8003e58:	10810014 	ori	r2,r2,1024
 8003e5c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8003e60:	e0bff917 	ldw	r2,-28(fp)
 8003e64:	10000915 	stw	zero,36(r2)
 8003e68:	00000a06 	br	8003e94 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8003e6c:	e0bff917 	ldw	r2,-28(fp)
 8003e70:	10c00917 	ldw	r3,36(r2)
 8003e74:	00a00034 	movhi	r2,32768
 8003e78:	10bfff04 	addi	r2,r2,-4
 8003e7c:	10c00536 	bltu	r2,r3,8003e94 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8003e80:	e0bff917 	ldw	r2,-28(fp)
 8003e84:	10800917 	ldw	r2,36(r2)
 8003e88:	10c00044 	addi	r3,r2,1
 8003e8c:	e0bff917 	ldw	r2,-28(fp)
 8003e90:	10c00915 	stw	r3,36(r2)
 8003e94:	00820074 	movhi	r2,2049
 8003e98:	10ab5d04 	addi	r2,r2,-21132
 8003e9c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8003ea0:	e037883a 	mov	sp,fp
 8003ea4:	df000017 	ldw	fp,0(sp)
 8003ea8:	dec00104 	addi	sp,sp,4
 8003eac:	f800283a 	ret

08003eb0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8003eb0:	defffd04 	addi	sp,sp,-12
 8003eb4:	df000215 	stw	fp,8(sp)
 8003eb8:	df000204 	addi	fp,sp,8
 8003ebc:	e13ffe15 	stw	r4,-8(fp)
 8003ec0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8003ec4:	00000506 	br	8003edc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8003ec8:	e0bfff17 	ldw	r2,-4(fp)
 8003ecc:	1090000c 	andi	r2,r2,16384
 8003ed0:	10000226 	beq	r2,zero,8003edc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8003ed4:	00bffd44 	movi	r2,-11
 8003ed8:	00000b06 	br	8003f08 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8003edc:	e0bffe17 	ldw	r2,-8(fp)
 8003ee0:	10c00d17 	ldw	r3,52(r2)
 8003ee4:	e0bffe17 	ldw	r2,-8(fp)
 8003ee8:	10800c17 	ldw	r2,48(r2)
 8003eec:	18800526 	beq	r3,r2,8003f04 <altera_avalon_jtag_uart_close+0x54>
 8003ef0:	e0bffe17 	ldw	r2,-8(fp)
 8003ef4:	10c00917 	ldw	r3,36(r2)
 8003ef8:	e0bffe17 	ldw	r2,-8(fp)
 8003efc:	10800117 	ldw	r2,4(r2)
 8003f00:	18bff136 	bltu	r3,r2,8003ec8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8003f04:	0005883a 	mov	r2,zero
}
 8003f08:	e037883a 	mov	sp,fp
 8003f0c:	df000017 	ldw	fp,0(sp)
 8003f10:	dec00104 	addi	sp,sp,4
 8003f14:	f800283a 	ret

08003f18 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8003f18:	defffa04 	addi	sp,sp,-24
 8003f1c:	df000515 	stw	fp,20(sp)
 8003f20:	df000504 	addi	fp,sp,20
 8003f24:	e13ffd15 	stw	r4,-12(fp)
 8003f28:	e17ffe15 	stw	r5,-8(fp)
 8003f2c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8003f30:	00bff9c4 	movi	r2,-25
 8003f34:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8003f38:	e0bffe17 	ldw	r2,-8(fp)
 8003f3c:	10da8060 	cmpeqi	r3,r2,27137
 8003f40:	1800031e 	bne	r3,zero,8003f50 <altera_avalon_jtag_uart_ioctl+0x38>
 8003f44:	109a80a0 	cmpeqi	r2,r2,27138
 8003f48:	1000191e 	bne	r2,zero,8003fb0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 8003f4c:	00002806 	br	8003ff0 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8003f50:	e0bffd17 	ldw	r2,-12(fp)
 8003f54:	10c00117 	ldw	r3,4(r2)
 8003f58:	00a00034 	movhi	r2,32768
 8003f5c:	10bfffc4 	addi	r2,r2,-1
 8003f60:	18801226 	beq	r3,r2,8003fac <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 8003f64:	e0bfff17 	ldw	r2,-4(fp)
 8003f68:	10800017 	ldw	r2,0(r2)
 8003f6c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8003f70:	e0bffc17 	ldw	r2,-16(fp)
 8003f74:	10800090 	cmplti	r2,r2,2
 8003f78:	1000061e 	bne	r2,zero,8003f94 <altera_avalon_jtag_uart_ioctl+0x7c>
 8003f7c:	e0fffc17 	ldw	r3,-16(fp)
 8003f80:	00a00034 	movhi	r2,32768
 8003f84:	10bfffc4 	addi	r2,r2,-1
 8003f88:	18800226 	beq	r3,r2,8003f94 <altera_avalon_jtag_uart_ioctl+0x7c>
 8003f8c:	e0bffc17 	ldw	r2,-16(fp)
 8003f90:	00000206 	br	8003f9c <altera_avalon_jtag_uart_ioctl+0x84>
 8003f94:	00a00034 	movhi	r2,32768
 8003f98:	10bfff84 	addi	r2,r2,-2
 8003f9c:	e0fffd17 	ldw	r3,-12(fp)
 8003fa0:	18800115 	stw	r2,4(r3)
      rc = 0;
 8003fa4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8003fa8:	00001106 	br	8003ff0 <altera_avalon_jtag_uart_ioctl+0xd8>
 8003fac:	00001006 	br	8003ff0 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8003fb0:	e0bffd17 	ldw	r2,-12(fp)
 8003fb4:	10c00117 	ldw	r3,4(r2)
 8003fb8:	00a00034 	movhi	r2,32768
 8003fbc:	10bfffc4 	addi	r2,r2,-1
 8003fc0:	18800a26 	beq	r3,r2,8003fec <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8003fc4:	e0bffd17 	ldw	r2,-12(fp)
 8003fc8:	10c00917 	ldw	r3,36(r2)
 8003fcc:	e0bffd17 	ldw	r2,-12(fp)
 8003fd0:	10800117 	ldw	r2,4(r2)
 8003fd4:	1885803a 	cmpltu	r2,r3,r2
 8003fd8:	10c03fcc 	andi	r3,r2,255
 8003fdc:	e0bfff17 	ldw	r2,-4(fp)
 8003fe0:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8003fe4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8003fe8:	00000006 	br	8003fec <altera_avalon_jtag_uart_ioctl+0xd4>
 8003fec:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8003ff0:	e0bffb17 	ldw	r2,-20(fp)
}
 8003ff4:	e037883a 	mov	sp,fp
 8003ff8:	df000017 	ldw	fp,0(sp)
 8003ffc:	dec00104 	addi	sp,sp,4
 8004000:	f800283a 	ret

08004004 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8004004:	defff304 	addi	sp,sp,-52
 8004008:	dfc00c15 	stw	ra,48(sp)
 800400c:	df000b15 	stw	fp,44(sp)
 8004010:	df000b04 	addi	fp,sp,44
 8004014:	e13ffc15 	stw	r4,-16(fp)
 8004018:	e17ffd15 	stw	r5,-12(fp)
 800401c:	e1bffe15 	stw	r6,-8(fp)
 8004020:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8004024:	e0bffd17 	ldw	r2,-12(fp)
 8004028:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800402c:	00004906 	br	8004154 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8004030:	e0bffc17 	ldw	r2,-16(fp)
 8004034:	10800a17 	ldw	r2,40(r2)
 8004038:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800403c:	e0bffc17 	ldw	r2,-16(fp)
 8004040:	10800b17 	ldw	r2,44(r2)
 8004044:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8004048:	e0fff717 	ldw	r3,-36(fp)
 800404c:	e0bff817 	ldw	r2,-32(fp)
 8004050:	18800536 	bltu	r3,r2,8004068 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8004054:	e0fff717 	ldw	r3,-36(fp)
 8004058:	e0bff817 	ldw	r2,-32(fp)
 800405c:	1885c83a 	sub	r2,r3,r2
 8004060:	e0bff615 	stw	r2,-40(fp)
 8004064:	00000406 	br	8004078 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8004068:	00c20004 	movi	r3,2048
 800406c:	e0bff817 	ldw	r2,-32(fp)
 8004070:	1885c83a 	sub	r2,r3,r2
 8004074:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8004078:	e0bff617 	ldw	r2,-40(fp)
 800407c:	1000011e 	bne	r2,zero,8004084 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 8004080:	00001d06 	br	80040f8 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 8004084:	e0fffe17 	ldw	r3,-8(fp)
 8004088:	e0bff617 	ldw	r2,-40(fp)
 800408c:	1880022e 	bgeu	r3,r2,8004098 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 8004090:	e0bffe17 	ldw	r2,-8(fp)
 8004094:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8004098:	e0bff817 	ldw	r2,-32(fp)
 800409c:	10800e04 	addi	r2,r2,56
 80040a0:	e0fffc17 	ldw	r3,-16(fp)
 80040a4:	1885883a 	add	r2,r3,r2
 80040a8:	e13ff517 	ldw	r4,-44(fp)
 80040ac:	100b883a 	mov	r5,r2
 80040b0:	e1bff617 	ldw	r6,-40(fp)
 80040b4:	80016900 	call	8001690 <memcpy>
      ptr   += n;
 80040b8:	e0fff517 	ldw	r3,-44(fp)
 80040bc:	e0bff617 	ldw	r2,-40(fp)
 80040c0:	1885883a 	add	r2,r3,r2
 80040c4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 80040c8:	e0fffe17 	ldw	r3,-8(fp)
 80040cc:	e0bff617 	ldw	r2,-40(fp)
 80040d0:	1885c83a 	sub	r2,r3,r2
 80040d4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80040d8:	e0fff817 	ldw	r3,-32(fp)
 80040dc:	e0bff617 	ldw	r2,-40(fp)
 80040e0:	1885883a 	add	r2,r3,r2
 80040e4:	10c1ffcc 	andi	r3,r2,2047
 80040e8:	e0bffc17 	ldw	r2,-16(fp)
 80040ec:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 80040f0:	e0bffe17 	ldw	r2,-8(fp)
 80040f4:	00bfce16 	blt	zero,r2,8004030 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 80040f8:	e0fff517 	ldw	r3,-44(fp)
 80040fc:	e0bffd17 	ldw	r2,-12(fp)
 8004100:	18800126 	beq	r3,r2,8004108 <altera_avalon_jtag_uart_read+0x104>
      break;
 8004104:	00001506 	br	800415c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8004108:	e0bfff17 	ldw	r2,-4(fp)
 800410c:	1090000c 	andi	r2,r2,16384
 8004110:	10000126 	beq	r2,zero,8004118 <altera_avalon_jtag_uart_read+0x114>
      break;
 8004114:	00001106 	br	800415c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8004118:	0001883a 	nop
 800411c:	e0bffc17 	ldw	r2,-16(fp)
 8004120:	10c00a17 	ldw	r3,40(r2)
 8004124:	e0bff717 	ldw	r2,-36(fp)
 8004128:	1880051e 	bne	r3,r2,8004140 <altera_avalon_jtag_uart_read+0x13c>
 800412c:	e0bffc17 	ldw	r2,-16(fp)
 8004130:	10c00917 	ldw	r3,36(r2)
 8004134:	e0bffc17 	ldw	r2,-16(fp)
 8004138:	10800117 	ldw	r2,4(r2)
 800413c:	18bff736 	bltu	r3,r2,800411c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8004140:	e0bffc17 	ldw	r2,-16(fp)
 8004144:	10c00a17 	ldw	r3,40(r2)
 8004148:	e0bff717 	ldw	r2,-36(fp)
 800414c:	1880011e 	bne	r3,r2,8004154 <altera_avalon_jtag_uart_read+0x150>
      break;
 8004150:	00000206 	br	800415c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8004154:	e0bffe17 	ldw	r2,-8(fp)
 8004158:	00bfb516 	blt	zero,r2,8004030 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800415c:	e0fff517 	ldw	r3,-44(fp)
 8004160:	e0bffd17 	ldw	r2,-12(fp)
 8004164:	18801826 	beq	r3,r2,80041c8 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004168:	0005303a 	rdctl	r2,status
 800416c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004170:	e0fffa17 	ldw	r3,-24(fp)
 8004174:	00bfff84 	movi	r2,-2
 8004178:	1884703a 	and	r2,r3,r2
 800417c:	1001703a 	wrctl	status,r2
  
  return context;
 8004180:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8004184:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8004188:	e0bffc17 	ldw	r2,-16(fp)
 800418c:	10800817 	ldw	r2,32(r2)
 8004190:	10c00054 	ori	r3,r2,1
 8004194:	e0bffc17 	ldw	r2,-16(fp)
 8004198:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800419c:	e0bffc17 	ldw	r2,-16(fp)
 80041a0:	10800017 	ldw	r2,0(r2)
 80041a4:	10800104 	addi	r2,r2,4
 80041a8:	1007883a 	mov	r3,r2
 80041ac:	e0bffc17 	ldw	r2,-16(fp)
 80041b0:	10800817 	ldw	r2,32(r2)
 80041b4:	18800035 	stwio	r2,0(r3)
 80041b8:	e0bff917 	ldw	r2,-28(fp)
 80041bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80041c0:	e0bffb17 	ldw	r2,-20(fp)
 80041c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 80041c8:	e0fff517 	ldw	r3,-44(fp)
 80041cc:	e0bffd17 	ldw	r2,-12(fp)
 80041d0:	18800426 	beq	r3,r2,80041e4 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 80041d4:	e0fff517 	ldw	r3,-44(fp)
 80041d8:	e0bffd17 	ldw	r2,-12(fp)
 80041dc:	1885c83a 	sub	r2,r3,r2
 80041e0:	00000606 	br	80041fc <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 80041e4:	e0bfff17 	ldw	r2,-4(fp)
 80041e8:	1090000c 	andi	r2,r2,16384
 80041ec:	10000226 	beq	r2,zero,80041f8 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 80041f0:	00bffd44 	movi	r2,-11
 80041f4:	00000106 	br	80041fc <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 80041f8:	00bffec4 	movi	r2,-5
}
 80041fc:	e037883a 	mov	sp,fp
 8004200:	dfc00117 	ldw	ra,4(sp)
 8004204:	df000017 	ldw	fp,0(sp)
 8004208:	dec00204 	addi	sp,sp,8
 800420c:	f800283a 	ret

08004210 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8004210:	defff304 	addi	sp,sp,-52
 8004214:	dfc00c15 	stw	ra,48(sp)
 8004218:	df000b15 	stw	fp,44(sp)
 800421c:	df000b04 	addi	fp,sp,44
 8004220:	e13ffc15 	stw	r4,-16(fp)
 8004224:	e17ffd15 	stw	r5,-12(fp)
 8004228:	e1bffe15 	stw	r6,-8(fp)
 800422c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8004230:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8004234:	e0bffd17 	ldw	r2,-12(fp)
 8004238:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800423c:	00003806 	br	8004320 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8004240:	e0bffc17 	ldw	r2,-16(fp)
 8004244:	10800c17 	ldw	r2,48(r2)
 8004248:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 800424c:	e0bffc17 	ldw	r2,-16(fp)
 8004250:	10800d17 	ldw	r2,52(r2)
 8004254:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8004258:	e0fff817 	ldw	r3,-32(fp)
 800425c:	e0bff517 	ldw	r2,-44(fp)
 8004260:	1880062e 	bgeu	r3,r2,800427c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8004264:	e0fff517 	ldw	r3,-44(fp)
 8004268:	e0bff817 	ldw	r2,-32(fp)
 800426c:	1885c83a 	sub	r2,r3,r2
 8004270:	10bfffc4 	addi	r2,r2,-1
 8004274:	e0bff615 	stw	r2,-40(fp)
 8004278:	00000b06 	br	80042a8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800427c:	e0bff517 	ldw	r2,-44(fp)
 8004280:	10000526 	beq	r2,zero,8004298 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8004284:	00c20004 	movi	r3,2048
 8004288:	e0bff817 	ldw	r2,-32(fp)
 800428c:	1885c83a 	sub	r2,r3,r2
 8004290:	e0bff615 	stw	r2,-40(fp)
 8004294:	00000406 	br	80042a8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8004298:	00c1ffc4 	movi	r3,2047
 800429c:	e0bff817 	ldw	r2,-32(fp)
 80042a0:	1885c83a 	sub	r2,r3,r2
 80042a4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80042a8:	e0bff617 	ldw	r2,-40(fp)
 80042ac:	1000011e 	bne	r2,zero,80042b4 <altera_avalon_jtag_uart_write+0xa4>
        break;
 80042b0:	00001d06 	br	8004328 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 80042b4:	e0fffe17 	ldw	r3,-8(fp)
 80042b8:	e0bff617 	ldw	r2,-40(fp)
 80042bc:	1880022e 	bgeu	r3,r2,80042c8 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 80042c0:	e0bffe17 	ldw	r2,-8(fp)
 80042c4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 80042c8:	e0bff817 	ldw	r2,-32(fp)
 80042cc:	10820e04 	addi	r2,r2,2104
 80042d0:	e0fffc17 	ldw	r3,-16(fp)
 80042d4:	1885883a 	add	r2,r3,r2
 80042d8:	1009883a 	mov	r4,r2
 80042dc:	e17ffd17 	ldw	r5,-12(fp)
 80042e0:	e1bff617 	ldw	r6,-40(fp)
 80042e4:	80016900 	call	8001690 <memcpy>
      ptr   += n;
 80042e8:	e0fffd17 	ldw	r3,-12(fp)
 80042ec:	e0bff617 	ldw	r2,-40(fp)
 80042f0:	1885883a 	add	r2,r3,r2
 80042f4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 80042f8:	e0fffe17 	ldw	r3,-8(fp)
 80042fc:	e0bff617 	ldw	r2,-40(fp)
 8004300:	1885c83a 	sub	r2,r3,r2
 8004304:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8004308:	e0fff817 	ldw	r3,-32(fp)
 800430c:	e0bff617 	ldw	r2,-40(fp)
 8004310:	1885883a 	add	r2,r3,r2
 8004314:	10c1ffcc 	andi	r3,r2,2047
 8004318:	e0bffc17 	ldw	r2,-16(fp)
 800431c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8004320:	e0bffe17 	ldw	r2,-8(fp)
 8004324:	00bfc616 	blt	zero,r2,8004240 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004328:	0005303a 	rdctl	r2,status
 800432c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004330:	e0fffa17 	ldw	r3,-24(fp)
 8004334:	00bfff84 	movi	r2,-2
 8004338:	1884703a 	and	r2,r3,r2
 800433c:	1001703a 	wrctl	status,r2
  
  return context;
 8004340:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8004344:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8004348:	e0bffc17 	ldw	r2,-16(fp)
 800434c:	10800817 	ldw	r2,32(r2)
 8004350:	10c00094 	ori	r3,r2,2
 8004354:	e0bffc17 	ldw	r2,-16(fp)
 8004358:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800435c:	e0bffc17 	ldw	r2,-16(fp)
 8004360:	10800017 	ldw	r2,0(r2)
 8004364:	10800104 	addi	r2,r2,4
 8004368:	1007883a 	mov	r3,r2
 800436c:	e0bffc17 	ldw	r2,-16(fp)
 8004370:	10800817 	ldw	r2,32(r2)
 8004374:	18800035 	stwio	r2,0(r3)
 8004378:	e0bff917 	ldw	r2,-28(fp)
 800437c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004380:	e0bffb17 	ldw	r2,-20(fp)
 8004384:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8004388:	e0bffe17 	ldw	r2,-8(fp)
 800438c:	0080120e 	bge	zero,r2,80043d8 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 8004390:	e0bfff17 	ldw	r2,-4(fp)
 8004394:	1090000c 	andi	r2,r2,16384
 8004398:	10000126 	beq	r2,zero,80043a0 <altera_avalon_jtag_uart_write+0x190>
        break;
 800439c:	00001006 	br	80043e0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 80043a0:	0001883a 	nop
 80043a4:	e0bffc17 	ldw	r2,-16(fp)
 80043a8:	10c00d17 	ldw	r3,52(r2)
 80043ac:	e0bff517 	ldw	r2,-44(fp)
 80043b0:	1880051e 	bne	r3,r2,80043c8 <altera_avalon_jtag_uart_write+0x1b8>
 80043b4:	e0bffc17 	ldw	r2,-16(fp)
 80043b8:	10c00917 	ldw	r3,36(r2)
 80043bc:	e0bffc17 	ldw	r2,-16(fp)
 80043c0:	10800117 	ldw	r2,4(r2)
 80043c4:	18bff736 	bltu	r3,r2,80043a4 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 80043c8:	e0bffc17 	ldw	r2,-16(fp)
 80043cc:	10800917 	ldw	r2,36(r2)
 80043d0:	10000126 	beq	r2,zero,80043d8 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 80043d4:	00000206 	br	80043e0 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 80043d8:	e0bffe17 	ldw	r2,-8(fp)
 80043dc:	00bf9716 	blt	zero,r2,800423c <altera_avalon_jtag_uart_write+0x2c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80043e0:	e0fffd17 	ldw	r3,-12(fp)
 80043e4:	e0bff717 	ldw	r2,-36(fp)
 80043e8:	18800426 	beq	r3,r2,80043fc <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 80043ec:	e0fffd17 	ldw	r3,-12(fp)
 80043f0:	e0bff717 	ldw	r2,-36(fp)
 80043f4:	1885c83a 	sub	r2,r3,r2
 80043f8:	00000606 	br	8004414 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 80043fc:	e0bfff17 	ldw	r2,-4(fp)
 8004400:	1090000c 	andi	r2,r2,16384
 8004404:	10000226 	beq	r2,zero,8004410 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 8004408:	00bffd44 	movi	r2,-11
 800440c:	00000106 	br	8004414 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8004410:	00bffec4 	movi	r2,-5
}
 8004414:	e037883a 	mov	sp,fp
 8004418:	dfc00117 	ldw	ra,4(sp)
 800441c:	df000017 	ldw	fp,0(sp)
 8004420:	dec00204 	addi	sp,sp,8
 8004424:	f800283a 	ret

08004428 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
 8004428:	defffa04 	addi	sp,sp,-24
 800442c:	dfc00515 	stw	ra,20(sp)
 8004430:	df000415 	stw	fp,16(sp)
 8004434:	df000404 	addi	fp,sp,16
 8004438:	e13ffe15 	stw	r4,-8(fp)
 800443c:	2805883a 	mov	r2,r5
 8004440:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
 8004444:	e0bffe17 	ldw	r2,-8(fp)
 8004448:	10800017 	ldw	r2,0(r2)
 800444c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
 8004450:	008003f4 	movhi	r2,15
 8004454:	10909004 	addi	r2,r2,16960
 8004458:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
 800445c:	e0bffe17 	ldw	r2,-8(fp)
 8004460:	10800803 	ldbu	r2,32(r2)
 8004464:	10803fcc 	andi	r2,r2,255
 8004468:	1080201c 	xori	r2,r2,128
 800446c:	10bfe004 	addi	r2,r2,-128
 8004470:	10000126 	beq	r2,zero,8004478 <lcd_write_command+0x50>
    return;
 8004474:	00001406 	br	80044c8 <lcd_write_command+0xa0>

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 8004478:	00000906 	br	80044a0 <lcd_write_command+0x78>
    if (--i == 0)
 800447c:	e0bffc17 	ldw	r2,-16(fp)
 8004480:	10bfffc4 	addi	r2,r2,-1
 8004484:	e0bffc15 	stw	r2,-16(fp)
 8004488:	e0bffc17 	ldw	r2,-16(fp)
 800448c:	1000041e 	bne	r2,zero,80044a0 <lcd_write_command+0x78>
    {
      sp->broken = 1;
 8004490:	e0bffe17 	ldw	r2,-8(fp)
 8004494:	00c00044 	movi	r3,1
 8004498:	10c00805 	stb	r3,32(r2)
      return;
 800449c:	00000a06 	br	80044c8 <lcd_write_command+0xa0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 80044a0:	e0bffd17 	ldw	r2,-12(fp)
 80044a4:	10800104 	addi	r2,r2,4
 80044a8:	10800037 	ldwio	r2,0(r2)
 80044ac:	1080200c 	andi	r2,r2,128
 80044b0:	103ff21e 	bne	r2,zero,800447c <lcd_write_command+0x54>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
 80044b4:	01001904 	movi	r4,100
 80044b8:	800685c0 	call	800685c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
 80044bc:	e0bffd17 	ldw	r2,-12(fp)
 80044c0:	e0ffff03 	ldbu	r3,-4(fp)
 80044c4:	10c00035 	stwio	r3,0(r2)
}
 80044c8:	e037883a 	mov	sp,fp
 80044cc:	dfc00117 	ldw	ra,4(sp)
 80044d0:	df000017 	ldw	fp,0(sp)
 80044d4:	dec00204 	addi	sp,sp,8
 80044d8:	f800283a 	ret

080044dc <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
 80044dc:	defffa04 	addi	sp,sp,-24
 80044e0:	dfc00515 	stw	ra,20(sp)
 80044e4:	df000415 	stw	fp,16(sp)
 80044e8:	df000404 	addi	fp,sp,16
 80044ec:	e13ffe15 	stw	r4,-8(fp)
 80044f0:	2805883a 	mov	r2,r5
 80044f4:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
 80044f8:	e0bffe17 	ldw	r2,-8(fp)
 80044fc:	10800017 	ldw	r2,0(r2)
 8004500:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
 8004504:	008003f4 	movhi	r2,15
 8004508:	10909004 	addi	r2,r2,16960
 800450c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
 8004510:	e0bffe17 	ldw	r2,-8(fp)
 8004514:	10800803 	ldbu	r2,32(r2)
 8004518:	10803fcc 	andi	r2,r2,255
 800451c:	1080201c 	xori	r2,r2,128
 8004520:	10bfe004 	addi	r2,r2,-128
 8004524:	10000126 	beq	r2,zero,800452c <lcd_write_data+0x50>
    return;
 8004528:	00001c06 	br	800459c <lcd_write_data+0xc0>

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 800452c:	00000906 	br	8004554 <lcd_write_data+0x78>
    if (--i == 0)
 8004530:	e0bffc17 	ldw	r2,-16(fp)
 8004534:	10bfffc4 	addi	r2,r2,-1
 8004538:	e0bffc15 	stw	r2,-16(fp)
 800453c:	e0bffc17 	ldw	r2,-16(fp)
 8004540:	1000041e 	bne	r2,zero,8004554 <lcd_write_data+0x78>
    {
      sp->broken = 1;
 8004544:	e0bffe17 	ldw	r2,-8(fp)
 8004548:	00c00044 	movi	r3,1
 800454c:	10c00805 	stb	r3,32(r2)
      return;
 8004550:	00001206 	br	800459c <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 8004554:	e0bffd17 	ldw	r2,-12(fp)
 8004558:	10800104 	addi	r2,r2,4
 800455c:	10800037 	ldwio	r2,0(r2)
 8004560:	1080200c 	andi	r2,r2,128
 8004564:	103ff21e 	bne	r2,zero,8004530 <lcd_write_data+0x54>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
 8004568:	01001904 	movi	r4,100
 800456c:	800685c0 	call	800685c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
 8004570:	e0bffd17 	ldw	r2,-12(fp)
 8004574:	10800204 	addi	r2,r2,8
 8004578:	1007883a 	mov	r3,r2
 800457c:	e0bfff03 	ldbu	r2,-4(fp)
 8004580:	18800035 	stwio	r2,0(r3)

  sp->address++;
 8004584:	e0bffe17 	ldw	r2,-8(fp)
 8004588:	108008c3 	ldbu	r2,35(r2)
 800458c:	10800044 	addi	r2,r2,1
 8004590:	1007883a 	mov	r3,r2
 8004594:	e0bffe17 	ldw	r2,-8(fp)
 8004598:	10c008c5 	stb	r3,35(r2)
}
 800459c:	e037883a 	mov	sp,fp
 80045a0:	dfc00117 	ldw	ra,4(sp)
 80045a4:	df000017 	ldw	fp,0(sp)
 80045a8:	dec00204 	addi	sp,sp,8
 80045ac:	f800283a 	ret

080045b0 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
 80045b0:	defffc04 	addi	sp,sp,-16
 80045b4:	dfc00315 	stw	ra,12(sp)
 80045b8:	df000215 	stw	fp,8(sp)
 80045bc:	df000204 	addi	fp,sp,8
 80045c0:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
 80045c4:	e13fff17 	ldw	r4,-4(fp)
 80045c8:	01400044 	movi	r5,1
 80045cc:	80044280 	call	8004428 <lcd_write_command>

  sp->x = 0;
 80045d0:	e0bfff17 	ldw	r2,-4(fp)
 80045d4:	10000845 	stb	zero,33(r2)
  sp->y = 0;
 80045d8:	e0bfff17 	ldw	r2,-4(fp)
 80045dc:	10000885 	stb	zero,34(r2)
  sp->address = 0;
 80045e0:	e0bfff17 	ldw	r2,-4(fp)
 80045e4:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 80045e8:	e03ffe15 	stw	zero,-8(fp)
 80045ec:	00001b06 	br	800465c <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
 80045f0:	e0bffe17 	ldw	r2,-8(fp)
 80045f4:	108018e4 	muli	r2,r2,99
 80045f8:	10801004 	addi	r2,r2,64
 80045fc:	e0ffff17 	ldw	r3,-4(fp)
 8004600:	1885883a 	add	r2,r3,r2
 8004604:	1009883a 	mov	r4,r2
 8004608:	01400804 	movi	r5,32
 800460c:	01801444 	movi	r6,81
 8004610:	80019240 	call	8001924 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
 8004614:	e0bffe17 	ldw	r2,-8(fp)
 8004618:	108018e4 	muli	r2,r2,99
 800461c:	10800c04 	addi	r2,r2,48
 8004620:	e0ffff17 	ldw	r3,-4(fp)
 8004624:	1885883a 	add	r2,r3,r2
 8004628:	1009883a 	mov	r4,r2
 800462c:	01400804 	movi	r5,32
 8004630:	01800404 	movi	r6,16
 8004634:	80019240 	call	8001924 <memset>
    sp->line[y].width = 0;
 8004638:	e0ffff17 	ldw	r3,-4(fp)
 800463c:	e0bffe17 	ldw	r2,-8(fp)
 8004640:	108018e4 	muli	r2,r2,99
 8004644:	10802404 	addi	r2,r2,144
 8004648:	1885883a 	add	r2,r3,r2
 800464c:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 8004650:	e0bffe17 	ldw	r2,-8(fp)
 8004654:	10800044 	addi	r2,r2,1
 8004658:	e0bffe15 	stw	r2,-8(fp)
 800465c:	e0bffe17 	ldw	r2,-8(fp)
 8004660:	10800090 	cmplti	r2,r2,2
 8004664:	103fe21e 	bne	r2,zero,80045f0 <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
 8004668:	e037883a 	mov	sp,fp
 800466c:	dfc00117 	ldw	ra,4(sp)
 8004670:	df000017 	ldw	fp,0(sp)
 8004674:	dec00204 	addi	sp,sp,8
 8004678:	f800283a 	ret

0800467c <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
 800467c:	defff704 	addi	sp,sp,-36
 8004680:	dfc00815 	stw	ra,32(sp)
 8004684:	df000715 	stw	fp,28(sp)
 8004688:	df000704 	addi	fp,sp,28
 800468c:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
 8004690:	e0bfff17 	ldw	r2,-4(fp)
 8004694:	10800943 	ldbu	r2,37(r2)
 8004698:	10803fcc 	andi	r2,r2,255
 800469c:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 80046a0:	e03ff915 	stw	zero,-28(fp)
 80046a4:	00006706 	br	8004844 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
 80046a8:	e0ffff17 	ldw	r3,-4(fp)
 80046ac:	e0bff917 	ldw	r2,-28(fp)
 80046b0:	108018e4 	muli	r2,r2,99
 80046b4:	10802404 	addi	r2,r2,144
 80046b8:	1885883a 	add	r2,r3,r2
 80046bc:	10800043 	ldbu	r2,1(r2)
 80046c0:	10803fcc 	andi	r2,r2,255
 80046c4:	1080201c 	xori	r2,r2,128
 80046c8:	10bfe004 	addi	r2,r2,-128
 80046cc:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
 80046d0:	e0ffff17 	ldw	r3,-4(fp)
 80046d4:	e0bff917 	ldw	r2,-28(fp)
 80046d8:	108018e4 	muli	r2,r2,99
 80046dc:	10802404 	addi	r2,r2,144
 80046e0:	1885883a 	add	r2,r3,r2
 80046e4:	10800083 	ldbu	r2,2(r2)
 80046e8:	10c03fcc 	andi	r3,r2,255
 80046ec:	e0bffc17 	ldw	r2,-16(fp)
 80046f0:	1885383a 	mul	r2,r3,r2
 80046f4:	1005d23a 	srai	r2,r2,8
 80046f8:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
 80046fc:	e0fffb17 	ldw	r3,-20(fp)
 8004700:	e0bffd17 	ldw	r2,-12(fp)
 8004704:	18800116 	blt	r3,r2,800470c <lcd_repaint_screen+0x90>
      offset = 0;
 8004708:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
 800470c:	e03ffa15 	stw	zero,-24(fp)
 8004710:	00004606 	br	800482c <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
 8004714:	e0fffa17 	ldw	r3,-24(fp)
 8004718:	e0bffb17 	ldw	r2,-20(fp)
 800471c:	1885883a 	add	r2,r3,r2
 8004720:	1009883a 	mov	r4,r2
 8004724:	e17ffd17 	ldw	r5,-12(fp)
 8004728:	8002ecc0 	call	8002ecc <__modsi3>
 800472c:	1009883a 	mov	r4,r2
 8004730:	e0ffff17 	ldw	r3,-4(fp)
 8004734:	e0bff917 	ldw	r2,-28(fp)
 8004738:	108018e4 	muli	r2,r2,99
 800473c:	1885883a 	add	r2,r3,r2
 8004740:	1105883a 	add	r2,r2,r4
 8004744:	10801004 	addi	r2,r2,64
 8004748:	10800003 	ldbu	r2,0(r2)
 800474c:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
 8004750:	e0ffff17 	ldw	r3,-4(fp)
 8004754:	e0bff917 	ldw	r2,-28(fp)
 8004758:	108018e4 	muli	r2,r2,99
 800475c:	1887883a 	add	r3,r3,r2
 8004760:	e0bffa17 	ldw	r2,-24(fp)
 8004764:	1885883a 	add	r2,r3,r2
 8004768:	10800c04 	addi	r2,r2,48
 800476c:	10800003 	ldbu	r2,0(r2)
 8004770:	10c03fcc 	andi	r3,r2,255
 8004774:	18c0201c 	xori	r3,r3,128
 8004778:	18ffe004 	addi	r3,r3,-128
 800477c:	e0bffe07 	ldb	r2,-8(fp)
 8004780:	18802726 	beq	r3,r2,8004820 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
 8004784:	e0fff917 	ldw	r3,-28(fp)
 8004788:	d0a00b04 	addi	r2,gp,-32724
 800478c:	1885883a 	add	r2,r3,r2
 8004790:	10800003 	ldbu	r2,0(r2)
 8004794:	1007883a 	mov	r3,r2
 8004798:	e0bffa17 	ldw	r2,-24(fp)
 800479c:	1885883a 	add	r2,r3,r2
 80047a0:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
 80047a4:	e0fffe43 	ldbu	r3,-7(fp)
 80047a8:	e0bfff17 	ldw	r2,-4(fp)
 80047ac:	108008c3 	ldbu	r2,35(r2)
 80047b0:	10803fcc 	andi	r2,r2,255
 80047b4:	1080201c 	xori	r2,r2,128
 80047b8:	10bfe004 	addi	r2,r2,-128
 80047bc:	18800a26 	beq	r3,r2,80047e8 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
 80047c0:	e0fffe43 	ldbu	r3,-7(fp)
 80047c4:	00bfe004 	movi	r2,-128
 80047c8:	1884b03a 	or	r2,r3,r2
 80047cc:	10803fcc 	andi	r2,r2,255
 80047d0:	e13fff17 	ldw	r4,-4(fp)
 80047d4:	100b883a 	mov	r5,r2
 80047d8:	80044280 	call	8004428 <lcd_write_command>
          sp->address = address;
 80047dc:	e0fffe43 	ldbu	r3,-7(fp)
 80047e0:	e0bfff17 	ldw	r2,-4(fp)
 80047e4:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
 80047e8:	e0bffe03 	ldbu	r2,-8(fp)
 80047ec:	10803fcc 	andi	r2,r2,255
 80047f0:	e13fff17 	ldw	r4,-4(fp)
 80047f4:	100b883a 	mov	r5,r2
 80047f8:	80044dc0 	call	80044dc <lcd_write_data>
        sp->line[y].visible[x] = c;
 80047fc:	e0ffff17 	ldw	r3,-4(fp)
 8004800:	e0bff917 	ldw	r2,-28(fp)
 8004804:	108018e4 	muli	r2,r2,99
 8004808:	1887883a 	add	r3,r3,r2
 800480c:	e0bffa17 	ldw	r2,-24(fp)
 8004810:	1885883a 	add	r2,r3,r2
 8004814:	10800c04 	addi	r2,r2,48
 8004818:	e0fffe03 	ldbu	r3,-8(fp)
 800481c:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
 8004820:	e0bffa17 	ldw	r2,-24(fp)
 8004824:	10800044 	addi	r2,r2,1
 8004828:	e0bffa15 	stw	r2,-24(fp)
 800482c:	e0bffa17 	ldw	r2,-24(fp)
 8004830:	10800410 	cmplti	r2,r2,16
 8004834:	103fb71e 	bne	r2,zero,8004714 <lcd_repaint_screen+0x98>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 8004838:	e0bff917 	ldw	r2,-28(fp)
 800483c:	10800044 	addi	r2,r2,1
 8004840:	e0bff915 	stw	r2,-28(fp)
 8004844:	e0bff917 	ldw	r2,-28(fp)
 8004848:	10800090 	cmplti	r2,r2,2
 800484c:	103f961e 	bne	r2,zero,80046a8 <lcd_repaint_screen+0x2c>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
 8004850:	e037883a 	mov	sp,fp
 8004854:	dfc00117 	ldw	ra,4(sp)
 8004858:	df000017 	ldw	fp,0(sp)
 800485c:	dec00204 	addi	sp,sp,8
 8004860:	f800283a 	ret

08004864 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
 8004864:	defffc04 	addi	sp,sp,-16
 8004868:	dfc00315 	stw	ra,12(sp)
 800486c:	df000215 	stw	fp,8(sp)
 8004870:	df000204 	addi	fp,sp,8
 8004874:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 8004878:	e03ffe15 	stw	zero,-8(fp)
 800487c:	00001d06 	br	80048f4 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
 8004880:	e0bffe17 	ldw	r2,-8(fp)
 8004884:	00800f16 	blt	zero,r2,80048c4 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
 8004888:	e0bffe17 	ldw	r2,-8(fp)
 800488c:	108018e4 	muli	r2,r2,99
 8004890:	10801004 	addi	r2,r2,64
 8004894:	e0ffff17 	ldw	r3,-4(fp)
 8004898:	1889883a 	add	r4,r3,r2
 800489c:	e0bffe17 	ldw	r2,-8(fp)
 80048a0:	10800044 	addi	r2,r2,1
 80048a4:	108018e4 	muli	r2,r2,99
 80048a8:	10801004 	addi	r2,r2,64
 80048ac:	e0ffff17 	ldw	r3,-4(fp)
 80048b0:	1885883a 	add	r2,r3,r2
 80048b4:	100b883a 	mov	r5,r2
 80048b8:	01801404 	movi	r6,80
 80048bc:	80016900 	call	8001690 <memcpy>
 80048c0:	00000906 	br	80048e8 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
 80048c4:	e0bffe17 	ldw	r2,-8(fp)
 80048c8:	108018e4 	muli	r2,r2,99
 80048cc:	10801004 	addi	r2,r2,64
 80048d0:	e0ffff17 	ldw	r3,-4(fp)
 80048d4:	1885883a 	add	r2,r3,r2
 80048d8:	1009883a 	mov	r4,r2
 80048dc:	01400804 	movi	r5,32
 80048e0:	01801404 	movi	r6,80
 80048e4:	80019240 	call	8001924 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 80048e8:	e0bffe17 	ldw	r2,-8(fp)
 80048ec:	10800044 	addi	r2,r2,1
 80048f0:	e0bffe15 	stw	r2,-8(fp)
 80048f4:	e0bffe17 	ldw	r2,-8(fp)
 80048f8:	10800090 	cmplti	r2,r2,2
 80048fc:	103fe01e 	bne	r2,zero,8004880 <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
 8004900:	e0bfff17 	ldw	r2,-4(fp)
 8004904:	10800883 	ldbu	r2,34(r2)
 8004908:	10bfffc4 	addi	r2,r2,-1
 800490c:	1007883a 	mov	r3,r2
 8004910:	e0bfff17 	ldw	r2,-4(fp)
 8004914:	10c00885 	stb	r3,34(r2)
}
 8004918:	e037883a 	mov	sp,fp
 800491c:	dfc00117 	ldw	ra,4(sp)
 8004920:	df000017 	ldw	fp,0(sp)
 8004924:	dec00204 	addi	sp,sp,8
 8004928:	f800283a 	ret

0800492c <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
 800492c:	defff904 	addi	sp,sp,-28
 8004930:	dfc00615 	stw	ra,24(sp)
 8004934:	df000515 	stw	fp,20(sp)
 8004938:	df000504 	addi	fp,sp,20
 800493c:	e13ffe15 	stw	r4,-8(fp)
 8004940:	2805883a 	mov	r2,r5
 8004944:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
 8004948:	e03ffb15 	stw	zero,-20(fp)
 800494c:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
 8004950:	e0bffe17 	ldw	r2,-8(fp)
 8004954:	10800a03 	ldbu	r2,40(r2)
 8004958:	10803fcc 	andi	r2,r2,255
 800495c:	1080201c 	xori	r2,r2,128
 8004960:	10bfe004 	addi	r2,r2,-128
 8004964:	108016d8 	cmpnei	r2,r2,91
 8004968:	1000441e 	bne	r2,zero,8004a7c <lcd_handle_escape+0x150>
  {
    char * ptr = sp->escape+1;
 800496c:	e0bffe17 	ldw	r2,-8(fp)
 8004970:	10800a44 	addi	r2,r2,41
 8004974:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
 8004978:	00000c06 	br	80049ac <lcd_handle_escape+0x80>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
 800497c:	e0bffb17 	ldw	r2,-20(fp)
 8004980:	10c002a4 	muli	r3,r2,10
 8004984:	e0bffd17 	ldw	r2,-12(fp)
 8004988:	11000044 	addi	r4,r2,1
 800498c:	e13ffd15 	stw	r4,-12(fp)
 8004990:	10800003 	ldbu	r2,0(r2)
 8004994:	10803fcc 	andi	r2,r2,255
 8004998:	1080201c 	xori	r2,r2,128
 800499c:	10bfe004 	addi	r2,r2,-128
 80049a0:	10bff404 	addi	r2,r2,-48
 80049a4:	1885883a 	add	r2,r3,r2
 80049a8:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
 80049ac:	00820074 	movhi	r2,2049
 80049b0:	10a43a04 	addi	r2,r2,-28440
 80049b4:	10c00017 	ldw	r3,0(r2)
 80049b8:	e0bffd17 	ldw	r2,-12(fp)
 80049bc:	10800003 	ldbu	r2,0(r2)
 80049c0:	10803fcc 	andi	r2,r2,255
 80049c4:	1080201c 	xori	r2,r2,128
 80049c8:	10bfe004 	addi	r2,r2,-128
 80049cc:	10800044 	addi	r2,r2,1
 80049d0:	1885883a 	add	r2,r3,r2
 80049d4:	10800003 	ldbu	r2,0(r2)
 80049d8:	10803fcc 	andi	r2,r2,255
 80049dc:	1080010c 	andi	r2,r2,4
 80049e0:	103fe61e 	bne	r2,zero,800497c <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
 80049e4:	e0bffd17 	ldw	r2,-12(fp)
 80049e8:	10800003 	ldbu	r2,0(r2)
 80049ec:	10803fcc 	andi	r2,r2,255
 80049f0:	1080201c 	xori	r2,r2,128
 80049f4:	10bfe004 	addi	r2,r2,-128
 80049f8:	10800ed8 	cmpnei	r2,r2,59
 80049fc:	10001e1e 	bne	r2,zero,8004a78 <lcd_handle_escape+0x14c>
    {
      ptr++;
 8004a00:	e0bffd17 	ldw	r2,-12(fp)
 8004a04:	10800044 	addi	r2,r2,1
 8004a08:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
 8004a0c:	00000c06 	br	8004a40 <lcd_handle_escape+0x114>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
 8004a10:	e0bffc17 	ldw	r2,-16(fp)
 8004a14:	10c002a4 	muli	r3,r2,10
 8004a18:	e0bffd17 	ldw	r2,-12(fp)
 8004a1c:	11000044 	addi	r4,r2,1
 8004a20:	e13ffd15 	stw	r4,-12(fp)
 8004a24:	10800003 	ldbu	r2,0(r2)
 8004a28:	10803fcc 	andi	r2,r2,255
 8004a2c:	1080201c 	xori	r2,r2,128
 8004a30:	10bfe004 	addi	r2,r2,-128
 8004a34:	10bff404 	addi	r2,r2,-48
 8004a38:	1885883a 	add	r2,r3,r2
 8004a3c:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
 8004a40:	00820074 	movhi	r2,2049
 8004a44:	10a43a04 	addi	r2,r2,-28440
 8004a48:	10c00017 	ldw	r3,0(r2)
 8004a4c:	e0bffd17 	ldw	r2,-12(fp)
 8004a50:	10800003 	ldbu	r2,0(r2)
 8004a54:	10803fcc 	andi	r2,r2,255
 8004a58:	1080201c 	xori	r2,r2,128
 8004a5c:	10bfe004 	addi	r2,r2,-128
 8004a60:	10800044 	addi	r2,r2,1
 8004a64:	1885883a 	add	r2,r3,r2
 8004a68:	10800003 	ldbu	r2,0(r2)
 8004a6c:	10803fcc 	andi	r2,r2,255
 8004a70:	1080010c 	andi	r2,r2,4
 8004a74:	103fe61e 	bne	r2,zero,8004a10 <lcd_handle_escape+0xe4>
 8004a78:	00000206 	br	8004a84 <lcd_handle_escape+0x158>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
 8004a7c:	00bfffc4 	movi	r2,-1
 8004a80:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
 8004a84:	e0bfff07 	ldb	r2,-4(fp)
 8004a88:	10c012a0 	cmpeqi	r3,r2,74
 8004a8c:	1800281e 	bne	r3,zero,8004b30 <lcd_handle_escape+0x204>
 8004a90:	10c012c8 	cmpgei	r3,r2,75
 8004a94:	1800031e 	bne	r3,zero,8004aa4 <lcd_handle_escape+0x178>
 8004a98:	10801220 	cmpeqi	r2,r2,72
 8004a9c:	1000051e 	bne	r2,zero,8004ab4 <lcd_handle_escape+0x188>
 8004aa0:	00004506 	br	8004bb8 <lcd_handle_escape+0x28c>
 8004aa4:	10c012e0 	cmpeqi	r3,r2,75
 8004aa8:	1800281e 	bne	r3,zero,8004b4c <lcd_handle_escape+0x220>
 8004aac:	108019a0 	cmpeqi	r2,r2,102
 8004ab0:	10004126 	beq	r2,zero,8004bb8 <lcd_handle_escape+0x28c>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
 8004ab4:	e0bffc17 	ldw	r2,-16(fp)
 8004ab8:	0080050e 	bge	zero,r2,8004ad0 <lcd_handle_escape+0x1a4>
      sp->x = parm2 - 1;
 8004abc:	e0bffc17 	ldw	r2,-16(fp)
 8004ac0:	10bfffc4 	addi	r2,r2,-1
 8004ac4:	1007883a 	mov	r3,r2
 8004ac8:	e0bffe17 	ldw	r2,-8(fp)
 8004acc:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
 8004ad0:	e0bffb17 	ldw	r2,-20(fp)
 8004ad4:	0080150e 	bge	zero,r2,8004b2c <lcd_handle_escape+0x200>
    {
      sp->y = parm1 - 1;
 8004ad8:	e0bffb17 	ldw	r2,-20(fp)
 8004adc:	10bfffc4 	addi	r2,r2,-1
 8004ae0:	1007883a 	mov	r3,r2
 8004ae4:	e0bffe17 	ldw	r2,-8(fp)
 8004ae8:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
 8004aec:	e0bffe17 	ldw	r2,-8(fp)
 8004af0:	10800883 	ldbu	r2,34(r2)
 8004af4:	10803fcc 	andi	r2,r2,255
 8004af8:	10800170 	cmpltui	r2,r2,5
 8004afc:	1000031e 	bne	r2,zero,8004b0c <lcd_handle_escape+0x1e0>
        sp->y = ALT_LCD_HEIGHT * 2;
 8004b00:	e0bffe17 	ldw	r2,-8(fp)
 8004b04:	00c00104 	movi	r3,4
 8004b08:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
 8004b0c:	00000206 	br	8004b18 <lcd_handle_escape+0x1ec>
        lcd_scroll_up(sp);
 8004b10:	e13ffe17 	ldw	r4,-8(fp)
 8004b14:	80048640 	call	8004864 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
 8004b18:	e0bffe17 	ldw	r2,-8(fp)
 8004b1c:	10800883 	ldbu	r2,34(r2)
 8004b20:	10803fcc 	andi	r2,r2,255
 8004b24:	108000e8 	cmpgeui	r2,r2,3
 8004b28:	103ff91e 	bne	r2,zero,8004b10 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
    }
    break;
 8004b2c:	00002206 	br	8004bb8 <lcd_handle_escape+0x28c>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
 8004b30:	e0bffb17 	ldw	r2,-20(fp)
 8004b34:	10800098 	cmpnei	r2,r2,2
 8004b38:	1000031e 	bne	r2,zero,8004b48 <lcd_handle_escape+0x21c>
      lcd_clear_screen(sp);
 8004b3c:	e13ffe17 	ldw	r4,-8(fp)
 8004b40:	80045b00 	call	80045b0 <lcd_clear_screen>
    break;
 8004b44:	00001c06 	br	8004bb8 <lcd_handle_escape+0x28c>
 8004b48:	00001b06 	br	8004bb8 <lcd_handle_escape+0x28c>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
 8004b4c:	e0bffb17 	ldw	r2,-20(fp)
 8004b50:	00801816 	blt	zero,r2,8004bb4 <lcd_handle_escape+0x288>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
 8004b54:	e0bffe17 	ldw	r2,-8(fp)
 8004b58:	10800843 	ldbu	r2,33(r2)
 8004b5c:	10803fcc 	andi	r2,r2,255
 8004b60:	10801428 	cmpgeui	r2,r2,80
 8004b64:	1000131e 	bne	r2,zero,8004bb4 <lcd_handle_escape+0x288>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
 8004b68:	e0bffe17 	ldw	r2,-8(fp)
 8004b6c:	10800883 	ldbu	r2,34(r2)
 8004b70:	10803fcc 	andi	r2,r2,255
 8004b74:	108018e4 	muli	r2,r2,99
 8004b78:	10801004 	addi	r2,r2,64
 8004b7c:	e0fffe17 	ldw	r3,-8(fp)
 8004b80:	1887883a 	add	r3,r3,r2
 8004b84:	e0bffe17 	ldw	r2,-8(fp)
 8004b88:	10800843 	ldbu	r2,33(r2)
 8004b8c:	10803fcc 	andi	r2,r2,255
 8004b90:	1889883a 	add	r4,r3,r2
 8004b94:	e0bffe17 	ldw	r2,-8(fp)
 8004b98:	10800843 	ldbu	r2,33(r2)
 8004b9c:	10803fcc 	andi	r2,r2,255
 8004ba0:	00c01404 	movi	r3,80
 8004ba4:	1885c83a 	sub	r2,r3,r2
 8004ba8:	01400804 	movi	r5,32
 8004bac:	100d883a 	mov	r6,r2
 8004bb0:	80019240 	call	8001924 <memset>
    }
    break;
 8004bb4:	0001883a 	nop
  }
}
 8004bb8:	e037883a 	mov	sp,fp
 8004bbc:	dfc00117 	ldw	ra,4(sp)
 8004bc0:	df000017 	ldw	fp,0(sp)
 8004bc4:	dec00204 	addi	sp,sp,8
 8004bc8:	f800283a 	ret

08004bcc <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
 8004bcc:	defff304 	addi	sp,sp,-52
 8004bd0:	dfc00c15 	stw	ra,48(sp)
 8004bd4:	df000b15 	stw	fp,44(sp)
 8004bd8:	df000b04 	addi	fp,sp,44
 8004bdc:	e13ffc15 	stw	r4,-16(fp)
 8004be0:	e17ffd15 	stw	r5,-12(fp)
 8004be4:	e1bffe15 	stw	r6,-8(fp)
 8004be8:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
 8004bec:	e0bffe17 	ldw	r2,-8(fp)
 8004bf0:	e0fffd17 	ldw	r3,-12(fp)
 8004bf4:	1885883a 	add	r2,r3,r2
 8004bf8:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
 8004bfc:	e0bffc17 	ldw	r2,-16(fp)
 8004c00:	00c00044 	movi	r3,1
 8004c04:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
 8004c08:	00009e06 	br	8004e84 <altera_avalon_lcd_16207_write+0x2b8>
  {
    char c = *ptr;
 8004c0c:	e0bffd17 	ldw	r2,-12(fp)
 8004c10:	10800003 	ldbu	r2,0(r2)
 8004c14:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
 8004c18:	e0bffc17 	ldw	r2,-16(fp)
 8004c1c:	10800903 	ldbu	r2,36(r2)
 8004c20:	10803fcc 	andi	r2,r2,255
 8004c24:	1080201c 	xori	r2,r2,128
 8004c28:	10bfe004 	addi	r2,r2,-128
 8004c2c:	10003a16 	blt	r2,zero,8004d18 <altera_avalon_lcd_16207_write+0x14c>
    {
      unsigned int esccount = sp->esccount;
 8004c30:	e0bffc17 	ldw	r2,-16(fp)
 8004c34:	10800903 	ldbu	r2,36(r2)
 8004c38:	10803fcc 	andi	r2,r2,255
 8004c3c:	1080201c 	xori	r2,r2,128
 8004c40:	10bfe004 	addi	r2,r2,-128
 8004c44:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
 8004c48:	e0bffa17 	ldw	r2,-24(fp)
 8004c4c:	1000031e 	bne	r2,zero,8004c5c <altera_avalon_lcd_16207_write+0x90>
 8004c50:	e0bff907 	ldb	r2,-28(fp)
 8004c54:	108016d8 	cmpnei	r2,r2,91
 8004c58:	10000f1e 	bne	r2,zero,8004c98 <altera_avalon_lcd_16207_write+0xcc>
 8004c5c:	e0bffa17 	ldw	r2,-24(fp)
 8004c60:	10001a26 	beq	r2,zero,8004ccc <altera_avalon_lcd_16207_write+0x100>
          (esccount > 0 && !isdigit(c) && c != ';'))
 8004c64:	00820074 	movhi	r2,2049
 8004c68:	10a43a04 	addi	r2,r2,-28440
 8004c6c:	10c00017 	ldw	r3,0(r2)
 8004c70:	e0bff907 	ldb	r2,-28(fp)
 8004c74:	10800044 	addi	r2,r2,1
 8004c78:	1885883a 	add	r2,r3,r2
 8004c7c:	10800003 	ldbu	r2,0(r2)
 8004c80:	10803fcc 	andi	r2,r2,255
 8004c84:	1080010c 	andi	r2,r2,4
 8004c88:	1000101e 	bne	r2,zero,8004ccc <altera_avalon_lcd_16207_write+0x100>
 8004c8c:	e0bff907 	ldb	r2,-28(fp)
 8004c90:	10800ee0 	cmpeqi	r2,r2,59
 8004c94:	10000d1e 	bne	r2,zero,8004ccc <altera_avalon_lcd_16207_write+0x100>
      {
        sp->escape[esccount] = 0;
 8004c98:	e0fffc17 	ldw	r3,-16(fp)
 8004c9c:	e0bffa17 	ldw	r2,-24(fp)
 8004ca0:	1885883a 	add	r2,r3,r2
 8004ca4:	10800a04 	addi	r2,r2,40
 8004ca8:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
 8004cac:	e0bff907 	ldb	r2,-28(fp)
 8004cb0:	e13ffc17 	ldw	r4,-16(fp)
 8004cb4:	100b883a 	mov	r5,r2
 8004cb8:	800492c0 	call	800492c <lcd_handle_escape>

        sp->esccount = -1;
 8004cbc:	e0bffc17 	ldw	r2,-16(fp)
 8004cc0:	00ffffc4 	movi	r3,-1
 8004cc4:	10c00905 	stb	r3,36(r2)
 8004cc8:	00001206 	br	8004d14 <altera_avalon_lcd_16207_write+0x148>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
 8004ccc:	e0bffc17 	ldw	r2,-16(fp)
 8004cd0:	10800903 	ldbu	r2,36(r2)
 8004cd4:	10803fcc 	andi	r2,r2,255
 8004cd8:	108001e8 	cmpgeui	r2,r2,7
 8004cdc:	10000d1e 	bne	r2,zero,8004d14 <altera_avalon_lcd_16207_write+0x148>
      {
        sp->escape[esccount] = c;
 8004ce0:	e0fffc17 	ldw	r3,-16(fp)
 8004ce4:	e0bffa17 	ldw	r2,-24(fp)
 8004ce8:	1885883a 	add	r2,r3,r2
 8004cec:	10800a04 	addi	r2,r2,40
 8004cf0:	e0fff903 	ldbu	r3,-28(fp)
 8004cf4:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
 8004cf8:	e0bffc17 	ldw	r2,-16(fp)
 8004cfc:	10800903 	ldbu	r2,36(r2)
 8004d00:	10800044 	addi	r2,r2,1
 8004d04:	1007883a 	mov	r3,r2
 8004d08:	e0bffc17 	ldw	r2,-16(fp)
 8004d0c:	10c00905 	stb	r3,36(r2)
 8004d10:	00005906 	br	8004e78 <altera_avalon_lcd_16207_write+0x2ac>
 8004d14:	00005806 	br	8004e78 <altera_avalon_lcd_16207_write+0x2ac>
      }
    }
    else if (c == 27) /* ESC */
 8004d18:	e0bff907 	ldb	r2,-28(fp)
 8004d1c:	108006d8 	cmpnei	r2,r2,27
 8004d20:	1000031e 	bne	r2,zero,8004d30 <altera_avalon_lcd_16207_write+0x164>
    {
      sp->esccount = 0;
 8004d24:	e0bffc17 	ldw	r2,-16(fp)
 8004d28:	10000905 	stb	zero,36(r2)
 8004d2c:	00005206 	br	8004e78 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\r')
 8004d30:	e0bff907 	ldb	r2,-28(fp)
 8004d34:	10800358 	cmpnei	r2,r2,13
 8004d38:	1000031e 	bne	r2,zero,8004d48 <altera_avalon_lcd_16207_write+0x17c>
    {
      sp->x = 0;
 8004d3c:	e0bffc17 	ldw	r2,-16(fp)
 8004d40:	10000845 	stb	zero,33(r2)
 8004d44:	00004c06 	br	8004e78 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\n')
 8004d48:	e0bff907 	ldb	r2,-28(fp)
 8004d4c:	10800298 	cmpnei	r2,r2,10
 8004d50:	1000101e 	bne	r2,zero,8004d94 <altera_avalon_lcd_16207_write+0x1c8>
    {
      sp->x = 0;
 8004d54:	e0bffc17 	ldw	r2,-16(fp)
 8004d58:	10000845 	stb	zero,33(r2)
      sp->y++;
 8004d5c:	e0bffc17 	ldw	r2,-16(fp)
 8004d60:	10800883 	ldbu	r2,34(r2)
 8004d64:	10800044 	addi	r2,r2,1
 8004d68:	1007883a 	mov	r3,r2
 8004d6c:	e0bffc17 	ldw	r2,-16(fp)
 8004d70:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
 8004d74:	e0bffc17 	ldw	r2,-16(fp)
 8004d78:	10800883 	ldbu	r2,34(r2)
 8004d7c:	10803fcc 	andi	r2,r2,255
 8004d80:	108000f0 	cmpltui	r2,r2,3
 8004d84:	10003c1e 	bne	r2,zero,8004e78 <altera_avalon_lcd_16207_write+0x2ac>
        lcd_scroll_up(sp);
 8004d88:	e13ffc17 	ldw	r4,-16(fp)
 8004d8c:	80048640 	call	8004864 <lcd_scroll_up>
 8004d90:	00003906 	br	8004e78 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\b')
 8004d94:	e0bff907 	ldb	r2,-28(fp)
 8004d98:	10800218 	cmpnei	r2,r2,8
 8004d9c:	10000b1e 	bne	r2,zero,8004dcc <altera_avalon_lcd_16207_write+0x200>
    {
      if (sp->x > 0)
 8004da0:	e0bffc17 	ldw	r2,-16(fp)
 8004da4:	10800843 	ldbu	r2,33(r2)
 8004da8:	10803fcc 	andi	r2,r2,255
 8004dac:	10003226 	beq	r2,zero,8004e78 <altera_avalon_lcd_16207_write+0x2ac>
        sp->x--;
 8004db0:	e0bffc17 	ldw	r2,-16(fp)
 8004db4:	10800843 	ldbu	r2,33(r2)
 8004db8:	10bfffc4 	addi	r2,r2,-1
 8004dbc:	1007883a 	mov	r3,r2
 8004dc0:	e0bffc17 	ldw	r2,-16(fp)
 8004dc4:	10c00845 	stb	r3,33(r2)
 8004dc8:	00002b06 	br	8004e78 <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (isprint(c))
 8004dcc:	00820074 	movhi	r2,2049
 8004dd0:	10a43a04 	addi	r2,r2,-28440
 8004dd4:	10c00017 	ldw	r3,0(r2)
 8004dd8:	e0bff907 	ldb	r2,-28(fp)
 8004ddc:	10800044 	addi	r2,r2,1
 8004de0:	1885883a 	add	r2,r3,r2
 8004de4:	10800003 	ldbu	r2,0(r2)
 8004de8:	10803fcc 	andi	r2,r2,255
 8004dec:	1080201c 	xori	r2,r2,128
 8004df0:	10bfe004 	addi	r2,r2,-128
 8004df4:	108025cc 	andi	r2,r2,151
 8004df8:	10001f26 	beq	r2,zero,8004e78 <altera_avalon_lcd_16207_write+0x2ac>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
 8004dfc:	e0bffc17 	ldw	r2,-16(fp)
 8004e00:	10800883 	ldbu	r2,34(r2)
 8004e04:	10803fcc 	andi	r2,r2,255
 8004e08:	108000b0 	cmpltui	r2,r2,2
 8004e0c:	1000021e 	bne	r2,zero,8004e18 <altera_avalon_lcd_16207_write+0x24c>
        lcd_scroll_up(sp);
 8004e10:	e13ffc17 	ldw	r4,-16(fp)
 8004e14:	80048640 	call	8004864 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
 8004e18:	e0bffc17 	ldw	r2,-16(fp)
 8004e1c:	10800843 	ldbu	r2,33(r2)
 8004e20:	10803fcc 	andi	r2,r2,255
 8004e24:	10801428 	cmpgeui	r2,r2,80
 8004e28:	10000d1e 	bne	r2,zero,8004e60 <altera_avalon_lcd_16207_write+0x294>
        sp->line[sp->y].data[sp->x] = c;
 8004e2c:	e0bffc17 	ldw	r2,-16(fp)
 8004e30:	10800883 	ldbu	r2,34(r2)
 8004e34:	10c03fcc 	andi	r3,r2,255
 8004e38:	e0bffc17 	ldw	r2,-16(fp)
 8004e3c:	10800843 	ldbu	r2,33(r2)
 8004e40:	10803fcc 	andi	r2,r2,255
 8004e44:	e13ffc17 	ldw	r4,-16(fp)
 8004e48:	18c018e4 	muli	r3,r3,99
 8004e4c:	20c7883a 	add	r3,r4,r3
 8004e50:	1885883a 	add	r2,r3,r2
 8004e54:	10801004 	addi	r2,r2,64
 8004e58:	e0fff903 	ldbu	r3,-28(fp)
 8004e5c:	10c00005 	stb	r3,0(r2)

      sp->x++;
 8004e60:	e0bffc17 	ldw	r2,-16(fp)
 8004e64:	10800843 	ldbu	r2,33(r2)
 8004e68:	10800044 	addi	r2,r2,1
 8004e6c:	1007883a 	mov	r3,r2
 8004e70:	e0bffc17 	ldw	r2,-16(fp)
 8004e74:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
 8004e78:	e0bffd17 	ldw	r2,-12(fp)
 8004e7c:	10800044 	addi	r2,r2,1
 8004e80:	e0bffd15 	stw	r2,-12(fp)
 8004e84:	e0fffd17 	ldw	r3,-12(fp)
 8004e88:	e0bff817 	ldw	r2,-32(fp)
 8004e8c:	18bf5f36 	bltu	r3,r2,8004c0c <altera_avalon_lcd_16207_write+0x40>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
 8004e90:	00800404 	movi	r2,16
 8004e94:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 8004e98:	e03ff515 	stw	zero,-44(fp)
 8004e9c:	00003606 	br	8004f78 <altera_avalon_lcd_16207_write+0x3ac>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
 8004ea0:	00801404 	movi	r2,80
 8004ea4:	e0bff715 	stw	r2,-36(fp)
 8004ea8:	00001206 	br	8004ef4 <altera_avalon_lcd_16207_write+0x328>
      if (sp->line[y].data[width-1] != ' ')
 8004eac:	e0bff717 	ldw	r2,-36(fp)
 8004eb0:	10bfffc4 	addi	r2,r2,-1
 8004eb4:	e13ffc17 	ldw	r4,-16(fp)
 8004eb8:	e0fff517 	ldw	r3,-44(fp)
 8004ebc:	18c018e4 	muli	r3,r3,99
 8004ec0:	20c7883a 	add	r3,r4,r3
 8004ec4:	1885883a 	add	r2,r3,r2
 8004ec8:	10801004 	addi	r2,r2,64
 8004ecc:	10800003 	ldbu	r2,0(r2)
 8004ed0:	10803fcc 	andi	r2,r2,255
 8004ed4:	1080201c 	xori	r2,r2,128
 8004ed8:	10bfe004 	addi	r2,r2,-128
 8004edc:	10800820 	cmpeqi	r2,r2,32
 8004ee0:	1000011e 	bne	r2,zero,8004ee8 <altera_avalon_lcd_16207_write+0x31c>
        break;
 8004ee4:	00000506 	br	8004efc <altera_avalon_lcd_16207_write+0x330>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
 8004ee8:	e0bff717 	ldw	r2,-36(fp)
 8004eec:	10bfffc4 	addi	r2,r2,-1
 8004ef0:	e0bff715 	stw	r2,-36(fp)
 8004ef4:	e0bff717 	ldw	r2,-36(fp)
 8004ef8:	00bfec16 	blt	zero,r2,8004eac <altera_avalon_lcd_16207_write+0x2e0>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
 8004efc:	e0bff717 	ldw	r2,-36(fp)
 8004f00:	10800448 	cmpgei	r2,r2,17
 8004f04:	1000031e 	bne	r2,zero,8004f14 <altera_avalon_lcd_16207_write+0x348>
      width = ALT_LCD_WIDTH;
 8004f08:	00800404 	movi	r2,16
 8004f0c:	e0bff715 	stw	r2,-36(fp)
 8004f10:	00000306 	br	8004f20 <altera_avalon_lcd_16207_write+0x354>
    else
      width++;
 8004f14:	e0bff717 	ldw	r2,-36(fp)
 8004f18:	10800044 	addi	r2,r2,1
 8004f1c:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
 8004f20:	e0bff717 	ldw	r2,-36(fp)
 8004f24:	1009883a 	mov	r4,r2
 8004f28:	e0fffc17 	ldw	r3,-16(fp)
 8004f2c:	e0bff517 	ldw	r2,-44(fp)
 8004f30:	108018e4 	muli	r2,r2,99
 8004f34:	10802404 	addi	r2,r2,144
 8004f38:	1885883a 	add	r2,r3,r2
 8004f3c:	11000045 	stb	r4,1(r2)
    if (widthmax < width)
 8004f40:	e0fff617 	ldw	r3,-40(fp)
 8004f44:	e0bff717 	ldw	r2,-36(fp)
 8004f48:	1880020e 	bge	r3,r2,8004f54 <altera_avalon_lcd_16207_write+0x388>
      widthmax = width;
 8004f4c:	e0bff717 	ldw	r2,-36(fp)
 8004f50:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
 8004f54:	e0fffc17 	ldw	r3,-16(fp)
 8004f58:	e0bff517 	ldw	r2,-44(fp)
 8004f5c:	108018e4 	muli	r2,r2,99
 8004f60:	10802404 	addi	r2,r2,144
 8004f64:	1885883a 	add	r2,r3,r2
 8004f68:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 8004f6c:	e0bff517 	ldw	r2,-44(fp)
 8004f70:	10800044 	addi	r2,r2,1
 8004f74:	e0bff515 	stw	r2,-44(fp)
 8004f78:	e0bff517 	ldw	r2,-44(fp)
 8004f7c:	10800090 	cmplti	r2,r2,2
 8004f80:	103fc71e 	bne	r2,zero,8004ea0 <altera_avalon_lcd_16207_write+0x2d4>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
 8004f84:	e0bff617 	ldw	r2,-40(fp)
 8004f88:	10800448 	cmpgei	r2,r2,17
 8004f8c:	1000031e 	bne	r2,zero,8004f9c <altera_avalon_lcd_16207_write+0x3d0>
    sp->scrollmax = 0;
 8004f90:	e0bffc17 	ldw	r2,-16(fp)
 8004f94:	10000985 	stb	zero,38(r2)
 8004f98:	00002e06 	br	8005054 <altera_avalon_lcd_16207_write+0x488>
  else
  {
    widthmax *= 2;
 8004f9c:	e0bff617 	ldw	r2,-40(fp)
 8004fa0:	1085883a 	add	r2,r2,r2
 8004fa4:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
 8004fa8:	e0bff617 	ldw	r2,-40(fp)
 8004fac:	1007883a 	mov	r3,r2
 8004fb0:	e0bffc17 	ldw	r2,-16(fp)
 8004fb4:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 8004fb8:	e03ff515 	stw	zero,-44(fp)
 8004fbc:	00002206 	br	8005048 <altera_avalon_lcd_16207_write+0x47c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
 8004fc0:	e0fffc17 	ldw	r3,-16(fp)
 8004fc4:	e0bff517 	ldw	r2,-44(fp)
 8004fc8:	108018e4 	muli	r2,r2,99
 8004fcc:	10802404 	addi	r2,r2,144
 8004fd0:	1885883a 	add	r2,r3,r2
 8004fd4:	10800043 	ldbu	r2,1(r2)
 8004fd8:	10803fcc 	andi	r2,r2,255
 8004fdc:	1080201c 	xori	r2,r2,128
 8004fe0:	10bfe004 	addi	r2,r2,-128
 8004fe4:	10800450 	cmplti	r2,r2,17
 8004fe8:	1000141e 	bne	r2,zero,800503c <altera_avalon_lcd_16207_write+0x470>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
 8004fec:	e0fffc17 	ldw	r3,-16(fp)
 8004ff0:	e0bff517 	ldw	r2,-44(fp)
 8004ff4:	108018e4 	muli	r2,r2,99
 8004ff8:	10802404 	addi	r2,r2,144
 8004ffc:	1885883a 	add	r2,r3,r2
 8005000:	10800043 	ldbu	r2,1(r2)
 8005004:	10803fcc 	andi	r2,r2,255
 8005008:	1080201c 	xori	r2,r2,128
 800500c:	10bfe004 	addi	r2,r2,-128
 8005010:	1004923a 	slli	r2,r2,8
 8005014:	1009883a 	mov	r4,r2
 8005018:	e17ff617 	ldw	r5,-40(fp)
 800501c:	8002e780 	call	8002e78 <__divsi3>
 8005020:	1009883a 	mov	r4,r2
 8005024:	e0fffc17 	ldw	r3,-16(fp)
 8005028:	e0bff517 	ldw	r2,-44(fp)
 800502c:	108018e4 	muli	r2,r2,99
 8005030:	10802404 	addi	r2,r2,144
 8005034:	1885883a 	add	r2,r3,r2
 8005038:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 800503c:	e0bff517 	ldw	r2,-44(fp)
 8005040:	10800044 	addi	r2,r2,1
 8005044:	e0bff515 	stw	r2,-44(fp)
 8005048:	e0bff517 	ldw	r2,-44(fp)
 800504c:	10800090 	cmplti	r2,r2,2
 8005050:	103fdb1e 	bne	r2,zero,8004fc0 <altera_avalon_lcd_16207_write+0x3f4>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
 8005054:	e0bffc17 	ldw	r2,-16(fp)
 8005058:	10800943 	ldbu	r2,37(r2)
 800505c:	10803fcc 	andi	r2,r2,255
 8005060:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
 8005064:	e13ffc17 	ldw	r4,-16(fp)
 8005068:	800467c0 	call	800467c <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
 800506c:	e0bffc17 	ldw	r2,-16(fp)
 8005070:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
 8005074:	e0bffc17 	ldw	r2,-16(fp)
 8005078:	10800943 	ldbu	r2,37(r2)
 800507c:	10c03fcc 	andi	r3,r2,255
 8005080:	e0bffb17 	ldw	r2,-20(fp)
 8005084:	1880011e 	bne	r3,r2,800508c <altera_avalon_lcd_16207_write+0x4c0>
      break;
 8005088:	00000406 	br	800509c <altera_avalon_lcd_16207_write+0x4d0>

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
 800508c:	e0bffc17 	ldw	r2,-16(fp)
 8005090:	00c00044 	movi	r3,1
 8005094:	10c009c5 	stb	r3,39(r2)
  }
 8005098:	003fee06 	br	8005054 <altera_avalon_lcd_16207_write+0x488>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
 800509c:	e0bffe17 	ldw	r2,-8(fp)
}
 80050a0:	e037883a 	mov	sp,fp
 80050a4:	dfc00117 	ldw	ra,4(sp)
 80050a8:	df000017 	ldw	fp,0(sp)
 80050ac:	dec00204 	addi	sp,sp,8
 80050b0:	f800283a 	ret

080050b4 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
 80050b4:	defffc04 	addi	sp,sp,-16
 80050b8:	dfc00315 	stw	ra,12(sp)
 80050bc:	df000215 	stw	fp,8(sp)
 80050c0:	df000204 	addi	fp,sp,8
 80050c4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
 80050c8:	e0bfff17 	ldw	r2,-4(fp)
 80050cc:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
 80050d0:	e0bffe17 	ldw	r2,-8(fp)
 80050d4:	10800943 	ldbu	r2,37(r2)
 80050d8:	10803fcc 	andi	r2,r2,255
 80050dc:	10c00044 	addi	r3,r2,1
 80050e0:	e0bffe17 	ldw	r2,-8(fp)
 80050e4:	10800983 	ldbu	r2,38(r2)
 80050e8:	10803fcc 	andi	r2,r2,255
 80050ec:	18800316 	blt	r3,r2,80050fc <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
 80050f0:	e0bffe17 	ldw	r2,-8(fp)
 80050f4:	10000945 	stb	zero,37(r2)
 80050f8:	00000606 	br	8005114 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
 80050fc:	e0bffe17 	ldw	r2,-8(fp)
 8005100:	10800943 	ldbu	r2,37(r2)
 8005104:	10800044 	addi	r2,r2,1
 8005108:	1007883a 	mov	r3,r2
 800510c:	e0bffe17 	ldw	r2,-8(fp)
 8005110:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
 8005114:	e0bffe17 	ldw	r2,-8(fp)
 8005118:	10800983 	ldbu	r2,38(r2)
 800511c:	10803fcc 	andi	r2,r2,255
 8005120:	10000826 	beq	r2,zero,8005144 <alt_lcd_16207_timeout+0x90>
 8005124:	e0bffe17 	ldw	r2,-8(fp)
 8005128:	108009c3 	ldbu	r2,39(r2)
 800512c:	10803fcc 	andi	r2,r2,255
 8005130:	1080201c 	xori	r2,r2,128
 8005134:	10bfe004 	addi	r2,r2,-128
 8005138:	1000021e 	bne	r2,zero,8005144 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
 800513c:	e13ffe17 	ldw	r4,-8(fp)
 8005140:	800467c0 	call	800467c <lcd_repaint_screen>

  return sp->period;
 8005144:	e0bffe17 	ldw	r2,-8(fp)
 8005148:	10800717 	ldw	r2,28(r2)
}
 800514c:	e037883a 	mov	sp,fp
 8005150:	dfc00117 	ldw	ra,4(sp)
 8005154:	df000017 	ldw	fp,0(sp)
 8005158:	dec00204 	addi	sp,sp,8
 800515c:	f800283a 	ret

08005160 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
 8005160:	defffc04 	addi	sp,sp,-16
 8005164:	dfc00315 	stw	ra,12(sp)
 8005168:	df000215 	stw	fp,8(sp)
 800516c:	df000204 	addi	fp,sp,8
 8005170:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
 8005174:	e0bfff17 	ldw	r2,-4(fp)
 8005178:	10800017 	ldw	r2,0(r2)
 800517c:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
 8005180:	e0bfff17 	ldw	r2,-4(fp)
 8005184:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
 8005188:	010ea604 	movi	r4,15000
 800518c:	800685c0 	call	800685c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
 8005190:	e0bffe17 	ldw	r2,-8(fp)
 8005194:	00c00c04 	movi	r3,48
 8005198:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
 800519c:	01040104 	movi	r4,4100
 80051a0:	800685c0 	call	800685c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
 80051a4:	e0bffe17 	ldw	r2,-8(fp)
 80051a8:	00c00c04 	movi	r3,48
 80051ac:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
 80051b0:	0100fa04 	movi	r4,1000
 80051b4:	800685c0 	call	800685c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
 80051b8:	e0bffe17 	ldw	r2,-8(fp)
 80051bc:	00c00c04 	movi	r3,48
 80051c0:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
 80051c4:	e13fff17 	ldw	r4,-4(fp)
 80051c8:	01400e04 	movi	r5,56
 80051cc:	80044280 	call	8004428 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
 80051d0:	e13fff17 	ldw	r4,-4(fp)
 80051d4:	01400204 	movi	r5,8
 80051d8:	80044280 	call	8004428 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
 80051dc:	e13fff17 	ldw	r4,-4(fp)
 80051e0:	80045b00 	call	80045b0 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
 80051e4:	e13fff17 	ldw	r4,-4(fp)
 80051e8:	01400184 	movi	r5,6
 80051ec:	80044280 	call	8004428 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
 80051f0:	e13fff17 	ldw	r4,-4(fp)
 80051f4:	01400304 	movi	r5,12
 80051f8:	80044280 	call	8004428 <lcd_write_command>

  sp->esccount = -1;
 80051fc:	e0bfff17 	ldw	r2,-4(fp)
 8005200:	00ffffc4 	movi	r3,-1
 8005204:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
 8005208:	e0bfff17 	ldw	r2,-4(fp)
 800520c:	10800a04 	addi	r2,r2,40
 8005210:	1009883a 	mov	r4,r2
 8005214:	000b883a 	mov	r5,zero
 8005218:	01800204 	movi	r6,8
 800521c:	80019240 	call	8001924 <memset>

  sp->scrollpos = 0;
 8005220:	e0bfff17 	ldw	r2,-4(fp)
 8005224:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
 8005228:	e0bfff17 	ldw	r2,-4(fp)
 800522c:	10000985 	stb	zero,38(r2)
  sp->active = 0;
 8005230:	e0bfff17 	ldw	r2,-4(fp)
 8005234:	100009c5 	stb	zero,39(r2)
 8005238:	00820074 	movhi	r2,2049
 800523c:	10ab5d04 	addi	r2,r2,-21132
 8005240:	10800017 	ldw	r2,0(r2)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
 8005244:	1009883a 	mov	r4,r2
 8005248:	01400284 	movi	r5,10
 800524c:	8002f280 	call	8002f28 <__udivsi3>
 8005250:	1007883a 	mov	r3,r2
 8005254:	e0bfff17 	ldw	r2,-4(fp)
 8005258:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
 800525c:	e0bfff17 	ldw	r2,-4(fp)
 8005260:	10c00104 	addi	r3,r2,4
 8005264:	e0bfff17 	ldw	r2,-4(fp)
 8005268:	10800717 	ldw	r2,28(r2)
 800526c:	1809883a 	mov	r4,r3
 8005270:	100b883a 	mov	r5,r2
 8005274:	01820034 	movhi	r6,2048
 8005278:	31942d04 	addi	r6,r6,20660
 800527c:	e1ffff17 	ldw	r7,-4(fp)
 8005280:	8005ce40 	call	8005ce4 <alt_alarm_start>
}
 8005284:	e037883a 	mov	sp,fp
 8005288:	dfc00117 	ldw	ra,4(sp)
 800528c:	df000017 	ldw	fp,0(sp)
 8005290:	dec00204 	addi	sp,sp,8
 8005294:	f800283a 	ret

08005298 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8005298:	defffa04 	addi	sp,sp,-24
 800529c:	dfc00515 	stw	ra,20(sp)
 80052a0:	df000415 	stw	fp,16(sp)
 80052a4:	df000404 	addi	fp,sp,16
 80052a8:	e13ffd15 	stw	r4,-12(fp)
 80052ac:	e17ffe15 	stw	r5,-8(fp)
 80052b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
 80052b4:	e0bffd17 	ldw	r2,-12(fp)
 80052b8:	10800017 	ldw	r2,0(r2)
 80052bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
 80052c0:	e0bffc17 	ldw	r2,-16(fp)
 80052c4:	10c00a04 	addi	r3,r2,40
 80052c8:	e0bffd17 	ldw	r2,-12(fp)
 80052cc:	10800217 	ldw	r2,8(r2)
 80052d0:	1809883a 	mov	r4,r3
 80052d4:	e17ffe17 	ldw	r5,-8(fp)
 80052d8:	e1bfff17 	ldw	r6,-4(fp)
 80052dc:	100f883a 	mov	r7,r2
 80052e0:	8004bcc0 	call	8004bcc <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
 80052e4:	e037883a 	mov	sp,fp
 80052e8:	dfc00117 	ldw	ra,4(sp)
 80052ec:	df000017 	ldw	fp,0(sp)
 80052f0:	dec00204 	addi	sp,sp,8
 80052f4:	f800283a 	ret

080052f8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 80052f8:	defffa04 	addi	sp,sp,-24
 80052fc:	dfc00515 	stw	ra,20(sp)
 8005300:	df000415 	stw	fp,16(sp)
 8005304:	df000404 	addi	fp,sp,16
 8005308:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 800530c:	0007883a 	mov	r3,zero
 8005310:	e0bfff17 	ldw	r2,-4(fp)
 8005314:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8005318:	e0bfff17 	ldw	r2,-4(fp)
 800531c:	10800104 	addi	r2,r2,4
 8005320:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005324:	0005303a 	rdctl	r2,status
 8005328:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800532c:	e0fffd17 	ldw	r3,-12(fp)
 8005330:	00bfff84 	movi	r2,-2
 8005334:	1884703a 	and	r2,r3,r2
 8005338:	1001703a 	wrctl	status,r2
  
  return context;
 800533c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8005340:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8005344:	80067580 	call	8006758 <alt_tick>
 8005348:	e0bffc17 	ldw	r2,-16(fp)
 800534c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005350:	e0bffe17 	ldw	r2,-8(fp)
 8005354:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8005358:	e037883a 	mov	sp,fp
 800535c:	dfc00117 	ldw	ra,4(sp)
 8005360:	df000017 	ldw	fp,0(sp)
 8005364:	dec00204 	addi	sp,sp,8
 8005368:	f800283a 	ret

0800536c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 800536c:	defff804 	addi	sp,sp,-32
 8005370:	dfc00715 	stw	ra,28(sp)
 8005374:	df000615 	stw	fp,24(sp)
 8005378:	df000604 	addi	fp,sp,24
 800537c:	e13ffc15 	stw	r4,-16(fp)
 8005380:	e17ffd15 	stw	r5,-12(fp)
 8005384:	e1bffe15 	stw	r6,-8(fp)
 8005388:	e1ffff15 	stw	r7,-4(fp)
 800538c:	e0bfff17 	ldw	r2,-4(fp)
 8005390:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8005394:	00820074 	movhi	r2,2049
 8005398:	10ab5d04 	addi	r2,r2,-21132
 800539c:	10800017 	ldw	r2,0(r2)
 80053a0:	1000041e 	bne	r2,zero,80053b4 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 80053a4:	00820074 	movhi	r2,2049
 80053a8:	10ab5d04 	addi	r2,r2,-21132
 80053ac:	e0fffb17 	ldw	r3,-20(fp)
 80053b0:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 80053b4:	e0bffc17 	ldw	r2,-16(fp)
 80053b8:	10800104 	addi	r2,r2,4
 80053bc:	00c001c4 	movi	r3,7
 80053c0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 80053c4:	d8000015 	stw	zero,0(sp)
 80053c8:	e13ffd17 	ldw	r4,-12(fp)
 80053cc:	e17ffe17 	ldw	r5,-8(fp)
 80053d0:	01820034 	movhi	r6,2048
 80053d4:	3194be04 	addi	r6,r6,21240
 80053d8:	e1fffc17 	ldw	r7,-16(fp)
 80053dc:	80060440 	call	8006044 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 80053e0:	e037883a 	mov	sp,fp
 80053e4:	dfc00117 	ldw	ra,4(sp)
 80053e8:	df000017 	ldw	fp,0(sp)
 80053ec:	dec00204 	addi	sp,sp,8
 80053f0:	f800283a 	ret

080053f4 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 80053f4:	defffa04 	addi	sp,sp,-24
 80053f8:	dfc00515 	stw	ra,20(sp)
 80053fc:	df000415 	stw	fp,16(sp)
 8005400:	df000404 	addi	fp,sp,16
 8005404:	e13ffd15 	stw	r4,-12(fp)
 8005408:	e17ffe15 	stw	r5,-8(fp)
 800540c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 8005410:	e0bffd17 	ldw	r2,-12(fp)
 8005414:	10800017 	ldw	r2,0(r2)
 8005418:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 800541c:	e0bffc17 	ldw	r2,-16(fp)
 8005420:	10c00a04 	addi	r3,r2,40
 8005424:	e0bffd17 	ldw	r2,-12(fp)
 8005428:	10800217 	ldw	r2,8(r2)
 800542c:	1809883a 	mov	r4,r3
 8005430:	e17ffe17 	ldw	r5,-8(fp)
 8005434:	e1bfff17 	ldw	r6,-4(fp)
 8005438:	100f883a 	mov	r7,r2
 800543c:	800590c0 	call	800590c <altera_avalon_uart_read>
      fd->fd_flags);
}
 8005440:	e037883a 	mov	sp,fp
 8005444:	dfc00117 	ldw	ra,4(sp)
 8005448:	df000017 	ldw	fp,0(sp)
 800544c:	dec00204 	addi	sp,sp,8
 8005450:	f800283a 	ret

08005454 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8005454:	defffa04 	addi	sp,sp,-24
 8005458:	dfc00515 	stw	ra,20(sp)
 800545c:	df000415 	stw	fp,16(sp)
 8005460:	df000404 	addi	fp,sp,16
 8005464:	e13ffd15 	stw	r4,-12(fp)
 8005468:	e17ffe15 	stw	r5,-8(fp)
 800546c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 8005470:	e0bffd17 	ldw	r2,-12(fp)
 8005474:	10800017 	ldw	r2,0(r2)
 8005478:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 800547c:	e0bffc17 	ldw	r2,-16(fp)
 8005480:	10c00a04 	addi	r3,r2,40
 8005484:	e0bffd17 	ldw	r2,-12(fp)
 8005488:	10800217 	ldw	r2,8(r2)
 800548c:	1809883a 	mov	r4,r3
 8005490:	e17ffe17 	ldw	r5,-8(fp)
 8005494:	e1bfff17 	ldw	r6,-4(fp)
 8005498:	100f883a 	mov	r7,r2
 800549c:	8005b380 	call	8005b38 <altera_avalon_uart_write>
      fd->fd_flags);
}
 80054a0:	e037883a 	mov	sp,fp
 80054a4:	dfc00117 	ldw	ra,4(sp)
 80054a8:	df000017 	ldw	fp,0(sp)
 80054ac:	dec00204 	addi	sp,sp,8
 80054b0:	f800283a 	ret

080054b4 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 80054b4:	defffc04 	addi	sp,sp,-16
 80054b8:	dfc00315 	stw	ra,12(sp)
 80054bc:	df000215 	stw	fp,8(sp)
 80054c0:	df000204 	addi	fp,sp,8
 80054c4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 80054c8:	e0bfff17 	ldw	r2,-4(fp)
 80054cc:	10800017 	ldw	r2,0(r2)
 80054d0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 80054d4:	e0bffe17 	ldw	r2,-8(fp)
 80054d8:	10c00a04 	addi	r3,r2,40
 80054dc:	e0bfff17 	ldw	r2,-4(fp)
 80054e0:	10800217 	ldw	r2,8(r2)
 80054e4:	1809883a 	mov	r4,r3
 80054e8:	100b883a 	mov	r5,r2
 80054ec:	80058680 	call	8005868 <altera_avalon_uart_close>
}
 80054f0:	e037883a 	mov	sp,fp
 80054f4:	dfc00117 	ldw	ra,4(sp)
 80054f8:	df000017 	ldw	fp,0(sp)
 80054fc:	dec00204 	addi	sp,sp,8
 8005500:	f800283a 	ret

08005504 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 8005504:	defff804 	addi	sp,sp,-32
 8005508:	dfc00715 	stw	ra,28(sp)
 800550c:	df000615 	stw	fp,24(sp)
 8005510:	df000604 	addi	fp,sp,24
 8005514:	e13ffd15 	stw	r4,-12(fp)
 8005518:	e17ffe15 	stw	r5,-8(fp)
 800551c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 8005520:	e0bffd17 	ldw	r2,-12(fp)
 8005524:	10800017 	ldw	r2,0(r2)
 8005528:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 800552c:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 8005530:	1000041e 	bne	r2,zero,8005544 <altera_avalon_uart_init+0x40>
 8005534:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 8005538:	1000021e 	bne	r2,zero,8005544 <altera_avalon_uart_init+0x40>
 800553c:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 8005540:	10000226 	beq	r2,zero,800554c <altera_avalon_uart_init+0x48>
 8005544:	00800044 	movi	r2,1
 8005548:	00000106 	br	8005550 <altera_avalon_uart_init+0x4c>
 800554c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 8005550:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 8005554:	e0bffc17 	ldw	r2,-16(fp)
 8005558:	10000f1e 	bne	r2,zero,8005598 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 800555c:	e0bffd17 	ldw	r2,-12(fp)
 8005560:	00c32004 	movi	r3,3200
 8005564:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 8005568:	e0bffb17 	ldw	r2,-20(fp)
 800556c:	10800304 	addi	r2,r2,12
 8005570:	e0fffd17 	ldw	r3,-12(fp)
 8005574:	18c00117 	ldw	r3,4(r3)
 8005578:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 800557c:	d8000015 	stw	zero,0(sp)
 8005580:	e13ffe17 	ldw	r4,-8(fp)
 8005584:	e17fff17 	ldw	r5,-4(fp)
 8005588:	01820034 	movhi	r6,2048
 800558c:	31956b04 	addi	r6,r6,21932
 8005590:	e1fffd17 	ldw	r7,-12(fp)
 8005594:	80060440 	call	8006044 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 8005598:	e037883a 	mov	sp,fp
 800559c:	dfc00117 	ldw	ra,4(sp)
 80055a0:	df000017 	ldw	fp,0(sp)
 80055a4:	dec00204 	addi	sp,sp,8
 80055a8:	f800283a 	ret

080055ac <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 80055ac:	defffa04 	addi	sp,sp,-24
 80055b0:	dfc00515 	stw	ra,20(sp)
 80055b4:	df000415 	stw	fp,16(sp)
 80055b8:	df000404 	addi	fp,sp,16
 80055bc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 80055c0:	e0bfff17 	ldw	r2,-4(fp)
 80055c4:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 80055c8:	e0bffc17 	ldw	r2,-16(fp)
 80055cc:	10800017 	ldw	r2,0(r2)
 80055d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 80055d4:	e0bffd17 	ldw	r2,-12(fp)
 80055d8:	10800204 	addi	r2,r2,8
 80055dc:	10800037 	ldwio	r2,0(r2)
 80055e0:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 80055e4:	e0bffd17 	ldw	r2,-12(fp)
 80055e8:	10800204 	addi	r2,r2,8
 80055ec:	0007883a 	mov	r3,zero
 80055f0:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 80055f4:	e0bffd17 	ldw	r2,-12(fp)
 80055f8:	10800204 	addi	r2,r2,8
 80055fc:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 8005600:	e0bffe17 	ldw	r2,-8(fp)
 8005604:	1080200c 	andi	r2,r2,128
 8005608:	10000326 	beq	r2,zero,8005618 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 800560c:	e13ffc17 	ldw	r4,-16(fp)
 8005610:	e17ffe17 	ldw	r5,-8(fp)
 8005614:	80056440 	call	8005644 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 8005618:	e0bffe17 	ldw	r2,-8(fp)
 800561c:	1081100c 	andi	r2,r2,1088
 8005620:	10000326 	beq	r2,zero,8005630 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 8005624:	e13ffc17 	ldw	r4,-16(fp)
 8005628:	e17ffe17 	ldw	r5,-8(fp)
 800562c:	80057240 	call	8005724 <altera_avalon_uart_txirq>
  }
  

}
 8005630:	e037883a 	mov	sp,fp
 8005634:	dfc00117 	ldw	ra,4(sp)
 8005638:	df000017 	ldw	fp,0(sp)
 800563c:	dec00204 	addi	sp,sp,8
 8005640:	f800283a 	ret

08005644 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 8005644:	defffc04 	addi	sp,sp,-16
 8005648:	df000315 	stw	fp,12(sp)
 800564c:	df000304 	addi	fp,sp,12
 8005650:	e13ffe15 	stw	r4,-8(fp)
 8005654:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 8005658:	e0bfff17 	ldw	r2,-4(fp)
 800565c:	108000cc 	andi	r2,r2,3
 8005660:	10000126 	beq	r2,zero,8005668 <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 8005664:	00002b06 	br	8005714 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 8005668:	e0bffe17 	ldw	r2,-8(fp)
 800566c:	10800317 	ldw	r2,12(r2)
 8005670:	e0bffe17 	ldw	r2,-8(fp)
 8005674:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 8005678:	e0bffe17 	ldw	r2,-8(fp)
 800567c:	10800317 	ldw	r2,12(r2)
 8005680:	10800044 	addi	r2,r2,1
 8005684:	10800fcc 	andi	r2,r2,63
 8005688:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 800568c:	e0bffe17 	ldw	r2,-8(fp)
 8005690:	10800317 	ldw	r2,12(r2)
 8005694:	e0fffe17 	ldw	r3,-8(fp)
 8005698:	18c00017 	ldw	r3,0(r3)
 800569c:	18c00037 	ldwio	r3,0(r3)
 80056a0:	1809883a 	mov	r4,r3
 80056a4:	e0fffe17 	ldw	r3,-8(fp)
 80056a8:	1885883a 	add	r2,r3,r2
 80056ac:	10800704 	addi	r2,r2,28
 80056b0:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
 80056b4:	e0bffe17 	ldw	r2,-8(fp)
 80056b8:	e0fffd17 	ldw	r3,-12(fp)
 80056bc:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 80056c0:	e0bffe17 	ldw	r2,-8(fp)
 80056c4:	10800317 	ldw	r2,12(r2)
 80056c8:	10800044 	addi	r2,r2,1
 80056cc:	10800fcc 	andi	r2,r2,63
 80056d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 80056d4:	e0bffe17 	ldw	r2,-8(fp)
 80056d8:	10c00217 	ldw	r3,8(r2)
 80056dc:	e0bffd17 	ldw	r2,-12(fp)
 80056e0:	18800c1e 	bne	r3,r2,8005714 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 80056e4:	e0bffe17 	ldw	r2,-8(fp)
 80056e8:	10c00117 	ldw	r3,4(r2)
 80056ec:	00bfdfc4 	movi	r2,-129
 80056f0:	1886703a 	and	r3,r3,r2
 80056f4:	e0bffe17 	ldw	r2,-8(fp)
 80056f8:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 80056fc:	e0bffe17 	ldw	r2,-8(fp)
 8005700:	10800017 	ldw	r2,0(r2)
 8005704:	10800304 	addi	r2,r2,12
 8005708:	e0fffe17 	ldw	r3,-8(fp)
 800570c:	18c00117 	ldw	r3,4(r3)
 8005710:	10c00035 	stwio	r3,0(r2)
  }   
}
 8005714:	e037883a 	mov	sp,fp
 8005718:	df000017 	ldw	fp,0(sp)
 800571c:	dec00104 	addi	sp,sp,4
 8005720:	f800283a 	ret

08005724 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 8005724:	defffb04 	addi	sp,sp,-20
 8005728:	df000415 	stw	fp,16(sp)
 800572c:	df000404 	addi	fp,sp,16
 8005730:	e13ffc15 	stw	r4,-16(fp)
 8005734:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 8005738:	e0bffc17 	ldw	r2,-16(fp)
 800573c:	10c00417 	ldw	r3,16(r2)
 8005740:	e0bffc17 	ldw	r2,-16(fp)
 8005744:	10800517 	ldw	r2,20(r2)
 8005748:	18803226 	beq	r3,r2,8005814 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 800574c:	e0bffc17 	ldw	r2,-16(fp)
 8005750:	10800617 	ldw	r2,24(r2)
 8005754:	1080008c 	andi	r2,r2,2
 8005758:	10000326 	beq	r2,zero,8005768 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 800575c:	e0bffd17 	ldw	r2,-12(fp)
 8005760:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 8005764:	10001d26 	beq	r2,zero,80057dc <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 8005768:	e0bffc17 	ldw	r2,-16(fp)
 800576c:	10800417 	ldw	r2,16(r2)
 8005770:	e0bffc17 	ldw	r2,-16(fp)
 8005774:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 8005778:	e0bffc17 	ldw	r2,-16(fp)
 800577c:	10800017 	ldw	r2,0(r2)
 8005780:	10800104 	addi	r2,r2,4
 8005784:	e0fffc17 	ldw	r3,-16(fp)
 8005788:	18c00417 	ldw	r3,16(r3)
 800578c:	e13ffc17 	ldw	r4,-16(fp)
 8005790:	20c7883a 	add	r3,r4,r3
 8005794:	18c01704 	addi	r3,r3,92
 8005798:	18c00003 	ldbu	r3,0(r3)
 800579c:	18c03fcc 	andi	r3,r3,255
 80057a0:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 80057a4:	e0bffc17 	ldw	r2,-16(fp)
 80057a8:	10800417 	ldw	r2,16(r2)
 80057ac:	10800044 	addi	r2,r2,1
 80057b0:	e0fffc17 	ldw	r3,-16(fp)
 80057b4:	18800415 	stw	r2,16(r3)
 80057b8:	10c00fcc 	andi	r3,r2,63
 80057bc:	e0bffc17 	ldw	r2,-16(fp)
 80057c0:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 80057c4:	e0bffc17 	ldw	r2,-16(fp)
 80057c8:	10800117 	ldw	r2,4(r2)
 80057cc:	10c01014 	ori	r3,r2,64
 80057d0:	e0bffc17 	ldw	r2,-16(fp)
 80057d4:	10c00115 	stw	r3,4(r2)
 80057d8:	00000e06 	br	8005814 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 80057dc:	e0bffc17 	ldw	r2,-16(fp)
 80057e0:	10800017 	ldw	r2,0(r2)
 80057e4:	10800204 	addi	r2,r2,8
 80057e8:	10800037 	ldwio	r2,0(r2)
 80057ec:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 80057f0:	e0bffd17 	ldw	r2,-12(fp)
 80057f4:	1082000c 	andi	r2,r2,2048
 80057f8:	1000061e 	bne	r2,zero,8005814 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 80057fc:	e0bffc17 	ldw	r2,-16(fp)
 8005800:	10c00117 	ldw	r3,4(r2)
 8005804:	00bfefc4 	movi	r2,-65
 8005808:	1886703a 	and	r3,r3,r2
 800580c:	e0bffc17 	ldw	r2,-16(fp)
 8005810:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 8005814:	e0bffc17 	ldw	r2,-16(fp)
 8005818:	10c00417 	ldw	r3,16(r2)
 800581c:	e0bffc17 	ldw	r2,-16(fp)
 8005820:	10800517 	ldw	r2,20(r2)
 8005824:	1880061e 	bne	r3,r2,8005840 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 8005828:	e0bffc17 	ldw	r2,-16(fp)
 800582c:	10c00117 	ldw	r3,4(r2)
 8005830:	00beefc4 	movi	r2,-1089
 8005834:	1886703a 	and	r3,r3,r2
 8005838:	e0bffc17 	ldw	r2,-16(fp)
 800583c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 8005840:	e0bffc17 	ldw	r2,-16(fp)
 8005844:	10800017 	ldw	r2,0(r2)
 8005848:	10800304 	addi	r2,r2,12
 800584c:	e0fffc17 	ldw	r3,-16(fp)
 8005850:	18c00117 	ldw	r3,4(r3)
 8005854:	10c00035 	stwio	r3,0(r2)
}
 8005858:	e037883a 	mov	sp,fp
 800585c:	df000017 	ldw	fp,0(sp)
 8005860:	dec00104 	addi	sp,sp,4
 8005864:	f800283a 	ret

08005868 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 8005868:	defffd04 	addi	sp,sp,-12
 800586c:	df000215 	stw	fp,8(sp)
 8005870:	df000204 	addi	fp,sp,8
 8005874:	e13ffe15 	stw	r4,-8(fp)
 8005878:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 800587c:	00000506 	br	8005894 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8005880:	e0bfff17 	ldw	r2,-4(fp)
 8005884:	1090000c 	andi	r2,r2,16384
 8005888:	10000226 	beq	r2,zero,8005894 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800588c:	00bffd44 	movi	r2,-11
 8005890:	00000606 	br	80058ac <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 8005894:	e0bffe17 	ldw	r2,-8(fp)
 8005898:	10c00417 	ldw	r3,16(r2)
 800589c:	e0bffe17 	ldw	r2,-8(fp)
 80058a0:	10800517 	ldw	r2,20(r2)
 80058a4:	18bff61e 	bne	r3,r2,8005880 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 80058a8:	0005883a 	mov	r2,zero
}
 80058ac:	e037883a 	mov	sp,fp
 80058b0:	df000017 	ldw	fp,0(sp)
 80058b4:	dec00104 	addi	sp,sp,4
 80058b8:	f800283a 	ret

080058bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80058bc:	defffe04 	addi	sp,sp,-8
 80058c0:	dfc00115 	stw	ra,4(sp)
 80058c4:	df000015 	stw	fp,0(sp)
 80058c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80058cc:	00820074 	movhi	r2,2049
 80058d0:	10a43404 	addi	r2,r2,-28464
 80058d4:	10800017 	ldw	r2,0(r2)
 80058d8:	10000526 	beq	r2,zero,80058f0 <alt_get_errno+0x34>
 80058dc:	00820074 	movhi	r2,2049
 80058e0:	10a43404 	addi	r2,r2,-28464
 80058e4:	10800017 	ldw	r2,0(r2)
 80058e8:	103ee83a 	callr	r2
 80058ec:	00000206 	br	80058f8 <alt_get_errno+0x3c>
 80058f0:	00820074 	movhi	r2,2049
 80058f4:	10ab5804 	addi	r2,r2,-21152
}
 80058f8:	e037883a 	mov	sp,fp
 80058fc:	dfc00117 	ldw	ra,4(sp)
 8005900:	df000017 	ldw	fp,0(sp)
 8005904:	dec00204 	addi	sp,sp,8
 8005908:	f800283a 	ret

0800590c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 800590c:	defff204 	addi	sp,sp,-56
 8005910:	dfc00d15 	stw	ra,52(sp)
 8005914:	df000c15 	stw	fp,48(sp)
 8005918:	df000c04 	addi	fp,sp,48
 800591c:	e13ffc15 	stw	r4,-16(fp)
 8005920:	e17ffd15 	stw	r5,-12(fp)
 8005924:	e1bffe15 	stw	r6,-8(fp)
 8005928:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
 800592c:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
 8005930:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 8005934:	e0bfff17 	ldw	r2,-4(fp)
 8005938:	1090000c 	andi	r2,r2,16384
 800593c:	1005003a 	cmpeq	r2,r2,zero
 8005940:	10803fcc 	andi	r2,r2,255
 8005944:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 8005948:	00001306 	br	8005998 <altera_avalon_uart_read+0x8c>
    {
      count++;
 800594c:	e0bff517 	ldw	r2,-44(fp)
 8005950:	10800044 	addi	r2,r2,1
 8005954:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 8005958:	e0bffd17 	ldw	r2,-12(fp)
 800595c:	10c00044 	addi	r3,r2,1
 8005960:	e0fffd15 	stw	r3,-12(fp)
 8005964:	e0fffc17 	ldw	r3,-16(fp)
 8005968:	18c00217 	ldw	r3,8(r3)
 800596c:	e13ffc17 	ldw	r4,-16(fp)
 8005970:	20c7883a 	add	r3,r4,r3
 8005974:	18c00704 	addi	r3,r3,28
 8005978:	18c00003 	ldbu	r3,0(r3)
 800597c:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
 8005980:	e0bffc17 	ldw	r2,-16(fp)
 8005984:	10800217 	ldw	r2,8(r2)
 8005988:	10800044 	addi	r2,r2,1
 800598c:	10c00fcc 	andi	r3,r2,63
 8005990:	e0bffc17 	ldw	r2,-16(fp)
 8005994:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 8005998:	e0fff517 	ldw	r3,-44(fp)
 800599c:	e0bffe17 	ldw	r2,-8(fp)
 80059a0:	1880050e 	bge	r3,r2,80059b8 <altera_avalon_uart_read+0xac>
 80059a4:	e0bffc17 	ldw	r2,-16(fp)
 80059a8:	10c00217 	ldw	r3,8(r2)
 80059ac:	e0bffc17 	ldw	r2,-16(fp)
 80059b0:	10800317 	ldw	r2,12(r2)
 80059b4:	18bfe51e 	bne	r3,r2,800594c <altera_avalon_uart_read+0x40>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 80059b8:	e0bff517 	ldw	r2,-44(fp)
 80059bc:	1000251e 	bne	r2,zero,8005a54 <altera_avalon_uart_read+0x148>
 80059c0:	e0bffc17 	ldw	r2,-16(fp)
 80059c4:	10c00217 	ldw	r3,8(r2)
 80059c8:	e0bffc17 	ldw	r2,-16(fp)
 80059cc:	10800317 	ldw	r2,12(r2)
 80059d0:	1880201e 	bne	r3,r2,8005a54 <altera_avalon_uart_read+0x148>
    {
      if (!block)
 80059d4:	e0bff617 	ldw	r2,-40(fp)
 80059d8:	1000071e 	bne	r2,zero,80059f8 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 80059dc:	80058bc0 	call	80058bc <alt_get_errno>
 80059e0:	1007883a 	mov	r3,r2
 80059e4:	008002c4 	movi	r2,11
 80059e8:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
 80059ec:	00800044 	movi	r2,1
 80059f0:	e0bff405 	stb	r2,-48(fp)
        break;
 80059f4:	00001b06 	br	8005a64 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80059f8:	0005303a 	rdctl	r2,status
 80059fc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005a00:	e0fff817 	ldw	r3,-32(fp)
 8005a04:	00bfff84 	movi	r2,-2
 8005a08:	1884703a 	and	r2,r3,r2
 8005a0c:	1001703a 	wrctl	status,r2
  
  return context;
 8005a10:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 8005a14:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 8005a18:	e0bffc17 	ldw	r2,-16(fp)
 8005a1c:	10800117 	ldw	r2,4(r2)
 8005a20:	10c02014 	ori	r3,r2,128
 8005a24:	e0bffc17 	ldw	r2,-16(fp)
 8005a28:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 8005a2c:	e0bffc17 	ldw	r2,-16(fp)
 8005a30:	10800017 	ldw	r2,0(r2)
 8005a34:	10800304 	addi	r2,r2,12
 8005a38:	e0fffc17 	ldw	r3,-16(fp)
 8005a3c:	18c00117 	ldw	r3,4(r3)
 8005a40:	10c00035 	stwio	r3,0(r2)
 8005a44:	e0bff717 	ldw	r2,-36(fp)
 8005a48:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005a4c:	e0bff917 	ldw	r2,-28(fp)
 8005a50:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 8005a54:	e0bff517 	ldw	r2,-44(fp)
 8005a58:	1000021e 	bne	r2,zero,8005a64 <altera_avalon_uart_read+0x158>
 8005a5c:	e0bffe17 	ldw	r2,-8(fp)
 8005a60:	103fb91e 	bne	r2,zero,8005948 <altera_avalon_uart_read+0x3c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005a64:	0005303a 	rdctl	r2,status
 8005a68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005a6c:	e0fffa17 	ldw	r3,-24(fp)
 8005a70:	00bfff84 	movi	r2,-2
 8005a74:	1884703a 	and	r2,r3,r2
 8005a78:	1001703a 	wrctl	status,r2
  
  return context;
 8005a7c:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 8005a80:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 8005a84:	e0bffc17 	ldw	r2,-16(fp)
 8005a88:	10800117 	ldw	r2,4(r2)
 8005a8c:	10c02014 	ori	r3,r2,128
 8005a90:	e0bffc17 	ldw	r2,-16(fp)
 8005a94:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 8005a98:	e0bffc17 	ldw	r2,-16(fp)
 8005a9c:	10800017 	ldw	r2,0(r2)
 8005aa0:	10800304 	addi	r2,r2,12
 8005aa4:	e0fffc17 	ldw	r3,-16(fp)
 8005aa8:	18c00117 	ldw	r3,4(r3)
 8005aac:	10c00035 	stwio	r3,0(r2)
 8005ab0:	e0bff717 	ldw	r2,-36(fp)
 8005ab4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005ab8:	e0bffb17 	ldw	r2,-20(fp)
 8005abc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 8005ac0:	e0bff403 	ldbu	r2,-48(fp)
 8005ac4:	10000226 	beq	r2,zero,8005ad0 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
 8005ac8:	00bffd44 	movi	r2,-11
 8005acc:	00000106 	br	8005ad4 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
 8005ad0:	e0bff517 	ldw	r2,-44(fp)
  }
}
 8005ad4:	e037883a 	mov	sp,fp
 8005ad8:	dfc00117 	ldw	ra,4(sp)
 8005adc:	df000017 	ldw	fp,0(sp)
 8005ae0:	dec00204 	addi	sp,sp,8
 8005ae4:	f800283a 	ret

08005ae8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8005ae8:	defffe04 	addi	sp,sp,-8
 8005aec:	dfc00115 	stw	ra,4(sp)
 8005af0:	df000015 	stw	fp,0(sp)
 8005af4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8005af8:	00820074 	movhi	r2,2049
 8005afc:	10a43404 	addi	r2,r2,-28464
 8005b00:	10800017 	ldw	r2,0(r2)
 8005b04:	10000526 	beq	r2,zero,8005b1c <alt_get_errno+0x34>
 8005b08:	00820074 	movhi	r2,2049
 8005b0c:	10a43404 	addi	r2,r2,-28464
 8005b10:	10800017 	ldw	r2,0(r2)
 8005b14:	103ee83a 	callr	r2
 8005b18:	00000206 	br	8005b24 <alt_get_errno+0x3c>
 8005b1c:	00820074 	movhi	r2,2049
 8005b20:	10ab5804 	addi	r2,r2,-21152
}
 8005b24:	e037883a 	mov	sp,fp
 8005b28:	dfc00117 	ldw	ra,4(sp)
 8005b2c:	df000017 	ldw	fp,0(sp)
 8005b30:	dec00204 	addi	sp,sp,8
 8005b34:	f800283a 	ret

08005b38 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 8005b38:	defff204 	addi	sp,sp,-56
 8005b3c:	dfc00d15 	stw	ra,52(sp)
 8005b40:	df000c15 	stw	fp,48(sp)
 8005b44:	df000c04 	addi	fp,sp,48
 8005b48:	e13ffc15 	stw	r4,-16(fp)
 8005b4c:	e17ffd15 	stw	r5,-12(fp)
 8005b50:	e1bffe15 	stw	r6,-8(fp)
 8005b54:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 8005b58:	e0bffe17 	ldw	r2,-8(fp)
 8005b5c:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 8005b60:	e0bfff17 	ldw	r2,-4(fp)
 8005b64:	1090000c 	andi	r2,r2,16384
 8005b68:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 8005b6c:	00003c06 	br	8005c60 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 8005b70:	e0bffc17 	ldw	r2,-16(fp)
 8005b74:	10800517 	ldw	r2,20(r2)
 8005b78:	10800044 	addi	r2,r2,1
 8005b7c:	10800fcc 	andi	r2,r2,63
 8005b80:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 8005b84:	e0bffc17 	ldw	r2,-16(fp)
 8005b88:	10c00417 	ldw	r3,16(r2)
 8005b8c:	e0bff617 	ldw	r2,-40(fp)
 8005b90:	1880221e 	bne	r3,r2,8005c1c <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
 8005b94:	e0bff517 	ldw	r2,-44(fp)
 8005b98:	10000526 	beq	r2,zero,8005bb0 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 8005b9c:	8005ae80 	call	8005ae8 <alt_get_errno>
 8005ba0:	1007883a 	mov	r3,r2
 8005ba4:	008002c4 	movi	r2,11
 8005ba8:	18800015 	stw	r2,0(r3)
        break;
 8005bac:	00002e06 	br	8005c68 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005bb0:	0005303a 	rdctl	r2,status
 8005bb4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005bb8:	e0fff817 	ldw	r3,-32(fp)
 8005bbc:	00bfff84 	movi	r2,-2
 8005bc0:	1884703a 	and	r2,r3,r2
 8005bc4:	1001703a 	wrctl	status,r2
  
  return context;
 8005bc8:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 8005bcc:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 8005bd0:	e0bffc17 	ldw	r2,-16(fp)
 8005bd4:	10800117 	ldw	r2,4(r2)
 8005bd8:	10c11014 	ori	r3,r2,1088
 8005bdc:	e0bffc17 	ldw	r2,-16(fp)
 8005be0:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 8005be4:	e0bffc17 	ldw	r2,-16(fp)
 8005be8:	10800017 	ldw	r2,0(r2)
 8005bec:	10800304 	addi	r2,r2,12
 8005bf0:	e0fffc17 	ldw	r3,-16(fp)
 8005bf4:	18c00117 	ldw	r3,4(r3)
 8005bf8:	10c00035 	stwio	r3,0(r2)
 8005bfc:	e0bff717 	ldw	r2,-36(fp)
 8005c00:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005c04:	e0bff917 	ldw	r2,-28(fp)
 8005c08:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 8005c0c:	e0bffc17 	ldw	r2,-16(fp)
 8005c10:	10c00417 	ldw	r3,16(r2)
 8005c14:	e0bff617 	ldw	r2,-40(fp)
 8005c18:	18bffc26 	beq	r3,r2,8005c0c <altera_avalon_uart_write+0xd4>
      }
    }

    count--;
 8005c1c:	e0bff417 	ldw	r2,-48(fp)
 8005c20:	10bfffc4 	addi	r2,r2,-1
 8005c24:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 8005c28:	e0bffc17 	ldw	r2,-16(fp)
 8005c2c:	10c00517 	ldw	r3,20(r2)
 8005c30:	e0bffd17 	ldw	r2,-12(fp)
 8005c34:	11000044 	addi	r4,r2,1
 8005c38:	e13ffd15 	stw	r4,-12(fp)
 8005c3c:	10800003 	ldbu	r2,0(r2)
 8005c40:	1009883a 	mov	r4,r2
 8005c44:	e0bffc17 	ldw	r2,-16(fp)
 8005c48:	10c5883a 	add	r2,r2,r3
 8005c4c:	10801704 	addi	r2,r2,92
 8005c50:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
 8005c54:	e0bffc17 	ldw	r2,-16(fp)
 8005c58:	e0fff617 	ldw	r3,-40(fp)
 8005c5c:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 8005c60:	e0bff417 	ldw	r2,-48(fp)
 8005c64:	103fc21e 	bne	r2,zero,8005b70 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005c68:	0005303a 	rdctl	r2,status
 8005c6c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005c70:	e0fffa17 	ldw	r3,-24(fp)
 8005c74:	00bfff84 	movi	r2,-2
 8005c78:	1884703a 	and	r2,r3,r2
 8005c7c:	1001703a 	wrctl	status,r2
  
  return context;
 8005c80:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 8005c84:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 8005c88:	e0bffc17 	ldw	r2,-16(fp)
 8005c8c:	10800117 	ldw	r2,4(r2)
 8005c90:	10c11014 	ori	r3,r2,1088
 8005c94:	e0bffc17 	ldw	r2,-16(fp)
 8005c98:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 8005c9c:	e0bffc17 	ldw	r2,-16(fp)
 8005ca0:	10800017 	ldw	r2,0(r2)
 8005ca4:	10800304 	addi	r2,r2,12
 8005ca8:	e0fffc17 	ldw	r3,-16(fp)
 8005cac:	18c00117 	ldw	r3,4(r3)
 8005cb0:	10c00035 	stwio	r3,0(r2)
 8005cb4:	e0bff717 	ldw	r2,-36(fp)
 8005cb8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005cbc:	e0bffb17 	ldw	r2,-20(fp)
 8005cc0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 8005cc4:	e0fffe17 	ldw	r3,-8(fp)
 8005cc8:	e0bff417 	ldw	r2,-48(fp)
 8005ccc:	1885c83a 	sub	r2,r3,r2
}
 8005cd0:	e037883a 	mov	sp,fp
 8005cd4:	dfc00117 	ldw	ra,4(sp)
 8005cd8:	df000017 	ldw	fp,0(sp)
 8005cdc:	dec00204 	addi	sp,sp,8
 8005ce0:	f800283a 	ret

08005ce4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8005ce4:	defff504 	addi	sp,sp,-44
 8005ce8:	df000a15 	stw	fp,40(sp)
 8005cec:	df000a04 	addi	fp,sp,40
 8005cf0:	e13ffc15 	stw	r4,-16(fp)
 8005cf4:	e17ffd15 	stw	r5,-12(fp)
 8005cf8:	e1bffe15 	stw	r6,-8(fp)
 8005cfc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8005d00:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8005d04:	00820074 	movhi	r2,2049
 8005d08:	10ab5d04 	addi	r2,r2,-21132
 8005d0c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 8005d10:	10003f26 	beq	r2,zero,8005e10 <alt_alarm_start+0x12c>
  {
    if (alarm)
 8005d14:	e0bffc17 	ldw	r2,-16(fp)
 8005d18:	10003b26 	beq	r2,zero,8005e08 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 8005d1c:	e0bffc17 	ldw	r2,-16(fp)
 8005d20:	e0fffe17 	ldw	r3,-8(fp)
 8005d24:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8005d28:	e0bffc17 	ldw	r2,-16(fp)
 8005d2c:	e0ffff17 	ldw	r3,-4(fp)
 8005d30:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005d34:	0005303a 	rdctl	r2,status
 8005d38:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005d3c:	e0fff817 	ldw	r3,-32(fp)
 8005d40:	00bfff84 	movi	r2,-2
 8005d44:	1884703a 	and	r2,r3,r2
 8005d48:	1001703a 	wrctl	status,r2
  
  return context;
 8005d4c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 8005d50:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8005d54:	00820074 	movhi	r2,2049
 8005d58:	10ab5e04 	addi	r2,r2,-21128
 8005d5c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 8005d60:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8005d64:	e0fffd17 	ldw	r3,-12(fp)
 8005d68:	e0bff617 	ldw	r2,-40(fp)
 8005d6c:	1885883a 	add	r2,r3,r2
 8005d70:	10c00044 	addi	r3,r2,1
 8005d74:	e0bffc17 	ldw	r2,-16(fp)
 8005d78:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8005d7c:	e0bffc17 	ldw	r2,-16(fp)
 8005d80:	10c00217 	ldw	r3,8(r2)
 8005d84:	e0bff617 	ldw	r2,-40(fp)
 8005d88:	1880042e 	bgeu	r3,r2,8005d9c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 8005d8c:	e0bffc17 	ldw	r2,-16(fp)
 8005d90:	00c00044 	movi	r3,1
 8005d94:	10c00405 	stb	r3,16(r2)
 8005d98:	00000206 	br	8005da4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 8005d9c:	e0bffc17 	ldw	r2,-16(fp)
 8005da0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8005da4:	e0fffc17 	ldw	r3,-16(fp)
 8005da8:	00820074 	movhi	r2,2049
 8005dac:	10a43804 	addi	r2,r2,-28448
 8005db0:	e0bff915 	stw	r2,-28(fp)
 8005db4:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8005db8:	e0bffa17 	ldw	r2,-24(fp)
 8005dbc:	e0fff917 	ldw	r3,-28(fp)
 8005dc0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8005dc4:	e0bff917 	ldw	r2,-28(fp)
 8005dc8:	10c00017 	ldw	r3,0(r2)
 8005dcc:	e0bffa17 	ldw	r2,-24(fp)
 8005dd0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8005dd4:	e0bff917 	ldw	r2,-28(fp)
 8005dd8:	10800017 	ldw	r2,0(r2)
 8005ddc:	e0fffa17 	ldw	r3,-24(fp)
 8005de0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8005de4:	e0bff917 	ldw	r2,-28(fp)
 8005de8:	e0fffa17 	ldw	r3,-24(fp)
 8005dec:	10c00015 	stw	r3,0(r2)
 8005df0:	e0bff717 	ldw	r2,-36(fp)
 8005df4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005df8:	e0bffb17 	ldw	r2,-20(fp)
 8005dfc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8005e00:	0005883a 	mov	r2,zero
 8005e04:	00000306 	br	8005e14 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 8005e08:	00bffa84 	movi	r2,-22
 8005e0c:	00000106 	br	8005e14 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 8005e10:	00bfde84 	movi	r2,-134
  }
}
 8005e14:	e037883a 	mov	sp,fp
 8005e18:	df000017 	ldw	fp,0(sp)
 8005e1c:	dec00104 	addi	sp,sp,4
 8005e20:	f800283a 	ret

08005e24 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8005e24:	defffe04 	addi	sp,sp,-8
 8005e28:	df000115 	stw	fp,4(sp)
 8005e2c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8005e30:	e03fff15 	stw	zero,-4(fp)
 8005e34:	00000506 	br	8005e4c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 8005e38:	e0bfff17 	ldw	r2,-4(fp)
 8005e3c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8005e40:	e0bfff17 	ldw	r2,-4(fp)
 8005e44:	10800804 	addi	r2,r2,32
 8005e48:	e0bfff15 	stw	r2,-4(fp)
 8005e4c:	e0bfff17 	ldw	r2,-4(fp)
 8005e50:	10820030 	cmpltui	r2,r2,2048
 8005e54:	103ff81e 	bne	r2,zero,8005e38 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8005e58:	e037883a 	mov	sp,fp
 8005e5c:	df000017 	ldw	fp,0(sp)
 8005e60:	dec00104 	addi	sp,sp,4
 8005e64:	f800283a 	ret

08005e68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8005e68:	defffe04 	addi	sp,sp,-8
 8005e6c:	dfc00115 	stw	ra,4(sp)
 8005e70:	df000015 	stw	fp,0(sp)
 8005e74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8005e78:	00820074 	movhi	r2,2049
 8005e7c:	10a43404 	addi	r2,r2,-28464
 8005e80:	10800017 	ldw	r2,0(r2)
 8005e84:	10000526 	beq	r2,zero,8005e9c <alt_get_errno+0x34>
 8005e88:	00820074 	movhi	r2,2049
 8005e8c:	10a43404 	addi	r2,r2,-28464
 8005e90:	10800017 	ldw	r2,0(r2)
 8005e94:	103ee83a 	callr	r2
 8005e98:	00000206 	br	8005ea4 <alt_get_errno+0x3c>
 8005e9c:	00820074 	movhi	r2,2049
 8005ea0:	10ab5804 	addi	r2,r2,-21152
}
 8005ea4:	e037883a 	mov	sp,fp
 8005ea8:	dfc00117 	ldw	ra,4(sp)
 8005eac:	df000017 	ldw	fp,0(sp)
 8005eb0:	dec00204 	addi	sp,sp,8
 8005eb4:	f800283a 	ret

08005eb8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8005eb8:	defffa04 	addi	sp,sp,-24
 8005ebc:	dfc00515 	stw	ra,20(sp)
 8005ec0:	df000415 	stw	fp,16(sp)
 8005ec4:	df000404 	addi	fp,sp,16
 8005ec8:	e13ffe15 	stw	r4,-8(fp)
 8005ecc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8005ed0:	e0bffe17 	ldw	r2,-8(fp)
 8005ed4:	10000326 	beq	r2,zero,8005ee4 <alt_dev_llist_insert+0x2c>
 8005ed8:	e0bffe17 	ldw	r2,-8(fp)
 8005edc:	10800217 	ldw	r2,8(r2)
 8005ee0:	1000061e 	bne	r2,zero,8005efc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8005ee4:	8005e680 	call	8005e68 <alt_get_errno>
 8005ee8:	1007883a 	mov	r3,r2
 8005eec:	00800584 	movi	r2,22
 8005ef0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8005ef4:	00bffa84 	movi	r2,-22
 8005ef8:	00001306 	br	8005f48 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8005efc:	e0bffe17 	ldw	r2,-8(fp)
 8005f00:	e0ffff17 	ldw	r3,-4(fp)
 8005f04:	e0fffc15 	stw	r3,-16(fp)
 8005f08:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8005f0c:	e0bffd17 	ldw	r2,-12(fp)
 8005f10:	e0fffc17 	ldw	r3,-16(fp)
 8005f14:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8005f18:	e0bffc17 	ldw	r2,-16(fp)
 8005f1c:	10c00017 	ldw	r3,0(r2)
 8005f20:	e0bffd17 	ldw	r2,-12(fp)
 8005f24:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8005f28:	e0bffc17 	ldw	r2,-16(fp)
 8005f2c:	10800017 	ldw	r2,0(r2)
 8005f30:	e0fffd17 	ldw	r3,-12(fp)
 8005f34:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8005f38:	e0bffc17 	ldw	r2,-16(fp)
 8005f3c:	e0fffd17 	ldw	r3,-12(fp)
 8005f40:	10c00015 	stw	r3,0(r2)

  return 0;  
 8005f44:	0005883a 	mov	r2,zero
}
 8005f48:	e037883a 	mov	sp,fp
 8005f4c:	dfc00117 	ldw	ra,4(sp)
 8005f50:	df000017 	ldw	fp,0(sp)
 8005f54:	dec00204 	addi	sp,sp,8
 8005f58:	f800283a 	ret

08005f5c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8005f5c:	defffd04 	addi	sp,sp,-12
 8005f60:	dfc00215 	stw	ra,8(sp)
 8005f64:	df000115 	stw	fp,4(sp)
 8005f68:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8005f6c:	00820034 	movhi	r2,2048
 8005f70:	109c6f04 	addi	r2,r2,29116
 8005f74:	e0bfff15 	stw	r2,-4(fp)
 8005f78:	00000606 	br	8005f94 <_do_ctors+0x38>
        (*ctor) (); 
 8005f7c:	e0bfff17 	ldw	r2,-4(fp)
 8005f80:	10800017 	ldw	r2,0(r2)
 8005f84:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8005f88:	e0bfff17 	ldw	r2,-4(fp)
 8005f8c:	10bfff04 	addi	r2,r2,-4
 8005f90:	e0bfff15 	stw	r2,-4(fp)
 8005f94:	e0ffff17 	ldw	r3,-4(fp)
 8005f98:	00820034 	movhi	r2,2048
 8005f9c:	109c7004 	addi	r2,r2,29120
 8005fa0:	18bff62e 	bgeu	r3,r2,8005f7c <_do_ctors+0x20>
        (*ctor) (); 
}
 8005fa4:	e037883a 	mov	sp,fp
 8005fa8:	dfc00117 	ldw	ra,4(sp)
 8005fac:	df000017 	ldw	fp,0(sp)
 8005fb0:	dec00204 	addi	sp,sp,8
 8005fb4:	f800283a 	ret

08005fb8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8005fb8:	defffd04 	addi	sp,sp,-12
 8005fbc:	dfc00215 	stw	ra,8(sp)
 8005fc0:	df000115 	stw	fp,4(sp)
 8005fc4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8005fc8:	00820034 	movhi	r2,2048
 8005fcc:	109c6f04 	addi	r2,r2,29116
 8005fd0:	e0bfff15 	stw	r2,-4(fp)
 8005fd4:	00000606 	br	8005ff0 <_do_dtors+0x38>
        (*dtor) (); 
 8005fd8:	e0bfff17 	ldw	r2,-4(fp)
 8005fdc:	10800017 	ldw	r2,0(r2)
 8005fe0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8005fe4:	e0bfff17 	ldw	r2,-4(fp)
 8005fe8:	10bfff04 	addi	r2,r2,-4
 8005fec:	e0bfff15 	stw	r2,-4(fp)
 8005ff0:	e0ffff17 	ldw	r3,-4(fp)
 8005ff4:	00820034 	movhi	r2,2048
 8005ff8:	109c7004 	addi	r2,r2,29120
 8005ffc:	18bff62e 	bgeu	r3,r2,8005fd8 <_do_dtors+0x20>
        (*dtor) (); 
}
 8006000:	e037883a 	mov	sp,fp
 8006004:	dfc00117 	ldw	ra,4(sp)
 8006008:	df000017 	ldw	fp,0(sp)
 800600c:	dec00204 	addi	sp,sp,8
 8006010:	f800283a 	ret

08006014 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8006014:	defffe04 	addi	sp,sp,-8
 8006018:	dfc00115 	stw	ra,4(sp)
 800601c:	df000015 	stw	fp,0(sp)
 8006020:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8006024:	0009883a 	mov	r4,zero
 8006028:	01440004 	movi	r5,4096
 800602c:	8006c5c0 	call	8006c5c <alt_icache_flush>
#endif
}
 8006030:	e037883a 	mov	sp,fp
 8006034:	dfc00117 	ldw	ra,4(sp)
 8006038:	df000017 	ldw	fp,0(sp)
 800603c:	dec00204 	addi	sp,sp,8
 8006040:	f800283a 	ret

08006044 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8006044:	defff904 	addi	sp,sp,-28
 8006048:	dfc00615 	stw	ra,24(sp)
 800604c:	df000515 	stw	fp,20(sp)
 8006050:	df000504 	addi	fp,sp,20
 8006054:	e13ffc15 	stw	r4,-16(fp)
 8006058:	e17ffd15 	stw	r5,-12(fp)
 800605c:	e1bffe15 	stw	r6,-8(fp)
 8006060:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8006064:	e0800217 	ldw	r2,8(fp)
 8006068:	d8800015 	stw	r2,0(sp)
 800606c:	e13ffc17 	ldw	r4,-16(fp)
 8006070:	e17ffd17 	ldw	r5,-12(fp)
 8006074:	e1bffe17 	ldw	r6,-8(fp)
 8006078:	e1ffff17 	ldw	r7,-4(fp)
 800607c:	80062240 	call	8006224 <alt_iic_isr_register>
}  
 8006080:	e037883a 	mov	sp,fp
 8006084:	dfc00117 	ldw	ra,4(sp)
 8006088:	df000017 	ldw	fp,0(sp)
 800608c:	dec00204 	addi	sp,sp,8
 8006090:	f800283a 	ret

08006094 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8006094:	defff904 	addi	sp,sp,-28
 8006098:	df000615 	stw	fp,24(sp)
 800609c:	df000604 	addi	fp,sp,24
 80060a0:	e13ffe15 	stw	r4,-8(fp)
 80060a4:	e17fff15 	stw	r5,-4(fp)
 80060a8:	e0bfff17 	ldw	r2,-4(fp)
 80060ac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80060b0:	0005303a 	rdctl	r2,status
 80060b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80060b8:	e0fffb17 	ldw	r3,-20(fp)
 80060bc:	00bfff84 	movi	r2,-2
 80060c0:	1884703a 	and	r2,r3,r2
 80060c4:	1001703a 	wrctl	status,r2
  
  return context;
 80060c8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80060cc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 80060d0:	e0bffa17 	ldw	r2,-24(fp)
 80060d4:	00c00044 	movi	r3,1
 80060d8:	1884983a 	sll	r2,r3,r2
 80060dc:	1007883a 	mov	r3,r2
 80060e0:	00820074 	movhi	r2,2049
 80060e4:	10ab5c04 	addi	r2,r2,-21136
 80060e8:	10800017 	ldw	r2,0(r2)
 80060ec:	1886b03a 	or	r3,r3,r2
 80060f0:	00820074 	movhi	r2,2049
 80060f4:	10ab5c04 	addi	r2,r2,-21136
 80060f8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80060fc:	00820074 	movhi	r2,2049
 8006100:	10ab5c04 	addi	r2,r2,-21136
 8006104:	10800017 	ldw	r2,0(r2)
 8006108:	100170fa 	wrctl	ienable,r2
 800610c:	e0bffc17 	ldw	r2,-16(fp)
 8006110:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8006114:	e0bffd17 	ldw	r2,-12(fp)
 8006118:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800611c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8006120:	0001883a 	nop
}
 8006124:	e037883a 	mov	sp,fp
 8006128:	df000017 	ldw	fp,0(sp)
 800612c:	dec00104 	addi	sp,sp,4
 8006130:	f800283a 	ret

08006134 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8006134:	defff904 	addi	sp,sp,-28
 8006138:	df000615 	stw	fp,24(sp)
 800613c:	df000604 	addi	fp,sp,24
 8006140:	e13ffe15 	stw	r4,-8(fp)
 8006144:	e17fff15 	stw	r5,-4(fp)
 8006148:	e0bfff17 	ldw	r2,-4(fp)
 800614c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8006150:	0005303a 	rdctl	r2,status
 8006154:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8006158:	e0fffb17 	ldw	r3,-20(fp)
 800615c:	00bfff84 	movi	r2,-2
 8006160:	1884703a 	and	r2,r3,r2
 8006164:	1001703a 	wrctl	status,r2
  
  return context;
 8006168:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800616c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8006170:	e0bffa17 	ldw	r2,-24(fp)
 8006174:	00c00044 	movi	r3,1
 8006178:	1884983a 	sll	r2,r3,r2
 800617c:	0084303a 	nor	r2,zero,r2
 8006180:	1007883a 	mov	r3,r2
 8006184:	00820074 	movhi	r2,2049
 8006188:	10ab5c04 	addi	r2,r2,-21136
 800618c:	10800017 	ldw	r2,0(r2)
 8006190:	1886703a 	and	r3,r3,r2
 8006194:	00820074 	movhi	r2,2049
 8006198:	10ab5c04 	addi	r2,r2,-21136
 800619c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80061a0:	00820074 	movhi	r2,2049
 80061a4:	10ab5c04 	addi	r2,r2,-21136
 80061a8:	10800017 	ldw	r2,0(r2)
 80061ac:	100170fa 	wrctl	ienable,r2
 80061b0:	e0bffc17 	ldw	r2,-16(fp)
 80061b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80061b8:	e0bffd17 	ldw	r2,-12(fp)
 80061bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80061c0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 80061c4:	0001883a 	nop
}
 80061c8:	e037883a 	mov	sp,fp
 80061cc:	df000017 	ldw	fp,0(sp)
 80061d0:	dec00104 	addi	sp,sp,4
 80061d4:	f800283a 	ret

080061d8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 80061d8:	defffc04 	addi	sp,sp,-16
 80061dc:	df000315 	stw	fp,12(sp)
 80061e0:	df000304 	addi	fp,sp,12
 80061e4:	e13ffe15 	stw	r4,-8(fp)
 80061e8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 80061ec:	000530fa 	rdctl	r2,ienable
 80061f0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 80061f4:	e0bfff17 	ldw	r2,-4(fp)
 80061f8:	00c00044 	movi	r3,1
 80061fc:	1884983a 	sll	r2,r3,r2
 8006200:	1007883a 	mov	r3,r2
 8006204:	e0bffd17 	ldw	r2,-12(fp)
 8006208:	1884703a 	and	r2,r3,r2
 800620c:	1004c03a 	cmpne	r2,r2,zero
 8006210:	10803fcc 	andi	r2,r2,255
}
 8006214:	e037883a 	mov	sp,fp
 8006218:	df000017 	ldw	fp,0(sp)
 800621c:	dec00104 	addi	sp,sp,4
 8006220:	f800283a 	ret

08006224 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8006224:	defff504 	addi	sp,sp,-44
 8006228:	dfc00a15 	stw	ra,40(sp)
 800622c:	df000915 	stw	fp,36(sp)
 8006230:	df000904 	addi	fp,sp,36
 8006234:	e13ffc15 	stw	r4,-16(fp)
 8006238:	e17ffd15 	stw	r5,-12(fp)
 800623c:	e1bffe15 	stw	r6,-8(fp)
 8006240:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8006244:	00bffa84 	movi	r2,-22
 8006248:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 800624c:	e0bffd17 	ldw	r2,-12(fp)
 8006250:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8006254:	e0bff817 	ldw	r2,-32(fp)
 8006258:	10800808 	cmpgei	r2,r2,32
 800625c:	1000271e 	bne	r2,zero,80062fc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8006260:	0005303a 	rdctl	r2,status
 8006264:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8006268:	e0fffa17 	ldw	r3,-24(fp)
 800626c:	00bfff84 	movi	r2,-2
 8006270:	1884703a 	and	r2,r3,r2
 8006274:	1001703a 	wrctl	status,r2
  
  return context;
 8006278:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 800627c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 8006280:	00820074 	movhi	r2,2049
 8006284:	10ac6404 	addi	r2,r2,-20080
 8006288:	e0fff817 	ldw	r3,-32(fp)
 800628c:	180690fa 	slli	r3,r3,3
 8006290:	10c5883a 	add	r2,r2,r3
 8006294:	e0fffe17 	ldw	r3,-8(fp)
 8006298:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 800629c:	00820074 	movhi	r2,2049
 80062a0:	10ac6404 	addi	r2,r2,-20080
 80062a4:	e0fff817 	ldw	r3,-32(fp)
 80062a8:	180690fa 	slli	r3,r3,3
 80062ac:	18c00104 	addi	r3,r3,4
 80062b0:	10c5883a 	add	r2,r2,r3
 80062b4:	e0ffff17 	ldw	r3,-4(fp)
 80062b8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 80062bc:	e0bffe17 	ldw	r2,-8(fp)
 80062c0:	10000526 	beq	r2,zero,80062d8 <alt_iic_isr_register+0xb4>
 80062c4:	e0bff817 	ldw	r2,-32(fp)
 80062c8:	e13ffc17 	ldw	r4,-16(fp)
 80062cc:	100b883a 	mov	r5,r2
 80062d0:	80060940 	call	8006094 <alt_ic_irq_enable>
 80062d4:	00000406 	br	80062e8 <alt_iic_isr_register+0xc4>
 80062d8:	e0bff817 	ldw	r2,-32(fp)
 80062dc:	e13ffc17 	ldw	r4,-16(fp)
 80062e0:	100b883a 	mov	r5,r2
 80062e4:	80061340 	call	8006134 <alt_ic_irq_disable>
 80062e8:	e0bff715 	stw	r2,-36(fp)
 80062ec:	e0bff917 	ldw	r2,-28(fp)
 80062f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80062f4:	e0bffb17 	ldw	r2,-20(fp)
 80062f8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 80062fc:	e0bff717 	ldw	r2,-36(fp)
}
 8006300:	e037883a 	mov	sp,fp
 8006304:	dfc00117 	ldw	ra,4(sp)
 8006308:	df000017 	ldw	fp,0(sp)
 800630c:	dec00204 	addi	sp,sp,8
 8006310:	f800283a 	ret

08006314 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8006314:	defff904 	addi	sp,sp,-28
 8006318:	dfc00615 	stw	ra,24(sp)
 800631c:	df000515 	stw	fp,20(sp)
 8006320:	df000504 	addi	fp,sp,20
 8006324:	e13ffc15 	stw	r4,-16(fp)
 8006328:	e17ffd15 	stw	r5,-12(fp)
 800632c:	e1bffe15 	stw	r6,-8(fp)
 8006330:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8006334:	e13ffd17 	ldw	r4,-12(fp)
 8006338:	e17ffe17 	ldw	r5,-8(fp)
 800633c:	e1bfff17 	ldw	r6,-4(fp)
 8006340:	80065680 	call	8006568 <open>
 8006344:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8006348:	e0bffb17 	ldw	r2,-20(fp)
 800634c:	10001c16 	blt	r2,zero,80063c0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 8006350:	00820034 	movhi	r2,2048
 8006354:	109f3a04 	addi	r2,r2,31976
 8006358:	e0fffb17 	ldw	r3,-20(fp)
 800635c:	18c00324 	muli	r3,r3,12
 8006360:	10c5883a 	add	r2,r2,r3
 8006364:	10c00017 	ldw	r3,0(r2)
 8006368:	e0bffc17 	ldw	r2,-16(fp)
 800636c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8006370:	00820034 	movhi	r2,2048
 8006374:	109f3a04 	addi	r2,r2,31976
 8006378:	e0fffb17 	ldw	r3,-20(fp)
 800637c:	18c00324 	muli	r3,r3,12
 8006380:	18c00104 	addi	r3,r3,4
 8006384:	10c5883a 	add	r2,r2,r3
 8006388:	10c00017 	ldw	r3,0(r2)
 800638c:	e0bffc17 	ldw	r2,-16(fp)
 8006390:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8006394:	00820034 	movhi	r2,2048
 8006398:	109f3a04 	addi	r2,r2,31976
 800639c:	e0fffb17 	ldw	r3,-20(fp)
 80063a0:	18c00324 	muli	r3,r3,12
 80063a4:	18c00204 	addi	r3,r3,8
 80063a8:	10c5883a 	add	r2,r2,r3
 80063ac:	10c00017 	ldw	r3,0(r2)
 80063b0:	e0bffc17 	ldw	r2,-16(fp)
 80063b4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 80063b8:	e13ffb17 	ldw	r4,-20(fp)
 80063bc:	80036840 	call	8003684 <alt_release_fd>
  }
} 
 80063c0:	e037883a 	mov	sp,fp
 80063c4:	dfc00117 	ldw	ra,4(sp)
 80063c8:	df000017 	ldw	fp,0(sp)
 80063cc:	dec00204 	addi	sp,sp,8
 80063d0:	f800283a 	ret

080063d4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 80063d4:	defffb04 	addi	sp,sp,-20
 80063d8:	dfc00415 	stw	ra,16(sp)
 80063dc:	df000315 	stw	fp,12(sp)
 80063e0:	df000304 	addi	fp,sp,12
 80063e4:	e13ffd15 	stw	r4,-12(fp)
 80063e8:	e17ffe15 	stw	r5,-8(fp)
 80063ec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80063f0:	01020034 	movhi	r4,2048
 80063f4:	211f3d04 	addi	r4,r4,31988
 80063f8:	e17ffd17 	ldw	r5,-12(fp)
 80063fc:	01800044 	movi	r6,1
 8006400:	01c07fc4 	movi	r7,511
 8006404:	80063140 	call	8006314 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8006408:	01020034 	movhi	r4,2048
 800640c:	211f3a04 	addi	r4,r4,31976
 8006410:	e17ffe17 	ldw	r5,-8(fp)
 8006414:	000d883a 	mov	r6,zero
 8006418:	01c07fc4 	movi	r7,511
 800641c:	80063140 	call	8006314 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8006420:	01020034 	movhi	r4,2048
 8006424:	211f4004 	addi	r4,r4,32000
 8006428:	e17fff17 	ldw	r5,-4(fp)
 800642c:	01800044 	movi	r6,1
 8006430:	01c07fc4 	movi	r7,511
 8006434:	80063140 	call	8006314 <alt_open_fd>
}  
 8006438:	e037883a 	mov	sp,fp
 800643c:	dfc00117 	ldw	ra,4(sp)
 8006440:	df000017 	ldw	fp,0(sp)
 8006444:	dec00204 	addi	sp,sp,8
 8006448:	f800283a 	ret

0800644c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800644c:	defffe04 	addi	sp,sp,-8
 8006450:	dfc00115 	stw	ra,4(sp)
 8006454:	df000015 	stw	fp,0(sp)
 8006458:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800645c:	00820074 	movhi	r2,2049
 8006460:	10a43404 	addi	r2,r2,-28464
 8006464:	10800017 	ldw	r2,0(r2)
 8006468:	10000526 	beq	r2,zero,8006480 <alt_get_errno+0x34>
 800646c:	00820074 	movhi	r2,2049
 8006470:	10a43404 	addi	r2,r2,-28464
 8006474:	10800017 	ldw	r2,0(r2)
 8006478:	103ee83a 	callr	r2
 800647c:	00000206 	br	8006488 <alt_get_errno+0x3c>
 8006480:	00820074 	movhi	r2,2049
 8006484:	10ab5804 	addi	r2,r2,-21152
}
 8006488:	e037883a 	mov	sp,fp
 800648c:	dfc00117 	ldw	ra,4(sp)
 8006490:	df000017 	ldw	fp,0(sp)
 8006494:	dec00204 	addi	sp,sp,8
 8006498:	f800283a 	ret

0800649c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800649c:	defffd04 	addi	sp,sp,-12
 80064a0:	df000215 	stw	fp,8(sp)
 80064a4:	df000204 	addi	fp,sp,8
 80064a8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 80064ac:	e0bfff17 	ldw	r2,-4(fp)
 80064b0:	10800217 	ldw	r2,8(r2)
 80064b4:	10d00034 	orhi	r3,r2,16384
 80064b8:	e0bfff17 	ldw	r2,-4(fp)
 80064bc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80064c0:	e03ffe15 	stw	zero,-8(fp)
 80064c4:	00001d06 	br	800653c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80064c8:	00820034 	movhi	r2,2048
 80064cc:	109f3a04 	addi	r2,r2,31976
 80064d0:	e0fffe17 	ldw	r3,-8(fp)
 80064d4:	18c00324 	muli	r3,r3,12
 80064d8:	10c5883a 	add	r2,r2,r3
 80064dc:	10c00017 	ldw	r3,0(r2)
 80064e0:	e0bfff17 	ldw	r2,-4(fp)
 80064e4:	10800017 	ldw	r2,0(r2)
 80064e8:	1880111e 	bne	r3,r2,8006530 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80064ec:	00820034 	movhi	r2,2048
 80064f0:	109f3a04 	addi	r2,r2,31976
 80064f4:	e0fffe17 	ldw	r3,-8(fp)
 80064f8:	18c00324 	muli	r3,r3,12
 80064fc:	18c00204 	addi	r3,r3,8
 8006500:	10c5883a 	add	r2,r2,r3
 8006504:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8006508:	1000090e 	bge	r2,zero,8006530 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800650c:	e0bffe17 	ldw	r2,-8(fp)
 8006510:	10c00324 	muli	r3,r2,12
 8006514:	00820034 	movhi	r2,2048
 8006518:	109f3a04 	addi	r2,r2,31976
 800651c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8006520:	e0bfff17 	ldw	r2,-4(fp)
 8006524:	18800226 	beq	r3,r2,8006530 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8006528:	00bffcc4 	movi	r2,-13
 800652c:	00000a06 	br	8006558 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8006530:	e0bffe17 	ldw	r2,-8(fp)
 8006534:	10800044 	addi	r2,r2,1
 8006538:	e0bffe15 	stw	r2,-8(fp)
 800653c:	00820074 	movhi	r2,2049
 8006540:	10a43304 	addi	r2,r2,-28468
 8006544:	10800017 	ldw	r2,0(r2)
 8006548:	1007883a 	mov	r3,r2
 800654c:	e0bffe17 	ldw	r2,-8(fp)
 8006550:	18bfdd2e 	bgeu	r3,r2,80064c8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8006554:	0005883a 	mov	r2,zero
}
 8006558:	e037883a 	mov	sp,fp
 800655c:	df000017 	ldw	fp,0(sp)
 8006560:	dec00104 	addi	sp,sp,4
 8006564:	f800283a 	ret

08006568 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8006568:	defff604 	addi	sp,sp,-40
 800656c:	dfc00915 	stw	ra,36(sp)
 8006570:	df000815 	stw	fp,32(sp)
 8006574:	df000804 	addi	fp,sp,32
 8006578:	e13ffd15 	stw	r4,-12(fp)
 800657c:	e17ffe15 	stw	r5,-8(fp)
 8006580:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8006584:	00bfffc4 	movi	r2,-1
 8006588:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 800658c:	00bffb44 	movi	r2,-19
 8006590:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8006594:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8006598:	e13ffd17 	ldw	r4,-12(fp)
 800659c:	01420074 	movhi	r5,2049
 80065a0:	29643104 	addi	r5,r5,-28476
 80065a4:	8006a040 	call	8006a04 <alt_find_dev>
 80065a8:	e0bff815 	stw	r2,-32(fp)
 80065ac:	e0bff817 	ldw	r2,-32(fp)
 80065b0:	1000051e 	bne	r2,zero,80065c8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 80065b4:	e13ffd17 	ldw	r4,-12(fp)
 80065b8:	8006a940 	call	8006a94 <alt_find_file>
 80065bc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 80065c0:	00800044 	movi	r2,1
 80065c4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 80065c8:	e0bff817 	ldw	r2,-32(fp)
 80065cc:	10002926 	beq	r2,zero,8006674 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80065d0:	e13ff817 	ldw	r4,-32(fp)
 80065d4:	8006ba80 	call	8006ba8 <alt_get_fd>
 80065d8:	e0bff915 	stw	r2,-28(fp)
 80065dc:	e0bff917 	ldw	r2,-28(fp)
 80065e0:	1000030e 	bge	r2,zero,80065f0 <open+0x88>
    {
      status = index;
 80065e4:	e0bff917 	ldw	r2,-28(fp)
 80065e8:	e0bffa15 	stw	r2,-24(fp)
 80065ec:	00002306 	br	800667c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 80065f0:	e0bff917 	ldw	r2,-28(fp)
 80065f4:	10c00324 	muli	r3,r2,12
 80065f8:	00820034 	movhi	r2,2048
 80065fc:	109f3a04 	addi	r2,r2,31976
 8006600:	1885883a 	add	r2,r3,r2
 8006604:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8006608:	e0fffe17 	ldw	r3,-8(fp)
 800660c:	00900034 	movhi	r2,16384
 8006610:	10bfffc4 	addi	r2,r2,-1
 8006614:	1886703a 	and	r3,r3,r2
 8006618:	e0bffc17 	ldw	r2,-16(fp)
 800661c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8006620:	e0bffb17 	ldw	r2,-20(fp)
 8006624:	1000051e 	bne	r2,zero,800663c <open+0xd4>
 8006628:	e13ffc17 	ldw	r4,-16(fp)
 800662c:	800649c0 	call	800649c <alt_file_locked>
 8006630:	e0bffa15 	stw	r2,-24(fp)
 8006634:	e0bffa17 	ldw	r2,-24(fp)
 8006638:	10001016 	blt	r2,zero,800667c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800663c:	e0bff817 	ldw	r2,-32(fp)
 8006640:	10800317 	ldw	r2,12(r2)
 8006644:	10000826 	beq	r2,zero,8006668 <open+0x100>
 8006648:	e0bff817 	ldw	r2,-32(fp)
 800664c:	10800317 	ldw	r2,12(r2)
 8006650:	e13ffc17 	ldw	r4,-16(fp)
 8006654:	e17ffd17 	ldw	r5,-12(fp)
 8006658:	e1bffe17 	ldw	r6,-8(fp)
 800665c:	e1ffff17 	ldw	r7,-4(fp)
 8006660:	103ee83a 	callr	r2
 8006664:	00000106 	br	800666c <open+0x104>
 8006668:	0005883a 	mov	r2,zero
 800666c:	e0bffa15 	stw	r2,-24(fp)
 8006670:	00000206 	br	800667c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8006674:	00bffb44 	movi	r2,-19
 8006678:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800667c:	e0bffa17 	ldw	r2,-24(fp)
 8006680:	1000090e 	bge	r2,zero,80066a8 <open+0x140>
  {
    alt_release_fd (index);  
 8006684:	e13ff917 	ldw	r4,-28(fp)
 8006688:	80036840 	call	8003684 <alt_release_fd>
    ALT_ERRNO = -status;
 800668c:	800644c0 	call	800644c <alt_get_errno>
 8006690:	1007883a 	mov	r3,r2
 8006694:	e0bffa17 	ldw	r2,-24(fp)
 8006698:	0085c83a 	sub	r2,zero,r2
 800669c:	18800015 	stw	r2,0(r3)
    return -1;
 80066a0:	00bfffc4 	movi	r2,-1
 80066a4:	00000106 	br	80066ac <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 80066a8:	e0bff917 	ldw	r2,-28(fp)
}
 80066ac:	e037883a 	mov	sp,fp
 80066b0:	dfc00117 	ldw	ra,4(sp)
 80066b4:	df000017 	ldw	fp,0(sp)
 80066b8:	dec00204 	addi	sp,sp,8
 80066bc:	f800283a 	ret

080066c0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 80066c0:	defffa04 	addi	sp,sp,-24
 80066c4:	df000515 	stw	fp,20(sp)
 80066c8:	df000504 	addi	fp,sp,20
 80066cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80066d0:	0005303a 	rdctl	r2,status
 80066d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80066d8:	e0fffc17 	ldw	r3,-16(fp)
 80066dc:	00bfff84 	movi	r2,-2
 80066e0:	1884703a 	and	r2,r3,r2
 80066e4:	1001703a 	wrctl	status,r2
  
  return context;
 80066e8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 80066ec:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 80066f0:	e0bfff17 	ldw	r2,-4(fp)
 80066f4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 80066f8:	e0bffd17 	ldw	r2,-12(fp)
 80066fc:	10800017 	ldw	r2,0(r2)
 8006700:	e0fffd17 	ldw	r3,-12(fp)
 8006704:	18c00117 	ldw	r3,4(r3)
 8006708:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 800670c:	e0bffd17 	ldw	r2,-12(fp)
 8006710:	10800117 	ldw	r2,4(r2)
 8006714:	e0fffd17 	ldw	r3,-12(fp)
 8006718:	18c00017 	ldw	r3,0(r3)
 800671c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8006720:	e0bffd17 	ldw	r2,-12(fp)
 8006724:	e0fffd17 	ldw	r3,-12(fp)
 8006728:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 800672c:	e0bffd17 	ldw	r2,-12(fp)
 8006730:	e0fffd17 	ldw	r3,-12(fp)
 8006734:	10c00015 	stw	r3,0(r2)
 8006738:	e0bffb17 	ldw	r2,-20(fp)
 800673c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8006740:	e0bffe17 	ldw	r2,-8(fp)
 8006744:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8006748:	e037883a 	mov	sp,fp
 800674c:	df000017 	ldw	fp,0(sp)
 8006750:	dec00104 	addi	sp,sp,4
 8006754:	f800283a 	ret

08006758 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8006758:	defffb04 	addi	sp,sp,-20
 800675c:	dfc00415 	stw	ra,16(sp)
 8006760:	df000315 	stw	fp,12(sp)
 8006764:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8006768:	d0a00d17 	ldw	r2,-32716(gp)
 800676c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8006770:	d0a73317 	ldw	r2,-25396(gp)
 8006774:	10800044 	addi	r2,r2,1
 8006778:	d0a73315 	stw	r2,-25396(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800677c:	00002e06 	br	8006838 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8006780:	e0bffd17 	ldw	r2,-12(fp)
 8006784:	10800017 	ldw	r2,0(r2)
 8006788:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800678c:	e0bffd17 	ldw	r2,-12(fp)
 8006790:	10800403 	ldbu	r2,16(r2)
 8006794:	10803fcc 	andi	r2,r2,255
 8006798:	10000426 	beq	r2,zero,80067ac <alt_tick+0x54>
 800679c:	d0a73317 	ldw	r2,-25396(gp)
 80067a0:	1000021e 	bne	r2,zero,80067ac <alt_tick+0x54>
    {
      alarm->rollover = 0;
 80067a4:	e0bffd17 	ldw	r2,-12(fp)
 80067a8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 80067ac:	e0bffd17 	ldw	r2,-12(fp)
 80067b0:	10800217 	ldw	r2,8(r2)
 80067b4:	d0e73317 	ldw	r3,-25396(gp)
 80067b8:	18801d36 	bltu	r3,r2,8006830 <alt_tick+0xd8>
 80067bc:	e0bffd17 	ldw	r2,-12(fp)
 80067c0:	10800403 	ldbu	r2,16(r2)
 80067c4:	10803fcc 	andi	r2,r2,255
 80067c8:	1000191e 	bne	r2,zero,8006830 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 80067cc:	e0bffd17 	ldw	r2,-12(fp)
 80067d0:	10800317 	ldw	r2,12(r2)
 80067d4:	e0fffd17 	ldw	r3,-12(fp)
 80067d8:	18c00517 	ldw	r3,20(r3)
 80067dc:	1809883a 	mov	r4,r3
 80067e0:	103ee83a 	callr	r2
 80067e4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 80067e8:	e0bfff17 	ldw	r2,-4(fp)
 80067ec:	1000031e 	bne	r2,zero,80067fc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 80067f0:	e13ffd17 	ldw	r4,-12(fp)
 80067f4:	80066c00 	call	80066c0 <alt_alarm_stop>
 80067f8:	00000d06 	br	8006830 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 80067fc:	e0bffd17 	ldw	r2,-12(fp)
 8006800:	10c00217 	ldw	r3,8(r2)
 8006804:	e0bfff17 	ldw	r2,-4(fp)
 8006808:	1887883a 	add	r3,r3,r2
 800680c:	e0bffd17 	ldw	r2,-12(fp)
 8006810:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8006814:	e0bffd17 	ldw	r2,-12(fp)
 8006818:	10c00217 	ldw	r3,8(r2)
 800681c:	d0a73317 	ldw	r2,-25396(gp)
 8006820:	1880032e 	bgeu	r3,r2,8006830 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8006824:	e0bffd17 	ldw	r2,-12(fp)
 8006828:	00c00044 	movi	r3,1
 800682c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8006830:	e0bffe17 	ldw	r2,-8(fp)
 8006834:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8006838:	e0fffd17 	ldw	r3,-12(fp)
 800683c:	d0a00d04 	addi	r2,gp,-32716
 8006840:	18bfcf1e 	bne	r3,r2,8006780 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8006844:	0001883a 	nop
}
 8006848:	e037883a 	mov	sp,fp
 800684c:	dfc00117 	ldw	ra,4(sp)
 8006850:	df000017 	ldw	fp,0(sp)
 8006854:	dec00204 	addi	sp,sp,8
 8006858:	f800283a 	ret

0800685c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 800685c:	defffd04 	addi	sp,sp,-12
 8006860:	dfc00215 	stw	ra,8(sp)
 8006864:	df000115 	stw	fp,4(sp)
 8006868:	df000104 	addi	fp,sp,4
 800686c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 8006870:	e13fff17 	ldw	r4,-4(fp)
 8006874:	80068ac0 	call	80068ac <alt_busy_sleep>
}
 8006878:	e037883a 	mov	sp,fp
 800687c:	dfc00117 	ldw	ra,4(sp)
 8006880:	df000017 	ldw	fp,0(sp)
 8006884:	dec00204 	addi	sp,sp,8
 8006888:	f800283a 	ret

0800688c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 800688c:	deffff04 	addi	sp,sp,-4
 8006890:	df000015 	stw	fp,0(sp)
 8006894:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8006898:	000170fa 	wrctl	ienable,zero
}
 800689c:	e037883a 	mov	sp,fp
 80068a0:	df000017 	ldw	fp,0(sp)
 80068a4:	dec00104 	addi	sp,sp,4
 80068a8:	f800283a 	ret

080068ac <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 80068ac:	defffa04 	addi	sp,sp,-24
 80068b0:	dfc00515 	stw	ra,20(sp)
 80068b4:	df000415 	stw	fp,16(sp)
 80068b8:	df000404 	addi	fp,sp,16
 80068bc:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 80068c0:	008000c4 	movi	r2,3
 80068c4:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 80068c8:	e0fffd17 	ldw	r3,-12(fp)
 80068cc:	008003f4 	movhi	r2,15
 80068d0:	10909004 	addi	r2,r2,16960
 80068d4:	1885383a 	mul	r2,r3,r2
 80068d8:	0100bef4 	movhi	r4,763
 80068dc:	213c2004 	addi	r4,r4,-3968
 80068e0:	100b883a 	mov	r5,r2
 80068e4:	8002f280 	call	8002f28 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 80068e8:	01200034 	movhi	r4,32768
 80068ec:	213fffc4 	addi	r4,r4,-1
 80068f0:	100b883a 	mov	r5,r2
 80068f4:	8002f280 	call	8002f28 <__udivsi3>
 80068f8:	e13fff17 	ldw	r4,-4(fp)
 80068fc:	100b883a 	mov	r5,r2
 8006900:	8002f280 	call	8002f28 <__udivsi3>
 8006904:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8006908:	e0bffe17 	ldw	r2,-8(fp)
 800690c:	10002a26 	beq	r2,zero,80069b8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8006910:	e03ffc15 	stw	zero,-16(fp)
 8006914:	00001706 	br	8006974 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8006918:	00a00034 	movhi	r2,32768
 800691c:	10bfffc4 	addi	r2,r2,-1
 8006920:	10bfffc4 	addi	r2,r2,-1
 8006924:	103ffe1e 	bne	r2,zero,8006920 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8006928:	e0fffd17 	ldw	r3,-12(fp)
 800692c:	008003f4 	movhi	r2,15
 8006930:	10909004 	addi	r2,r2,16960
 8006934:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8006938:	0100bef4 	movhi	r4,763
 800693c:	213c2004 	addi	r4,r4,-3968
 8006940:	100b883a 	mov	r5,r2
 8006944:	8002f280 	call	8002f28 <__udivsi3>
 8006948:	01200034 	movhi	r4,32768
 800694c:	213fffc4 	addi	r4,r4,-1
 8006950:	100b883a 	mov	r5,r2
 8006954:	8002f280 	call	8002f28 <__udivsi3>
 8006958:	1007883a 	mov	r3,r2
 800695c:	e0bfff17 	ldw	r2,-4(fp)
 8006960:	10c5c83a 	sub	r2,r2,r3
 8006964:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8006968:	e0bffc17 	ldw	r2,-16(fp)
 800696c:	10800044 	addi	r2,r2,1
 8006970:	e0bffc15 	stw	r2,-16(fp)
 8006974:	e0fffc17 	ldw	r3,-16(fp)
 8006978:	e0bffe17 	ldw	r2,-8(fp)
 800697c:	18bfe616 	blt	r3,r2,8006918 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8006980:	e0fffd17 	ldw	r3,-12(fp)
 8006984:	008003f4 	movhi	r2,15
 8006988:	10909004 	addi	r2,r2,16960
 800698c:	1885383a 	mul	r2,r3,r2
 8006990:	0100bef4 	movhi	r4,763
 8006994:	213c2004 	addi	r4,r4,-3968
 8006998:	100b883a 	mov	r5,r2
 800699c:	8002f280 	call	8002f28 <__udivsi3>
 80069a0:	1007883a 	mov	r3,r2
 80069a4:	e0bfff17 	ldw	r2,-4(fp)
 80069a8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 80069ac:	10bfffc4 	addi	r2,r2,-1
 80069b0:	103ffe1e 	bne	r2,zero,80069ac <alt_busy_sleep+0x100>
 80069b4:	00000d06 	br	80069ec <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 80069b8:	e0fffd17 	ldw	r3,-12(fp)
 80069bc:	008003f4 	movhi	r2,15
 80069c0:	10909004 	addi	r2,r2,16960
 80069c4:	1885383a 	mul	r2,r3,r2
 80069c8:	0100bef4 	movhi	r4,763
 80069cc:	213c2004 	addi	r4,r4,-3968
 80069d0:	100b883a 	mov	r5,r2
 80069d4:	8002f280 	call	8002f28 <__udivsi3>
 80069d8:	1007883a 	mov	r3,r2
 80069dc:	e0bfff17 	ldw	r2,-4(fp)
 80069e0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 80069e4:	10bfffc4 	addi	r2,r2,-1
 80069e8:	00bffe16 	blt	zero,r2,80069e4 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 80069ec:	0005883a 	mov	r2,zero
}
 80069f0:	e037883a 	mov	sp,fp
 80069f4:	dfc00117 	ldw	ra,4(sp)
 80069f8:	df000017 	ldw	fp,0(sp)
 80069fc:	dec00204 	addi	sp,sp,8
 8006a00:	f800283a 	ret

08006a04 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8006a04:	defffa04 	addi	sp,sp,-24
 8006a08:	dfc00515 	stw	ra,20(sp)
 8006a0c:	df000415 	stw	fp,16(sp)
 8006a10:	df000404 	addi	fp,sp,16
 8006a14:	e13ffe15 	stw	r4,-8(fp)
 8006a18:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8006a1c:	e0bfff17 	ldw	r2,-4(fp)
 8006a20:	10800017 	ldw	r2,0(r2)
 8006a24:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8006a28:	e13ffe17 	ldw	r4,-8(fp)
 8006a2c:	8006e4c0 	call	8006e4c <strlen>
 8006a30:	10800044 	addi	r2,r2,1
 8006a34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8006a38:	00000d06 	br	8006a70 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8006a3c:	e0bffc17 	ldw	r2,-16(fp)
 8006a40:	10c00217 	ldw	r3,8(r2)
 8006a44:	e0bffd17 	ldw	r2,-12(fp)
 8006a48:	1809883a 	mov	r4,r3
 8006a4c:	e17ffe17 	ldw	r5,-8(fp)
 8006a50:	100d883a 	mov	r6,r2
 8006a54:	8006dd00 	call	8006dd0 <memcmp>
 8006a58:	1000021e 	bne	r2,zero,8006a64 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8006a5c:	e0bffc17 	ldw	r2,-16(fp)
 8006a60:	00000706 	br	8006a80 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8006a64:	e0bffc17 	ldw	r2,-16(fp)
 8006a68:	10800017 	ldw	r2,0(r2)
 8006a6c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8006a70:	e0fffc17 	ldw	r3,-16(fp)
 8006a74:	e0bfff17 	ldw	r2,-4(fp)
 8006a78:	18bff01e 	bne	r3,r2,8006a3c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8006a7c:	0005883a 	mov	r2,zero
}
 8006a80:	e037883a 	mov	sp,fp
 8006a84:	dfc00117 	ldw	ra,4(sp)
 8006a88:	df000017 	ldw	fp,0(sp)
 8006a8c:	dec00204 	addi	sp,sp,8
 8006a90:	f800283a 	ret

08006a94 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8006a94:	defffb04 	addi	sp,sp,-20
 8006a98:	dfc00415 	stw	ra,16(sp)
 8006a9c:	df000315 	stw	fp,12(sp)
 8006aa0:	df000304 	addi	fp,sp,12
 8006aa4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8006aa8:	00820074 	movhi	r2,2049
 8006aac:	10a42f04 	addi	r2,r2,-28484
 8006ab0:	10800017 	ldw	r2,0(r2)
 8006ab4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8006ab8:	00003106 	br	8006b80 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 8006abc:	e0bffd17 	ldw	r2,-12(fp)
 8006ac0:	10800217 	ldw	r2,8(r2)
 8006ac4:	1009883a 	mov	r4,r2
 8006ac8:	8006e4c0 	call	8006e4c <strlen>
 8006acc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8006ad0:	e0bffd17 	ldw	r2,-12(fp)
 8006ad4:	10c00217 	ldw	r3,8(r2)
 8006ad8:	e0bffe17 	ldw	r2,-8(fp)
 8006adc:	10bfffc4 	addi	r2,r2,-1
 8006ae0:	1885883a 	add	r2,r3,r2
 8006ae4:	10800003 	ldbu	r2,0(r2)
 8006ae8:	10803fcc 	andi	r2,r2,255
 8006aec:	1080201c 	xori	r2,r2,128
 8006af0:	10bfe004 	addi	r2,r2,-128
 8006af4:	10800bd8 	cmpnei	r2,r2,47
 8006af8:	1000031e 	bne	r2,zero,8006b08 <alt_find_file+0x74>
    {
      len -= 1;
 8006afc:	e0bffe17 	ldw	r2,-8(fp)
 8006b00:	10bfffc4 	addi	r2,r2,-1
 8006b04:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8006b08:	e0bffe17 	ldw	r2,-8(fp)
 8006b0c:	e0ffff17 	ldw	r3,-4(fp)
 8006b10:	1885883a 	add	r2,r3,r2
 8006b14:	10800003 	ldbu	r2,0(r2)
 8006b18:	10803fcc 	andi	r2,r2,255
 8006b1c:	1080201c 	xori	r2,r2,128
 8006b20:	10bfe004 	addi	r2,r2,-128
 8006b24:	10800be0 	cmpeqi	r2,r2,47
 8006b28:	1000081e 	bne	r2,zero,8006b4c <alt_find_file+0xb8>
 8006b2c:	e0bffe17 	ldw	r2,-8(fp)
 8006b30:	e0ffff17 	ldw	r3,-4(fp)
 8006b34:	1885883a 	add	r2,r3,r2
 8006b38:	10800003 	ldbu	r2,0(r2)
 8006b3c:	10803fcc 	andi	r2,r2,255
 8006b40:	1080201c 	xori	r2,r2,128
 8006b44:	10bfe004 	addi	r2,r2,-128
 8006b48:	10000a1e 	bne	r2,zero,8006b74 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 8006b4c:	e0bffd17 	ldw	r2,-12(fp)
 8006b50:	10c00217 	ldw	r3,8(r2)
 8006b54:	e0bffe17 	ldw	r2,-8(fp)
 8006b58:	1809883a 	mov	r4,r3
 8006b5c:	e17fff17 	ldw	r5,-4(fp)
 8006b60:	100d883a 	mov	r6,r2
 8006b64:	8006dd00 	call	8006dd0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8006b68:	1000021e 	bne	r2,zero,8006b74 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8006b6c:	e0bffd17 	ldw	r2,-12(fp)
 8006b70:	00000806 	br	8006b94 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 8006b74:	e0bffd17 	ldw	r2,-12(fp)
 8006b78:	10800017 	ldw	r2,0(r2)
 8006b7c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8006b80:	e0fffd17 	ldw	r3,-12(fp)
 8006b84:	00820074 	movhi	r2,2049
 8006b88:	10a42f04 	addi	r2,r2,-28484
 8006b8c:	18bfcb1e 	bne	r3,r2,8006abc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8006b90:	0005883a 	mov	r2,zero
}
 8006b94:	e037883a 	mov	sp,fp
 8006b98:	dfc00117 	ldw	ra,4(sp)
 8006b9c:	df000017 	ldw	fp,0(sp)
 8006ba0:	dec00204 	addi	sp,sp,8
 8006ba4:	f800283a 	ret

08006ba8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8006ba8:	defffc04 	addi	sp,sp,-16
 8006bac:	df000315 	stw	fp,12(sp)
 8006bb0:	df000304 	addi	fp,sp,12
 8006bb4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8006bb8:	00bffa04 	movi	r2,-24
 8006bbc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8006bc0:	e03ffd15 	stw	zero,-12(fp)
 8006bc4:	00001d06 	br	8006c3c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 8006bc8:	00820034 	movhi	r2,2048
 8006bcc:	109f3a04 	addi	r2,r2,31976
 8006bd0:	e0fffd17 	ldw	r3,-12(fp)
 8006bd4:	18c00324 	muli	r3,r3,12
 8006bd8:	10c5883a 	add	r2,r2,r3
 8006bdc:	10800017 	ldw	r2,0(r2)
 8006be0:	1000131e 	bne	r2,zero,8006c30 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 8006be4:	00820034 	movhi	r2,2048
 8006be8:	109f3a04 	addi	r2,r2,31976
 8006bec:	e0fffd17 	ldw	r3,-12(fp)
 8006bf0:	18c00324 	muli	r3,r3,12
 8006bf4:	10c5883a 	add	r2,r2,r3
 8006bf8:	e0ffff17 	ldw	r3,-4(fp)
 8006bfc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8006c00:	00820074 	movhi	r2,2049
 8006c04:	10a43304 	addi	r2,r2,-28468
 8006c08:	10c00017 	ldw	r3,0(r2)
 8006c0c:	e0bffd17 	ldw	r2,-12(fp)
 8006c10:	1880040e 	bge	r3,r2,8006c24 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 8006c14:	00820074 	movhi	r2,2049
 8006c18:	10a43304 	addi	r2,r2,-28468
 8006c1c:	e0fffd17 	ldw	r3,-12(fp)
 8006c20:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 8006c24:	e0bffd17 	ldw	r2,-12(fp)
 8006c28:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8006c2c:	00000606 	br	8006c48 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8006c30:	e0bffd17 	ldw	r2,-12(fp)
 8006c34:	10800044 	addi	r2,r2,1
 8006c38:	e0bffd15 	stw	r2,-12(fp)
 8006c3c:	e0bffd17 	ldw	r2,-12(fp)
 8006c40:	10800810 	cmplti	r2,r2,32
 8006c44:	103fe01e 	bne	r2,zero,8006bc8 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8006c48:	e0bffe17 	ldw	r2,-8(fp)
}
 8006c4c:	e037883a 	mov	sp,fp
 8006c50:	df000017 	ldw	fp,0(sp)
 8006c54:	dec00104 	addi	sp,sp,4
 8006c58:	f800283a 	ret

08006c5c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8006c5c:	defffb04 	addi	sp,sp,-20
 8006c60:	df000415 	stw	fp,16(sp)
 8006c64:	df000404 	addi	fp,sp,16
 8006c68:	e13ffe15 	stw	r4,-8(fp)
 8006c6c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 8006c70:	e0bfff17 	ldw	r2,-4(fp)
 8006c74:	10840070 	cmpltui	r2,r2,4097
 8006c78:	1000021e 	bne	r2,zero,8006c84 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8006c7c:	00840004 	movi	r2,4096
 8006c80:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8006c84:	e0fffe17 	ldw	r3,-8(fp)
 8006c88:	e0bfff17 	ldw	r2,-4(fp)
 8006c8c:	1885883a 	add	r2,r3,r2
 8006c90:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8006c94:	e0bffe17 	ldw	r2,-8(fp)
 8006c98:	e0bffc15 	stw	r2,-16(fp)
 8006c9c:	00000506 	br	8006cb4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8006ca0:	e0bffc17 	ldw	r2,-16(fp)
 8006ca4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8006ca8:	e0bffc17 	ldw	r2,-16(fp)
 8006cac:	10800804 	addi	r2,r2,32
 8006cb0:	e0bffc15 	stw	r2,-16(fp)
 8006cb4:	e0fffc17 	ldw	r3,-16(fp)
 8006cb8:	e0bffd17 	ldw	r2,-12(fp)
 8006cbc:	18bff836 	bltu	r3,r2,8006ca0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8006cc0:	e0bffe17 	ldw	r2,-8(fp)
 8006cc4:	108007cc 	andi	r2,r2,31
 8006cc8:	10000226 	beq	r2,zero,8006cd4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8006ccc:	e0bffc17 	ldw	r2,-16(fp)
 8006cd0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8006cd4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8006cd8:	e037883a 	mov	sp,fp
 8006cdc:	df000017 	ldw	fp,0(sp)
 8006ce0:	dec00104 	addi	sp,sp,4
 8006ce4:	f800283a 	ret

08006ce8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8006ce8:	defffe04 	addi	sp,sp,-8
 8006cec:	df000115 	stw	fp,4(sp)
 8006cf0:	df000104 	addi	fp,sp,4
 8006cf4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8006cf8:	e0bfff17 	ldw	r2,-4(fp)
 8006cfc:	10bffe84 	addi	r2,r2,-6
 8006d00:	10c00428 	cmpgeui	r3,r2,16
 8006d04:	18001a1e 	bne	r3,zero,8006d70 <alt_exception_cause_generated_bad_addr+0x88>
 8006d08:	100690ba 	slli	r3,r2,2
 8006d0c:	00820034 	movhi	r2,2048
 8006d10:	109b4804 	addi	r2,r2,27936
 8006d14:	1885883a 	add	r2,r3,r2
 8006d18:	10800017 	ldw	r2,0(r2)
 8006d1c:	1000683a 	jmp	r2
 8006d20:	08006d60 	cmpeqi	zero,at,437
 8006d24:	08006d60 	cmpeqi	zero,at,437
 8006d28:	08006d70 	cmpltui	zero,at,437
 8006d2c:	08006d70 	cmpltui	zero,at,437
 8006d30:	08006d70 	cmpltui	zero,at,437
 8006d34:	08006d60 	cmpeqi	zero,at,437
 8006d38:	08006d68 	cmpgeui	zero,at,437
 8006d3c:	08006d70 	cmpltui	zero,at,437
 8006d40:	08006d60 	cmpeqi	zero,at,437
 8006d44:	08006d60 	cmpeqi	zero,at,437
 8006d48:	08006d70 	cmpltui	zero,at,437
 8006d4c:	08006d60 	cmpeqi	zero,at,437
 8006d50:	08006d68 	cmpgeui	zero,at,437
 8006d54:	08006d70 	cmpltui	zero,at,437
 8006d58:	08006d70 	cmpltui	zero,at,437
 8006d5c:	08006d60 	cmpeqi	zero,at,437
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8006d60:	00800044 	movi	r2,1
 8006d64:	00000306 	br	8006d74 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8006d68:	0005883a 	mov	r2,zero
 8006d6c:	00000106 	br	8006d74 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8006d70:	0005883a 	mov	r2,zero
  }
}
 8006d74:	e037883a 	mov	sp,fp
 8006d78:	df000017 	ldw	fp,0(sp)
 8006d7c:	dec00104 	addi	sp,sp,4
 8006d80:	f800283a 	ret

08006d84 <atexit>:
 8006d84:	200b883a 	mov	r5,r4
 8006d88:	000d883a 	mov	r6,zero
 8006d8c:	0009883a 	mov	r4,zero
 8006d90:	000f883a 	mov	r7,zero
 8006d94:	8006ee41 	jmpi	8006ee4 <__register_exitproc>

08006d98 <exit>:
 8006d98:	defffe04 	addi	sp,sp,-8
 8006d9c:	000b883a 	mov	r5,zero
 8006da0:	dc000015 	stw	r16,0(sp)
 8006da4:	dfc00115 	stw	ra,4(sp)
 8006da8:	2021883a 	mov	r16,r4
 8006dac:	8006ff80 	call	8006ff8 <__call_exitprocs>
 8006db0:	00820074 	movhi	r2,2049
 8006db4:	10a42b04 	addi	r2,r2,-28500
 8006db8:	11000017 	ldw	r4,0(r2)
 8006dbc:	20800f17 	ldw	r2,60(r4)
 8006dc0:	10000126 	beq	r2,zero,8006dc8 <exit+0x30>
 8006dc4:	103ee83a 	callr	r2
 8006dc8:	8009883a 	mov	r4,r16
 8006dcc:	800718c0 	call	800718c <_exit>

08006dd0 <memcmp>:
 8006dd0:	01c000c4 	movi	r7,3
 8006dd4:	3980192e 	bgeu	r7,r6,8006e3c <memcmp+0x6c>
 8006dd8:	2144b03a 	or	r2,r4,r5
 8006ddc:	11c4703a 	and	r2,r2,r7
 8006de0:	10000f26 	beq	r2,zero,8006e20 <memcmp+0x50>
 8006de4:	20800003 	ldbu	r2,0(r4)
 8006de8:	28c00003 	ldbu	r3,0(r5)
 8006dec:	10c0151e 	bne	r2,r3,8006e44 <memcmp+0x74>
 8006df0:	31bfff84 	addi	r6,r6,-2
 8006df4:	01ffffc4 	movi	r7,-1
 8006df8:	00000406 	br	8006e0c <memcmp+0x3c>
 8006dfc:	20800003 	ldbu	r2,0(r4)
 8006e00:	28c00003 	ldbu	r3,0(r5)
 8006e04:	31bfffc4 	addi	r6,r6,-1
 8006e08:	10c00e1e 	bne	r2,r3,8006e44 <memcmp+0x74>
 8006e0c:	21000044 	addi	r4,r4,1
 8006e10:	29400044 	addi	r5,r5,1
 8006e14:	31fff91e 	bne	r6,r7,8006dfc <memcmp+0x2c>
 8006e18:	0005883a 	mov	r2,zero
 8006e1c:	f800283a 	ret
 8006e20:	20c00017 	ldw	r3,0(r4)
 8006e24:	28800017 	ldw	r2,0(r5)
 8006e28:	1880041e 	bne	r3,r2,8006e3c <memcmp+0x6c>
 8006e2c:	31bfff04 	addi	r6,r6,-4
 8006e30:	21000104 	addi	r4,r4,4
 8006e34:	29400104 	addi	r5,r5,4
 8006e38:	39bff936 	bltu	r7,r6,8006e20 <memcmp+0x50>
 8006e3c:	303fe91e 	bne	r6,zero,8006de4 <memcmp+0x14>
 8006e40:	003ff506 	br	8006e18 <memcmp+0x48>
 8006e44:	10c5c83a 	sub	r2,r2,r3
 8006e48:	f800283a 	ret

08006e4c <strlen>:
 8006e4c:	208000cc 	andi	r2,r4,3
 8006e50:	10002026 	beq	r2,zero,8006ed4 <strlen+0x88>
 8006e54:	20800007 	ldb	r2,0(r4)
 8006e58:	10002026 	beq	r2,zero,8006edc <strlen+0x90>
 8006e5c:	2005883a 	mov	r2,r4
 8006e60:	00000206 	br	8006e6c <strlen+0x20>
 8006e64:	10c00007 	ldb	r3,0(r2)
 8006e68:	18001826 	beq	r3,zero,8006ecc <strlen+0x80>
 8006e6c:	10800044 	addi	r2,r2,1
 8006e70:	10c000cc 	andi	r3,r2,3
 8006e74:	183ffb1e 	bne	r3,zero,8006e64 <strlen+0x18>
 8006e78:	10c00017 	ldw	r3,0(r2)
 8006e7c:	01ffbff4 	movhi	r7,65279
 8006e80:	39ffbfc4 	addi	r7,r7,-257
 8006e84:	00ca303a 	nor	r5,zero,r3
 8006e88:	01a02074 	movhi	r6,32897
 8006e8c:	19c7883a 	add	r3,r3,r7
 8006e90:	31a02004 	addi	r6,r6,-32640
 8006e94:	1946703a 	and	r3,r3,r5
 8006e98:	1986703a 	and	r3,r3,r6
 8006e9c:	1800091e 	bne	r3,zero,8006ec4 <strlen+0x78>
 8006ea0:	10800104 	addi	r2,r2,4
 8006ea4:	10c00017 	ldw	r3,0(r2)
 8006ea8:	19cb883a 	add	r5,r3,r7
 8006eac:	00c6303a 	nor	r3,zero,r3
 8006eb0:	28c6703a 	and	r3,r5,r3
 8006eb4:	1986703a 	and	r3,r3,r6
 8006eb8:	183ff926 	beq	r3,zero,8006ea0 <strlen+0x54>
 8006ebc:	00000106 	br	8006ec4 <strlen+0x78>
 8006ec0:	10800044 	addi	r2,r2,1
 8006ec4:	10c00007 	ldb	r3,0(r2)
 8006ec8:	183ffd1e 	bne	r3,zero,8006ec0 <strlen+0x74>
 8006ecc:	1105c83a 	sub	r2,r2,r4
 8006ed0:	f800283a 	ret
 8006ed4:	2005883a 	mov	r2,r4
 8006ed8:	003fe706 	br	8006e78 <strlen+0x2c>
 8006edc:	0005883a 	mov	r2,zero
 8006ee0:	f800283a 	ret

08006ee4 <__register_exitproc>:
 8006ee4:	00820074 	movhi	r2,2049
 8006ee8:	defffa04 	addi	sp,sp,-24
 8006eec:	10a42b04 	addi	r2,r2,-28500
 8006ef0:	dc000315 	stw	r16,12(sp)
 8006ef4:	14000017 	ldw	r16,0(r2)
 8006ef8:	dc400415 	stw	r17,16(sp)
 8006efc:	dfc00515 	stw	ra,20(sp)
 8006f00:	80805217 	ldw	r2,328(r16)
 8006f04:	2023883a 	mov	r17,r4
 8006f08:	10003626 	beq	r2,zero,8006fe4 <__register_exitproc+0x100>
 8006f0c:	10c00117 	ldw	r3,4(r2)
 8006f10:	010007c4 	movi	r4,31
 8006f14:	20c00e16 	blt	r4,r3,8006f50 <__register_exitproc+0x6c>
 8006f18:	1a400044 	addi	r9,r3,1
 8006f1c:	8800211e 	bne	r17,zero,8006fa4 <__register_exitproc+0xc0>
 8006f20:	18c00084 	addi	r3,r3,2
 8006f24:	18c7883a 	add	r3,r3,r3
 8006f28:	18c7883a 	add	r3,r3,r3
 8006f2c:	12400115 	stw	r9,4(r2)
 8006f30:	10c7883a 	add	r3,r2,r3
 8006f34:	19400015 	stw	r5,0(r3)
 8006f38:	0005883a 	mov	r2,zero
 8006f3c:	dfc00517 	ldw	ra,20(sp)
 8006f40:	dc400417 	ldw	r17,16(sp)
 8006f44:	dc000317 	ldw	r16,12(sp)
 8006f48:	dec00604 	addi	sp,sp,24
 8006f4c:	f800283a 	ret
 8006f50:	00800034 	movhi	r2,0
 8006f54:	10800004 	addi	r2,r2,0
 8006f58:	10002526 	beq	r2,zero,8006ff0 <__register_exitproc+0x10c>
 8006f5c:	01006404 	movi	r4,400
 8006f60:	d9400015 	stw	r5,0(sp)
 8006f64:	d9800115 	stw	r6,4(sp)
 8006f68:	d9c00215 	stw	r7,8(sp)
 8006f6c:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 8006f70:	d9400017 	ldw	r5,0(sp)
 8006f74:	d9800117 	ldw	r6,4(sp)
 8006f78:	d9c00217 	ldw	r7,8(sp)
 8006f7c:	10001c26 	beq	r2,zero,8006ff0 <__register_exitproc+0x10c>
 8006f80:	80c05217 	ldw	r3,328(r16)
 8006f84:	10000115 	stw	zero,4(r2)
 8006f88:	02400044 	movi	r9,1
 8006f8c:	10c00015 	stw	r3,0(r2)
 8006f90:	80805215 	stw	r2,328(r16)
 8006f94:	10006215 	stw	zero,392(r2)
 8006f98:	10006315 	stw	zero,396(r2)
 8006f9c:	0007883a 	mov	r3,zero
 8006fa0:	883fdf26 	beq	r17,zero,8006f20 <__register_exitproc+0x3c>
 8006fa4:	18d1883a 	add	r8,r3,r3
 8006fa8:	4211883a 	add	r8,r8,r8
 8006fac:	1211883a 	add	r8,r2,r8
 8006fb0:	41802215 	stw	r6,136(r8)
 8006fb4:	01000044 	movi	r4,1
 8006fb8:	11806217 	ldw	r6,392(r2)
 8006fbc:	20c8983a 	sll	r4,r4,r3
 8006fc0:	310cb03a 	or	r6,r6,r4
 8006fc4:	11806215 	stw	r6,392(r2)
 8006fc8:	41c04215 	stw	r7,264(r8)
 8006fcc:	01800084 	movi	r6,2
 8006fd0:	89bfd31e 	bne	r17,r6,8006f20 <__register_exitproc+0x3c>
 8006fd4:	11806317 	ldw	r6,396(r2)
 8006fd8:	3108b03a 	or	r4,r6,r4
 8006fdc:	11006315 	stw	r4,396(r2)
 8006fe0:	003fcf06 	br	8006f20 <__register_exitproc+0x3c>
 8006fe4:	80805304 	addi	r2,r16,332
 8006fe8:	80805215 	stw	r2,328(r16)
 8006fec:	003fc706 	br	8006f0c <__register_exitproc+0x28>
 8006ff0:	00bfffc4 	movi	r2,-1
 8006ff4:	003fd106 	br	8006f3c <__register_exitproc+0x58>

08006ff8 <__call_exitprocs>:
 8006ff8:	00820074 	movhi	r2,2049
 8006ffc:	10a42b04 	addi	r2,r2,-28500
 8007000:	10800017 	ldw	r2,0(r2)
 8007004:	defff404 	addi	sp,sp,-48
 8007008:	dd800815 	stw	r22,32(sp)
 800700c:	d8800015 	stw	r2,0(sp)
 8007010:	10805204 	addi	r2,r2,328
 8007014:	dd000615 	stw	r20,24(sp)
 8007018:	dc800415 	stw	r18,16(sp)
 800701c:	dfc00b15 	stw	ra,44(sp)
 8007020:	df000a15 	stw	fp,40(sp)
 8007024:	ddc00915 	stw	r23,36(sp)
 8007028:	dd400715 	stw	r21,28(sp)
 800702c:	dcc00515 	stw	r19,20(sp)
 8007030:	dc400315 	stw	r17,12(sp)
 8007034:	dc000215 	stw	r16,8(sp)
 8007038:	2025883a 	mov	r18,r4
 800703c:	2829883a 	mov	r20,r5
 8007040:	d8800115 	stw	r2,4(sp)
 8007044:	05bfffc4 	movi	r22,-1
 8007048:	d8800017 	ldw	r2,0(sp)
 800704c:	14c05217 	ldw	r19,328(r2)
 8007050:	98001d26 	beq	r19,zero,80070c8 <__call_exitprocs+0xd0>
 8007054:	dd400117 	ldw	r21,4(sp)
 8007058:	98800117 	ldw	r2,4(r19)
 800705c:	173fffc4 	addi	fp,r2,-1
 8007060:	e0000d16 	blt	fp,zero,8007098 <__call_exitprocs+0xa0>
 8007064:	14000044 	addi	r16,r2,1
 8007068:	8421883a 	add	r16,r16,r16
 800706c:	8421883a 	add	r16,r16,r16
 8007070:	84402004 	addi	r17,r16,128
 8007074:	9c63883a 	add	r17,r19,r17
 8007078:	9c21883a 	add	r16,r19,r16
 800707c:	a0001e26 	beq	r20,zero,80070f8 <__call_exitprocs+0x100>
 8007080:	80804017 	ldw	r2,256(r16)
 8007084:	15001c26 	beq	r2,r20,80070f8 <__call_exitprocs+0x100>
 8007088:	e73fffc4 	addi	fp,fp,-1
 800708c:	843fff04 	addi	r16,r16,-4
 8007090:	8c7fff04 	addi	r17,r17,-4
 8007094:	e5bff91e 	bne	fp,r22,800707c <__call_exitprocs+0x84>
 8007098:	00800034 	movhi	r2,0
 800709c:	10800004 	addi	r2,r2,0
 80070a0:	10000926 	beq	r2,zero,80070c8 <__call_exitprocs+0xd0>
 80070a4:	98800117 	ldw	r2,4(r19)
 80070a8:	1000311e 	bne	r2,zero,8007170 <__call_exitprocs+0x178>
 80070ac:	98800017 	ldw	r2,0(r19)
 80070b0:	10003426 	beq	r2,zero,8007184 <__call_exitprocs+0x18c>
 80070b4:	9809883a 	mov	r4,r19
 80070b8:	a8800015 	stw	r2,0(r21)
 80070bc:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 80070c0:	acc00017 	ldw	r19,0(r21)
 80070c4:	983fe41e 	bne	r19,zero,8007058 <__call_exitprocs+0x60>
 80070c8:	dfc00b17 	ldw	ra,44(sp)
 80070cc:	df000a17 	ldw	fp,40(sp)
 80070d0:	ddc00917 	ldw	r23,36(sp)
 80070d4:	dd800817 	ldw	r22,32(sp)
 80070d8:	dd400717 	ldw	r21,28(sp)
 80070dc:	dd000617 	ldw	r20,24(sp)
 80070e0:	dcc00517 	ldw	r19,20(sp)
 80070e4:	dc800417 	ldw	r18,16(sp)
 80070e8:	dc400317 	ldw	r17,12(sp)
 80070ec:	dc000217 	ldw	r16,8(sp)
 80070f0:	dec00c04 	addi	sp,sp,48
 80070f4:	f800283a 	ret
 80070f8:	98800117 	ldw	r2,4(r19)
 80070fc:	80c00017 	ldw	r3,0(r16)
 8007100:	10bfffc4 	addi	r2,r2,-1
 8007104:	17001526 	beq	r2,fp,800715c <__call_exitprocs+0x164>
 8007108:	80000015 	stw	zero,0(r16)
 800710c:	183fde26 	beq	r3,zero,8007088 <__call_exitprocs+0x90>
 8007110:	00800044 	movi	r2,1
 8007114:	1708983a 	sll	r4,r2,fp
 8007118:	98806217 	ldw	r2,392(r19)
 800711c:	9dc00117 	ldw	r23,4(r19)
 8007120:	2084703a 	and	r2,r4,r2
 8007124:	1000061e 	bne	r2,zero,8007140 <__call_exitprocs+0x148>
 8007128:	183ee83a 	callr	r3
 800712c:	98800117 	ldw	r2,4(r19)
 8007130:	15ffc51e 	bne	r2,r23,8007048 <__call_exitprocs+0x50>
 8007134:	a8800017 	ldw	r2,0(r21)
 8007138:	14ffd326 	beq	r2,r19,8007088 <__call_exitprocs+0x90>
 800713c:	003fc206 	br	8007048 <__call_exitprocs+0x50>
 8007140:	98806317 	ldw	r2,396(r19)
 8007144:	2084703a 	and	r2,r4,r2
 8007148:	1000061e 	bne	r2,zero,8007164 <__call_exitprocs+0x16c>
 800714c:	89400017 	ldw	r5,0(r17)
 8007150:	9009883a 	mov	r4,r18
 8007154:	183ee83a 	callr	r3
 8007158:	003ff406 	br	800712c <__call_exitprocs+0x134>
 800715c:	9f000115 	stw	fp,4(r19)
 8007160:	003fea06 	br	800710c <__call_exitprocs+0x114>
 8007164:	89000017 	ldw	r4,0(r17)
 8007168:	183ee83a 	callr	r3
 800716c:	003fef06 	br	800712c <__call_exitprocs+0x134>
 8007170:	98800017 	ldw	r2,0(r19)
 8007174:	982b883a 	mov	r21,r19
 8007178:	1027883a 	mov	r19,r2
 800717c:	983fb61e 	bne	r19,zero,8007058 <__call_exitprocs+0x60>
 8007180:	003fd106 	br	80070c8 <__call_exitprocs+0xd0>
 8007184:	0005883a 	mov	r2,zero
 8007188:	003ffa06 	br	8007174 <__call_exitprocs+0x17c>

0800718c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 800718c:	defffd04 	addi	sp,sp,-12
 8007190:	df000215 	stw	fp,8(sp)
 8007194:	df000204 	addi	fp,sp,8
 8007198:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 800719c:	0001883a 	nop
 80071a0:	e0bfff17 	ldw	r2,-4(fp)
 80071a4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 80071a8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 80071ac:	10000226 	beq	r2,zero,80071b8 <_exit+0x2c>
    ALT_SIM_FAIL();
 80071b0:	002af070 	cmpltui	zero,zero,43969
 80071b4:	00000106 	br	80071bc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 80071b8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80071bc:	003fff06 	br	80071bc <_exit+0x30>
